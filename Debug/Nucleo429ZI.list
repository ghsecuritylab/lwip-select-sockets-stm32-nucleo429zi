
Nucleo429ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001736c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e28  0801751c  0801751c  0002751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a344  0801a344  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801a344  0801a344  0002a344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a34c  0801a34c  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a34c  0801a34c  0002a34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a350  0801a350  0002a350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801a354  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dbf8  20000080  0801a3d4  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000dc78  0801a3d4  0003dc78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003cb38  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000075d5  00000000  00000000  0006cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bc0  00000000  00000000  000741c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019d0  00000000  00000000  00075d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033625  00000000  00000000  00077750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000298a1  00000000  00000000  000aad75  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f3415  00000000  00000000  000d4616  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c7a2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007440  00000000  00000000  001c7aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  001ceee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  001cef84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017504 	.word	0x08017504

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08017504 	.word	0x08017504

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	2000009c 	.word	0x2000009c
 80005d0:	200000f0 	.word	0x200000f0

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fe9b 	bl	8001314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f81d 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f8b5 	bl	8000750 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e6:	f000 f889 	bl	80006fc <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <main+0x40>)
 80005ec:	1d3c      	adds	r4, r7, #4
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f004 fb94 	bl	8004d2e <osThreadCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <main+0x44>)
 800060a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f004 fb78 	bl	8004d00 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x3c>
 8000612:	bf00      	nop
 8000614:	08017528 	.word	0x08017528
 8000618:	2000429c 	.word	0x2000429c

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f016 f840 	bl	80166b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <SystemClock_Config+0xd8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a2a      	ldr	r2, [pc, #168]	; (80006f4 <SystemClock_Config+0xd8>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xd8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xdc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a24      	ldr	r2, [pc, #144]	; (80006f8 <SystemClock_Config+0xdc>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xdc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000690:	23b4      	movs	r3, #180	; 0xb4
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fbb9 	bl	8002e18 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 f8d6 	bl	800085c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b0:	f002 fb62 	bl	8002d78 <HAL_PWREx_EnableOverDrive>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ba:	f000 f8cf 	bl	800085c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2105      	movs	r1, #5
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fddd 	bl	800329c <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006e8:	f000 f8b8 	bl	800085c <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3750      	adds	r7, #80	; 0x50
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART3_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000734:	f002 ffa0 	bl	8003678 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f88d 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200042a0 	.word	0x200042a0
 800074c:	40004800 	.word	0x40004800

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	4b35      	ldr	r3, [pc, #212]	; (8000840 <MX_GPIO_Init+0xf0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a34      	ldr	r2, [pc, #208]	; (8000840 <MX_GPIO_Init+0xf0>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b32      	ldr	r3, [pc, #200]	; (8000840 <MX_GPIO_Init+0xf0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <MX_GPIO_Init+0xf0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2d      	ldr	r2, [pc, #180]	; (8000840 <MX_GPIO_Init+0xf0>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b2b      	ldr	r3, [pc, #172]	; (8000840 <MX_GPIO_Init+0xf0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_GPIO_Init+0xf0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a26      	ldr	r2, [pc, #152]	; (8000840 <MX_GPIO_Init+0xf0>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_GPIO_Init+0xf0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_GPIO_Init+0xf0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a1f      	ldr	r2, [pc, #124]	; (8000840 <MX_GPIO_Init+0xf0>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_GPIO_Init+0xf0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_GPIO_Init+0xf0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a18      	ldr	r2, [pc, #96]	; (8000840 <MX_GPIO_Init+0xf0>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_GPIO_Init+0xf0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_GPIO_Init+0xf0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a11      	ldr	r2, [pc, #68]	; (8000840 <MX_GPIO_Init+0xf0>)
 80007fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_GPIO_Init+0xf0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f244 0181 	movw	r1, #16513	; 0x4081
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <MX_GPIO_Init+0xf4>)
 8000816:	f002 fa95 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 800081a:	f244 0381 	movw	r3, #16513	; 0x4081
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_GPIO_Init+0xf4>)
 8000834:	f002 f8dc 	bl	80029f0 <HAL_GPIO_Init>

}
 8000838:	bf00      	nop
 800083a:	3730      	adds	r7, #48	; 0x30
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40020400 	.word	0x40020400

08000848 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
    
    
                 
  /* init code for LWIP */
  MX_LWIP_Init();
 8000850:	f003 fc88 	bl	8004164 <MX_LWIP_Init>

  /* Infinite loop */
  for(;;)
  {
	  //mprintf("TEST\r\n");
      osDelay(1);
 8000854:	2001      	movs	r0, #1
 8000856:	f004 fab6 	bl	8004dc6 <osDelay>
 800085a:	e7fb      	b.n	8000854 <StartDefaultTask+0xc>

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <printchar>:
#include "mprintf.h"

extern int __io_putchar(int ch);

static void printchar(char **str, int c)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	6039      	str	r1, [r7, #0]
	if (str) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d00a      	beq.n	8000890 <printchar+0x26>
		**str = (char)c;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	683a      	ldr	r2, [r7, #0]
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		__io_putchar(c);
	}
}
 800088e:	e002      	b.n	8000896 <printchar+0x2c>
		__io_putchar(c);
 8000890:	6838      	ldr	r0, [r7, #0]
 8000892:	f000 fcd7 	bl	8001244 <__io_putchar>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 800089e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 80008ae:	2400      	movs	r4, #0
 80008b0:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	dd17      	ble.n	80008ea <prints+0x4c>
		register int len = 0;
 80008ba:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 80008bc:	68be      	ldr	r6, [r7, #8]
 80008be:	e001      	b.n	80008c4 <prints+0x26>
 80008c0:	3501      	adds	r5, #1
 80008c2:	3601      	adds	r6, #1
 80008c4:	7833      	ldrb	r3, [r6, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1fa      	bne.n	80008c0 <prints+0x22>
		if (len >= width) width = 0;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	429d      	cmp	r5, r3
 80008ce:	db02      	blt.n	80008d6 <prints+0x38>
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	e002      	b.n	80008dc <prints+0x3e>
		else width -= len;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	1b5b      	subs	r3, r3, r5
 80008da:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <prints+0x4c>
 80008e6:	f04f 0830 	mov.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d116      	bne.n	8000922 <prints+0x84>
		for ( ; width > 0; --width) {
 80008f4:	e007      	b.n	8000906 <prints+0x68>
			printchar (out, padchar);
 80008f6:	4641      	mov	r1, r8
 80008f8:	68f8      	ldr	r0, [r7, #12]
 80008fa:	f7ff ffb6 	bl	800086a <printchar>
			++pc;
 80008fe:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b00      	cmp	r3, #0
 800090a:	dcf4      	bgt.n	80008f6 <prints+0x58>
		}
	}
	for ( ; *string ; ++string) {
 800090c:	e009      	b.n	8000922 <prints+0x84>
		printchar (out, *string);
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4619      	mov	r1, r3
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	f7ff ffa8 	bl	800086a <printchar>
		++pc;
 800091a:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	3301      	adds	r3, #1
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1f1      	bne.n	800090e <prints+0x70>
	}
	for ( ; width > 0; --width) {
 800092a:	e007      	b.n	800093c <prints+0x9e>
		printchar (out, padchar);
 800092c:	4641      	mov	r1, r8
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f7ff ff9b 	bl	800086a <printchar>
		++pc;
 8000934:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3b01      	subs	r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	dcf4      	bgt.n	800092c <prints+0x8e>
	}

	return pc;
 8000942:	4623      	mov	r3, r4
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800094e <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 800094e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
 800095c:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 800095e:	f04f 0900 	mov.w	r9, #0
 8000962:	2600      	movs	r6, #0
	register unsigned int u = (unsigned int)i;
 8000964:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d10c      	bne.n	8000986 <printi+0x38>
		print_buf[0] = '0';
 800096c:	2330      	movs	r3, #48	; 0x30
 800096e:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8000970:	2300      	movs	r3, #0
 8000972:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 8000974:	f107 0114 	add.w	r1, r7, #20
 8000978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800097a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	f7ff ff8e 	bl	800089e <prints>
 8000982:	4603      	mov	r3, r0
 8000984:	e04a      	b.n	8000a1c <printi+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d00a      	beq.n	80009a2 <printi+0x54>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b0a      	cmp	r3, #10
 8000990:	d107      	bne.n	80009a2 <printi+0x54>
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	2b00      	cmp	r3, #0
 8000996:	da04      	bge.n	80009a2 <printi+0x54>
		neg = 1;
 8000998:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	425b      	negs	r3, r3
 80009a0:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 80009a2:	f107 0414 	add.w	r4, r7, #20
 80009a6:	340b      	adds	r4, #11
	*s = '\0';
 80009a8:	2300      	movs	r3, #0
 80009aa:	7023      	strb	r3, [r4, #0]

	while (u) {
 80009ac:	e015      	b.n	80009da <printi+0x8c>
		t = (unsigned int)u % b;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	fbb5 f2f3 	udiv	r2, r5, r3
 80009b4:	fb03 f302 	mul.w	r3, r3, r2
 80009b8:	1aeb      	subs	r3, r5, r3
 80009ba:	4698      	mov	r8, r3
		if( t >= 10 )
 80009bc:	f1b8 0f09 	cmp.w	r8, #9
 80009c0:	dd02      	ble.n	80009c8 <printi+0x7a>
			t += letbase - '0' - 10;
 80009c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009c4:	3b3a      	subs	r3, #58	; 0x3a
 80009c6:	4498      	add	r8, r3
		*--s = (char)(t + '0');
 80009c8:	fa5f f388 	uxtb.w	r3, r8
 80009cc:	3c01      	subs	r4, #1
 80009ce:	3330      	adds	r3, #48	; 0x30
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	7023      	strb	r3, [r4, #0]
		u /= b;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d1e7      	bne.n	80009ae <printi+0x60>
	}

	if (neg) {
 80009de:	f1b9 0f00 	cmp.w	r9, #0
 80009e2:	d013      	beq.n	8000a0c <printi+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 80009e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00d      	beq.n	8000a06 <printi+0xb8>
 80009ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009ec:	f003 0302 	and.w	r3, r3, #2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d008      	beq.n	8000a06 <printi+0xb8>
			printchar (out, '-');
 80009f4:	212d      	movs	r1, #45	; 0x2d
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f7ff ff37 	bl	800086a <printchar>
			++pc;
 80009fc:	3601      	adds	r6, #1
			--width;
 80009fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a00:	3b01      	subs	r3, #1
 8000a02:	643b      	str	r3, [r7, #64]	; 0x40
 8000a04:	e002      	b.n	8000a0c <printi+0xbe>
		}
		else {
			*--s = '-';
 8000a06:	3c01      	subs	r4, #1
 8000a08:	232d      	movs	r3, #45	; 0x2d
 8000a0a:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8000a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a10:	4621      	mov	r1, r4
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff ff43 	bl	800089e <prints>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4433      	add	r3, r6
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3724      	adds	r7, #36	; 0x24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000a28 <print>:

static int print( char **out, const char *format, va_list args )
{
 8000a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a2c:	b08a      	sub	sp, #40	; 0x28
 8000a2e:	af04      	add	r7, sp, #16
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000a36:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000a38:	e0c4      	b.n	8000bc4 <print+0x19c>
		if (*format == '%') {
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b25      	cmp	r3, #37	; 0x25
 8000a40:	f040 80b3 	bne.w	8000baa <print+0x182>
			++format;
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	3301      	adds	r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000a4a:	2600      	movs	r6, #0
 8000a4c:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 80bc 	beq.w	8000bd0 <print+0x1a8>
			if (*format == '%') goto out;
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b25      	cmp	r3, #37	; 0x25
 8000a5e:	f000 80a6 	beq.w	8000bae <print+0x186>
			if (*format == '-') {
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b2d      	cmp	r3, #45	; 0x2d
 8000a68:	d109      	bne.n	8000a7e <print+0x56>
				++format;
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000a70:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000a72:	e004      	b.n	8000a7e <print+0x56>
				++format;
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	3301      	adds	r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000a7a:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b30      	cmp	r3, #48	; 0x30
 8000a84:	d0f6      	beq.n	8000a74 <print+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000a86:	e00b      	b.n	8000aa0 <print+0x78>
				width *= 10;
 8000a88:	462b      	mov	r3, r5
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	442b      	add	r3, r5
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	461d      	mov	r5, r3
				width += *format - '0';
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	3b30      	subs	r3, #48	; 0x30
 8000a98:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b2f      	cmp	r3, #47	; 0x2f
 8000aa6:	d903      	bls.n	8000ab0 <print+0x88>
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b39      	cmp	r3, #57	; 0x39
 8000aae:	d9eb      	bls.n	8000a88 <print+0x60>
			}
			if( *format == 's' ) {
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b73      	cmp	r3, #115	; 0x73
 8000ab6:	d112      	bne.n	8000ade <print+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	1d1a      	adds	r2, r3, #4
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 8000ac2:	f1b8 0f00 	cmp.w	r8, #0
 8000ac6:	d001      	beq.n	8000acc <print+0xa4>
 8000ac8:	4641      	mov	r1, r8
 8000aca:	e000      	b.n	8000ace <print+0xa6>
 8000acc:	4947      	ldr	r1, [pc, #284]	; (8000bec <print+0x1c4>)
 8000ace:	4633      	mov	r3, r6
 8000ad0:	462a      	mov	r2, r5
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f7ff fee3 	bl	800089e <prints>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	441c      	add	r4, r3
				continue;
 8000adc:	e06f      	b.n	8000bbe <print+0x196>
			}
			if( *format == 'd' ) {
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b64      	cmp	r3, #100	; 0x64
 8000ae4:	d10f      	bne.n	8000b06 <print+0xde>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	1d1a      	adds	r2, r3, #4
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	6819      	ldr	r1, [r3, #0]
 8000aee:	2361      	movs	r3, #97	; 0x61
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	9601      	str	r6, [sp, #4]
 8000af4:	9500      	str	r5, [sp, #0]
 8000af6:	2301      	movs	r3, #1
 8000af8:	220a      	movs	r2, #10
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff ff27 	bl	800094e <printi>
 8000b00:	4603      	mov	r3, r0
 8000b02:	441c      	add	r4, r3
				continue;
 8000b04:	e05b      	b.n	8000bbe <print+0x196>
			}
			if( *format == 'x' ) {
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b78      	cmp	r3, #120	; 0x78
 8000b0c:	d10f      	bne.n	8000b2e <print+0x106>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	1d1a      	adds	r2, r3, #4
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	6819      	ldr	r1, [r3, #0]
 8000b16:	2361      	movs	r3, #97	; 0x61
 8000b18:	9302      	str	r3, [sp, #8]
 8000b1a:	9601      	str	r6, [sp, #4]
 8000b1c:	9500      	str	r5, [sp, #0]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	2210      	movs	r2, #16
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff ff13 	bl	800094e <printi>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	441c      	add	r4, r3
				continue;
 8000b2c:	e047      	b.n	8000bbe <print+0x196>
			}
			if( *format == 'X' ) {
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b58      	cmp	r3, #88	; 0x58
 8000b34:	d10f      	bne.n	8000b56 <print+0x12e>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	1d1a      	adds	r2, r3, #4
 8000b3a:	607a      	str	r2, [r7, #4]
 8000b3c:	6819      	ldr	r1, [r3, #0]
 8000b3e:	2341      	movs	r3, #65	; 0x41
 8000b40:	9302      	str	r3, [sp, #8]
 8000b42:	9601      	str	r6, [sp, #4]
 8000b44:	9500      	str	r5, [sp, #0]
 8000b46:	2300      	movs	r3, #0
 8000b48:	2210      	movs	r2, #16
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f7ff feff 	bl	800094e <printi>
 8000b50:	4603      	mov	r3, r0
 8000b52:	441c      	add	r4, r3
				continue;
 8000b54:	e033      	b.n	8000bbe <print+0x196>
			}
			if( *format == 'u' ) {
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b75      	cmp	r3, #117	; 0x75
 8000b5c:	d10f      	bne.n	8000b7e <print+0x156>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	1d1a      	adds	r2, r3, #4
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	6819      	ldr	r1, [r3, #0]
 8000b66:	2361      	movs	r3, #97	; 0x61
 8000b68:	9302      	str	r3, [sp, #8]
 8000b6a:	9601      	str	r6, [sp, #4]
 8000b6c:	9500      	str	r5, [sp, #0]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	220a      	movs	r2, #10
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f7ff feeb 	bl	800094e <printi>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	441c      	add	r4, r3
				continue;
 8000b7c:	e01f      	b.n	8000bbe <print+0x196>
			}
			if( *format == 'c' ) {
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b63      	cmp	r3, #99	; 0x63
 8000b84:	d11b      	bne.n	8000bbe <print+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	1d1a      	adds	r2, r3, #4
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8000b92:	2300      	movs	r3, #0
 8000b94:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 8000b96:	f107 0114 	add.w	r1, r7, #20
 8000b9a:	4633      	mov	r3, r6
 8000b9c:	462a      	mov	r2, r5
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f7ff fe7d 	bl	800089e <prints>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	441c      	add	r4, r3
				continue;
 8000ba8:	e009      	b.n	8000bbe <print+0x196>
			}
		}
		else {


			out:
 8000baa:	bf00      	nop
 8000bac:	e000      	b.n	8000bb0 <print+0x188>
			if (*format == '%') goto out;
 8000bae:	bf00      	nop
			printchar (out, *format);
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f7ff fe57 	bl	800086a <printchar>
			++pc;
 8000bbc:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f47f af36 	bne.w	8000a3a <print+0x12>
 8000bce:	e000      	b.n	8000bd2 <print+0x1aa>
			if (*format == '\0') break;
 8000bd0:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <print+0x1b8>
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000be0:	4623      	mov	r3, r4
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bec:	08017544 	.word	0x08017544

08000bf0 <mprintf>:

int mprintf(const char *format, ...)
{
 8000bf0:	b40f      	push	{r0, r1, r2, r3}
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	6939      	ldr	r1, [r7, #16]
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff ff10 	bl	8000a28 <print>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <msprintf>:

int msprintf(char *out, const char *format, ...)
{
 8000c18:	b40e      	push	{r1, r2, r3}
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b085      	sub	sp, #20
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
        va_list args;

        va_start( args, format );
 8000c22:	f107 0320 	add.w	r3, r7, #32
 8000c26:	60fb      	str	r3, [r7, #12]
        return print( &out, format, args );
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	69f9      	ldr	r1, [r7, #28]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fefa 	bl	8000a28 <print>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c40:	b003      	add	sp, #12
 8000c42:	4770      	bx	lr

08000c44 <threadSvr>:

#define BUF_SIZE  (128)

char tmpBuf[128];

void threadSvr(void * arg) {
 8000c44:	b5b0      	push	{r4, r5, r7, lr}
 8000c46:	b0a2      	sub	sp, #136	; 0x88
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	466b      	mov	r3, sp
 8000c4e:	461d      	mov	r5, r3
	socklen_t sin_size;

	int sock_fd, new_fd;
	int err;

	char * buf = NULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	66fb      	str	r3, [r7, #108]	; 0x6c

	fd_set fdsr;
	int maxsock;
	int i;
	struct timeval tv;
	int fd_arr[BACKLOG];
 8000c54:	230a      	movs	r3, #10
 8000c56:	3b01      	subs	r3, #1
 8000c58:	66bb      	str	r3, [r7, #104]	; 0x68
 8000c5a:	230a      	movs	r3, #10
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	f04f 0300 	mov.w	r3, #0
 8000c66:	f04f 0400 	mov.w	r4, #0
 8000c6a:	0154      	lsls	r4, r2, #5
 8000c6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000c70:	014b      	lsls	r3, r1, #5
 8000c72:	230a      	movs	r3, #10
 8000c74:	4619      	mov	r1, r3
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	f04f 0400 	mov.w	r4, #0
 8000c82:	0154      	lsls	r4, r2, #5
 8000c84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000c88:	014b      	lsls	r3, r1, #5
 8000c8a:	230a      	movs	r3, #10
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	3303      	adds	r3, #3
 8000c90:	3307      	adds	r3, #7
 8000c92:	08db      	lsrs	r3, r3, #3
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	ebad 0d03 	sub.w	sp, sp, r3
 8000c9a:	ab02      	add	r3, sp, #8
 8000c9c:	3303      	adds	r3, #3
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	667b      	str	r3, [r7, #100]	; 0x64
	int ret;
	int con_amount = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	663b      	str	r3, [r7, #96]	; 0x60

	buf = pvPortMalloc(BUF_SIZE + 1); /* 分配接收用的数据缓冲 */
 8000ca8:	2081      	movs	r0, #129	; 0x81
 8000caa:	f006 fe59 	bl	8007960 <pvPortMalloc>
 8000cae:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (buf == NULL) {
 8000cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d105      	bne.n	8000cc2 <threadSvr+0x7e>
		mprintf("no enough memory give to socket.\r\n");
 8000cb6:	48b3      	ldr	r0, [pc, #716]	; (8000f84 <threadSvr+0x340>)
 8000cb8:	f7ff ff9a 	bl	8000bf0 <mprintf>
		return;
 8000cbc:	bf00      	nop
 8000cbe:	46ad      	mov	sp, r5
 8000cc0:	e1fd      	b.n	80010be <threadSvr+0x47a>
	}

	sock_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
 8000cc2:	2206      	movs	r2, #6
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f00a fa44 	bl	800b154 <lwip_socket>
 8000ccc:	65f8      	str	r0, [r7, #92]	; 0x5c

	if (sock_fd == -1) {
 8000cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cd4:	d103      	bne.n	8000cde <threadSvr+0x9a>
		mprintf("failed to create socket server.\r\n");
 8000cd6:	48ac      	ldr	r0, [pc, #688]	; (8000f88 <threadSvr+0x344>)
 8000cd8:	f7ff ff8a 	bl	8000bf0 <mprintf>
		goto __exit;
 8000cdc:	e1c8      	b.n	8001070 <threadSvr+0x42c>
	}

	int yes = 1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
	err = setsockopt(sock_fd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes));
 8000ce2:	f107 020c 	add.w	r2, r7, #12
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	4613      	mov	r3, r2
 8000cec:	2204      	movs	r2, #4
 8000cee:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000cf2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000cf4:	f00a fee4 	bl	800bac0 <lwip_setsockopt>
 8000cf8:	65b8      	str	r0, [r7, #88]	; 0x58
	if (err == -1) {
 8000cfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d00:	d103      	bne.n	8000d0a <threadSvr+0xc6>
		mprintf("failed to setsockopt.\r\n");
 8000d02:	48a2      	ldr	r0, [pc, #648]	; (8000f8c <threadSvr+0x348>)
 8000d04:	f7ff ff74 	bl	8000bf0 <mprintf>
		goto __exit;
 8000d08:	e1b2      	b.n	8001070 <threadSvr+0x42c>
	}

	int net_tv = 2000; //2秒
 8000d0a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d0e:	60bb      	str	r3, [r7, #8]
	//设置发送时限
	err = setsockopt(sock_fd, SOL_SOCKET, SO_SNDTIMEO, (char * )&net_tv,
 8000d10:	f107 0208 	add.w	r2, r7, #8
 8000d14:	2304      	movs	r3, #4
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	f241 0205 	movw	r2, #4101	; 0x1005
 8000d1e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000d22:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d24:	f00a fecc 	bl	800bac0 <lwip_setsockopt>
 8000d28:	65b8      	str	r0, [r7, #88]	; 0x58
			sizeof(int));
	if (err == -1) {
 8000d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d30:	d103      	bne.n	8000d3a <threadSvr+0xf6>
		mprintf("failed to setsockopt.\r\n");
 8000d32:	4896      	ldr	r0, [pc, #600]	; (8000f8c <threadSvr+0x348>)
 8000d34:	f7ff ff5c 	bl	8000bf0 <mprintf>
		goto __exit;
 8000d38:	e19a      	b.n	8001070 <threadSvr+0x42c>
	}
	//设置接收时限
	err = setsockopt(sock_fd, SOL_SOCKET, SO_RCVTIMEO, (char * )&net_tv,
 8000d3a:	f107 0208 	add.w	r2, r7, #8
 8000d3e:	2304      	movs	r3, #4
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	4613      	mov	r3, r2
 8000d44:	f241 0206 	movw	r2, #4102	; 0x1006
 8000d48:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000d4c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d4e:	f00a feb7 	bl	800bac0 <lwip_setsockopt>
 8000d52:	65b8      	str	r0, [r7, #88]	; 0x58
			sizeof(int));
	if (err == -1) {
 8000d54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d5a:	d103      	bne.n	8000d64 <threadSvr+0x120>
		mprintf("failed to setsockopt.\r\n");
 8000d5c:	488b      	ldr	r0, [pc, #556]	; (8000f8c <threadSvr+0x348>)
 8000d5e:	f7ff ff47 	bl	8000bf0 <mprintf>
		goto __exit;
 8000d62:	e185      	b.n	8001070 <threadSvr+0x42c>
	}

	server_addr.sin_family = AF_INET;
 8000d64:	2302      	movs	r3, #2
 8000d66:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	server_addr.sin_port = htons(PORT);
 8000d6a:	f240 73e3 	movw	r3, #2019	; 0x7e3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f00b fa41 	bl	800c1f8 <lwip_htons>
 8000d76:	4603      	mov	r3, r0
 8000d78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f00b fa49 	bl	800c214 <lwip_htonl>
 8000d82:	4603      	mov	r3, r0
 8000d84:	647b      	str	r3, [r7, #68]	; 0x44
	memset(&(server_addr.sin_zero), 0x00, sizeof(server_addr.sin_zero));
 8000d86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d8a:	3308      	adds	r3, #8
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f015 fc8d 	bl	80166b0 <memset>

	err = bind(sock_fd, (struct sockaddr * )(&server_addr),
 8000d96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d9a:	2210      	movs	r2, #16
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000da0:	f009 fdba 	bl	800a918 <lwip_bind>
 8000da4:	65b8      	str	r0, [r7, #88]	; 0x58
			sizeof(struct sockaddr));
	if (err == -1) {
 8000da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dac:	d106      	bne.n	8000dbc <threadSvr+0x178>
		mprintf("failed to bind port %d.\r\n", PORT);
 8000dae:	f240 73e3 	movw	r3, #2019	; 0x7e3
 8000db2:	4619      	mov	r1, r3
 8000db4:	4876      	ldr	r0, [pc, #472]	; (8000f90 <threadSvr+0x34c>)
 8000db6:	f7ff ff1b 	bl	8000bf0 <mprintf>
		goto __exit;
 8000dba:	e159      	b.n	8001070 <threadSvr+0x42c>
	}

	err = listen(sock_fd, BACKLOG);
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000dc2:	f009 fe7d 	bl	800aac0 <lwip_listen>
 8000dc6:	65b8      	str	r0, [r7, #88]	; 0x58
	if (err == -1) {
 8000dc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dce:	d103      	bne.n	8000dd8 <threadSvr+0x194>
		mprintf("failed to listen.\r\n");
 8000dd0:	4870      	ldr	r0, [pc, #448]	; (8000f94 <threadSvr+0x350>)
 8000dd2:	f7ff ff0d 	bl	8000bf0 <mprintf>
		goto __exit;
 8000dd6:	e14b      	b.n	8001070 <threadSvr+0x42c>
	}

	sin_size = sizeof(client_addr);
 8000dd8:	2310      	movs	r3, #16
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (;;) {
		FD_ZERO(&fdsr);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	673b      	str	r3, [r7, #112]	; 0x70
 8000de2:	2300      	movs	r3, #0
 8000de4:	677b      	str	r3, [r7, #116]	; 0x74
 8000de6:	e007      	b.n	8000df8 <threadSvr+0x1b4>
 8000de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	673a      	str	r2, [r7, #112]	; 0x70
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000df4:	3301      	adds	r3, #1
 8000df6:	677b      	str	r3, [r7, #116]	; 0x74
 8000df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dfa:	2b07      	cmp	r3, #7
 8000dfc:	d9f4      	bls.n	8000de8 <threadSvr+0x1a4>
		FD_SET(sock_fd, &fdsr);
 8000dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e00:	095a      	lsrs	r2, r3, #5
 8000e02:	0093      	lsls	r3, r2, #2
 8000e04:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000e08:	440b      	add	r3, r1
 8000e0a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8000e0e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000e10:	f001 011f 	and.w	r1, r1, #31
 8000e14:	2001      	movs	r0, #1
 8000e16:	fa00 f101 	lsl.w	r1, r0, r1
 8000e1a:	4319      	orrs	r1, r3
 8000e1c:	0093      	lsls	r3, r2, #2
 8000e1e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000e22:	4413      	add	r3, r2
 8000e24:	f843 1c5c 	str.w	r1, [r3, #-92]

		tv.tv_sec = 3;
 8000e28:	f04f 0303 	mov.w	r3, #3
 8000e2c:	f04f 0400 	mov.w	r4, #0
 8000e30:	e9c7 3404 	strd	r3, r4, [r7, #16]
		tv.tv_usec = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]

		maxsock = sock_fd;
 8000e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e3a:	67bb      	str	r3, [r7, #120]	; 0x78
		for (i = 0; i < BACKLOG; i++) //将存在的套接字加入描述符集
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000e40:	e02f      	b.n	8000ea2 <threadSvr+0x25e>
				{
			if (fd_arr[i] != 0) {
 8000e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d026      	beq.n	8000e9c <threadSvr+0x258>
				FD_SET(fd_arr[i], &fdsr);
 8000e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e50:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e56:	095a      	lsrs	r2, r3, #5
 8000e58:	0093      	lsls	r3, r2, #2
 8000e5a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000e5e:	440b      	add	r3, r1
 8000e60:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8000e64:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000e66:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000e68:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8000e6c:	f001 011f 	and.w	r1, r1, #31
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f101 	lsl.w	r1, r0, r1
 8000e76:	4319      	orrs	r1, r3
 8000e78:	0093      	lsls	r3, r2, #2
 8000e7a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000e7e:	4413      	add	r3, r2
 8000e80:	f843 1c5c 	str.w	r1, [r3, #-92]
				if (maxsock < fd_arr[i]) {
 8000e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	da04      	bge.n	8000e9c <threadSvr+0x258>
					maxsock = fd_arr[i];
 8000e92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e94:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9a:	67bb      	str	r3, [r7, #120]	; 0x78
		for (i = 0; i < BACKLOG; i++) //将存在的套接字加入描述符集
 8000e9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ea2:	220a      	movs	r2, #10
 8000ea4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	dbcb      	blt.n	8000e42 <threadSvr+0x1fe>
				}
			}
		}

		ret = select(maxsock + 1, &fdsr, NULL, NULL, &tv);
 8000eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000eac:	1c58      	adds	r0, r3, #1
 8000eae:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f00a faf4 	bl	800b4a8 <lwip_select>
 8000ec0:	6578      	str	r0, [r7, #84]	; 0x54
		if (ret < 0) {
 8000ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	da03      	bge.n	8000ed0 <threadSvr+0x28c>
			mprintf("failed to select.\r\n");
 8000ec8:	4833      	ldr	r0, [pc, #204]	; (8000f98 <threadSvr+0x354>)
 8000eca:	f7ff fe91 	bl	8000bf0 <mprintf>
			break;
 8000ece:	e0cf      	b.n	8001070 <threadSvr+0x42c>
		} else if (ret == 0) {
 8000ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d103      	bne.n	8000ede <threadSvr+0x29a>
			mprintf("timeout.\r\n");
 8000ed6:	4831      	ldr	r0, [pc, #196]	; (8000f9c <threadSvr+0x358>)
 8000ed8:	f7ff fe8a 	bl	8000bf0 <mprintf>
			continue;
 8000edc:	e0c7      	b.n	800106e <threadSvr+0x42a>
		} else {
			mprintf("I got client[%d], ip is %s, port is %d\r\n", ret,inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
 8000ede:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f014 fa49 	bl	801537c <ip4addr_ntoa>
 8000eea:	4604      	mov	r4, r0
 8000eec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f00b f982 	bl	800c1f8 <lwip_htons>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4622      	mov	r2, r4
 8000ef8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000efa:	4829      	ldr	r0, [pc, #164]	; (8000fa0 <threadSvr+0x35c>)
 8000efc:	f7ff fe78 	bl	8000bf0 <mprintf>
		}

		if (FD_ISSET(sock_fd, &fdsr)) {
 8000f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000f0a:	4413      	add	r3, r2
 8000f0c:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8000f10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f12:	f002 021f 	and.w	r2, r2, #31
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d02c      	beq.n	8000f7c <threadSvr+0x338>
			new_fd = accept(sock_fd, (struct sockaddr * )(&client_addr),
 8000f22:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000f2e:	f009 fb9f 	bl	800a670 <lwip_accept>
 8000f32:	6538      	str	r0, [r7, #80]	; 0x50
					&sin_size);

			if (new_fd == -1) {
 8000f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f3a:	d103      	bne.n	8000f44 <threadSvr+0x300>
				mprintf("failed to accep.t\r\n");
 8000f3c:	4819      	ldr	r0, [pc, #100]	; (8000fa4 <threadSvr+0x360>)
 8000f3e:	f7ff fe57 	bl	8000bf0 <mprintf>
				//break;
				continue;
 8000f42:	e094      	b.n	800106e <threadSvr+0x42a>
			}


			for (i = 0; i < BACKLOG; i++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f48:	e00e      	b.n	8000f68 <threadSvr+0x324>
				if (fd_arr[i] == 0) {
 8000f4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f4c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d105      	bne.n	8000f62 <threadSvr+0x31e>
					fd_arr[i] = new_fd;
 8000f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f58:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000f5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					break;
 8000f60:	e006      	b.n	8000f70 <threadSvr+0x32c>
			for (i = 0; i < BACKLOG; i++) {
 8000f62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f64:	3301      	adds	r3, #1
 8000f66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f68:	220a      	movs	r2, #10
 8000f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	dbec      	blt.n	8000f4a <threadSvr+0x306>
				}
			}

			if (new_fd > maxsock) {
 8000f70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dd01      	ble.n	8000f7c <threadSvr+0x338>
				maxsock = new_fd;
 8000f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f7a:	67bb      	str	r3, [r7, #120]	; 0x78
			}
		}

		for (i = 0; i < BACKLOG; i++) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f80:	e071      	b.n	8001066 <threadSvr+0x422>
 8000f82:	bf00      	nop
 8000f84:	0801754c 	.word	0x0801754c
 8000f88:	08017570 	.word	0x08017570
 8000f8c:	08017594 	.word	0x08017594
 8000f90:	080175ac 	.word	0x080175ac
 8000f94:	080175c8 	.word	0x080175c8
 8000f98:	080175dc 	.word	0x080175dc
 8000f9c:	080175f0 	.word	0x080175f0
 8000fa0:	080175fc 	.word	0x080175fc
 8000fa4:	08017628 	.word	0x08017628
			if (FD_ISSET(fd_arr[i], &fdsr)) {
 8000fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000faa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb0:	095b      	lsrs	r3, r3, #5
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000fb8:	4413      	add	r3, r2
 8000fba:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8000fbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000fc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000fc2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000fc6:	f002 021f 	and.w	r2, r2, #31
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d044      	beq.n	8001060 <threadSvr+0x41c>
				ret = recv(fd_arr[i], buf, BUF_SIZE - 1, 0);
 8000fd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fd8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000fda:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	227f      	movs	r2, #127	; 0x7f
 8000fe2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000fe4:	f009 ff88 	bl	800aef8 <lwip_recv>
 8000fe8:	6578      	str	r0, [r7, #84]	; 0x54
				if (ret > 0) {
 8000fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	dd20      	ble.n	8001032 <threadSvr+0x3ee>
					buf[ret] = '\0';
 8000ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ff2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000ff4:	4413      	add	r3, r2
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
					mprintf("msg from %d,is : %s.\r\n", fd_arr[i], buf);
 8000ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ffc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001002:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001004:	4619      	mov	r1, r3
 8001006:	482f      	ldr	r0, [pc, #188]	; (80010c4 <threadSvr+0x480>)
 8001008:	f7ff fdf2 	bl	8000bf0 <mprintf>
					msprintf(tmpBuf, "you input :%s\r\n", buf);
 800100c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800100e:	492e      	ldr	r1, [pc, #184]	; (80010c8 <threadSvr+0x484>)
 8001010:	482e      	ldr	r0, [pc, #184]	; (80010cc <threadSvr+0x488>)
 8001012:	f7ff fe01 	bl	8000c18 <msprintf>
					send(fd_arr[i], tmpBuf, strlen(tmpBuf), 0);
 8001016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001018:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800101a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800101e:	482b      	ldr	r0, [pc, #172]	; (80010cc <threadSvr+0x488>)
 8001020:	f7ff f8e6 	bl	80001f0 <strlen>
 8001024:	4602      	mov	r2, r0
 8001026:	2300      	movs	r3, #0
 8001028:	4928      	ldr	r1, [pc, #160]	; (80010cc <threadSvr+0x488>)
 800102a:	4620      	mov	r0, r4
 800102c:	f009 ff7a 	bl	800af24 <lwip_send>
 8001030:	e016      	b.n	8001060 <threadSvr+0x41c>
				} else if (ret == 0) {
 8001032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001034:	2b00      	cmp	r3, #0
 8001036:	d113      	bne.n	8001060 <threadSvr+0x41c>
					mprintf("client[%d] is closed.\r\n", fd_arr[i]);
 8001038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800103a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800103c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001040:	4619      	mov	r1, r3
 8001042:	4823      	ldr	r0, [pc, #140]	; (80010d0 <threadSvr+0x48c>)
 8001044:	f7ff fdd4 	bl	8000bf0 <mprintf>
					//FD_CLR(fd_arr[i], &fdsr);
					close(fd_arr[i]);
 8001048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800104a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	4618      	mov	r0, r3
 8001052:	f009 fcdb 	bl	800aa0c <lwip_close>
					fd_arr[i] = 0;
 8001056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001058:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800105a:	2100      	movs	r1, #0
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < BACKLOG; i++) {
 8001060:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001062:	3301      	adds	r3, #1
 8001064:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001066:	220a      	movs	r2, #10
 8001068:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800106a:	4293      	cmp	r3, r2
 800106c:	db9c      	blt.n	8000fa8 <threadSvr+0x364>
		FD_ZERO(&fdsr);
 800106e:	e6b5      	b.n	8000ddc <threadSvr+0x198>
			}
		}

	}

	__exit: if (buf != NULL) {
 8001070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <threadSvr+0x438>
		vPortFree(buf);
 8001076:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001078:	f006 fd34 	bl	8007ae4 <vPortFree>
	}
	if (sock_fd > 0) {
 800107c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800107e:	2b00      	cmp	r3, #0
 8001080:	dd19      	ble.n	80010b6 <threadSvr+0x472>
		close(sock_fd);
 8001082:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001084:	f009 fcc2 	bl	800aa0c <lwip_close>

		for (i = 0; i < con_amount; i++) {
 8001088:	2300      	movs	r3, #0
 800108a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800108c:	e00f      	b.n	80010ae <threadSvr+0x46a>
			if (fd_arr[i] != 0)
 800108e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001090:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <threadSvr+0x464>
				close(fd_arr[i]);
 800109a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800109c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800109e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f009 fcb2 	bl	800aa0c <lwip_close>
		for (i = 0; i < con_amount; i++) {
 80010a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010aa:	3301      	adds	r3, #1
 80010ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80010ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80010b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dbeb      	blt.n	800108e <threadSvr+0x44a>
		}
	}

	vTaskDelete(NULL);
 80010b6:	2000      	movs	r0, #0
 80010b8:	f005 faec 	bl	8006694 <vTaskDelete>
 80010bc:	46ad      	mov	sp, r5

}
 80010be:	3780      	adds	r7, #128	; 0x80
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bdb0      	pop	{r4, r5, r7, pc}
 80010c4:	0801763c 	.word	0x0801763c
 80010c8:	08017654 	.word	0x08017654
 80010cc:	200042e0 	.word	0x200042e0
 80010d0:	08017664 	.word	0x08017664

080010d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_MspInit+0x54>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a11      	ldr	r2, [pc, #68]	; (8001128 <HAL_MspInit+0x54>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_MspInit+0x54>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_MspInit+0x54>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_MspInit+0x54>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_MspInit+0x54>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	210f      	movs	r1, #15
 8001116:	f06f 0001 	mvn.w	r0, #1
 800111a:	f000 fa6a 	bl	80015f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800

0800112c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <HAL_UART_MspInit+0x94>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d134      	bne.n	80011b8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_UART_MspInit+0x98>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <HAL_UART_MspInit+0x98>)
 8001158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_UART_MspInit+0x98>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_UART_MspInit+0x98>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <HAL_UART_MspInit+0x98>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_UART_MspInit+0x98>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001186:	f44f 7340 	mov.w	r3, #768	; 0x300
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001190:	2301      	movs	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001198:	2307      	movs	r3, #7
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4809      	ldr	r0, [pc, #36]	; (80011c8 <HAL_UART_MspInit+0x9c>)
 80011a4:	f001 fc24 	bl	80029f0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2105      	movs	r1, #5
 80011ac:	2027      	movs	r0, #39	; 0x27
 80011ae:	f000 fa20 	bl	80015f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011b2:	2027      	movs	r0, #39	; 0x27
 80011b4:	f000 fa39 	bl	800162a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40004800 	.word	0x40004800
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020c00 	.word	0x40020c00

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <MemManage_Handler+0x4>

080011e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001204:	f000 f8d8 	bl	80013b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001208:	f005 ff26 	bl	8007058 <xTaskGetSchedulerState>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d001      	beq.n	8001216 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001212:	f006 fb19 	bl	8007848 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <USART3_IRQHandler+0x10>)
 8001222:	f002 fb0f 	bl	8003844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200042a0 	.word	0x200042a0

08001230 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <ETH_IRQHandler+0x10>)
 8001236:	f000 fe1b 	bl	8001e70 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20005c8c 	.word	0x20005c8c

08001244 <__io_putchar>:
#include "main.h"

extern UART_HandleTypeDef huart3;

int __io_putchar(int ch) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 0xFFFF);
 800124c:	1d39      	adds	r1, r7, #4
 800124e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001252:	2201      	movs	r2, #1
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <__io_putchar+0x20>)
 8001256:	f002 fa5c 	bl	8003712 <HAL_UART_Transmit>
	return ch;
 800125a:	687b      	ldr	r3, [r7, #4]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200042a0 	.word	0x200042a0

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <SystemInit+0x60>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <SystemInit+0x60>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <SystemInit+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <SystemInit+0x64>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <SystemInit+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <SystemInit+0x64>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <SystemInit+0x64>)
 8001294:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <SystemInit+0x64>)
 80012a0:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <SystemInit+0x68>)
 80012a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <SystemInit+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a08      	ldr	r2, [pc, #32]	; (80012cc <SystemInit+0x64>)
 80012aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <SystemInit+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SystemInit+0x60>)
 80012b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012bc:	609a      	str	r2, [r3, #8]
#endif
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00
 80012cc:	40023800 	.word	0x40023800
 80012d0:	24003010 	.word	0x24003010

080012d4 <StartTcpServerTask>:
static void TcpServerFun(void const * argument);

extern void tcpserv(void *arg);
extern void threadSvr(void * arg);

void StartTcpServerTask(void) {
 80012d4:	b5b0      	push	{r4, r5, r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
	if(tcpServerTaskHandle==NULL) {
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <StartTcpServerTask+0x38>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d110      	bne.n	8001304 <StartTcpServerTask+0x30>
		//osDelay(1000);
		osThreadDef(tcpServerTask, threadSvr, osPriorityBelowNormal, 0, 1024+512);
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <StartTcpServerTask+0x3c>)
 80012e4:	1d3c      	adds	r4, r7, #4
 80012e6:	461d      	mov	r5, r3
 80012e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		tcpServerTaskHandle = osThreadCreate(osThread(tcpServerTask),NULL);
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 fd18 	bl	8004d2e <osThreadCreate>
 80012fe:	4602      	mov	r2, r0
 8001300:	4b02      	ldr	r3, [pc, #8]	; (800130c <StartTcpServerTask+0x38>)
 8001302:	601a      	str	r2, [r3, #0]
	}
}
 8001304:	bf00      	nop
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bdb0      	pop	{r4, r5, r7, pc}
 800130c:	200002f0 	.word	0x200002f0
 8001310:	0801768c 	.word	0x0801768c

08001314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_Init+0x40>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <HAL_Init+0x40>)
 800131e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001322:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <HAL_Init+0x40>)
 800132a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_Init+0x40>)
 8001336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133c:	2003      	movs	r0, #3
 800133e:	f000 f94d 	bl	80015dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001342:	200f      	movs	r0, #15
 8001344:	f000 f808 	bl	8001358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001348:	f7ff fec4 	bl	80010d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023c00 	.word	0x40023c00

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x54>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x58>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f965 	bl	8001646 <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d80a      	bhi.n	80013a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001394:	f000 f92d 	bl	80015f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_InitTick+0x5c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000008 	.word	0x20000008
 80013b4:	20000004 	.word	0x20000004

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20004360 	.word	0x20004360

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20004360 	.word	0x20004360

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff ffee 	bl	80013e0 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001410:	d005      	beq.n	800141e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_Delay+0x40>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800141e:	bf00      	nop
 8001420:	f7ff ffde 	bl	80013e0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8f7      	bhi.n	8001420 <HAL_Delay+0x28>
  {
  }
}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000008 	.word	0x20000008

0800143c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	60d3      	str	r3, [r2, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <__NVIC_GetPriorityGrouping+0x18>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	f003 0307 	and.w	r3, r3, #7
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	db0b      	blt.n	80014ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	f003 021f 	and.w	r2, r3, #31
 80014b8:	4907      	ldr	r1, [pc, #28]	; (80014d8 <__NVIC_EnableIRQ+0x38>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	2001      	movs	r0, #1
 80014c2:	fa00 f202 	lsl.w	r2, r0, r2
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <__NVIC_SetPriority+0x50>)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a8:	d301      	bcc.n	80015ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00f      	b.n	80015ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <SysTick_Config+0x40>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b6:	210f      	movs	r1, #15
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015bc:	f7ff ff8e 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <SysTick_Config+0x40>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <SysTick_Config+0x40>)
 80015c8:	2207      	movs	r2, #7
 80015ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e000e010 	.word	0xe000e010

080015dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff29 	bl	800143c <__NVIC_SetPriorityGrouping>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001604:	f7ff ff3e 	bl	8001484 <__NVIC_GetPriorityGrouping>
 8001608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	6978      	ldr	r0, [r7, #20]
 8001610:	f7ff ff8e 	bl	8001530 <NVIC_EncodePriority>
 8001614:	4602      	mov	r2, r0
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff5d 	bl	80014dc <__NVIC_SetPriority>
}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff31 	bl	80014a0 <__NVIC_EnableIRQ>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffa2 	bl	8001598 <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d004      	beq.n	800167c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e00c      	b.n	8001696 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2205      	movs	r2, #5
 8001680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0201 	bic.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80016b4:	4baa      	ldr	r3, [pc, #680]	; (8001960 <HAL_ETH_Init+0x2bc>)
 80016b6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e185      	b.n	80019d6 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d106      	bne.n	80016e4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f002 fe9e 	bl	8004420 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	4b9e      	ldr	r3, [pc, #632]	; (8001964 <HAL_ETH_Init+0x2c0>)
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	4a9d      	ldr	r2, [pc, #628]	; (8001964 <HAL_ETH_Init+0x2c0>)
 80016ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f2:	6453      	str	r3, [r2, #68]	; 0x44
 80016f4:	4b9b      	ldr	r3, [pc, #620]	; (8001964 <HAL_ETH_Init+0x2c0>)
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001700:	4b99      	ldr	r3, [pc, #612]	; (8001968 <HAL_ETH_Init+0x2c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4a98      	ldr	r2, [pc, #608]	; (8001968 <HAL_ETH_Init+0x2c4>)
 8001706:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800170a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800170c:	4b96      	ldr	r3, [pc, #600]	; (8001968 <HAL_ETH_Init+0x2c4>)
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4994      	ldr	r1, [pc, #592]	; (8001968 <HAL_ETH_Init+0x2c4>)
 8001716:	4313      	orrs	r3, r2
 8001718:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0201 	orr.w	r2, r2, #1
 800172c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001730:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001732:	f7ff fe55 	bl	80013e0 <HAL_GetTick>
 8001736:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001738:	e011      	b.n	800175e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800173a:	f7ff fe51 	bl	80013e0 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001748:	d909      	bls.n	800175e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e13b      	b.n	80019d6 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1e4      	bne.n	800173a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f023 031c 	bic.w	r3, r3, #28
 800177e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001780:	f001 ff46 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 8001784:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4a78      	ldr	r2, [pc, #480]	; (800196c <HAL_ETH_Init+0x2c8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d908      	bls.n	80017a0 <HAL_ETH_Init+0xfc>
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4a77      	ldr	r2, [pc, #476]	; (8001970 <HAL_ETH_Init+0x2cc>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d804      	bhi.n	80017a0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e027      	b.n	80017f0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	4a73      	ldr	r2, [pc, #460]	; (8001970 <HAL_ETH_Init+0x2cc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d908      	bls.n	80017ba <HAL_ETH_Init+0x116>
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	4a72      	ldr	r2, [pc, #456]	; (8001974 <HAL_ETH_Init+0x2d0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d804      	bhi.n	80017ba <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f043 030c 	orr.w	r3, r3, #12
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	e01a      	b.n	80017f0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	4a6d      	ldr	r2, [pc, #436]	; (8001974 <HAL_ETH_Init+0x2d0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d903      	bls.n	80017ca <HAL_ETH_Init+0x126>
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4a6c      	ldr	r2, [pc, #432]	; (8001978 <HAL_ETH_Init+0x2d4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d911      	bls.n	80017ee <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4a6a      	ldr	r2, [pc, #424]	; (8001978 <HAL_ETH_Init+0x2d4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d908      	bls.n	80017e4 <HAL_ETH_Init+0x140>
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	4a69      	ldr	r2, [pc, #420]	; (800197c <HAL_ETH_Init+0x2d8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d804      	bhi.n	80017e4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	e005      	b.n	80017f0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	e000      	b.n	80017f0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80017ee:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80017f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017fc:	2100      	movs	r1, #0
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 fc19 	bl	8002036 <HAL_ETH_WritePHYRegister>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800180e:	6939      	ldr	r1, [r7, #16]
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 fdcf 	bl	80023b4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e0d9      	b.n	80019d6 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001822:	20ff      	movs	r0, #255	; 0xff
 8001824:	f7ff fde8 	bl	80013f8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80a7 	beq.w	8001980 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001832:	f7ff fdd5 	bl	80013e0 <HAL_GetTick>
 8001836:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	461a      	mov	r2, r3
 800183e:	2101      	movs	r1, #1
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 fb90 	bl	8001f66 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001846:	f7ff fdcb 	bl	80013e0 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	; 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d90f      	bls.n	8001878 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800185c:	6939      	ldr	r1, [r7, #16]
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fda8 	bl	80023b4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e0ae      	b.n	80019d6 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0da      	beq.n	8001838 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001882:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001886:	2100      	movs	r1, #0
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fbd4 	bl	8002036 <HAL_ETH_WritePHYRegister>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00b      	beq.n	80018ac <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001898:	6939      	ldr	r1, [r7, #16]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 fd8a 	bl	80023b4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80018a8:	2301      	movs	r3, #1
 80018aa:	e094      	b.n	80019d6 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80018ac:	f7ff fd98 	bl	80013e0 <HAL_GetTick>
 80018b0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	461a      	mov	r2, r3
 80018b8:	2101      	movs	r1, #1
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 fb53 	bl	8001f66 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80018c0:	f7ff fd8e 	bl	80013e0 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d90f      	bls.n	80018f2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80018d6:	6939      	ldr	r1, [r7, #16]
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 fd6b 	bl	80023b4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e071      	b.n	80019d6 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0da      	beq.n	80018b2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	461a      	mov	r2, r3
 8001902:	211f      	movs	r1, #31
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fb2e 	bl	8001f66 <HAL_ETH_ReadPHYRegister>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00b      	beq.n	8001928 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001914:	6939      	ldr	r1, [r7, #16]
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fd4c 	bl	80023b4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001924:	2301      	movs	r3, #1
 8001926:	e056      	b.n	80019d6 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	d004      	beq.n	800193c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	e002      	b.n	8001942 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	e037      	b.n	80019c4 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	e032      	b.n	80019c4 <HAL_ETH_Init+0x320>
 800195e:	bf00      	nop
 8001960:	03938700 	.word	0x03938700
 8001964:	40023800 	.word	0x40023800
 8001968:	40013800 	.word	0x40013800
 800196c:	01312cff 	.word	0x01312cff
 8001970:	02160ebf 	.word	0x02160ebf
 8001974:	039386ff 	.word	0x039386ff
 8001978:	05f5e0ff 	.word	0x05f5e0ff
 800197c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	08db      	lsrs	r3, r3, #3
 8001986:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001990:	4313      	orrs	r3, r2
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	2100      	movs	r1, #0
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 fb4c 	bl	8002036 <HAL_ETH_WritePHYRegister>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00b      	beq.n	80019bc <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fd02 	bl	80023b4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e00c      	b.n	80019d6 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80019bc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80019c0:	f7ff fd1a 	bl	80013f8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80019c4:	6939      	ldr	r1, [r7, #16]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fcf4 	bl	80023b4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop

080019e0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_ETH_DMATxDescListInit+0x20>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e052      	b.n	8001aa6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e030      	b.n	8001a7e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	015b      	lsls	r3, r3, #5
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	4413      	add	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a2c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a34:	fb02 f303 	mul.w	r3, r2, r3
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d208      	bcs.n	8001a72 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	015b      	lsls	r3, r3, #5
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	4413      	add	r3, r2
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	e002      	b.n	8001a78 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3ca      	bcc.n	8001a1c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a90:	3310      	adds	r3, #16
 8001a92:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	371c      	adds	r7, #28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b087      	sub	sp, #28
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_ETH_DMARxDescListInit+0x20>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e056      	b.n	8001b80 <HAL_ETH_DMARxDescListInit+0xce>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2202      	movs	r2, #2
 8001ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	e034      	b.n	8001b58 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	015b      	lsls	r3, r3, #5
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	4413      	add	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001afe:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001b06:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	461a      	mov	r2, r3
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d105      	bne.n	8001b30 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d208      	bcs.n	8001b4c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	015b      	lsls	r3, r3, #5
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	4413      	add	r3, r2
 8001b44:	461a      	mov	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	e002      	b.n	8001b52 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d3c6      	bcc.n	8001aee <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6a:	330c      	adds	r3, #12
 8001b6c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	371c      	adds	r7, #28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_ETH_TransmitFrame+0x24>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e0cd      	b.n	8001d4c <HAL_ETH_TransmitFrame+0x1c0>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0b8      	b.n	8001d4c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	da09      	bge.n	8001bf8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2212      	movs	r2, #18
 8001be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0a9      	b.n	8001d4c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d915      	bls.n	8001c2e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	4a54      	ldr	r2, [pc, #336]	; (8001d58 <HAL_ETH_TransmitFrame+0x1cc>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	0a9b      	lsrs	r3, r3, #10
 8001c0c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	4b51      	ldr	r3, [pc, #324]	; (8001d58 <HAL_ETH_TransmitFrame+0x1cc>)
 8001c12:	fba3 1302 	umull	r1, r3, r3, r2
 8001c16:	0a9b      	lsrs	r3, r3, #10
 8001c18:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e001      	b.n	8001c32 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d11c      	bne.n	8001c72 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001c46:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001c52:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c62:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c70:	e04b      	b.n	8001d0a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	e044      	b.n	8001d02 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c86:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d107      	bne.n	8001c9e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c9c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ca6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d116      	bne.n	8001ce0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001cc0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <HAL_ETH_TransmitFrame+0x1d0>)
 8001cc6:	fb02 f203 	mul.w	r2, r2, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001cd2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001cde:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cee:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d3b6      	bcc.n	8001c78 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d12:	3314      	adds	r3, #20
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00d      	beq.n	8001d3a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d26:	3314      	adds	r3, #20
 8001d28:	2204      	movs	r2, #4
 8001d2a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d34:	3304      	adds	r3, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	371c      	adds	r7, #28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	ac02b00b 	.word	0xac02b00b
 8001d5c:	fffffa0c 	.word	0xfffffa0c

08001d60 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e074      	b.n	8001e64 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001d8a:	e05a      	b.n	8001e42 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da0:	d10d      	bne.n	8001dbe <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	461a      	mov	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
 8001dbc:	e041      	b.n	8001e42 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10b      	bne.n	8001de4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
 8001de2:	e02e      	b.n	8001e42 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d103      	bne.n	8001e06 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0c1b      	lsrs	r3, r3, #16
 8001e0e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e12:	1f1a      	subs	r2, r3, #4
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e010      	b.n	8001e64 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db02      	blt.n	8001e52 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d99c      	bls.n	8001d8c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e80:	3314      	adds	r3, #20
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e88:	2b40      	cmp	r3, #64	; 0x40
 8001e8a:	d112      	bne.n	8001eb2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f002 fb95 	bl	80045bc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9a:	3314      	adds	r3, #20
 8001e9c:	2240      	movs	r2, #64	; 0x40
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001eb0:	e01b      	b.n	8001eea <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eba:	3314      	adds	r3, #20
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d111      	bne.n	8001eea <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f839 	bl	8001f3e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed4:	3314      	adds	r3, #20
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef2:	3314      	adds	r3, #20
 8001ef4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ef8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f02:	3314      	adds	r3, #20
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0e:	d112      	bne.n	8001f36 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f81e 	bl	8001f52 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1e:	3314      	adds	r3, #20
 8001f20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f24:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b82      	cmp	r3, #130	; 0x82
 8001f86:	d101      	bne.n	8001f8c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e050      	b.n	800202e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2282      	movs	r2, #130	; 0x82
 8001f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 031c 	and.w	r3, r3, #28
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8a1b      	ldrh	r3, [r3, #16]
 8001fa8:	02db      	lsls	r3, r3, #11
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001fb2:	897b      	ldrh	r3, [r7, #10]
 8001fb4:	019b      	lsls	r3, r3, #6
 8001fb6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f023 0302 	bic.w	r3, r3, #2
 8001fc6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fd8:	f7ff fa02 	bl	80013e0 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fde:	e015      	b.n	800200c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001fe0:	f7ff f9fe 	bl	80013e0 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fee:	d309      	bcc.n	8002004 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e014      	b.n	800202e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1e4      	bne.n	8001fe0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	b29b      	uxth	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	460b      	mov	r3, r1
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b42      	cmp	r3, #66	; 0x42
 8002056:	d101      	bne.n	800205c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002058:	2302      	movs	r3, #2
 800205a:	e04e      	b.n	80020fa <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2242      	movs	r2, #66	; 0x42
 8002060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 031c 	and.w	r3, r3, #28
 8002072:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8a1b      	ldrh	r3, [r3, #16]
 8002078:	02db      	lsls	r3, r3, #11
 800207a:	b29b      	uxth	r3, r3
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002082:	897b      	ldrh	r3, [r7, #10]
 8002084:	019b      	lsls	r3, r3, #6
 8002086:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4313      	orrs	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f043 0302 	orr.w	r3, r3, #2
 8002096:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80020b2:	f7ff f995 	bl	80013e0 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020b8:	e015      	b.n	80020e6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80020ba:	f7ff f991 	bl	80013e0 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c8:	d309      	bcc.n	80020de <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e00d      	b.n	80020fa <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e4      	bne.n	80020ba <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_ETH_Start+0x16>
 8002114:	2302      	movs	r3, #2
 8002116:	e01f      	b.n	8002158 <HAL_ETH_Start+0x56>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fb45 	bl	80027b8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fb7c 	bl	800282c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fc13 	bl	8002960 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fbb0 	bl	80028a0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fbdd 	bl	8002900 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_ETH_Stop+0x16>
 8002172:	2302      	movs	r3, #2
 8002174:	e01f      	b.n	80021b6 <HAL_ETH_Stop+0x56>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fba2 	bl	80028d0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fbcf 	bl	8002930 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fb67 	bl	8002866 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fbe1 	bl	8002960 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fb27 	bl	80027f2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_ETH_ConfigMAC+0x1c>
 80021d8:	2302      	movs	r3, #2
 80021da:	e0e4      	b.n	80023a6 <HAL_ETH_ConfigMAC+0x1e6>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80b1 	beq.w	8002356 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4b6c      	ldr	r3, [pc, #432]	; (80023b0 <HAL_ETH_ConfigMAC+0x1f0>)
 8002200:	4013      	ands	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800220c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002212:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002218:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800221e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002224:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800222a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002230:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002236:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800223c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002242:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002248:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800224e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002266:	2001      	movs	r0, #1
 8002268:	f7ff f8c6 	bl	80013f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800227c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002282:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002288:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800228e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002294:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800229a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80022a6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80022a8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80022b2:	2001      	movs	r0, #1
 80022b4:	f7ff f8a0 	bl	80013f8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022c8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022d2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022e2:	4013      	ands	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80022f0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80022f6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80022fc:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002302:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002308:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002320:	2001      	movs	r0, #1
 8002322:	f7ff f869 	bl	80013f8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002346:	2001      	movs	r0, #1
 8002348:	f7ff f856 	bl	80013f8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	61da      	str	r2, [r3, #28]
 8002354:	e01e      	b.n	8002394 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002364:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002386:	2001      	movs	r0, #1
 8002388:	f7ff f836 	bl	80013f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	ff20810f 	.word	0xff20810f

080023b4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b0b0      	sub	sp, #192	; 0xc0
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023d0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80023da:	2300      	movs	r3, #0
 80023dc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80023e2:	2300      	movs	r3, #0
 80023e4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d103      	bne.n	8002402 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80023fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023fe:	663b      	str	r3, [r7, #96]	; 0x60
 8002400:	e001      	b.n	8002406 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002402:	2300      	movs	r3, #0
 8002404:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800240a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002410:	2300      	movs	r3, #0
 8002412:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002414:	2300      	movs	r3, #0
 8002416:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002420:	2340      	movs	r3, #64	; 0x40
 8002422:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800242a:	2300      	movs	r3, #0
 800242c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800245a:	2300      	movs	r3, #0
 800245c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002472:	2300      	movs	r3, #0
 8002474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002488:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800248c:	4bac      	ldr	r3, [pc, #688]	; (8002740 <ETH_MACDMAConfig+0x38c>)
 800248e:	4013      	ands	r3, r2
 8002490:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002494:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002498:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800249a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800249c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800249e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80024a0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80024a6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80024a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80024aa:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80024ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80024ae:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80024b4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80024b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80024b8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80024ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80024bc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80024be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80024c0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80024c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80024c4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80024c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80024c8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80024ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024dc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024e8:	2001      	movs	r0, #1
 80024ea:	f7fe ff85 	bl	80013f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024f6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80024fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024fc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80024fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002500:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002502:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002506:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002508:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800250c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800250e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002512:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002514:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002518:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800251c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002524:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002526:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002532:	2001      	movs	r0, #1
 8002534:	f7fe ff60 	bl	80013f8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002540:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800254a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002554:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002560:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002564:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002568:	4013      	ands	r3, r2
 800256a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800256e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002572:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002574:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002578:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800257a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800257e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002580:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002584:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800258a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800258c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002590:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002592:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025a4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f7fe ff21 	bl	80013f8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025be:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80025c0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80025c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025da:	2001      	movs	r0, #1
 80025dc:	f7fe ff0c 	bl	80013f8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025e8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80025ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80025f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025fc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80025fe:	2300      	movs	r3, #0
 8002600:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800260e:	2304      	movs	r3, #4
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800261c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800261e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800262e:	2300      	movs	r3, #0
 8002630:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002632:	2300      	movs	r3, #0
 8002634:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263e:	3318      	adds	r3, #24
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002646:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800264a:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <ETH_MACDMAConfig+0x390>)
 800264c:	4013      	ands	r3, r2
 800264e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002652:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002654:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002656:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002658:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800265a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800265c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800265e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002660:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002662:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002664:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002666:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002668:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800266a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800266e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002672:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002674:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002686:	3318      	adds	r3, #24
 8002688:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800268c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002696:	3318      	adds	r3, #24
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800269e:	2001      	movs	r0, #1
 80026a0:	f7fe feaa 	bl	80013f8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ac:	3318      	adds	r3, #24
 80026ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026b2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80026b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80026b8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80026ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80026bc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80026be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80026c0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80026c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80026c4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80026c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80026ca:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80026cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80026ce:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026dc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ec:	2001      	movs	r0, #1
 80026ee:	f7fe fe83 	bl	80013f8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026fe:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d10f      	bne.n	8002728 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002710:	331c      	adds	r3, #28
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800271c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002724:	331c      	adds	r3, #28
 8002726:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	461a      	mov	r2, r3
 800272e:	2100      	movs	r1, #0
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f809 	bl	8002748 <ETH_MACAddressConfig>
}
 8002736:	bf00      	nop
 8002738:	37c0      	adds	r7, #192	; 0xc0
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	ff20810f 	.word	0xff20810f
 8002744:	f8de3f23 	.word	0xf8de3f23

08002748 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3305      	adds	r3, #5
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	3204      	adds	r2, #4
 8002760:	7812      	ldrb	r2, [r2, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <ETH_MACAddressConfig+0x68>)
 800276a:	4413      	add	r3, r2
 800276c:	461a      	mov	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3303      	adds	r3, #3
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	061a      	lsls	r2, r3, #24
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3302      	adds	r3, #2
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	041b      	lsls	r3, r3, #16
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3301      	adds	r3, #1
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	4313      	orrs	r3, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	7812      	ldrb	r2, [r2, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <ETH_MACAddressConfig+0x6c>)
 800279a:	4413      	add	r3, r2
 800279c:	461a      	mov	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	6013      	str	r3, [r2, #0]
}
 80027a2:	bf00      	nop
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40028040 	.word	0x40028040
 80027b4:	40028044 	.word	0x40028044

080027b8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0208 	orr.w	r2, r2, #8
 80027d2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80027dc:	2001      	movs	r0, #1
 80027de:	f000 f8e9 	bl	80029b4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	601a      	str	r2, [r3, #0]
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0208 	bic.w	r2, r2, #8
 800280c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002816:	2001      	movs	r0, #1
 8002818:	f000 f8cc 	bl	80029b4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	601a      	str	r2, [r3, #0]
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0204 	orr.w	r2, r2, #4
 8002846:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002850:	2001      	movs	r0, #1
 8002852:	f000 f8af 	bl	80029b4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	601a      	str	r2, [r3, #0]
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0204 	bic.w	r2, r2, #4
 8002880:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800288a:	2001      	movs	r0, #1
 800288c:	f000 f892 	bl	80029b4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	601a      	str	r2, [r3, #0]
}
 8002898:	bf00      	nop
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b0:	3318      	adds	r3, #24
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c0:	3318      	adds	r3, #24
 80028c2:	601a      	str	r2, [r3, #0]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e0:	3318      	adds	r3, #24
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f0:	3318      	adds	r3, #24
 80028f2:	601a      	str	r2, [r3, #0]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002910:	3318      	adds	r3, #24
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0202 	orr.w	r2, r2, #2
 800291c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002920:	3318      	adds	r3, #24
 8002922:	601a      	str	r2, [r3, #0]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002940:	3318      	adds	r3, #24
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0202 	bic.w	r2, r2, #2
 800294c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002950:	3318      	adds	r3, #24
 8002952:	601a      	str	r2, [r3, #0]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002974:	3318      	adds	r3, #24
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002984:	3318      	adds	r3, #24
 8002986:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002990:	3318      	adds	r3, #24
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002996:	2001      	movs	r0, #1
 8002998:	f000 f80c 	bl	80029b4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a6:	3318      	adds	r3, #24
 80029a8:	601a      	str	r2, [r3, #0]
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <ETH_Delay+0x34>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <ETH_Delay+0x38>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0a5b      	lsrs	r3, r3, #9
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80029d0:	bf00      	nop
  } 
  while (Delay --);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1e5a      	subs	r2, r3, #1
 80029d6:	60fa      	str	r2, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f9      	bne.n	80029d0 <ETH_Delay+0x1c>
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	20000000 	.word	0x20000000
 80029ec:	10624dd3 	.word	0x10624dd3

080029f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	e177      	b.n	8002cfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	f040 8166 	bne.w	8002cf6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x4a>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b12      	cmp	r3, #18
 8002a38:	d123      	bne.n	8002a82 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	08da      	lsrs	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3208      	adds	r2, #8
 8002a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	220f      	movs	r2, #15
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	08da      	lsrs	r2, r3, #3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3208      	adds	r2, #8
 8002a7c:	69b9      	ldr	r1, [r7, #24]
 8002a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0203 	and.w	r2, r3, #3
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d00b      	beq.n	8002ad6 <HAL_GPIO_Init+0xe6>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d007      	beq.n	8002ad6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aca:	2b11      	cmp	r3, #17
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b12      	cmp	r3, #18
 8002ad4:	d130      	bne.n	8002b38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 0201 	and.w	r2, r3, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80c0 	beq.w	8002cf6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	4b65      	ldr	r3, [pc, #404]	; (8002d10 <HAL_GPIO_Init+0x320>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a64      	ldr	r2, [pc, #400]	; (8002d10 <HAL_GPIO_Init+0x320>)
 8002b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b62      	ldr	r3, [pc, #392]	; (8002d10 <HAL_GPIO_Init+0x320>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b92:	4a60      	ldr	r2, [pc, #384]	; (8002d14 <HAL_GPIO_Init+0x324>)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	220f      	movs	r2, #15
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a57      	ldr	r2, [pc, #348]	; (8002d18 <HAL_GPIO_Init+0x328>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d037      	beq.n	8002c2e <HAL_GPIO_Init+0x23e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a56      	ldr	r2, [pc, #344]	; (8002d1c <HAL_GPIO_Init+0x32c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d031      	beq.n	8002c2a <HAL_GPIO_Init+0x23a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a55      	ldr	r2, [pc, #340]	; (8002d20 <HAL_GPIO_Init+0x330>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d02b      	beq.n	8002c26 <HAL_GPIO_Init+0x236>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a54      	ldr	r2, [pc, #336]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d025      	beq.n	8002c22 <HAL_GPIO_Init+0x232>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a53      	ldr	r2, [pc, #332]	; (8002d28 <HAL_GPIO_Init+0x338>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d01f      	beq.n	8002c1e <HAL_GPIO_Init+0x22e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a52      	ldr	r2, [pc, #328]	; (8002d2c <HAL_GPIO_Init+0x33c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d019      	beq.n	8002c1a <HAL_GPIO_Init+0x22a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a51      	ldr	r2, [pc, #324]	; (8002d30 <HAL_GPIO_Init+0x340>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d013      	beq.n	8002c16 <HAL_GPIO_Init+0x226>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a50      	ldr	r2, [pc, #320]	; (8002d34 <HAL_GPIO_Init+0x344>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00d      	beq.n	8002c12 <HAL_GPIO_Init+0x222>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4f      	ldr	r2, [pc, #316]	; (8002d38 <HAL_GPIO_Init+0x348>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d007      	beq.n	8002c0e <HAL_GPIO_Init+0x21e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4e      	ldr	r2, [pc, #312]	; (8002d3c <HAL_GPIO_Init+0x34c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d101      	bne.n	8002c0a <HAL_GPIO_Init+0x21a>
 8002c06:	2309      	movs	r3, #9
 8002c08:	e012      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c0a:	230a      	movs	r3, #10
 8002c0c:	e010      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c0e:	2308      	movs	r3, #8
 8002c10:	e00e      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c12:	2307      	movs	r3, #7
 8002c14:	e00c      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c16:	2306      	movs	r3, #6
 8002c18:	e00a      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c1a:	2305      	movs	r3, #5
 8002c1c:	e008      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c1e:	2304      	movs	r3, #4
 8002c20:	e006      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c22:	2303      	movs	r3, #3
 8002c24:	e004      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e002      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <HAL_GPIO_Init+0x240>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	f002 0203 	and.w	r2, r2, #3
 8002c36:	0092      	lsls	r2, r2, #2
 8002c38:	4093      	lsls	r3, r2
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c40:	4934      	ldr	r1, [pc, #208]	; (8002d14 <HAL_GPIO_Init+0x324>)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	089b      	lsrs	r3, r3, #2
 8002c46:	3302      	adds	r3, #2
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c4e:	4b3c      	ldr	r3, [pc, #240]	; (8002d40 <HAL_GPIO_Init+0x350>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c72:	4a33      	ldr	r2, [pc, #204]	; (8002d40 <HAL_GPIO_Init+0x350>)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c78:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <HAL_GPIO_Init+0x350>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c9c:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <HAL_GPIO_Init+0x350>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca2:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_GPIO_Init+0x350>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cc6:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_GPIO_Init+0x350>)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <HAL_GPIO_Init+0x350>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf0:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <HAL_GPIO_Init+0x350>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b0f      	cmp	r3, #15
 8002d00:	f67f ae84 	bls.w	8002a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d04:	bf00      	nop
 8002d06:	3724      	adds	r7, #36	; 0x24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40013800 	.word	0x40013800
 8002d18:	40020000 	.word	0x40020000
 8002d1c:	40020400 	.word	0x40020400
 8002d20:	40020800 	.word	0x40020800
 8002d24:	40020c00 	.word	0x40020c00
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40021400 	.word	0x40021400
 8002d30:	40021800 	.word	0x40021800
 8002d34:	40021c00 	.word	0x40021c00
 8002d38:	40022000 	.word	0x40022000
 8002d3c:	40022400 	.word	0x40022400
 8002d40:	40013c00 	.word	0x40013c00

08002d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
 8002d50:	4613      	mov	r3, r2
 8002d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d54:	787b      	ldrb	r3, [r7, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d60:	e003      	b.n	8002d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	041a      	lsls	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	619a      	str	r2, [r3, #24]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_PWREx_EnableOverDrive+0x90>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	4a1f      	ldr	r2, [pc, #124]	; (8002e08 <HAL_PWREx_EnableOverDrive+0x90>)
 8002d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d90:	6413      	str	r3, [r2, #64]	; 0x40
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_PWREx_EnableOverDrive+0x90>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_PWREx_EnableOverDrive+0x94>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002da4:	f7fe fb1c 	bl	80013e0 <HAL_GetTick>
 8002da8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002daa:	e009      	b.n	8002dc0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dac:	f7fe fb18 	bl	80013e0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dba:	d901      	bls.n	8002dc0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e01f      	b.n	8002e00 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dc0:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dcc:	d1ee      	bne.n	8002dac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dd4:	f7fe fb04 	bl	80013e0 <HAL_GetTick>
 8002dd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002dda:	e009      	b.n	8002df0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ddc:	f7fe fb00 	bl	80013e0 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dea:	d901      	bls.n	8002df0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e007      	b.n	8002e00 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dfc:	d1ee      	bne.n	8002ddc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	420e0040 	.word	0x420e0040
 8002e10:	40007000 	.word	0x40007000
 8002e14:	420e0044 	.word	0x420e0044

08002e18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e22d      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d075      	beq.n	8002f22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e36:	4ba3      	ldr	r3, [pc, #652]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d00c      	beq.n	8002e5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e42:	4ba0      	ldr	r3, [pc, #640]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d112      	bne.n	8002e74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4e:	4b9d      	ldr	r3, [pc, #628]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5a:	d10b      	bne.n	8002e74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5c:	4b99      	ldr	r3, [pc, #612]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d05b      	beq.n	8002f20 <HAL_RCC_OscConfig+0x108>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d157      	bne.n	8002f20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e208      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e7c:	d106      	bne.n	8002e8c <HAL_RCC_OscConfig+0x74>
 8002e7e:	4b91      	ldr	r3, [pc, #580]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a90      	ldr	r2, [pc, #576]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e01d      	b.n	8002ec8 <HAL_RCC_OscConfig+0xb0>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x98>
 8002e96:	4b8b      	ldr	r3, [pc, #556]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a8a      	ldr	r2, [pc, #552]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4b88      	ldr	r3, [pc, #544]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a87      	ldr	r2, [pc, #540]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCC_OscConfig+0xb0>
 8002eb0:	4b84      	ldr	r3, [pc, #528]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a83      	ldr	r2, [pc, #524]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	4b81      	ldr	r3, [pc, #516]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a80      	ldr	r2, [pc, #512]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d013      	beq.n	8002ef8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fa86 	bl	80013e0 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed8:	f7fe fa82 	bl	80013e0 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	; 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e1cd      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	4b76      	ldr	r3, [pc, #472]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0xc0>
 8002ef6:	e014      	b.n	8002f22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fa72 	bl	80013e0 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f00:	f7fe fa6e 	bl	80013e0 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e1b9      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f12:	4b6c      	ldr	r3, [pc, #432]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0xe8>
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d063      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f2e:	4b65      	ldr	r3, [pc, #404]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3a:	4b62      	ldr	r3, [pc, #392]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d11c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f46:	4b5f      	ldr	r3, [pc, #380]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d116      	bne.n	8002f80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f52:	4b5c      	ldr	r3, [pc, #368]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_RCC_OscConfig+0x152>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e18d      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6a:	4b56      	ldr	r3, [pc, #344]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4952      	ldr	r1, [pc, #328]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7e:	e03a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f88:	4b4f      	ldr	r3, [pc, #316]	; (80030c8 <HAL_RCC_OscConfig+0x2b0>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fa27 	bl	80013e0 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f96:	f7fe fa23 	bl	80013e0 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e16e      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa8:	4b46      	ldr	r3, [pc, #280]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb4:	4b43      	ldr	r3, [pc, #268]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4940      	ldr	r1, [pc, #256]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]
 8002fc8:	e015      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fca:	4b3f      	ldr	r3, [pc, #252]	; (80030c8 <HAL_RCC_OscConfig+0x2b0>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fa06 	bl	80013e0 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd8:	f7fe fa02 	bl	80013e0 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e14d      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fea:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d030      	beq.n	8003064 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d016      	beq.n	8003038 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300a:	4b30      	ldr	r3, [pc, #192]	; (80030cc <HAL_RCC_OscConfig+0x2b4>)
 800300c:	2201      	movs	r2, #1
 800300e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003010:	f7fe f9e6 	bl	80013e0 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003018:	f7fe f9e2 	bl	80013e0 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e12d      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302a:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x200>
 8003036:	e015      	b.n	8003064 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003038:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_RCC_OscConfig+0x2b4>)
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303e:	f7fe f9cf 	bl	80013e0 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003046:	f7fe f9cb 	bl	80013e0 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e116      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003058:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 800305a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f0      	bne.n	8003046 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80a0 	beq.w	80031b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003076:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10f      	bne.n	80030a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	4a0e      	ldr	r2, [pc, #56]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003090:	6413      	str	r3, [r2, #64]	; 0x40
 8003092:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800309e:	2301      	movs	r3, #1
 80030a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_RCC_OscConfig+0x2b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d121      	bne.n	80030f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <HAL_RCC_OscConfig+0x2b8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a07      	ldr	r2, [pc, #28]	; (80030d0 <HAL_RCC_OscConfig+0x2b8>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ba:	f7fe f991 	bl	80013e0 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	e011      	b.n	80030e6 <HAL_RCC_OscConfig+0x2ce>
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
 80030c8:	42470000 	.word	0x42470000
 80030cc:	42470e80 	.word	0x42470e80
 80030d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d4:	f7fe f984 	bl	80013e0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0cf      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	4b6a      	ldr	r3, [pc, #424]	; (8003290 <HAL_RCC_OscConfig+0x478>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d106      	bne.n	8003108 <HAL_RCC_OscConfig+0x2f0>
 80030fa:	4b66      	ldr	r3, [pc, #408]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	4a65      	ldr	r2, [pc, #404]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6713      	str	r3, [r2, #112]	; 0x70
 8003106:	e01c      	b.n	8003142 <HAL_RCC_OscConfig+0x32a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b05      	cmp	r3, #5
 800310e:	d10c      	bne.n	800312a <HAL_RCC_OscConfig+0x312>
 8003110:	4b60      	ldr	r3, [pc, #384]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a5f      	ldr	r2, [pc, #380]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
 800311c:	4b5d      	ldr	r3, [pc, #372]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	4a5c      	ldr	r2, [pc, #368]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6713      	str	r3, [r2, #112]	; 0x70
 8003128:	e00b      	b.n	8003142 <HAL_RCC_OscConfig+0x32a>
 800312a:	4b5a      	ldr	r3, [pc, #360]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	4a59      	ldr	r2, [pc, #356]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
 8003136:	4b57      	ldr	r3, [pc, #348]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	4a56      	ldr	r2, [pc, #344]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d015      	beq.n	8003176 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314a:	f7fe f949 	bl	80013e0 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003150:	e00a      	b.n	8003168 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fe f945 	bl	80013e0 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e08e      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003168:	4b4a      	ldr	r3, [pc, #296]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ee      	beq.n	8003152 <HAL_RCC_OscConfig+0x33a>
 8003174:	e014      	b.n	80031a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7fe f933 	bl	80013e0 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe f92f 	bl	80013e0 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e078      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003194:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ee      	bne.n	800317e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d105      	bne.n	80031b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a6:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a3a      	ldr	r2, [pc, #232]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 80031ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d064      	beq.n	8003284 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ba:	4b36      	ldr	r3, [pc, #216]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d05c      	beq.n	8003280 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d141      	bne.n	8003252 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ce:	4b32      	ldr	r3, [pc, #200]	; (8003298 <HAL_RCC_OscConfig+0x480>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fe f904 	bl	80013e0 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe f900 	bl	80013e0 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e04b      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ee:	4b29      	ldr	r3, [pc, #164]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	019b      	lsls	r3, r3, #6
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	3b01      	subs	r3, #1
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	491d      	ldr	r1, [pc, #116]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003224:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <HAL_RCC_OscConfig+0x480>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe f8d9 	bl	80013e0 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003232:	f7fe f8d5 	bl	80013e0 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e020      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003244:	4b13      	ldr	r3, [pc, #76]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x41a>
 8003250:	e018      	b.n	8003284 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_RCC_OscConfig+0x480>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe f8c2 	bl	80013e0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003260:	f7fe f8be 	bl	80013e0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e009      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_RCC_OscConfig+0x47c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x448>
 800327e:	e001      	b.n	8003284 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40007000 	.word	0x40007000
 8003294:	40023800 	.word	0x40023800
 8003298:	42470060 	.word	0x42470060

0800329c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0ca      	b.n	8003446 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b0:	4b67      	ldr	r3, [pc, #412]	; (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d90c      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b64      	ldr	r3, [pc, #400]	; (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b62      	ldr	r3, [pc, #392]	; (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0b6      	b.n	8003446 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d020      	beq.n	8003326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f0:	4b58      	ldr	r3, [pc, #352]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a57      	ldr	r2, [pc, #348]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80032f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003308:	4b52      	ldr	r3, [pc, #328]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a51      	ldr	r2, [pc, #324]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 800330e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003314:	4b4f      	ldr	r3, [pc, #316]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	494c      	ldr	r1, [pc, #304]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d044      	beq.n	80033bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d107      	bne.n	800334a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333a:	4b46      	ldr	r3, [pc, #280]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d119      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e07d      	b.n	8003446 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d003      	beq.n	800335a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003356:	2b03      	cmp	r3, #3
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335a:	4b3e      	ldr	r3, [pc, #248]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e06d      	b.n	8003446 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336a:	4b3a      	ldr	r3, [pc, #232]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e065      	b.n	8003446 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800337a:	4b36      	ldr	r3, [pc, #216]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f023 0203 	bic.w	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4933      	ldr	r1, [pc, #204]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	4313      	orrs	r3, r2
 800338a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800338c:	f7fe f828 	bl	80013e0 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	e00a      	b.n	80033aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003394:	f7fe f824 	bl	80013e0 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e04d      	b.n	8003446 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 020c 	and.w	r2, r3, #12
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d1eb      	bne.n	8003394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033bc:	4b24      	ldr	r3, [pc, #144]	; (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d20c      	bcs.n	80033e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b21      	ldr	r3, [pc, #132]	; (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e030      	b.n	8003446 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f0:	4b18      	ldr	r3, [pc, #96]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4915      	ldr	r1, [pc, #84]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	490d      	ldr	r1, [pc, #52]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003422:	f000 f81d 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8003426:	4601      	mov	r1, r0
 8003428:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	4a09      	ldr	r2, [pc, #36]	; (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	5cd3      	ldrb	r3, [r2, r3]
 8003436:	fa21 f303 	lsr.w	r3, r1, r3
 800343a:	4a08      	ldr	r2, [pc, #32]	; (800345c <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800343e:	200f      	movs	r0, #15
 8003440:	f7fd ff8a 	bl	8001358 <HAL_InitTick>

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023c00 	.word	0x40023c00
 8003454:	40023800 	.word	0x40023800
 8003458:	0801a124 	.word	0x0801a124
 800345c:	20000000 	.word	0x20000000

08003460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	2300      	movs	r3, #0
 8003470:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003476:	4b63      	ldr	r3, [pc, #396]	; (8003604 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b04      	cmp	r3, #4
 8003480:	d007      	beq.n	8003492 <HAL_RCC_GetSysClockFreq+0x32>
 8003482:	2b08      	cmp	r3, #8
 8003484:	d008      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x38>
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 80b4 	bne.w	80035f4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800348c:	4b5e      	ldr	r3, [pc, #376]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800348e:	60bb      	str	r3, [r7, #8]
       break;
 8003490:	e0b3      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003492:	4b5e      	ldr	r3, [pc, #376]	; (800360c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003494:	60bb      	str	r3, [r7, #8]
      break;
 8003496:	e0b0      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003498:	4b5a      	ldr	r3, [pc, #360]	; (8003604 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034a2:	4b58      	ldr	r3, [pc, #352]	; (8003604 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d04a      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ae:	4b55      	ldr	r3, [pc, #340]	; (8003604 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	099b      	lsrs	r3, r3, #6
 80034b4:	f04f 0400 	mov.w	r4, #0
 80034b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	ea03 0501 	and.w	r5, r3, r1
 80034c4:	ea04 0602 	and.w	r6, r4, r2
 80034c8:	4629      	mov	r1, r5
 80034ca:	4632      	mov	r2, r6
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	f04f 0400 	mov.w	r4, #0
 80034d4:	0154      	lsls	r4, r2, #5
 80034d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034da:	014b      	lsls	r3, r1, #5
 80034dc:	4619      	mov	r1, r3
 80034de:	4622      	mov	r2, r4
 80034e0:	1b49      	subs	r1, r1, r5
 80034e2:	eb62 0206 	sbc.w	r2, r2, r6
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	f04f 0400 	mov.w	r4, #0
 80034ee:	0194      	lsls	r4, r2, #6
 80034f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034f4:	018b      	lsls	r3, r1, #6
 80034f6:	1a5b      	subs	r3, r3, r1
 80034f8:	eb64 0402 	sbc.w	r4, r4, r2
 80034fc:	f04f 0100 	mov.w	r1, #0
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	00e2      	lsls	r2, r4, #3
 8003506:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800350a:	00d9      	lsls	r1, r3, #3
 800350c:	460b      	mov	r3, r1
 800350e:	4614      	mov	r4, r2
 8003510:	195b      	adds	r3, r3, r5
 8003512:	eb44 0406 	adc.w	r4, r4, r6
 8003516:	f04f 0100 	mov.w	r1, #0
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	0262      	lsls	r2, r4, #9
 8003520:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003524:	0259      	lsls	r1, r3, #9
 8003526:	460b      	mov	r3, r1
 8003528:	4614      	mov	r4, r2
 800352a:	4618      	mov	r0, r3
 800352c:	4621      	mov	r1, r4
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f04f 0400 	mov.w	r4, #0
 8003534:	461a      	mov	r2, r3
 8003536:	4623      	mov	r3, r4
 8003538:	f7fc feb2 	bl	80002a0 <__aeabi_uldivmod>
 800353c:	4603      	mov	r3, r0
 800353e:	460c      	mov	r4, r1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e049      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003544:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	099b      	lsrs	r3, r3, #6
 800354a:	f04f 0400 	mov.w	r4, #0
 800354e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	ea03 0501 	and.w	r5, r3, r1
 800355a:	ea04 0602 	and.w	r6, r4, r2
 800355e:	4629      	mov	r1, r5
 8003560:	4632      	mov	r2, r6
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	f04f 0400 	mov.w	r4, #0
 800356a:	0154      	lsls	r4, r2, #5
 800356c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003570:	014b      	lsls	r3, r1, #5
 8003572:	4619      	mov	r1, r3
 8003574:	4622      	mov	r2, r4
 8003576:	1b49      	subs	r1, r1, r5
 8003578:	eb62 0206 	sbc.w	r2, r2, r6
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	f04f 0400 	mov.w	r4, #0
 8003584:	0194      	lsls	r4, r2, #6
 8003586:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800358a:	018b      	lsls	r3, r1, #6
 800358c:	1a5b      	subs	r3, r3, r1
 800358e:	eb64 0402 	sbc.w	r4, r4, r2
 8003592:	f04f 0100 	mov.w	r1, #0
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	00e2      	lsls	r2, r4, #3
 800359c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035a0:	00d9      	lsls	r1, r3, #3
 80035a2:	460b      	mov	r3, r1
 80035a4:	4614      	mov	r4, r2
 80035a6:	195b      	adds	r3, r3, r5
 80035a8:	eb44 0406 	adc.w	r4, r4, r6
 80035ac:	f04f 0100 	mov.w	r1, #0
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	02a2      	lsls	r2, r4, #10
 80035b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80035ba:	0299      	lsls	r1, r3, #10
 80035bc:	460b      	mov	r3, r1
 80035be:	4614      	mov	r4, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	4621      	mov	r1, r4
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f04f 0400 	mov.w	r4, #0
 80035ca:	461a      	mov	r2, r3
 80035cc:	4623      	mov	r3, r4
 80035ce:	f7fc fe67 	bl	80002a0 <__aeabi_uldivmod>
 80035d2:	4603      	mov	r3, r0
 80035d4:	460c      	mov	r4, r1
 80035d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035d8:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	3301      	adds	r3, #1
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	60bb      	str	r3, [r7, #8]
      break;
 80035f2:	e002      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035f6:	60bb      	str	r3, [r7, #8]
      break;
 80035f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fa:	68bb      	ldr	r3, [r7, #8]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	00f42400 	.word	0x00f42400
 800360c:	007a1200 	.word	0x007a1200

08003610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003614:	4b03      	ldr	r3, [pc, #12]	; (8003624 <HAL_RCC_GetHCLKFreq+0x14>)
 8003616:	681b      	ldr	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20000000 	.word	0x20000000

08003628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800362c:	f7ff fff0 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 8003630:	4601      	mov	r1, r0
 8003632:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	0a9b      	lsrs	r3, r3, #10
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	4a03      	ldr	r2, [pc, #12]	; (800364c <HAL_RCC_GetPCLK1Freq+0x24>)
 800363e:	5cd3      	ldrb	r3, [r2, r3]
 8003640:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003644:	4618      	mov	r0, r3
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40023800 	.word	0x40023800
 800364c:	0801a134 	.word	0x0801a134

08003650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003654:	f7ff ffdc 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 8003658:	4601      	mov	r1, r0
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	0b5b      	lsrs	r3, r3, #13
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4a03      	ldr	r2, [pc, #12]	; (8003674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003666:	5cd3      	ldrb	r3, [r2, r3]
 8003668:	fa21 f303 	lsr.w	r3, r1, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40023800 	.word	0x40023800
 8003674:	0801a134 	.word	0x0801a134

08003678 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e03f      	b.n	800370a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fd fd44 	bl	800112c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2224      	movs	r2, #36	; 0x24
 80036a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fb47 	bl	8003d50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b088      	sub	sp, #32
 8003716:	af02      	add	r7, sp, #8
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	4613      	mov	r3, r2
 8003720:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b20      	cmp	r3, #32
 8003730:	f040 8083 	bne.w	800383a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_UART_Transmit+0x2e>
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e07b      	b.n	800383c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_UART_Transmit+0x40>
 800374e:	2302      	movs	r3, #2
 8003750:	e074      	b.n	800383c <HAL_UART_Transmit+0x12a>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2221      	movs	r2, #33	; 0x21
 8003764:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003768:	f7fd fe3a 	bl	80013e0 <HAL_GetTick>
 800376c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	88fa      	ldrh	r2, [r7, #6]
 8003772:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800377a:	e042      	b.n	8003802 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003792:	d122      	bne.n	80037da <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2200      	movs	r2, #0
 800379c:	2180      	movs	r1, #128	; 0x80
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f96a 	bl	8003a78 <UART_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e046      	b.n	800383c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3302      	adds	r3, #2
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	e017      	b.n	8003802 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	3301      	adds	r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	e013      	b.n	8003802 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	2180      	movs	r1, #128	; 0x80
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f947 	bl	8003a78 <UART_WaitOnFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e023      	b.n	800383c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	60ba      	str	r2, [r7, #8]
 80037fa:	781a      	ldrb	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1b7      	bne.n	800377c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2200      	movs	r2, #0
 8003814:	2140      	movs	r1, #64	; 0x40
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f92e 	bl	8003a78 <UART_WaitOnFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e00a      	b.n	800383c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003864:	2300      	movs	r3, #0
 8003866:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10d      	bne.n	8003896 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_UART_IRQHandler+0x52>
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f9dc 	bl	8003c4c <UART_Receive_IT>
      return;
 8003894:	e0cc      	b.n	8003a30 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80ab 	beq.w	80039f4 <HAL_UART_IRQHandler+0x1b0>
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d105      	bne.n	80038b4 <HAL_UART_IRQHandler+0x70>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80a0 	beq.w	80039f4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_UART_IRQHandler+0x90>
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038cc:	f043 0201 	orr.w	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_UART_IRQHandler+0xb0>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	f043 0202 	orr.w	r2, r3, #2
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_UART_IRQHandler+0xd0>
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	f043 0204 	orr.w	r2, r3, #4
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_UART_IRQHandler+0xf0>
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	f043 0208 	orr.w	r2, r3, #8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d078      	beq.n	8003a2e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <HAL_UART_IRQHandler+0x112>
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f97b 	bl	8003c4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <HAL_UART_IRQHandler+0x13a>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d031      	beq.n	80039e2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8c4 	bl	8003b0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d123      	bne.n	80039da <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d013      	beq.n	80039d2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ae:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <HAL_UART_IRQHandler+0x1f4>)
 80039b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd fe51 	bl	800165e <HAL_DMA_Abort_IT>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d016      	beq.n	80039f0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039cc:	4610      	mov	r0, r2
 80039ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	e00e      	b.n	80039f0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f846 	bl	8003a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d8:	e00a      	b.n	80039f0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f842 	bl	8003a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e0:	e006      	b.n	80039f0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f83e 	bl	8003a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80039ee:	e01e      	b.n	8003a2e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	bf00      	nop
    return;
 80039f2:	e01c      	b.n	8003a2e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d008      	beq.n	8003a10 <HAL_UART_IRQHandler+0x1cc>
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f8b1 	bl	8003b70 <UART_Transmit_IT>
    return;
 8003a0e:	e00f      	b.n	8003a30 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_UART_IRQHandler+0x1ec>
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f8f9 	bl	8003c1c <UART_EndTransmit_IT>
    return;
 8003a2a:	bf00      	nop
 8003a2c:	e000      	b.n	8003a30 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003a2e:	bf00      	nop
  }
}
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	08003b49 	.word	0x08003b49

08003a3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	4613      	mov	r3, r2
 8003a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a88:	e02c      	b.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a90:	d028      	beq.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a98:	f7fd fca2 	bl	80013e0 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d21d      	bcs.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ab6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e00f      	b.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4013      	ands	r3, r2
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d0c3      	beq.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b22:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0201 	bic.w	r2, r2, #1
 8003b32:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7ff ff7e 	bl	8003a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b21      	cmp	r3, #33	; 0x21
 8003b82:	d144      	bne.n	8003c0e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8c:	d11a      	bne.n	8003bc4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d105      	bne.n	8003bb8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	1c9a      	adds	r2, r3, #2
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	621a      	str	r2, [r3, #32]
 8003bb6:	e00e      	b.n	8003bd6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	621a      	str	r2, [r3, #32]
 8003bc2:	e008      	b.n	8003bd6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	1c59      	adds	r1, r3, #1
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6211      	str	r1, [r2, #32]
 8003bce:	781a      	ldrb	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4619      	mov	r1, r3
 8003be4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bf8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e000      	b.n	8003c10 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
  }
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff fefd 	bl	8003a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b22      	cmp	r3, #34	; 0x22
 8003c5e:	d171      	bne.n	8003d44 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c68:	d123      	bne.n	8003cb2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10e      	bne.n	8003c96 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	1c9a      	adds	r2, r3, #2
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28
 8003c94:	e029      	b.n	8003cea <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb0:	e01b      	b.n	8003cea <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6858      	ldr	r0, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	1c59      	adds	r1, r3, #1
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6291      	str	r1, [r2, #40]	; 0x28
 8003cca:	b2c2      	uxtb	r2, r0
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	e00c      	b.n	8003cea <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	1c58      	adds	r0, r3, #1
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	6288      	str	r0, [r1, #40]	; 0x28
 8003ce2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d120      	bne.n	8003d40 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0220 	bic.w	r2, r2, #32
 8003d0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff fe8a 	bl	8003a50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e002      	b.n	8003d46 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	e000      	b.n	8003d46 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d50:	b5b0      	push	{r4, r5, r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d90:	f023 030c 	bic.w	r3, r3, #12
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	68f9      	ldr	r1, [r7, #12]
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699a      	ldr	r2, [r3, #24]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbc:	f040 80e4 	bne.w	8003f88 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4aab      	ldr	r2, [pc, #684]	; (8004074 <UART_SetConfig+0x324>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d004      	beq.n	8003dd4 <UART_SetConfig+0x84>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4aaa      	ldr	r2, [pc, #680]	; (8004078 <UART_SetConfig+0x328>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d16c      	bne.n	8003eae <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003dd4:	f7ff fc3c 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4613      	mov	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	009a      	lsls	r2, r3, #2
 8003de2:	441a      	add	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dee:	4aa3      	ldr	r2, [pc, #652]	; (800407c <UART_SetConfig+0x32c>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	011c      	lsls	r4, r3, #4
 8003df8:	f7ff fc2a 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	009a      	lsls	r2, r3, #2
 8003e06:	441a      	add	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003e12:	f7ff fc1d 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8003e16:	4602      	mov	r2, r0
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009a      	lsls	r2, r3, #2
 8003e20:	441a      	add	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	4a93      	ldr	r2, [pc, #588]	; (800407c <UART_SetConfig+0x32c>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2264      	movs	r2, #100	; 0x64
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	1aeb      	subs	r3, r5, r3
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	3332      	adds	r3, #50	; 0x32
 8003e40:	4a8e      	ldr	r2, [pc, #568]	; (800407c <UART_SetConfig+0x32c>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e4e:	441c      	add	r4, r3
 8003e50:	f7ff fbfe 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009a      	lsls	r2, r3, #2
 8003e5e:	441a      	add	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	fbb2 f5f3 	udiv	r5, r2, r3
 8003e6a:	f7ff fbf1 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	009a      	lsls	r2, r3, #2
 8003e78:	441a      	add	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	4a7d      	ldr	r2, [pc, #500]	; (800407c <UART_SetConfig+0x32c>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	2264      	movs	r2, #100	; 0x64
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	1aeb      	subs	r3, r5, r3
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	3332      	adds	r3, #50	; 0x32
 8003e98:	4a78      	ldr	r2, [pc, #480]	; (800407c <UART_SetConfig+0x32c>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	f003 0207 	and.w	r2, r3, #7
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4422      	add	r2, r4
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	e154      	b.n	8004158 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003eae:	f7ff fbbb 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009a      	lsls	r2, r3, #2
 8003ebc:	441a      	add	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	4a6c      	ldr	r2, [pc, #432]	; (800407c <UART_SetConfig+0x32c>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	011c      	lsls	r4, r3, #4
 8003ed2:	f7ff fba9 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009a      	lsls	r2, r3, #2
 8003ee0:	441a      	add	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fbb2 f5f3 	udiv	r5, r2, r3
 8003eec:	f7ff fb9c 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009a      	lsls	r2, r3, #2
 8003efa:	441a      	add	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f06:	4a5d      	ldr	r2, [pc, #372]	; (800407c <UART_SetConfig+0x32c>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	2264      	movs	r2, #100	; 0x64
 8003f10:	fb02 f303 	mul.w	r3, r2, r3
 8003f14:	1aeb      	subs	r3, r5, r3
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	3332      	adds	r3, #50	; 0x32
 8003f1a:	4a58      	ldr	r2, [pc, #352]	; (800407c <UART_SetConfig+0x32c>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f28:	441c      	add	r4, r3
 8003f2a:	f7ff fb7d 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	009a      	lsls	r2, r3, #2
 8003f38:	441a      	add	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f44:	f7ff fb70 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	009a      	lsls	r2, r3, #2
 8003f52:	441a      	add	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5e:	4a47      	ldr	r2, [pc, #284]	; (800407c <UART_SetConfig+0x32c>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	2264      	movs	r2, #100	; 0x64
 8003f68:	fb02 f303 	mul.w	r3, r2, r3
 8003f6c:	1aeb      	subs	r3, r5, r3
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	3332      	adds	r3, #50	; 0x32
 8003f72:	4a42      	ldr	r2, [pc, #264]	; (800407c <UART_SetConfig+0x32c>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	f003 0207 	and.w	r2, r3, #7
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4422      	add	r2, r4
 8003f84:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003f86:	e0e7      	b.n	8004158 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a39      	ldr	r2, [pc, #228]	; (8004074 <UART_SetConfig+0x324>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d004      	beq.n	8003f9c <UART_SetConfig+0x24c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a38      	ldr	r2, [pc, #224]	; (8004078 <UART_SetConfig+0x328>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d171      	bne.n	8004080 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f9c:	f7ff fb58 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009a      	lsls	r2, r3, #2
 8003faa:	441a      	add	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	4a31      	ldr	r2, [pc, #196]	; (800407c <UART_SetConfig+0x32c>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	011c      	lsls	r4, r3, #4
 8003fc0:	f7ff fb46 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	009a      	lsls	r2, r3, #2
 8003fce:	441a      	add	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	fbb2 f5f3 	udiv	r5, r2, r3
 8003fda:	f7ff fb39 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009a      	lsls	r2, r3, #2
 8003fe8:	441a      	add	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff4:	4a21      	ldr	r2, [pc, #132]	; (800407c <UART_SetConfig+0x32c>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	2264      	movs	r2, #100	; 0x64
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	1aeb      	subs	r3, r5, r3
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	3332      	adds	r3, #50	; 0x32
 8004008:	4a1c      	ldr	r2, [pc, #112]	; (800407c <UART_SetConfig+0x32c>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004014:	441c      	add	r4, r3
 8004016:	f7ff fb1b 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 800401a:	4602      	mov	r2, r0
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	009a      	lsls	r2, r3, #2
 8004024:	441a      	add	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004030:	f7ff fb0e 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8004034:	4602      	mov	r2, r0
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	009a      	lsls	r2, r3, #2
 800403e:	441a      	add	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	4a0c      	ldr	r2, [pc, #48]	; (800407c <UART_SetConfig+0x32c>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	2264      	movs	r2, #100	; 0x64
 8004054:	fb02 f303 	mul.w	r3, r2, r3
 8004058:	1aeb      	subs	r3, r5, r3
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	3332      	adds	r3, #50	; 0x32
 800405e:	4a07      	ldr	r2, [pc, #28]	; (800407c <UART_SetConfig+0x32c>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	f003 020f 	and.w	r2, r3, #15
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4422      	add	r2, r4
 8004070:	609a      	str	r2, [r3, #8]
 8004072:	e071      	b.n	8004158 <UART_SetConfig+0x408>
 8004074:	40011000 	.word	0x40011000
 8004078:	40011400 	.word	0x40011400
 800407c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004080:	f7ff fad2 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8004084:	4602      	mov	r2, r0
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009a      	lsls	r2, r3, #2
 800408e:	441a      	add	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	fbb2 f3f3 	udiv	r3, r2, r3
 800409a:	4a31      	ldr	r2, [pc, #196]	; (8004160 <UART_SetConfig+0x410>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	011c      	lsls	r4, r3, #4
 80040a4:	f7ff fac0 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 80040a8:	4602      	mov	r2, r0
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	009a      	lsls	r2, r3, #2
 80040b2:	441a      	add	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80040be:	f7ff fab3 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 80040c2:	4602      	mov	r2, r0
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009a      	lsls	r2, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	4a21      	ldr	r2, [pc, #132]	; (8004160 <UART_SetConfig+0x410>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2264      	movs	r2, #100	; 0x64
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	1aeb      	subs	r3, r5, r3
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	3332      	adds	r3, #50	; 0x32
 80040ec:	4a1c      	ldr	r2, [pc, #112]	; (8004160 <UART_SetConfig+0x410>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f8:	441c      	add	r4, r3
 80040fa:	f7ff fa95 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 80040fe:	4602      	mov	r2, r0
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009a      	lsls	r2, r3, #2
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	fbb2 f5f3 	udiv	r5, r2, r3
 8004114:	f7ff fa88 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8004118:	4602      	mov	r2, r0
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	009a      	lsls	r2, r3, #2
 8004122:	441a      	add	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	4a0c      	ldr	r2, [pc, #48]	; (8004160 <UART_SetConfig+0x410>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	2264      	movs	r2, #100	; 0x64
 8004138:	fb02 f303 	mul.w	r3, r2, r3
 800413c:	1aeb      	subs	r3, r5, r3
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	3332      	adds	r3, #50	; 0x32
 8004142:	4a07      	ldr	r2, [pc, #28]	; (8004160 <UART_SetConfig+0x410>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	f003 020f 	and.w	r2, r3, #15
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4422      	add	r2, r4
 8004154:	609a      	str	r2, [r3, #8]
}
 8004156:	e7ff      	b.n	8004158 <UART_SetConfig+0x408>
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bdb0      	pop	{r4, r5, r7, pc}
 8004160:	51eb851f 	.word	0x51eb851f

08004164 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004164:	b5b0      	push	{r4, r5, r7, lr}
 8004166:	b08e      	sub	sp, #56	; 0x38
 8004168:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800416a:	4ba0      	ldr	r3, [pc, #640]	; (80043ec <MX_LWIP_Init+0x288>)
 800416c:	22c0      	movs	r2, #192	; 0xc0
 800416e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004170:	4b9e      	ldr	r3, [pc, #632]	; (80043ec <MX_LWIP_Init+0x288>)
 8004172:	22a8      	movs	r2, #168	; 0xa8
 8004174:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004176:	4b9d      	ldr	r3, [pc, #628]	; (80043ec <MX_LWIP_Init+0x288>)
 8004178:	2201      	movs	r2, #1
 800417a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 800417c:	4b9b      	ldr	r3, [pc, #620]	; (80043ec <MX_LWIP_Init+0x288>)
 800417e:	227b      	movs	r2, #123	; 0x7b
 8004180:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004182:	4b9b      	ldr	r3, [pc, #620]	; (80043f0 <MX_LWIP_Init+0x28c>)
 8004184:	22ff      	movs	r2, #255	; 0xff
 8004186:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004188:	4b99      	ldr	r3, [pc, #612]	; (80043f0 <MX_LWIP_Init+0x28c>)
 800418a:	22ff      	movs	r2, #255	; 0xff
 800418c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800418e:	4b98      	ldr	r3, [pc, #608]	; (80043f0 <MX_LWIP_Init+0x28c>)
 8004190:	22ff      	movs	r2, #255	; 0xff
 8004192:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004194:	4b96      	ldr	r3, [pc, #600]	; (80043f0 <MX_LWIP_Init+0x28c>)
 8004196:	2200      	movs	r2, #0
 8004198:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800419a:	4b96      	ldr	r3, [pc, #600]	; (80043f4 <MX_LWIP_Init+0x290>)
 800419c:	22c0      	movs	r2, #192	; 0xc0
 800419e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80041a0:	4b94      	ldr	r3, [pc, #592]	; (80043f4 <MX_LWIP_Init+0x290>)
 80041a2:	22a8      	movs	r2, #168	; 0xa8
 80041a4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80041a6:	4b93      	ldr	r3, [pc, #588]	; (80043f4 <MX_LWIP_Init+0x290>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80041ac:	4b91      	ldr	r3, [pc, #580]	; (80043f4 <MX_LWIP_Init+0x290>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80041b2:	2100      	movs	r1, #0
 80041b4:	2000      	movs	r0, #0
 80041b6:	f007 ffd5 	bl	800c164 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80041ba:	4b8c      	ldr	r3, [pc, #560]	; (80043ec <MX_LWIP_Init+0x288>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	061a      	lsls	r2, r3, #24
 80041c0:	4b8a      	ldr	r3, [pc, #552]	; (80043ec <MX_LWIP_Init+0x288>)
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	431a      	orrs	r2, r3
 80041c8:	4b88      	ldr	r3, [pc, #544]	; (80043ec <MX_LWIP_Init+0x288>)
 80041ca:	789b      	ldrb	r3, [r3, #2]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	4313      	orrs	r3, r2
 80041d0:	4a86      	ldr	r2, [pc, #536]	; (80043ec <MX_LWIP_Init+0x288>)
 80041d2:	78d2      	ldrb	r2, [r2, #3]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	061a      	lsls	r2, r3, #24
 80041d8:	4b84      	ldr	r3, [pc, #528]	; (80043ec <MX_LWIP_Init+0x288>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	0619      	lsls	r1, r3, #24
 80041de:	4b83      	ldr	r3, [pc, #524]	; (80043ec <MX_LWIP_Init+0x288>)
 80041e0:	785b      	ldrb	r3, [r3, #1]
 80041e2:	041b      	lsls	r3, r3, #16
 80041e4:	4319      	orrs	r1, r3
 80041e6:	4b81      	ldr	r3, [pc, #516]	; (80043ec <MX_LWIP_Init+0x288>)
 80041e8:	789b      	ldrb	r3, [r3, #2]
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	430b      	orrs	r3, r1
 80041ee:	497f      	ldr	r1, [pc, #508]	; (80043ec <MX_LWIP_Init+0x288>)
 80041f0:	78c9      	ldrb	r1, [r1, #3]
 80041f2:	430b      	orrs	r3, r1
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041fa:	431a      	orrs	r2, r3
 80041fc:	4b7b      	ldr	r3, [pc, #492]	; (80043ec <MX_LWIP_Init+0x288>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	0619      	lsls	r1, r3, #24
 8004202:	4b7a      	ldr	r3, [pc, #488]	; (80043ec <MX_LWIP_Init+0x288>)
 8004204:	785b      	ldrb	r3, [r3, #1]
 8004206:	041b      	lsls	r3, r3, #16
 8004208:	4319      	orrs	r1, r3
 800420a:	4b78      	ldr	r3, [pc, #480]	; (80043ec <MX_LWIP_Init+0x288>)
 800420c:	789b      	ldrb	r3, [r3, #2]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	430b      	orrs	r3, r1
 8004212:	4976      	ldr	r1, [pc, #472]	; (80043ec <MX_LWIP_Init+0x288>)
 8004214:	78c9      	ldrb	r1, [r1, #3]
 8004216:	430b      	orrs	r3, r1
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800421e:	431a      	orrs	r2, r3
 8004220:	4b72      	ldr	r3, [pc, #456]	; (80043ec <MX_LWIP_Init+0x288>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	0619      	lsls	r1, r3, #24
 8004226:	4b71      	ldr	r3, [pc, #452]	; (80043ec <MX_LWIP_Init+0x288>)
 8004228:	785b      	ldrb	r3, [r3, #1]
 800422a:	041b      	lsls	r3, r3, #16
 800422c:	4319      	orrs	r1, r3
 800422e:	4b6f      	ldr	r3, [pc, #444]	; (80043ec <MX_LWIP_Init+0x288>)
 8004230:	789b      	ldrb	r3, [r3, #2]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	430b      	orrs	r3, r1
 8004236:	496d      	ldr	r1, [pc, #436]	; (80043ec <MX_LWIP_Init+0x288>)
 8004238:	78c9      	ldrb	r1, [r1, #3]
 800423a:	430b      	orrs	r3, r1
 800423c:	0e1b      	lsrs	r3, r3, #24
 800423e:	4313      	orrs	r3, r2
 8004240:	4a6d      	ldr	r2, [pc, #436]	; (80043f8 <MX_LWIP_Init+0x294>)
 8004242:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004244:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <MX_LWIP_Init+0x28c>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	061a      	lsls	r2, r3, #24
 800424a:	4b69      	ldr	r3, [pc, #420]	; (80043f0 <MX_LWIP_Init+0x28c>)
 800424c:	785b      	ldrb	r3, [r3, #1]
 800424e:	041b      	lsls	r3, r3, #16
 8004250:	431a      	orrs	r2, r3
 8004252:	4b67      	ldr	r3, [pc, #412]	; (80043f0 <MX_LWIP_Init+0x28c>)
 8004254:	789b      	ldrb	r3, [r3, #2]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	4313      	orrs	r3, r2
 800425a:	4a65      	ldr	r2, [pc, #404]	; (80043f0 <MX_LWIP_Init+0x28c>)
 800425c:	78d2      	ldrb	r2, [r2, #3]
 800425e:	4313      	orrs	r3, r2
 8004260:	061a      	lsls	r2, r3, #24
 8004262:	4b63      	ldr	r3, [pc, #396]	; (80043f0 <MX_LWIP_Init+0x28c>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	0619      	lsls	r1, r3, #24
 8004268:	4b61      	ldr	r3, [pc, #388]	; (80043f0 <MX_LWIP_Init+0x28c>)
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	4319      	orrs	r1, r3
 8004270:	4b5f      	ldr	r3, [pc, #380]	; (80043f0 <MX_LWIP_Init+0x28c>)
 8004272:	789b      	ldrb	r3, [r3, #2]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	430b      	orrs	r3, r1
 8004278:	495d      	ldr	r1, [pc, #372]	; (80043f0 <MX_LWIP_Init+0x28c>)
 800427a:	78c9      	ldrb	r1, [r1, #3]
 800427c:	430b      	orrs	r3, r1
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004284:	431a      	orrs	r2, r3
 8004286:	4b5a      	ldr	r3, [pc, #360]	; (80043f0 <MX_LWIP_Init+0x28c>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	0619      	lsls	r1, r3, #24
 800428c:	4b58      	ldr	r3, [pc, #352]	; (80043f0 <MX_LWIP_Init+0x28c>)
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	4319      	orrs	r1, r3
 8004294:	4b56      	ldr	r3, [pc, #344]	; (80043f0 <MX_LWIP_Init+0x28c>)
 8004296:	789b      	ldrb	r3, [r3, #2]
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	430b      	orrs	r3, r1
 800429c:	4954      	ldr	r1, [pc, #336]	; (80043f0 <MX_LWIP_Init+0x28c>)
 800429e:	78c9      	ldrb	r1, [r1, #3]
 80042a0:	430b      	orrs	r3, r1
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80042a8:	431a      	orrs	r2, r3
 80042aa:	4b51      	ldr	r3, [pc, #324]	; (80043f0 <MX_LWIP_Init+0x28c>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	0619      	lsls	r1, r3, #24
 80042b0:	4b4f      	ldr	r3, [pc, #316]	; (80043f0 <MX_LWIP_Init+0x28c>)
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	041b      	lsls	r3, r3, #16
 80042b6:	4319      	orrs	r1, r3
 80042b8:	4b4d      	ldr	r3, [pc, #308]	; (80043f0 <MX_LWIP_Init+0x28c>)
 80042ba:	789b      	ldrb	r3, [r3, #2]
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	430b      	orrs	r3, r1
 80042c0:	494b      	ldr	r1, [pc, #300]	; (80043f0 <MX_LWIP_Init+0x28c>)
 80042c2:	78c9      	ldrb	r1, [r1, #3]
 80042c4:	430b      	orrs	r3, r1
 80042c6:	0e1b      	lsrs	r3, r3, #24
 80042c8:	4313      	orrs	r3, r2
 80042ca:	4a4c      	ldr	r2, [pc, #304]	; (80043fc <MX_LWIP_Init+0x298>)
 80042cc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80042ce:	4b49      	ldr	r3, [pc, #292]	; (80043f4 <MX_LWIP_Init+0x290>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	061a      	lsls	r2, r3, #24
 80042d4:	4b47      	ldr	r3, [pc, #284]	; (80043f4 <MX_LWIP_Init+0x290>)
 80042d6:	785b      	ldrb	r3, [r3, #1]
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	431a      	orrs	r2, r3
 80042dc:	4b45      	ldr	r3, [pc, #276]	; (80043f4 <MX_LWIP_Init+0x290>)
 80042de:	789b      	ldrb	r3, [r3, #2]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	4313      	orrs	r3, r2
 80042e4:	4a43      	ldr	r2, [pc, #268]	; (80043f4 <MX_LWIP_Init+0x290>)
 80042e6:	78d2      	ldrb	r2, [r2, #3]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	061a      	lsls	r2, r3, #24
 80042ec:	4b41      	ldr	r3, [pc, #260]	; (80043f4 <MX_LWIP_Init+0x290>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	0619      	lsls	r1, r3, #24
 80042f2:	4b40      	ldr	r3, [pc, #256]	; (80043f4 <MX_LWIP_Init+0x290>)
 80042f4:	785b      	ldrb	r3, [r3, #1]
 80042f6:	041b      	lsls	r3, r3, #16
 80042f8:	4319      	orrs	r1, r3
 80042fa:	4b3e      	ldr	r3, [pc, #248]	; (80043f4 <MX_LWIP_Init+0x290>)
 80042fc:	789b      	ldrb	r3, [r3, #2]
 80042fe:	021b      	lsls	r3, r3, #8
 8004300:	430b      	orrs	r3, r1
 8004302:	493c      	ldr	r1, [pc, #240]	; (80043f4 <MX_LWIP_Init+0x290>)
 8004304:	78c9      	ldrb	r1, [r1, #3]
 8004306:	430b      	orrs	r3, r1
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800430e:	431a      	orrs	r2, r3
 8004310:	4b38      	ldr	r3, [pc, #224]	; (80043f4 <MX_LWIP_Init+0x290>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	0619      	lsls	r1, r3, #24
 8004316:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <MX_LWIP_Init+0x290>)
 8004318:	785b      	ldrb	r3, [r3, #1]
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	4319      	orrs	r1, r3
 800431e:	4b35      	ldr	r3, [pc, #212]	; (80043f4 <MX_LWIP_Init+0x290>)
 8004320:	789b      	ldrb	r3, [r3, #2]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	430b      	orrs	r3, r1
 8004326:	4933      	ldr	r1, [pc, #204]	; (80043f4 <MX_LWIP_Init+0x290>)
 8004328:	78c9      	ldrb	r1, [r1, #3]
 800432a:	430b      	orrs	r3, r1
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004332:	431a      	orrs	r2, r3
 8004334:	4b2f      	ldr	r3, [pc, #188]	; (80043f4 <MX_LWIP_Init+0x290>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	0619      	lsls	r1, r3, #24
 800433a:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <MX_LWIP_Init+0x290>)
 800433c:	785b      	ldrb	r3, [r3, #1]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	4319      	orrs	r1, r3
 8004342:	4b2c      	ldr	r3, [pc, #176]	; (80043f4 <MX_LWIP_Init+0x290>)
 8004344:	789b      	ldrb	r3, [r3, #2]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	430b      	orrs	r3, r1
 800434a:	492a      	ldr	r1, [pc, #168]	; (80043f4 <MX_LWIP_Init+0x290>)
 800434c:	78c9      	ldrb	r1, [r1, #3]
 800434e:	430b      	orrs	r3, r1
 8004350:	0e1b      	lsrs	r3, r3, #24
 8004352:	4313      	orrs	r3, r2
 8004354:	4a2a      	ldr	r2, [pc, #168]	; (8004400 <MX_LWIP_Init+0x29c>)
 8004356:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004358:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <MX_LWIP_Init+0x2a0>)
 800435a:	9302      	str	r3, [sp, #8]
 800435c:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <MX_LWIP_Init+0x2a4>)
 800435e:	9301      	str	r3, [sp, #4]
 8004360:	2300      	movs	r3, #0
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	4b26      	ldr	r3, [pc, #152]	; (8004400 <MX_LWIP_Init+0x29c>)
 8004366:	4a25      	ldr	r2, [pc, #148]	; (80043fc <MX_LWIP_Init+0x298>)
 8004368:	4923      	ldr	r1, [pc, #140]	; (80043f8 <MX_LWIP_Init+0x294>)
 800436a:	4828      	ldr	r0, [pc, #160]	; (800440c <MX_LWIP_Init+0x2a8>)
 800436c:	f008 fbb6 	bl	800cadc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004370:	4826      	ldr	r0, [pc, #152]	; (800440c <MX_LWIP_Init+0x2a8>)
 8004372:	f008 fca1 	bl	800ccb8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004376:	4b25      	ldr	r3, [pc, #148]	; (800440c <MX_LWIP_Init+0x2a8>)
 8004378:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800437c:	089b      	lsrs	r3, r3, #2
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004388:	4820      	ldr	r0, [pc, #128]	; (800440c <MX_LWIP_Init+0x2a8>)
 800438a:	f008 fca5 	bl	800ccd8 <netif_set_up>
 800438e:	e002      	b.n	8004396 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004390:	481e      	ldr	r0, [pc, #120]	; (800440c <MX_LWIP_Init+0x2a8>)
 8004392:	f008 fced 	bl	800cd70 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004396:	491e      	ldr	r1, [pc, #120]	; (8004410 <MX_LWIP_Init+0x2ac>)
 8004398:	481c      	ldr	r0, [pc, #112]	; (800440c <MX_LWIP_Init+0x2a8>)
 800439a:	f008 fd5e 	bl	800ce5a <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]
 80043a2:	2300      	movs	r3, #0
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80043a6:	f107 0320 	add.w	r3, r7, #32
 80043aa:	2101      	movs	r1, #1
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fdbb 	bl	8004f28 <osSemaphoreCreate>
 80043b2:	4602      	mov	r2, r0
 80043b4:	4b17      	ldr	r3, [pc, #92]	; (8004414 <MX_LWIP_Init+0x2b0>)
 80043b6:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 80043b8:	4b17      	ldr	r3, [pc, #92]	; (8004418 <MX_LWIP_Init+0x2b4>)
 80043ba:	4a14      	ldr	r2, [pc, #80]	; (800440c <MX_LWIP_Init+0x2a8>)
 80043bc:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80043be:	4b15      	ldr	r3, [pc, #84]	; (8004414 <MX_LWIP_Init+0x2b0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a15      	ldr	r2, [pc, #84]	; (8004418 <MX_LWIP_Init+0x2b4>)
 80043c4:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <MX_LWIP_Init+0x2b8>)
 80043c8:	1d3c      	adds	r4, r7, #4
 80043ca:	461d      	mov	r5, r3
 80043cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80043d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80043d8:	1d3b      	adds	r3, r7, #4
 80043da:	490f      	ldr	r1, [pc, #60]	; (8004418 <MX_LWIP_Init+0x2b4>)
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fca6 	bl	8004d2e <osThreadCreate>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80043e2:	bf00      	nop
 80043e4:	3728      	adds	r7, #40	; 0x28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bdb0      	pop	{r4, r5, r7, pc}
 80043ea:	bf00      	nop
 80043ec:	200043b0 	.word	0x200043b0
 80043f0:	200043ac 	.word	0x200043ac
 80043f4:	2000436c 	.word	0x2000436c
 80043f8:	200043a8 	.word	0x200043a8
 80043fc:	200043b4 	.word	0x200043b4
 8004400:	200043b8 	.word	0x200043b8
 8004404:	0800c061 	.word	0x0800c061
 8004408:	08004a6d 	.word	0x08004a6d
 800440c:	20004370 	.word	0x20004370
 8004410:	08004b7d 	.word	0x08004b7d
 8004414:	200002f4 	.word	0x200002f4
 8004418:	20004364 	.word	0x20004364
 800441c:	080176d0 	.word	0x080176d0

08004420 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08e      	sub	sp, #56	; 0x38
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a59      	ldr	r2, [pc, #356]	; (80045a4 <HAL_ETH_MspInit+0x184>)
 800443e:	4293      	cmp	r3, r2
 8004440:	f040 80ac 	bne.w	800459c <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004444:	2300      	movs	r3, #0
 8004446:	623b      	str	r3, [r7, #32]
 8004448:	4b57      	ldr	r3, [pc, #348]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	4a56      	ldr	r2, [pc, #344]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 800444e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004452:	6313      	str	r3, [r2, #48]	; 0x30
 8004454:	4b54      	ldr	r3, [pc, #336]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	623b      	str	r3, [r7, #32]
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	4b50      	ldr	r3, [pc, #320]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	4a4f      	ldr	r2, [pc, #316]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 800446a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800446e:	6313      	str	r3, [r2, #48]	; 0x30
 8004470:	4b4d      	ldr	r3, [pc, #308]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
 8004480:	4b49      	ldr	r3, [pc, #292]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	4a48      	ldr	r2, [pc, #288]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 8004486:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800448a:	6313      	str	r3, [r2, #48]	; 0x30
 800448c:	4b46      	ldr	r3, [pc, #280]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	4b42      	ldr	r3, [pc, #264]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	4a41      	ldr	r2, [pc, #260]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 80044a2:	f043 0304 	orr.w	r3, r3, #4
 80044a6:	6313      	str	r3, [r2, #48]	; 0x30
 80044a8:	4b3f      	ldr	r3, [pc, #252]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	4b3b      	ldr	r3, [pc, #236]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	4a3a      	ldr	r2, [pc, #232]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	6313      	str	r3, [r2, #48]	; 0x30
 80044c4:	4b38      	ldr	r3, [pc, #224]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	4b34      	ldr	r3, [pc, #208]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	4a33      	ldr	r2, [pc, #204]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 80044da:	f043 0302 	orr.w	r3, r3, #2
 80044de:	6313      	str	r3, [r2, #48]	; 0x30
 80044e0:	4b31      	ldr	r3, [pc, #196]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80044ec:	2300      	movs	r3, #0
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	4b2d      	ldr	r3, [pc, #180]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	4a2c      	ldr	r2, [pc, #176]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 80044f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044fa:	6313      	str	r3, [r2, #48]	; 0x30
 80044fc:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004508:	2332      	movs	r3, #50	; 0x32
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450c:	2302      	movs	r3, #2
 800450e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004510:	2300      	movs	r3, #0
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004514:	2303      	movs	r3, #3
 8004516:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004518:	230b      	movs	r3, #11
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800451c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004520:	4619      	mov	r1, r3
 8004522:	4822      	ldr	r0, [pc, #136]	; (80045ac <HAL_ETH_MspInit+0x18c>)
 8004524:	f7fe fa64 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004528:	2386      	movs	r3, #134	; 0x86
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452c:	2302      	movs	r3, #2
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004530:	2300      	movs	r3, #0
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004534:	2303      	movs	r3, #3
 8004536:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004538:	230b      	movs	r3, #11
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800453c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004540:	4619      	mov	r1, r3
 8004542:	481b      	ldr	r0, [pc, #108]	; (80045b0 <HAL_ETH_MspInit+0x190>)
 8004544:	f7fe fa54 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454e:	2302      	movs	r3, #2
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	2300      	movs	r3, #0
 8004554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004556:	2303      	movs	r3, #3
 8004558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800455a:	230b      	movs	r3, #11
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800455e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004562:	4619      	mov	r1, r3
 8004564:	4813      	ldr	r0, [pc, #76]	; (80045b4 <HAL_ETH_MspInit+0x194>)
 8004566:	f7fe fa43 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800456a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004570:	2302      	movs	r3, #2
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004574:	2300      	movs	r3, #0
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004578:	2303      	movs	r3, #3
 800457a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800457c:	230b      	movs	r3, #11
 800457e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004584:	4619      	mov	r1, r3
 8004586:	480c      	ldr	r0, [pc, #48]	; (80045b8 <HAL_ETH_MspInit+0x198>)
 8004588:	f7fe fa32 	bl	80029f0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800458c:	2200      	movs	r2, #0
 800458e:	2105      	movs	r1, #5
 8004590:	203d      	movs	r0, #61	; 0x3d
 8004592:	f7fd f82e 	bl	80015f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004596:	203d      	movs	r0, #61	; 0x3d
 8004598:	f7fd f847 	bl	800162a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800459c:	bf00      	nop
 800459e:	3738      	adds	r7, #56	; 0x38
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40028000 	.word	0x40028000
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40020800 	.word	0x40020800
 80045b0:	40020000 	.word	0x40020000
 80045b4:	40020400 	.word	0x40020400
 80045b8:	40021800 	.word	0x40021800

080045bc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <HAL_ETH_RxCpltCallback+0x1c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fd2f 	bl	800502c <osSemaphoreRelease>
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	200002f8 	.word	0x200002f8

080045dc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80045dc:	b5b0      	push	{r4, r5, r7, lr}
 80045de:	b090      	sub	sp, #64	; 0x40
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80045e8:	4b5c      	ldr	r3, [pc, #368]	; (800475c <low_level_init+0x180>)
 80045ea:	4a5d      	ldr	r2, [pc, #372]	; (8004760 <low_level_init+0x184>)
 80045ec:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80045ee:	4b5b      	ldr	r3, [pc, #364]	; (800475c <low_level_init+0x180>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80045f4:	4b59      	ldr	r3, [pc, #356]	; (800475c <low_level_init+0x180>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80045fa:	2300      	movs	r3, #0
 80045fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8004606:	23e1      	movs	r3, #225	; 0xe1
 8004608:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800460c:	2300      	movs	r3, #0
 800460e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8004612:	2300      	movs	r3, #0
 8004614:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8004618:	2300      	movs	r3, #0
 800461a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800461e:	4a4f      	ldr	r2, [pc, #316]	; (800475c <low_level_init+0x180>)
 8004620:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004624:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004626:	4b4d      	ldr	r3, [pc, #308]	; (800475c <low_level_init+0x180>)
 8004628:	2201      	movs	r2, #1
 800462a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800462c:	4b4b      	ldr	r3, [pc, #300]	; (800475c <low_level_init+0x180>)
 800462e:	2200      	movs	r2, #0
 8004630:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004632:	4b4a      	ldr	r3, [pc, #296]	; (800475c <low_level_init+0x180>)
 8004634:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004638:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800463a:	4848      	ldr	r0, [pc, #288]	; (800475c <low_level_init+0x180>)
 800463c:	f7fd f832 	bl	80016a4 <HAL_ETH_Init>
 8004640:	4603      	mov	r3, r0
 8004642:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004646:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800464a:	2b00      	cmp	r3, #0
 800464c:	d108      	bne.n	8004660 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004654:	f043 0304 	orr.w	r3, r3, #4
 8004658:	b2da      	uxtb	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004660:	2304      	movs	r3, #4
 8004662:	4a40      	ldr	r2, [pc, #256]	; (8004764 <low_level_init+0x188>)
 8004664:	4940      	ldr	r1, [pc, #256]	; (8004768 <low_level_init+0x18c>)
 8004666:	483d      	ldr	r0, [pc, #244]	; (800475c <low_level_init+0x180>)
 8004668:	f7fd f9ba 	bl	80019e0 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800466c:	2304      	movs	r3, #4
 800466e:	4a3f      	ldr	r2, [pc, #252]	; (800476c <low_level_init+0x190>)
 8004670:	493f      	ldr	r1, [pc, #252]	; (8004770 <low_level_init+0x194>)
 8004672:	483a      	ldr	r0, [pc, #232]	; (800475c <low_level_init+0x180>)
 8004674:	f7fd fa1d 	bl	8001ab2 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2206      	movs	r2, #6
 800467c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004680:	4b36      	ldr	r3, [pc, #216]	; (800475c <low_level_init+0x180>)
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	781a      	ldrb	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800468c:	4b33      	ldr	r3, [pc, #204]	; (800475c <low_level_init+0x180>)
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	785a      	ldrb	r2, [r3, #1]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004698:	4b30      	ldr	r3, [pc, #192]	; (800475c <low_level_init+0x180>)
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	789a      	ldrb	r2, [r3, #2]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80046a4:	4b2d      	ldr	r3, [pc, #180]	; (800475c <low_level_init+0x180>)
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	78da      	ldrb	r2, [r3, #3]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80046b0:	4b2a      	ldr	r3, [pc, #168]	; (800475c <low_level_init+0x180>)
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	791a      	ldrb	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80046bc:	4b27      	ldr	r3, [pc, #156]	; (800475c <low_level_init+0x180>)
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	795a      	ldrb	r2, [r3, #5]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80046ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80046d6:	f043 030a 	orr.w	r3, r3, #10
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80046e2:	2300      	movs	r3, #0
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e6:	2300      	movs	r3, #0
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80046ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046ee:	2101      	movs	r1, #1
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fc19 	bl	8004f28 <osSemaphoreCreate>
 80046f6:	4602      	mov	r2, r0
 80046f8:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <low_level_init+0x198>)
 80046fa:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80046fc:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <low_level_init+0x19c>)
 80046fe:	f107 040c 	add.w	r4, r7, #12
 8004702:	461d      	mov	r5, r3
 8004704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004708:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800470c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004710:	f107 030c 	add.w	r3, r7, #12
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fb09 	bl	8004d2e <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800471c:	480f      	ldr	r0, [pc, #60]	; (800475c <low_level_init+0x180>)
 800471e:	f7fd fcf0 	bl	8002102 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004722:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004726:	461a      	mov	r2, r3
 8004728:	211d      	movs	r1, #29
 800472a:	480c      	ldr	r0, [pc, #48]	; (800475c <low_level_init+0x180>)
 800472c:	f7fd fc1b 	bl	8001f66 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	f043 030b 	orr.w	r3, r3, #11
 8004736:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473a:	461a      	mov	r2, r3
 800473c:	211d      	movs	r1, #29
 800473e:	4807      	ldr	r0, [pc, #28]	; (800475c <low_level_init+0x180>)
 8004740:	f7fd fc79 	bl	8002036 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004744:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004748:	461a      	mov	r2, r3
 800474a:	211d      	movs	r1, #29
 800474c:	4803      	ldr	r0, [pc, #12]	; (800475c <low_level_init+0x180>)
 800474e:	f7fd fc0a 	bl	8001f66 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8004752:	bf00      	nop
 8004754:	3740      	adds	r7, #64	; 0x40
 8004756:	46bd      	mov	sp, r7
 8004758:	bdb0      	pop	{r4, r5, r7, pc}
 800475a:	bf00      	nop
 800475c:	20005c8c 	.word	0x20005c8c
 8004760:	40028000 	.word	0x40028000
 8004764:	20005cd4 	.word	0x20005cd4
 8004768:	200043bc 	.word	0x200043bc
 800476c:	2000443c 	.word	0x2000443c
 8004770:	20005c0c 	.word	0x20005c0c
 8004774:	200002f8 	.word	0x200002f8
 8004778:	080176f4 	.word	0x080176f4

0800477c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004786:	4b4b      	ldr	r3, [pc, #300]	; (80048b4 <low_level_output+0x138>)
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800479e:	4b45      	ldr	r3, [pc, #276]	; (80048b4 <low_level_output+0x138>)
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	623b      	str	r3, [r7, #32]
 80047ac:	e05a      	b.n	8004864 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	da03      	bge.n	80047be <low_level_output+0x42>
      {
        errval = ERR_USE;
 80047b6:	23f8      	movs	r3, #248	; 0xf8
 80047b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80047bc:	e05c      	b.n	8004878 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	895b      	ldrh	r3, [r3, #10]
 80047c2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80047c8:	e02f      	b.n	800482a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	18d0      	adds	r0, r2, r3
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	18d1      	adds	r1, r2, r3
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80047de:	3304      	adds	r3, #4
 80047e0:	461a      	mov	r2, r3
 80047e2:	f011 ff5a 	bl	801669a <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	da03      	bge.n	80047fc <low_level_output+0x80>
        {
          errval = ERR_USE;
 80047f4:	23f8      	movs	r3, #248	; 0xf8
 80047f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80047fa:	e03d      	b.n	8004878 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800480c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004818:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004824:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4413      	add	r3, r2
 8004830:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004834:	4293      	cmp	r3, r2
 8004836:	d8c8      	bhi.n	80047ca <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	18d0      	adds	r0, r2, r3
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4413      	add	r3, r2
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4619      	mov	r1, r3
 800484a:	f011 ff26 	bl	801669a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	623b      	str	r3, [r7, #32]
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1a1      	bne.n	80047ae <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800486a:	6979      	ldr	r1, [r7, #20]
 800486c:	4811      	ldr	r0, [pc, #68]	; (80048b4 <low_level_output+0x138>)
 800486e:	f7fd f98d 	bl	8001b8c <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004878:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <low_level_output+0x138>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004880:	3314      	adds	r3, #20
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00d      	beq.n	80048a8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800488c:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <low_level_output+0x138>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004894:	3314      	adds	r3, #20
 8004896:	2220      	movs	r2, #32
 8004898:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <low_level_output+0x138>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a2:	3304      	adds	r3, #4
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80048a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3728      	adds	r7, #40	; 0x28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20005c8c 	.word	0x20005c8c

080048b8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08c      	sub	sp, #48	; 0x30
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80048d8:	2300      	movs	r3, #0
 80048da:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80048dc:	484e      	ldr	r0, [pc, #312]	; (8004a18 <low_level_input+0x160>)
 80048de:	f7fd fa3f 	bl	8001d60 <HAL_ETH_GetReceivedFrame_IT>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <low_level_input+0x34>
    return NULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	e091      	b.n	8004a10 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80048ec:	4b4a      	ldr	r3, [pc, #296]	; (8004a18 <low_level_input+0x160>)
 80048ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80048f2:	4b49      	ldr	r3, [pc, #292]	; (8004a18 <low_level_input+0x160>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80048f8:	89fb      	ldrh	r3, [r7, #14]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d006      	beq.n	800490c <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80048fe:	89fb      	ldrh	r3, [r7, #14]
 8004900:	2203      	movs	r2, #3
 8004902:	4619      	mov	r1, r3
 8004904:	2004      	movs	r0, #4
 8004906:	f008 fb19 	bl	800cf3c <pbuf_alloc>
 800490a:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 800490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d04b      	beq.n	80049aa <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004912:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <low_level_input+0x160>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004920:	e040      	b.n	80049a4 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	895b      	ldrh	r3, [r3, #10]
 8004926:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800492c:	e021      	b.n	8004972 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	18d0      	adds	r0, r2, r3
 8004936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	18d1      	adds	r1, r2, r3
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004942:	3304      	adds	r3, #4
 8004944:	461a      	mov	r2, r3
 8004946:	f011 fea8 	bl	801669a <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4413      	add	r3, r2
 800495c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004960:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800496c:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	4413      	add	r3, r2
 8004978:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800497c:	4293      	cmp	r3, r2
 800497e:	d8d6      	bhi.n	800492e <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	18d0      	adds	r0, r2, r3
 8004988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4619      	mov	r1, r3
 8004992:	f011 fe82 	bl	801669a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	4413      	add	r3, r2
 800499c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1bb      	bne.n	8004922 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80049aa:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <low_level_input+0x160>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80049b0:	2300      	movs	r3, #0
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	e00b      	b.n	80049ce <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	3301      	adds	r3, #1
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <low_level_input+0x160>)
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d3ee      	bcc.n	80049b6 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80049d8:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <low_level_input+0x160>)
 80049da:	2200      	movs	r2, #0
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80049de:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <low_level_input+0x160>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e6:	3314      	adds	r3, #20
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80049f2:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <low_level_input+0x160>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fa:	3314      	adds	r3, #20
 80049fc:	2280      	movs	r2, #128	; 0x80
 80049fe:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <low_level_input+0x160>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a08:	3308      	adds	r3, #8
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3730      	adds	r7, #48	; 0x30
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20005c8c 	.word	0x20005c8c

08004a1c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004a28:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <ethernetif_input+0x4c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 faad 	bl	8004f90 <osSemaphoreWait>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f5      	bne.n	8004a28 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7ff ff3b 	bl	80048b8 <low_level_input>
 8004a42:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	68f9      	ldr	r1, [r7, #12]
 8004a50:	68b8      	ldr	r0, [r7, #8]
 8004a52:	4798      	blx	r3
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8004a5a:	68b8      	ldr	r0, [r7, #8]
 8004a5c:	f008 fde0 	bl	800d620 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1ea      	bne.n	8004a3c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004a66:	e7df      	b.n	8004a28 <ethernetif_input+0xc>
 8004a68:	200002f8 	.word	0x200002f8

08004a6c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <ethernetif_init+0x1c>
 8004a7a:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <ethernetif_init+0x48>)
 8004a7c:	f240 222e 	movw	r2, #558	; 0x22e
 8004a80:	490d      	ldr	r1, [pc, #52]	; (8004ab8 <ethernetif_init+0x4c>)
 8004a82:	480e      	ldr	r0, [pc, #56]	; (8004abc <ethernetif_init+0x50>)
 8004a84:	f011 fe1c 	bl	80166c0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2273      	movs	r2, #115	; 0x73
 8004a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->name[1] = IFNAME1;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2274      	movs	r2, #116	; 0x74
 8004a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <ethernetif_init+0x54>)
 8004a9c:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a08      	ldr	r2, [pc, #32]	; (8004ac4 <ethernetif_init+0x58>)
 8004aa2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff fd99 	bl	80045dc <low_level_init>

  return ERR_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	08017710 	.word	0x08017710
 8004ab8:	0801772c 	.word	0x0801772c
 8004abc:	0801773c 	.word	0x0801773c
 8004ac0:	080144f9 	.word	0x080144f9
 8004ac4:	0800477d 	.word	0x0800477d

08004ac8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004acc:	f7fc fc88 	bl	80013e0 <HAL_GetTick>
 8004ad0:	4603      	mov	r3, r0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <ethernetif_set_link>:
  * @brief  This function sets the netif link status.
  * @param  netif: the network interface
  * @retval None
  */  
void ethernetif_set_link(void const *argument)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	60fb      	str	r3, [r7, #12]
  
  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004ae8:	f107 0308 	add.w	r3, r7, #8
 8004aec:	461a      	mov	r2, r3
 8004aee:	2101      	movs	r1, #1
 8004af0:	4821      	ldr	r0, [pc, #132]	; (8004b78 <ethernetif_set_link+0xa0>)
 8004af2:	f7fd fa38 	bl	8001f66 <HAL_ETH_ReadPHYRegister>
    
    regvalue &= PHY_LINKED_STATUS;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	60bb      	str	r3, [r7, #8]
    
    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d108      	bne.n	8004b20 <ethernetif_set_link+0x48>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */ 
      netif_set_link_up(link_arg->netif);        
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f008 f953 	bl	800cdc4 <netif_set_link_up>
 8004b1e:	e011      	b.n	8004b44 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004b28:	089b      	lsrs	r3, r3, #2
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d007      	beq.n	8004b44 <ethernetif_set_link+0x6c>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f008 f96b 	bl	800ce1a <netif_set_link_down>
    }
    
    if(netif_is_link_up(link_arg->netif) && netif_is_up(link_arg->netif)) {
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004b4c:	089b      	lsrs	r3, r3, #2
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <ethernetif_set_link+0x96>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <ethernetif_set_link+0x96>
    	StartTcpServerTask();
 8004b6a:	f7fc fbb3 	bl	80012d4 <StartTcpServerTask>
    } else {
    	//TerminateTcpServerTask();
    }

    /* Suspend thread for 200 ms */
    osDelay(1000);
 8004b6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b72:	f000 f928 	bl	8004dc6 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004b76:	e7b7      	b.n	8004ae8 <ethernetif_set_link+0x10>
 8004b78:	20005c8c 	.word	0x20005c8c

08004b7c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60bb      	str	r3, [r7, #8]
  
  if(netif_is_link_up(netif))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004b92:	089b      	lsrs	r3, r3, #2
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d05d      	beq.n	8004c5a <ethernetif_update_config+0xde>
  { 
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004b9e:	4b34      	ldr	r3, [pc, #208]	; (8004c70 <ethernetif_update_config+0xf4>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d03f      	beq.n	8004c26 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004ba6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004baa:	2100      	movs	r1, #0
 8004bac:	4830      	ldr	r0, [pc, #192]	; (8004c70 <ethernetif_update_config+0xf4>)
 8004bae:	f7fd fa42 	bl	8002036 <HAL_ETH_WritePHYRegister>
      
      /* Get tick */
      tickstart = HAL_GetTick();
 8004bb2:	f7fc fc15 	bl	80013e0 <HAL_GetTick>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	60fb      	str	r3, [r7, #12]
      
      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004bba:	f107 0308 	add.w	r3, r7, #8
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	482b      	ldr	r0, [pc, #172]	; (8004c70 <ethernetif_update_config+0xf4>)
 8004bc4:	f7fd f9cf 	bl	8001f66 <HAL_ETH_ReadPHYRegister>
        
        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004bc8:	f7fc fc0a 	bl	80013e0 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bd6:	d828      	bhi.n	8004c2a <ethernetif_update_config+0xae>
        {     
          /* In case of timeout */ 
          goto error;
        }   
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0eb      	beq.n	8004bba <ethernetif_update_config+0x3e>
      
      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	461a      	mov	r2, r3
 8004be8:	211f      	movs	r1, #31
 8004bea:	4821      	ldr	r0, [pc, #132]	; (8004c70 <ethernetif_update_config+0xf4>)
 8004bec:	f7fd f9bb 	bl	8001f66 <HAL_ETH_ReadPHYRegister>
      
      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0310 	and.w	r3, r3, #16
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004bfa:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <ethernetif_update_config+0xf4>)
 8004bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	e002      	b.n	8004c0a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004c04:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <ethernetif_update_config+0xf4>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <ethernetif_update_config+0xa0>
      {  
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M; 
 8004c14:	4b16      	ldr	r3, [pc, #88]	; (8004c70 <ethernetif_update_config+0xf4>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	609a      	str	r2, [r3, #8]
 8004c1a:	e016      	b.n	8004c4a <ethernetif_update_config+0xce>
      }
      else
      {   
        /* Set Ethernet speed to 100M following the auto-negotiation */ 
        heth.Init.Speed = ETH_SPEED_100M;
 8004c1c:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <ethernetif_update_config+0xf4>)
 8004c1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c22:	609a      	str	r2, [r3, #8]
 8004c24:	e011      	b.n	8004c4a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004c26:	bf00      	nop
 8004c28:	e000      	b.n	8004c2c <ethernetif_update_config+0xb0>
          goto error;
 8004c2a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
      
      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004c2c:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <ethernetif_update_config+0xf4>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	08db      	lsrs	r3, r3, #3
 8004c32:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1))); 
 8004c34:	4b0e      	ldr	r3, [pc, #56]	; (8004c70 <ethernetif_update_config+0xf4>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	085b      	lsrs	r3, r3, #1
 8004c3a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	2100      	movs	r1, #0
 8004c44:	480a      	ldr	r0, [pc, #40]	; (8004c70 <ethernetif_update_config+0xf4>)
 8004c46:	f7fd f9f6 	bl	8002036 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	4808      	ldr	r0, [pc, #32]	; (8004c70 <ethernetif_update_config+0xf4>)
 8004c4e:	f7fd fab7 	bl	80021c0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);   
 8004c52:	4807      	ldr	r0, [pc, #28]	; (8004c70 <ethernetif_update_config+0xf4>)
 8004c54:	f7fd fa55 	bl	8002102 <HAL_ETH_Start>
 8004c58:	e002      	b.n	8004c60 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004c5a:	4805      	ldr	r0, [pc, #20]	; (8004c70 <ethernetif_update_config+0xf4>)
 8004c5c:	f7fd fa80 	bl	8002160 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f807 	bl	8004c74 <ethernetif_notify_conn_changed>
}
 8004c66:	bf00      	nop
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20005c8c 	.word	0x20005c8c

08004c74 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */
   if(netif_is_link_up(netif)){
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004c82:	089b      	lsrs	r3, r3, #2
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <ethernetif_notify_conn_changed+0x22>
	   mprintf("netif linked up.\r\n");
 8004c8e:	4805      	ldr	r0, [pc, #20]	; (8004ca4 <ethernetif_notify_conn_changed+0x30>)
 8004c90:	f7fb ffae 	bl	8000bf0 <mprintf>
   } else {
	   mprintf("netif linked down.\r\n");
   }

}
 8004c94:	e002      	b.n	8004c9c <ethernetif_notify_conn_changed+0x28>
	   mprintf("netif linked down.\r\n");
 8004c96:	4804      	ldr	r0, [pc, #16]	; (8004ca8 <ethernetif_notify_conn_changed+0x34>)
 8004c98:	f7fb ffaa 	bl	8000bf0 <mprintf>
}
 8004c9c:	bf00      	nop
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	08017764 	.word	0x08017764
 8004ca8:	08017778 	.word	0x08017778

08004cac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cbe:	2b84      	cmp	r3, #132	; 0x84
 8004cc0:	d005      	beq.n	8004cce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004cc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4413      	add	r3, r2
 8004cca:	3303      	adds	r3, #3
 8004ccc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004cce:	68fb      	ldr	r3, [r7, #12]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ce2:	f3ef 8305 	mrs	r3, IPSR
 8004ce6:	607b      	str	r3, [r7, #4]
  return(result);
 8004ce8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	bf14      	ite	ne
 8004cee:	2301      	movne	r3, #1
 8004cf0:	2300      	moveq	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004d04:	f001 fd88 	bl	8006818 <vTaskStartScheduler>
  
  return osOK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004d12:	f7ff ffe3 	bl	8004cdc <inHandlerMode>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004d1c:	f001 fe94 	bl	8006a48 <xTaskGetTickCountFromISR>
 8004d20:	4603      	mov	r3, r0
 8004d22:	e002      	b.n	8004d2a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004d24:	f001 fe80 	bl	8006a28 <xTaskGetTickCount>
 8004d28:	4603      	mov	r3, r0
  }
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d30:	b089      	sub	sp, #36	; 0x24
 8004d32:	af04      	add	r7, sp, #16
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d020      	beq.n	8004d82 <osThreadCreate+0x54>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01c      	beq.n	8004d82 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685c      	ldr	r4, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681d      	ldr	r5, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691e      	ldr	r6, [r3, #16]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff ffa6 	bl	8004cac <makeFreeRtosPriority>
 8004d60:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d6a:	9202      	str	r2, [sp, #8]
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	9100      	str	r1, [sp, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	4632      	mov	r2, r6
 8004d74:	4629      	mov	r1, r5
 8004d76:	4620      	mov	r0, r4
 8004d78:	f001 fb06 	bl	8006388 <xTaskCreateStatic>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	e01c      	b.n	8004dbc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685c      	ldr	r4, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d8e:	b29e      	uxth	r6, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff ff88 	bl	8004cac <makeFreeRtosPriority>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	f107 030c 	add.w	r3, r7, #12
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	9200      	str	r2, [sp, #0]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	4632      	mov	r2, r6
 8004daa:	4629      	mov	r1, r5
 8004dac:	4620      	mov	r0, r4
 8004dae:	f001 fb44 	bl	800643a <xTaskCreate>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d001      	beq.n	8004dbc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e000      	b.n	8004dbe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004dc6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <osDelay+0x16>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	e000      	b.n	8004dde <osDelay+0x18>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	4618      	mov	r0, r3
 8004de0:	f001 fce6 	bl	80067b0 <vTaskDelay>
  
  return osOK;
 8004de4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4619      	mov	r1, r3
 8004e04:	2001      	movs	r0, #1
 8004e06:	f000 fc7d 	bl	8005704 <xQueueCreateMutexStatic>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	e003      	b.n	8004e16 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004e0e:	2001      	movs	r0, #1
 8004e10:	f000 fc60 	bl	80056d4 <xQueueCreateMutex>
 8004e14:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <osMutexWait+0x18>
    return osErrorParameter;
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	e03a      	b.n	8004eae <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e42:	d103      	bne.n	8004e4c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	e009      	b.n	8004e60 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d006      	beq.n	8004e60 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <osMutexWait+0x40>
      ticks = 1;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004e60:	f7ff ff3c 	bl	8004cdc <inHandlerMode>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d017      	beq.n	8004e9a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004e6a:	f107 0308 	add.w	r3, r7, #8
 8004e6e:	461a      	mov	r2, r3
 8004e70:	2100      	movs	r1, #0
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f001 f85e 	bl	8005f34 <xQueueReceiveFromISR>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d001      	beq.n	8004e82 <osMutexWait+0x62>
      return osErrorOS;
 8004e7e:	23ff      	movs	r3, #255	; 0xff
 8004e80:	e015      	b.n	8004eae <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d011      	beq.n	8004eac <osMutexWait+0x8c>
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <osMutexWait+0x98>)
 8004e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	e008      	b.n	8004eac <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004e9a:	68f9      	ldr	r1, [r7, #12]
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 ff41 	bl	8005d24 <xQueueSemaphoreTake>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d001      	beq.n	8004eac <osMutexWait+0x8c>
    return osErrorOS;
 8004ea8:	23ff      	movs	r3, #255	; 0xff
 8004eaa:	e000      	b.n	8004eae <osMutexWait+0x8e>
  }
  
  return osOK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004ecc:	f7ff ff06 	bl	8004cdc <inHandlerMode>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d016      	beq.n	8004f04 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004ed6:	f107 0308 	add.w	r3, r7, #8
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fdbb 	bl	8005a58 <xQueueGiveFromISR>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d001      	beq.n	8004eec <osMutexRelease+0x30>
      return osErrorOS;
 8004ee8:	23ff      	movs	r3, #255	; 0xff
 8004eea:	e017      	b.n	8004f1c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d013      	beq.n	8004f1a <osMutexRelease+0x5e>
 8004ef2:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <osMutexRelease+0x68>)
 8004ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	e00a      	b.n	8004f1a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004f04:	2300      	movs	r3, #0
 8004f06:	2200      	movs	r2, #0
 8004f08:	2100      	movs	r1, #0
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fc16 	bl	800573c <xQueueGenericSend>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d001      	beq.n	8004f1a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004f16:	23ff      	movs	r3, #255	; 0xff
 8004f18:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	e000ed04 	.word	0xe000ed04

08004f28 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d010      	beq.n	8004f5c <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d10b      	bne.n	8004f58 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	2303      	movs	r3, #3
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	2001      	movs	r0, #1
 8004f50:	f000 fad8 	bl	8005504 <xQueueGenericCreateStatic>
 8004f54:	4603      	mov	r3, r0
 8004f56:	e016      	b.n	8004f86 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e014      	b.n	8004f86 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d110      	bne.n	8004f84 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004f62:	2203      	movs	r2, #3
 8004f64:	2100      	movs	r1, #0
 8004f66:	2001      	movs	r0, #1
 8004f68:	f000 fb3e 	bl	80055e8 <xQueueGenericCreate>
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <osSemaphoreCreate+0x58>
 8004f74:	2300      	movs	r3, #0
 8004f76:	2200      	movs	r2, #0
 8004f78:	2100      	movs	r1, #0
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 fbde 	bl	800573c <xQueueGenericSend>
      return sema;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	e000      	b.n	8004f86 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004f84:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004fa4:	2380      	movs	r3, #128	; 0x80
 8004fa6:	e03a      	b.n	800501e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb2:	d103      	bne.n	8004fbc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	e009      	b.n	8004fd0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d006      	beq.n	8004fd0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <osSemaphoreWait+0x40>
      ticks = 1;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004fd0:	f7ff fe84 	bl	8004cdc <inHandlerMode>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d017      	beq.n	800500a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004fda:	f107 0308 	add.w	r3, r7, #8
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 ffa6 	bl	8005f34 <xQueueReceiveFromISR>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d001      	beq.n	8004ff2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004fee:	23ff      	movs	r3, #255	; 0xff
 8004ff0:	e015      	b.n	800501e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d011      	beq.n	800501c <osSemaphoreWait+0x8c>
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <osSemaphoreWait+0x98>)
 8004ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	e008      	b.n	800501c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fe89 	bl	8005d24 <xQueueSemaphoreTake>
 8005012:	4603      	mov	r3, r0
 8005014:	2b01      	cmp	r3, #1
 8005016:	d001      	beq.n	800501c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005018:	23ff      	movs	r3, #255	; 0xff
 800501a:	e000      	b.n	800501e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	e000ed04 	.word	0xe000ed04

0800502c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005038:	2300      	movs	r3, #0
 800503a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800503c:	f7ff fe4e 	bl	8004cdc <inHandlerMode>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d016      	beq.n	8005074 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fd03 	bl	8005a58 <xQueueGiveFromISR>
 8005052:	4603      	mov	r3, r0
 8005054:	2b01      	cmp	r3, #1
 8005056:	d001      	beq.n	800505c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005058:	23ff      	movs	r3, #255	; 0xff
 800505a:	e017      	b.n	800508c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d013      	beq.n	800508a <osSemaphoreRelease+0x5e>
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <osSemaphoreRelease+0x68>)
 8005064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	e00a      	b.n	800508a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005074:	2300      	movs	r3, #0
 8005076:	2200      	movs	r2, #0
 8005078:	2100      	movs	r1, #0
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fb5e 	bl	800573c <xQueueGenericSend>
 8005080:	4603      	mov	r3, r0
 8005082:	2b01      	cmp	r3, #1
 8005084:	d001      	beq.n	800508a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005086:	23ff      	movs	r3, #255	; 0xff
 8005088:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800508a:	68fb      	ldr	r3, [r7, #12]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	e000ed04 	.word	0xe000ed04

08005098 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80050a0:	f7ff fe1c 	bl	8004cdc <inHandlerMode>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <osSemaphoreDelete+0x16>
    return osErrorISR;
 80050aa:	2382      	movs	r3, #130	; 0x82
 80050ac:	e003      	b.n	80050b6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fff5 	bl	800609e <vQueueDelete>

  return osOK; 
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80050be:	b590      	push	{r4, r7, lr}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af02      	add	r7, sp, #8
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d012      	beq.n	80050f6 <osMessageCreate+0x38>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00e      	beq.n	80050f6 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6818      	ldr	r0, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6859      	ldr	r1, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68dc      	ldr	r4, [r3, #12]
 80050e8:	2300      	movs	r3, #0
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	4623      	mov	r3, r4
 80050ee:	f000 fa09 	bl	8005504 <xQueueGenericCreateStatic>
 80050f2:	4603      	mov	r3, r0
 80050f4:	e008      	b.n	8005108 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	4619      	mov	r1, r3
 8005102:	f000 fa71 	bl	80055e8 <xQueueGenericCreate>
 8005106:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	bd90      	pop	{r4, r7, pc}

08005110 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <osMessagePut+0x1e>
    ticks = 1;
 800512a:	2301      	movs	r3, #1
 800512c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800512e:	f7ff fdd5 	bl	8004cdc <inHandlerMode>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d018      	beq.n	800516a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005138:	f107 0210 	add.w	r2, r7, #16
 800513c:	f107 0108 	add.w	r1, r7, #8
 8005140:	2300      	movs	r3, #0
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 fbf4 	bl	8005930 <xQueueGenericSendFromISR>
 8005148:	4603      	mov	r3, r0
 800514a:	2b01      	cmp	r3, #1
 800514c:	d001      	beq.n	8005152 <osMessagePut+0x42>
      return osErrorOS;
 800514e:	23ff      	movs	r3, #255	; 0xff
 8005150:	e018      	b.n	8005184 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d014      	beq.n	8005182 <osMessagePut+0x72>
 8005158:	4b0c      	ldr	r3, [pc, #48]	; (800518c <osMessagePut+0x7c>)
 800515a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	e00b      	b.n	8005182 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800516a:	f107 0108 	add.w	r1, r7, #8
 800516e:	2300      	movs	r3, #0
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fae2 	bl	800573c <xQueueGenericSend>
 8005178:	4603      	mov	r3, r0
 800517a:	2b01      	cmp	r3, #1
 800517c:	d001      	beq.n	8005182 <osMessagePut+0x72>
      return osErrorOS;
 800517e:	23ff      	movs	r3, #255	; 0xff
 8005180:	e000      	b.n	8005184 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	e000ed04 	.word	0xe000ed04

08005190 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005190:	b590      	push	{r4, r7, lr}
 8005192:	b08b      	sub	sp, #44	; 0x2c
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10a      	bne.n	80051c0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80051aa:	2380      	movs	r3, #128	; 0x80
 80051ac:	617b      	str	r3, [r7, #20]
    return event;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	461c      	mov	r4, r3
 80051b2:	f107 0314 	add.w	r3, r7, #20
 80051b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80051ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80051be:	e054      	b.n	800526a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80051c0:	2300      	movs	r3, #0
 80051c2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ce:	d103      	bne.n	80051d8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80051d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
 80051d6:	e009      	b.n	80051ec <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d006      	beq.n	80051ec <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <osMessageGet+0x5c>
      ticks = 1;
 80051e8:	2301      	movs	r3, #1
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80051ec:	f7ff fd76 	bl	8004cdc <inHandlerMode>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01c      	beq.n	8005230 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80051f6:	f107 0220 	add.w	r2, r7, #32
 80051fa:	f107 0314 	add.w	r3, r7, #20
 80051fe:	3304      	adds	r3, #4
 8005200:	4619      	mov	r1, r3
 8005202:	68b8      	ldr	r0, [r7, #8]
 8005204:	f000 fe96 	bl	8005f34 <xQueueReceiveFromISR>
 8005208:	4603      	mov	r3, r0
 800520a:	2b01      	cmp	r3, #1
 800520c:	d102      	bne.n	8005214 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800520e:	2310      	movs	r3, #16
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	e001      	b.n	8005218 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01d      	beq.n	800525a <osMessageGet+0xca>
 800521e:	4b15      	ldr	r3, [pc, #84]	; (8005274 <osMessageGet+0xe4>)
 8005220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	e014      	b.n	800525a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005230:	f107 0314 	add.w	r3, r7, #20
 8005234:	3304      	adds	r3, #4
 8005236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005238:	4619      	mov	r1, r3
 800523a:	68b8      	ldr	r0, [r7, #8]
 800523c:	f000 fc96 	bl	8005b6c <xQueueReceive>
 8005240:	4603      	mov	r3, r0
 8005242:	2b01      	cmp	r3, #1
 8005244:	d102      	bne.n	800524c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005246:	2310      	movs	r3, #16
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	e006      	b.n	800525a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <osMessageGet+0xc6>
 8005252:	2300      	movs	r3, #0
 8005254:	e000      	b.n	8005258 <osMessageGet+0xc8>
 8005256:	2340      	movs	r3, #64	; 0x40
 8005258:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	461c      	mov	r4, r3
 800525e:	f107 0314 	add.w	r3, r7, #20
 8005262:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005266:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	372c      	adds	r7, #44	; 0x2c
 800526e:	46bd      	mov	sp, r7
 8005270:	bd90      	pop	{r4, r7, pc}
 8005272:	bf00      	nop
 8005274:	e000ed04 	.word	0xe000ed04

08005278 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005280:	f7ff fd2c 	bl	8004cdc <inHandlerMode>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d004      	beq.n	8005294 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 feec 	bl	8006068 <uxQueueMessagesWaitingFromISR>
 8005290:	4603      	mov	r3, r0
 8005292:	e003      	b.n	800529c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 feca 	bl	800602e <uxQueueMessagesWaiting>
 800529a:	4603      	mov	r3, r0
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80052ac:	f7ff fd16 	bl	8004cdc <inHandlerMode>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <osMessageDelete+0x16>
    return osErrorISR;
 80052b6:	2382      	movs	r3, #130	; 0x82
 80052b8:	e003      	b.n	80052c2 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 feef 	bl	800609e <vQueueDelete>

  return osOK; 
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f103 0208 	add.w	r2, r3, #8
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f103 0208 	add.w	r2, r3, #8
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f103 0208 	add.w	r2, r3, #8
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	601a      	str	r2, [r3, #0]
}
 8005360:	bf00      	nop
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005382:	d103      	bne.n	800538c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	e00c      	b.n	80053a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3308      	adds	r3, #8
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	e002      	b.n	800539a <vListInsert+0x2e>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d2f6      	bcs.n	8005394 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	601a      	str	r2, [r3, #0]
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6892      	ldr	r2, [r2, #8]
 80053f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6852      	ldr	r2, [r2, #4]
 80053fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	429a      	cmp	r2, r3
 8005408:	d103      	bne.n	8005412 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	1e5a      	subs	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
	...

08005434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d109      	bne.n	800545c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	e7fe      	b.n	800545a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800545c:	f002 f966 	bl	800772c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005468:	68f9      	ldr	r1, [r7, #12]
 800546a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	441a      	add	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548c:	3b01      	subs	r3, #1
 800548e:	68f9      	ldr	r1, [r7, #12]
 8005490:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005492:	fb01 f303 	mul.w	r3, r1, r3
 8005496:	441a      	add	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	22ff      	movs	r2, #255	; 0xff
 80054a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	22ff      	movs	r2, #255	; 0xff
 80054a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d114      	bne.n	80054dc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01a      	beq.n	80054f0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3310      	adds	r3, #16
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 fc0e 	bl	8006ce0 <xTaskRemoveFromEventList>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d012      	beq.n	80054f0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054ca:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <xQueueGenericReset+0xcc>)
 80054cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	e009      	b.n	80054f0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3310      	adds	r3, #16
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fef2 	bl	80052ca <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3324      	adds	r3, #36	; 0x24
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff feed 	bl	80052ca <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054f0:	f002 f94a 	bl	8007788 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054f4:	2301      	movs	r3, #1
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	e000ed04 	.word	0xe000ed04

08005504 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08e      	sub	sp, #56	; 0x38
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d109      	bne.n	800552c <xQueueGenericCreateStatic+0x28>
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	62bb      	str	r3, [r7, #40]	; 0x28
 800552a:	e7fe      	b.n	800552a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d109      	bne.n	8005546 <xQueueGenericCreateStatic+0x42>
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
 8005544:	e7fe      	b.n	8005544 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <xQueueGenericCreateStatic+0x4e>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <xQueueGenericCreateStatic+0x52>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <xQueueGenericCreateStatic+0x54>
 8005556:	2300      	movs	r3, #0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d109      	bne.n	8005570 <xQueueGenericCreateStatic+0x6c>
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	623b      	str	r3, [r7, #32]
 800556e:	e7fe      	b.n	800556e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d102      	bne.n	800557c <xQueueGenericCreateStatic+0x78>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <xQueueGenericCreateStatic+0x7c>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <xQueueGenericCreateStatic+0x7e>
 8005580:	2300      	movs	r3, #0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <xQueueGenericCreateStatic+0x96>
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	e7fe      	b.n	8005598 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800559a:	2348      	movs	r3, #72	; 0x48
 800559c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2b48      	cmp	r3, #72	; 0x48
 80055a2:	d009      	beq.n	80055b8 <xQueueGenericCreateStatic+0xb4>
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	e7fe      	b.n	80055b6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80055bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00d      	beq.n	80055de <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80055ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	4613      	mov	r3, r2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f842 	bl	8005662 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3730      	adds	r7, #48	; 0x30
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	; 0x28
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	4613      	mov	r3, r2
 80055f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d109      	bne.n	8005610 <xQueueGenericCreate+0x28>
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	e7fe      	b.n	800560e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d102      	bne.n	800561c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005616:	2300      	movs	r3, #0
 8005618:	61fb      	str	r3, [r7, #28]
 800561a:	e004      	b.n	8005626 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	fb02 f303 	mul.w	r3, r2, r3
 8005624:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	3348      	adds	r3, #72	; 0x48
 800562a:	4618      	mov	r0, r3
 800562c:	f002 f998 	bl	8007960 <pvPortMalloc>
 8005630:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00f      	beq.n	8005658 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	3348      	adds	r3, #72	; 0x48
 800563c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005646:	79fa      	ldrb	r2, [r7, #7]
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	4613      	mov	r3, r2
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f805 	bl	8005662 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005658:	69bb      	ldr	r3, [r7, #24]
	}
 800565a:	4618      	mov	r0, r3
 800565c:	3720      	adds	r7, #32
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
 800566e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	e002      	b.n	8005684 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005690:	2101      	movs	r1, #1
 8005692:	69b8      	ldr	r0, [r7, #24]
 8005694:	f7ff fece 	bl	8005434 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00e      	beq.n	80056cc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80056c0:	2300      	movs	r3, #0
 80056c2:	2200      	movs	r2, #0
 80056c4:	2100      	movs	r1, #0
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f838 	bl	800573c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80056cc:	bf00      	nop
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80056de:	2301      	movs	r3, #1
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	461a      	mov	r2, r3
 80056ea:	6939      	ldr	r1, [r7, #16]
 80056ec:	6978      	ldr	r0, [r7, #20]
 80056ee:	f7ff ff7b 	bl	80055e8 <xQueueGenericCreate>
 80056f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f7ff ffd3 	bl	80056a0 <prvInitialiseMutex>

		return pxNewQueue;
 80056fa:	68fb      	ldr	r3, [r7, #12]
	}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af02      	add	r7, sp, #8
 800570a:	4603      	mov	r3, r0
 800570c:	6039      	str	r1, [r7, #0]
 800570e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005710:	2301      	movs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2200      	movs	r2, #0
 8005720:	6939      	ldr	r1, [r7, #16]
 8005722:	6978      	ldr	r0, [r7, #20]
 8005724:	f7ff feee 	bl	8005504 <xQueueGenericCreateStatic>
 8005728:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f7ff ffb8 	bl	80056a0 <prvInitialiseMutex>

		return pxNewQueue;
 8005730:	68fb      	ldr	r3, [r7, #12]
	}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08e      	sub	sp, #56	; 0x38
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800574a:	2300      	movs	r3, #0
 800574c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	2b00      	cmp	r3, #0
 8005756:	d109      	bne.n	800576c <xQueueGenericSend+0x30>
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	62bb      	str	r3, [r7, #40]	; 0x28
 800576a:	e7fe      	b.n	800576a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d103      	bne.n	800577a <xQueueGenericSend+0x3e>
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <xQueueGenericSend+0x42>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <xQueueGenericSend+0x44>
 800577e:	2300      	movs	r3, #0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d109      	bne.n	8005798 <xQueueGenericSend+0x5c>
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
 8005796:	e7fe      	b.n	8005796 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b02      	cmp	r3, #2
 800579c:	d103      	bne.n	80057a6 <xQueueGenericSend+0x6a>
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <xQueueGenericSend+0x6e>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <xQueueGenericSend+0x70>
 80057aa:	2300      	movs	r3, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d109      	bne.n	80057c4 <xQueueGenericSend+0x88>
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	623b      	str	r3, [r7, #32]
 80057c2:	e7fe      	b.n	80057c2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057c4:	f001 fc48 	bl	8007058 <xTaskGetSchedulerState>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d102      	bne.n	80057d4 <xQueueGenericSend+0x98>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <xQueueGenericSend+0x9c>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <xQueueGenericSend+0x9e>
 80057d8:	2300      	movs	r3, #0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <xQueueGenericSend+0xb6>
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	61fb      	str	r3, [r7, #28]
 80057f0:	e7fe      	b.n	80057f0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057f2:	f001 ff9b 	bl	800772c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	429a      	cmp	r2, r3
 8005800:	d302      	bcc.n	8005808 <xQueueGenericSend+0xcc>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b02      	cmp	r3, #2
 8005806:	d129      	bne.n	800585c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800580e:	f000 fc80 	bl	8006112 <prvCopyDataToQueue>
 8005812:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	2b00      	cmp	r3, #0
 800581a:	d010      	beq.n	800583e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	3324      	adds	r3, #36	; 0x24
 8005820:	4618      	mov	r0, r3
 8005822:	f001 fa5d 	bl	8006ce0 <xTaskRemoveFromEventList>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d013      	beq.n	8005854 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800582c:	4b3f      	ldr	r3, [pc, #252]	; (800592c <xQueueGenericSend+0x1f0>)
 800582e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	e00a      	b.n	8005854 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d007      	beq.n	8005854 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005844:	4b39      	ldr	r3, [pc, #228]	; (800592c <xQueueGenericSend+0x1f0>)
 8005846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005854:	f001 ff98 	bl	8007788 <vPortExitCritical>
				return pdPASS;
 8005858:	2301      	movs	r3, #1
 800585a:	e063      	b.n	8005924 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005862:	f001 ff91 	bl	8007788 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005866:	2300      	movs	r3, #0
 8005868:	e05c      	b.n	8005924 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800586a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005870:	f107 0314 	add.w	r3, r7, #20
 8005874:	4618      	mov	r0, r3
 8005876:	f001 fa95 	bl	8006da4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800587a:	2301      	movs	r3, #1
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800587e:	f001 ff83 	bl	8007788 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005882:	f001 f827 	bl	80068d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005886:	f001 ff51 	bl	800772c <vPortEnterCritical>
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005890:	b25b      	sxtb	r3, r3
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005896:	d103      	bne.n	80058a0 <xQueueGenericSend+0x164>
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a6:	b25b      	sxtb	r3, r3
 80058a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058ac:	d103      	bne.n	80058b6 <xQueueGenericSend+0x17a>
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058b6:	f001 ff67 	bl	8007788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058ba:	1d3a      	adds	r2, r7, #4
 80058bc:	f107 0314 	add.w	r3, r7, #20
 80058c0:	4611      	mov	r1, r2
 80058c2:	4618      	mov	r0, r3
 80058c4:	f001 fa84 	bl	8006dd0 <xTaskCheckForTimeOut>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d124      	bne.n	8005918 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058d0:	f000 fd17 	bl	8006302 <prvIsQueueFull>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d018      	beq.n	800590c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	3310      	adds	r3, #16
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4611      	mov	r1, r2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f001 f9d8 	bl	8006c98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ea:	f000 fca2 	bl	8006232 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058ee:	f000 ffff 	bl	80068f0 <xTaskResumeAll>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f47f af7c 	bne.w	80057f2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80058fa:	4b0c      	ldr	r3, [pc, #48]	; (800592c <xQueueGenericSend+0x1f0>)
 80058fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	e772      	b.n	80057f2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800590c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800590e:	f000 fc90 	bl	8006232 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005912:	f000 ffed 	bl	80068f0 <xTaskResumeAll>
 8005916:	e76c      	b.n	80057f2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800591a:	f000 fc8a 	bl	8006232 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800591e:	f000 ffe7 	bl	80068f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005922:	2300      	movs	r3, #0
		}
	}
}
 8005924:	4618      	mov	r0, r3
 8005926:	3738      	adds	r7, #56	; 0x38
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	e000ed04 	.word	0xe000ed04

08005930 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08e      	sub	sp, #56	; 0x38
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <xQueueGenericSendFromISR+0x2c>
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
 800595a:	e7fe      	b.n	800595a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d103      	bne.n	800596a <xQueueGenericSendFromISR+0x3a>
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <xQueueGenericSendFromISR+0x3e>
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <xQueueGenericSendFromISR+0x40>
 800596e:	2300      	movs	r3, #0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d109      	bne.n	8005988 <xQueueGenericSendFromISR+0x58>
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	623b      	str	r3, [r7, #32]
 8005986:	e7fe      	b.n	8005986 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d103      	bne.n	8005996 <xQueueGenericSendFromISR+0x66>
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <xQueueGenericSendFromISR+0x6a>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <xQueueGenericSendFromISR+0x6c>
 800599a:	2300      	movs	r3, #0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d109      	bne.n	80059b4 <xQueueGenericSendFromISR+0x84>
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	61fb      	str	r3, [r7, #28]
 80059b2:	e7fe      	b.n	80059b2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059b4:	f001 ff96 	bl	80078e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059b8:	f3ef 8211 	mrs	r2, BASEPRI
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	61ba      	str	r2, [r7, #24]
 80059ce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80059d0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059dc:	429a      	cmp	r2, r3
 80059de:	d302      	bcc.n	80059e6 <xQueueGenericSendFromISR+0xb6>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d12c      	bne.n	8005a40 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059f6:	f000 fb8c 	bl	8006112 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059fa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a02:	d112      	bne.n	8005a2a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d016      	beq.n	8005a3a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	3324      	adds	r3, #36	; 0x24
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 f965 	bl	8006ce0 <xTaskRemoveFromEventList>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00e      	beq.n	8005a3a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00b      	beq.n	8005a3a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	e007      	b.n	8005a3a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a2e:	3301      	adds	r3, #1
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	b25a      	sxtb	r2, r3
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005a3e:	e001      	b.n	8005a44 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	637b      	str	r3, [r7, #52]	; 0x34
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3738      	adds	r7, #56	; 0x38
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08e      	sub	sp, #56	; 0x38
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d109      	bne.n	8005a80 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	623b      	str	r3, [r7, #32]
 8005a7e:	e7fe      	b.n	8005a7e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d009      	beq.n	8005a9c <xQueueGiveFromISR+0x44>
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	e7fe      	b.n	8005a9a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d103      	bne.n	8005aac <xQueueGiveFromISR+0x54>
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <xQueueGiveFromISR+0x58>
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <xQueueGiveFromISR+0x5a>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <xQueueGiveFromISR+0x72>
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	61bb      	str	r3, [r7, #24]
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aca:	f001 ff0b 	bl	80078e4 <vPortValidateInterruptPriority>
	__asm volatile
 8005ace:	f3ef 8211 	mrs	r2, BASEPRI
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	617a      	str	r2, [r7, #20]
 8005ae4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005ae6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d22b      	bcs.n	8005b52 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b14:	d112      	bne.n	8005b3c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d016      	beq.n	8005b4c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	3324      	adds	r3, #36	; 0x24
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 f8dc 	bl	8006ce0 <xTaskRemoveFromEventList>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00e      	beq.n	8005b4c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00b      	beq.n	8005b4c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2201      	movs	r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	e007      	b.n	8005b4c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b40:	3301      	adds	r3, #1
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	b25a      	sxtb	r2, r3
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b50:	e001      	b.n	8005b56 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	637b      	str	r3, [r7, #52]	; 0x34
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3738      	adds	r7, #56	; 0x38
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08c      	sub	sp, #48	; 0x30
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d109      	bne.n	8005b9a <xQueueReceive+0x2e>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	623b      	str	r3, [r7, #32]
 8005b98:	e7fe      	b.n	8005b98 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d103      	bne.n	8005ba8 <xQueueReceive+0x3c>
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <xQueueReceive+0x40>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <xQueueReceive+0x42>
 8005bac:	2300      	movs	r3, #0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d109      	bne.n	8005bc6 <xQueueReceive+0x5a>
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	e7fe      	b.n	8005bc4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bc6:	f001 fa47 	bl	8007058 <xTaskGetSchedulerState>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <xQueueReceive+0x6a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <xQueueReceive+0x6e>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <xQueueReceive+0x70>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <xQueueReceive+0x88>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	e7fe      	b.n	8005bf2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bf4:	f001 fd9a 	bl	800772c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01f      	beq.n	8005c44 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c08:	f000 faed 	bl	80061e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	1e5a      	subs	r2, r3, #1
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00f      	beq.n	8005c3c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	3310      	adds	r3, #16
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 f85d 	bl	8006ce0 <xTaskRemoveFromEventList>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c2c:	4b3c      	ldr	r3, [pc, #240]	; (8005d20 <xQueueReceive+0x1b4>)
 8005c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c3c:	f001 fda4 	bl	8007788 <vPortExitCritical>
				return pdPASS;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e069      	b.n	8005d18 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d103      	bne.n	8005c52 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c4a:	f001 fd9d 	bl	8007788 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e062      	b.n	8005d18 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c58:	f107 0310 	add.w	r3, r7, #16
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 f8a1 	bl	8006da4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c62:	2301      	movs	r3, #1
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c66:	f001 fd8f 	bl	8007788 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c6a:	f000 fe33 	bl	80068d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c6e:	f001 fd5d 	bl	800772c <vPortEnterCritical>
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c78:	b25b      	sxtb	r3, r3
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c7e:	d103      	bne.n	8005c88 <xQueueReceive+0x11c>
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c8e:	b25b      	sxtb	r3, r3
 8005c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c94:	d103      	bne.n	8005c9e <xQueueReceive+0x132>
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c9e:	f001 fd73 	bl	8007788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ca2:	1d3a      	adds	r2, r7, #4
 8005ca4:	f107 0310 	add.w	r3, r7, #16
 8005ca8:	4611      	mov	r1, r2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 f890 	bl	8006dd0 <xTaskCheckForTimeOut>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d123      	bne.n	8005cfe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb8:	f000 fb0d 	bl	80062d6 <prvIsQueueEmpty>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d017      	beq.n	8005cf2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	3324      	adds	r3, #36	; 0x24
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 ffe4 	bl	8006c98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd2:	f000 faae 	bl	8006232 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cd6:	f000 fe0b 	bl	80068f0 <xTaskResumeAll>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d189      	bne.n	8005bf4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005ce0:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <xQueueReceive+0x1b4>)
 8005ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	e780      	b.n	8005bf4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cf4:	f000 fa9d 	bl	8006232 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cf8:	f000 fdfa 	bl	80068f0 <xTaskResumeAll>
 8005cfc:	e77a      	b.n	8005bf4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d00:	f000 fa97 	bl	8006232 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d04:	f000 fdf4 	bl	80068f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d0a:	f000 fae4 	bl	80062d6 <prvIsQueueEmpty>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f43f af6f 	beq.w	8005bf4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3730      	adds	r7, #48	; 0x30
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	e000ed04 	.word	0xe000ed04

08005d24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08e      	sub	sp, #56	; 0x38
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005d36:	2300      	movs	r3, #0
 8005d38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <xQueueSemaphoreTake+0x30>
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	623b      	str	r3, [r7, #32]
 8005d52:	e7fe      	b.n	8005d52 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <xQueueSemaphoreTake+0x4c>
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	e7fe      	b.n	8005d6e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d70:	f001 f972 	bl	8007058 <xTaskGetSchedulerState>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d102      	bne.n	8005d80 <xQueueSemaphoreTake+0x5c>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <xQueueSemaphoreTake+0x60>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e000      	b.n	8005d86 <xQueueSemaphoreTake+0x62>
 8005d84:	2300      	movs	r3, #0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d109      	bne.n	8005d9e <xQueueSemaphoreTake+0x7a>
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	e7fe      	b.n	8005d9c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d9e:	f001 fcc5 	bl	800772c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d024      	beq.n	8005df8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	1e5a      	subs	r2, r3, #1
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d104      	bne.n	8005dc8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005dbe:	f001 fb11 	bl	80073e4 <pvTaskIncrementMutexHeldCount>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00f      	beq.n	8005df0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd2:	3310      	adds	r3, #16
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 ff83 	bl	8006ce0 <xTaskRemoveFromEventList>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005de0:	4b53      	ldr	r3, [pc, #332]	; (8005f30 <xQueueSemaphoreTake+0x20c>)
 8005de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005df0:	f001 fcca 	bl	8007788 <vPortExitCritical>
				return pdPASS;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e096      	b.n	8005f26 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d110      	bne.n	8005e20 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d009      	beq.n	8005e18 <xQueueSemaphoreTake+0xf4>
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	e7fe      	b.n	8005e16 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005e18:	f001 fcb6 	bl	8007788 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e082      	b.n	8005f26 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d106      	bne.n	8005e34 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e26:	f107 030c 	add.w	r3, r7, #12
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 ffba 	bl	8006da4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e30:	2301      	movs	r3, #1
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e34:	f001 fca8 	bl	8007788 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e38:	f000 fd4c 	bl	80068d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e3c:	f001 fc76 	bl	800772c <vPortEnterCritical>
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e46:	b25b      	sxtb	r3, r3
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e4c:	d103      	bne.n	8005e56 <xQueueSemaphoreTake+0x132>
 8005e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e5c:	b25b      	sxtb	r3, r3
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e62:	d103      	bne.n	8005e6c <xQueueSemaphoreTake+0x148>
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e6c:	f001 fc8c 	bl	8007788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e70:	463a      	mov	r2, r7
 8005e72:	f107 030c 	add.w	r3, r7, #12
 8005e76:	4611      	mov	r1, r2
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 ffa9 	bl	8006dd0 <xTaskCheckForTimeOut>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d132      	bne.n	8005eea <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e86:	f000 fa26 	bl	80062d6 <prvIsQueueEmpty>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d026      	beq.n	8005ede <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d109      	bne.n	8005eac <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005e98:	f001 fc48 	bl	800772c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f001 f8f7 	bl	8007094 <xTaskPriorityInherit>
 8005ea6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005ea8:	f001 fc6e 	bl	8007788 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	3324      	adds	r3, #36	; 0x24
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 feef 	bl	8006c98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005eba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ebc:	f000 f9b9 	bl	8006232 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ec0:	f000 fd16 	bl	80068f0 <xTaskResumeAll>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f47f af69 	bne.w	8005d9e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005ecc:	4b18      	ldr	r3, [pc, #96]	; (8005f30 <xQueueSemaphoreTake+0x20c>)
 8005ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	e75f      	b.n	8005d9e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005ede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ee0:	f000 f9a7 	bl	8006232 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ee4:	f000 fd04 	bl	80068f0 <xTaskResumeAll>
 8005ee8:	e759      	b.n	8005d9e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005eea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005eec:	f000 f9a1 	bl	8006232 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ef0:	f000 fcfe 	bl	80068f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ef6:	f000 f9ee 	bl	80062d6 <prvIsQueueEmpty>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f43f af4e 	beq.w	8005d9e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00d      	beq.n	8005f24 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005f08:	f001 fc10 	bl	800772c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005f0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f0e:	f000 f8e8 	bl	80060e2 <prvGetDisinheritPriorityAfterTimeout>
 8005f12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 f9c4 	bl	80072a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005f20:	f001 fc32 	bl	8007788 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3738      	adds	r7, #56	; 0x38
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	e000ed04 	.word	0xe000ed04

08005f34 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08e      	sub	sp, #56	; 0x38
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <xQueueReceiveFromISR+0x2a>
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	623b      	str	r3, [r7, #32]
 8005f5c:	e7fe      	b.n	8005f5c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d103      	bne.n	8005f6c <xQueueReceiveFromISR+0x38>
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <xQueueReceiveFromISR+0x3c>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e000      	b.n	8005f72 <xQueueReceiveFromISR+0x3e>
 8005f70:	2300      	movs	r3, #0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d109      	bne.n	8005f8a <xQueueReceiveFromISR+0x56>
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	61fb      	str	r3, [r7, #28]
 8005f88:	e7fe      	b.n	8005f88 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f8a:	f001 fcab 	bl	80078e4 <vPortValidateInterruptPriority>
	__asm volatile
 8005f8e:	f3ef 8211 	mrs	r2, BASEPRI
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	61ba      	str	r2, [r7, #24]
 8005fa4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005fa6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d02f      	beq.n	8006016 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fc4:	f000 f90f 	bl	80061e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	1e5a      	subs	r2, r3, #1
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005fd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fd8:	d112      	bne.n	8006000 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d016      	beq.n	8006010 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	3310      	adds	r3, #16
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fe7a 	bl	8006ce0 <xTaskRemoveFromEventList>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00e      	beq.n	8006010 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00b      	beq.n	8006010 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	e007      	b.n	8006010 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006004:	3301      	adds	r3, #1
 8006006:	b2db      	uxtb	r3, r3
 8006008:	b25a      	sxtb	r2, r3
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006010:	2301      	movs	r3, #1
 8006012:	637b      	str	r3, [r7, #52]	; 0x34
 8006014:	e001      	b.n	800601a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006016:	2300      	movs	r3, #0
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
 800601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006026:	4618      	mov	r0, r3
 8006028:	3738      	adds	r7, #56	; 0x38
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d109      	bne.n	8006050 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	e7fe      	b.n	800604e <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8006050:	f001 fb6c 	bl	800772c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800605a:	f001 fb95 	bl	8007788 <vPortExitCritical>

	return uxReturn;
 800605e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d109      	bne.n	800608a <uxQueueMessagesWaitingFromISR+0x22>
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	60bb      	str	r3, [r7, #8]
 8006088:	e7fe      	b.n	8006088 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8006090:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d109      	bne.n	80060c4 <vQueueDelete+0x26>
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	60bb      	str	r3, [r7, #8]
 80060c2:	e7fe      	b.n	80060c2 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f935 	bl	8006334 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d102      	bne.n	80060da <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f001 fd05 	bl	8007ae4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80060da:	bf00      	nop
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d006      	beq.n	8006100 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f1c3 0307 	rsb	r3, r3, #7
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	e001      	b.n	8006104 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006104:	68fb      	ldr	r3, [r7, #12]
	}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b086      	sub	sp, #24
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006126:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10d      	bne.n	800614c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d14d      	bne.n	80061d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	4618      	mov	r0, r3
 800613e:	f001 f82f 	bl	80071a0 <xTaskPriorityDisinherit>
 8006142:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	605a      	str	r2, [r3, #4]
 800614a:	e043      	b.n	80061d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d119      	bne.n	8006186 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6898      	ldr	r0, [r3, #8]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	461a      	mov	r2, r3
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	f010 fa9c 	bl	801669a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	441a      	add	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	429a      	cmp	r2, r3
 800617a:	d32b      	bcc.n	80061d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	609a      	str	r2, [r3, #8]
 8006184:	e026      	b.n	80061d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	68d8      	ldr	r0, [r3, #12]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	461a      	mov	r2, r3
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	f010 fa82 	bl	801669a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	425b      	negs	r3, r3
 80061a0:	441a      	add	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d207      	bcs.n	80061c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	425b      	negs	r3, r3
 80061bc:	441a      	add	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d105      	bne.n	80061d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80061dc:	697b      	ldr	r3, [r7, #20]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b082      	sub	sp, #8
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d018      	beq.n	800622a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	441a      	add	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	429a      	cmp	r2, r3
 8006210:	d303      	bcc.n	800621a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68d9      	ldr	r1, [r3, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	461a      	mov	r2, r3
 8006224:	6838      	ldr	r0, [r7, #0]
 8006226:	f010 fa38 	bl	801669a <memcpy>
	}
}
 800622a:	bf00      	nop
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800623a:	f001 fa77 	bl	800772c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006244:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006246:	e011      	b.n	800626c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	2b00      	cmp	r3, #0
 800624e:	d012      	beq.n	8006276 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3324      	adds	r3, #36	; 0x24
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fd43 	bl	8006ce0 <xTaskRemoveFromEventList>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006260:	f000 fe16 	bl	8006e90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	3b01      	subs	r3, #1
 8006268:	b2db      	uxtb	r3, r3
 800626a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800626c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006270:	2b00      	cmp	r3, #0
 8006272:	dce9      	bgt.n	8006248 <prvUnlockQueue+0x16>
 8006274:	e000      	b.n	8006278 <prvUnlockQueue+0x46>
					break;
 8006276:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	22ff      	movs	r2, #255	; 0xff
 800627c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006280:	f001 fa82 	bl	8007788 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006284:	f001 fa52 	bl	800772c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800628e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006290:	e011      	b.n	80062b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d012      	beq.n	80062c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	3310      	adds	r3, #16
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fd1e 	bl	8006ce0 <xTaskRemoveFromEventList>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062aa:	f000 fdf1 	bl	8006e90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062ae:	7bbb      	ldrb	r3, [r7, #14]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	dce9      	bgt.n	8006292 <prvUnlockQueue+0x60>
 80062be:	e000      	b.n	80062c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	22ff      	movs	r2, #255	; 0xff
 80062c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80062ca:	f001 fa5d 	bl	8007788 <vPortExitCritical>
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062de:	f001 fa25 	bl	800772c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d102      	bne.n	80062f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062ea:	2301      	movs	r3, #1
 80062ec:	60fb      	str	r3, [r7, #12]
 80062ee:	e001      	b.n	80062f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062f4:	f001 fa48 	bl	8007788 <vPortExitCritical>

	return xReturn;
 80062f8:	68fb      	ldr	r3, [r7, #12]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800630a:	f001 fa0f 	bl	800772c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006316:	429a      	cmp	r2, r3
 8006318:	d102      	bne.n	8006320 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800631a:	2301      	movs	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	e001      	b.n	8006324 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006324:	f001 fa30 	bl	8007788 <vPortExitCritical>

	return xReturn;
 8006328:	68fb      	ldr	r3, [r7, #12]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e016      	b.n	8006370 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006342:	4a10      	ldr	r2, [pc, #64]	; (8006384 <vQueueUnregisterQueue+0x50>)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	4413      	add	r3, r2
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	429a      	cmp	r2, r3
 8006350:	d10b      	bne.n	800636a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006352:	4a0c      	ldr	r2, [pc, #48]	; (8006384 <vQueueUnregisterQueue+0x50>)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2100      	movs	r1, #0
 8006358:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800635c:	4a09      	ldr	r2, [pc, #36]	; (8006384 <vQueueUnregisterQueue+0x50>)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	4413      	add	r3, r2
 8006364:	2200      	movs	r2, #0
 8006366:	605a      	str	r2, [r3, #4]
				break;
 8006368:	e005      	b.n	8006376 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3301      	adds	r3, #1
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b07      	cmp	r3, #7
 8006374:	d9e5      	bls.n	8006342 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006376:	bf00      	nop
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	200074a4 	.word	0x200074a4

08006388 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08e      	sub	sp, #56	; 0x38
 800638c:	af04      	add	r7, sp, #16
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <xTaskCreateStatic+0x28>
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	623b      	str	r3, [r7, #32]
 80063ae:	e7fe      	b.n	80063ae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d109      	bne.n	80063ca <xTaskCreateStatic+0x42>
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	61fb      	str	r3, [r7, #28]
 80063c8:	e7fe      	b.n	80063c8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063ca:	2354      	movs	r3, #84	; 0x54
 80063cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b54      	cmp	r3, #84	; 0x54
 80063d2:	d009      	beq.n	80063e8 <xTaskCreateStatic+0x60>
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	61bb      	str	r3, [r7, #24]
 80063e6:	e7fe      	b.n	80063e6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d01e      	beq.n	800642c <xTaskCreateStatic+0xa4>
 80063ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01b      	beq.n	800642c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	2202      	movs	r2, #2
 8006402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006406:	2300      	movs	r3, #0
 8006408:	9303      	str	r3, [sp, #12]
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	9302      	str	r3, [sp, #8]
 800640e:	f107 0314 	add.w	r3, r7, #20
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 f850 	bl	80064c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006426:	f000 f8cb 	bl	80065c0 <prvAddNewTaskToReadyList>
 800642a:	e001      	b.n	8006430 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800642c:	2300      	movs	r3, #0
 800642e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006430:	697b      	ldr	r3, [r7, #20]
	}
 8006432:	4618      	mov	r0, r3
 8006434:	3728      	adds	r7, #40	; 0x28
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800643a:	b580      	push	{r7, lr}
 800643c:	b08c      	sub	sp, #48	; 0x30
 800643e:	af04      	add	r7, sp, #16
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	603b      	str	r3, [r7, #0]
 8006446:	4613      	mov	r3, r2
 8006448:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4618      	mov	r0, r3
 8006450:	f001 fa86 	bl	8007960 <pvPortMalloc>
 8006454:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00e      	beq.n	800647a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800645c:	2054      	movs	r0, #84	; 0x54
 800645e:	f001 fa7f 	bl	8007960 <pvPortMalloc>
 8006462:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	631a      	str	r2, [r3, #48]	; 0x30
 8006470:	e005      	b.n	800647e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006472:	6978      	ldr	r0, [r7, #20]
 8006474:	f001 fb36 	bl	8007ae4 <vPortFree>
 8006478:	e001      	b.n	800647e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d017      	beq.n	80064b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800648c:	88fa      	ldrh	r2, [r7, #6]
 800648e:	2300      	movs	r3, #0
 8006490:	9303      	str	r3, [sp, #12]
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	9302      	str	r3, [sp, #8]
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68b9      	ldr	r1, [r7, #8]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 f80e 	bl	80064c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064a8:	69f8      	ldr	r0, [r7, #28]
 80064aa:	f000 f889 	bl	80065c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064ae:	2301      	movs	r3, #1
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	e002      	b.n	80064ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064ba:	69bb      	ldr	r3, [r7, #24]
	}
 80064bc:	4618      	mov	r0, r3
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064dc:	3b01      	subs	r3, #1
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	f023 0307 	bic.w	r3, r3, #7
 80064ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d009      	beq.n	800650a <prvInitialiseNewTask+0x46>
 80064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	e7fe      	b.n	8006508 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800650a:	2300      	movs	r3, #0
 800650c:	61fb      	str	r3, [r7, #28]
 800650e:	e012      	b.n	8006536 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4413      	add	r3, r2
 8006516:	7819      	ldrb	r1, [r3, #0]
 8006518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	4413      	add	r3, r2
 800651e:	3334      	adds	r3, #52	; 0x34
 8006520:	460a      	mov	r2, r1
 8006522:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	4413      	add	r3, r2
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d006      	beq.n	800653e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	3301      	adds	r3, #1
 8006534:	61fb      	str	r3, [r7, #28]
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	2b0f      	cmp	r3, #15
 800653a:	d9e9      	bls.n	8006510 <prvInitialiseNewTask+0x4c>
 800653c:	e000      	b.n	8006540 <prvInitialiseNewTask+0x7c>
		{
			break;
 800653e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	2b06      	cmp	r3, #6
 800654c:	d901      	bls.n	8006552 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800654e:	2306      	movs	r3, #6
 8006550:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006556:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800655c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	2200      	movs	r2, #0
 8006562:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	3304      	adds	r3, #4
 8006568:	4618      	mov	r0, r3
 800656a:	f7fe fece 	bl	800530a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	3318      	adds	r3, #24
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe fec9 	bl	800530a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800657c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	f1c3 0207 	rsb	r2, r3, #7
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800658c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	2200      	movs	r2, #0
 8006592:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	68f9      	ldr	r1, [r7, #12]
 80065a0:	69b8      	ldr	r0, [r7, #24]
 80065a2:	f000 ff99 	bl	80074d8 <pxPortInitialiseStack>
 80065a6:	4602      	mov	r2, r0
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065b8:	bf00      	nop
 80065ba:	3720      	adds	r7, #32
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065c8:	f001 f8b0 	bl	800772c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065cc:	4b2a      	ldr	r3, [pc, #168]	; (8006678 <prvAddNewTaskToReadyList+0xb8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3301      	adds	r3, #1
 80065d2:	4a29      	ldr	r2, [pc, #164]	; (8006678 <prvAddNewTaskToReadyList+0xb8>)
 80065d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065d6:	4b29      	ldr	r3, [pc, #164]	; (800667c <prvAddNewTaskToReadyList+0xbc>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d109      	bne.n	80065f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065de:	4a27      	ldr	r2, [pc, #156]	; (800667c <prvAddNewTaskToReadyList+0xbc>)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065e4:	4b24      	ldr	r3, [pc, #144]	; (8006678 <prvAddNewTaskToReadyList+0xb8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d110      	bne.n	800660e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065ec:	f000 fc74 	bl	8006ed8 <prvInitialiseTaskLists>
 80065f0:	e00d      	b.n	800660e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065f2:	4b23      	ldr	r3, [pc, #140]	; (8006680 <prvAddNewTaskToReadyList+0xc0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065fa:	4b20      	ldr	r3, [pc, #128]	; (800667c <prvAddNewTaskToReadyList+0xbc>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	429a      	cmp	r2, r3
 8006606:	d802      	bhi.n	800660e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006608:	4a1c      	ldr	r2, [pc, #112]	; (800667c <prvAddNewTaskToReadyList+0xbc>)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800660e:	4b1d      	ldr	r3, [pc, #116]	; (8006684 <prvAddNewTaskToReadyList+0xc4>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3301      	adds	r3, #1
 8006614:	4a1b      	ldr	r2, [pc, #108]	; (8006684 <prvAddNewTaskToReadyList+0xc4>)
 8006616:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	2201      	movs	r2, #1
 800661e:	409a      	lsls	r2, r3
 8006620:	4b19      	ldr	r3, [pc, #100]	; (8006688 <prvAddNewTaskToReadyList+0xc8>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4313      	orrs	r3, r2
 8006626:	4a18      	ldr	r2, [pc, #96]	; (8006688 <prvAddNewTaskToReadyList+0xc8>)
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662e:	4613      	mov	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4a15      	ldr	r2, [pc, #84]	; (800668c <prvAddNewTaskToReadyList+0xcc>)
 8006638:	441a      	add	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3304      	adds	r3, #4
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f7fe fe6f 	bl	8005324 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006646:	f001 f89f 	bl	8007788 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800664a:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <prvAddNewTaskToReadyList+0xc0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00e      	beq.n	8006670 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006652:	4b0a      	ldr	r3, [pc, #40]	; (800667c <prvAddNewTaskToReadyList+0xbc>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	429a      	cmp	r2, r3
 800665e:	d207      	bcs.n	8006670 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <prvAddNewTaskToReadyList+0xd0>)
 8006662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	200003fc 	.word	0x200003fc
 800667c:	200002fc 	.word	0x200002fc
 8006680:	20000408 	.word	0x20000408
 8006684:	20000418 	.word	0x20000418
 8006688:	20000404 	.word	0x20000404
 800668c:	20000300 	.word	0x20000300
 8006690:	e000ed04 	.word	0xe000ed04

08006694 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800669c:	f001 f846 	bl	800772c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d102      	bne.n	80066ac <vTaskDelete+0x18>
 80066a6:	4b38      	ldr	r3, [pc, #224]	; (8006788 <vTaskDelete+0xf4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	e000      	b.n	80066ae <vTaskDelete+0x1a>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fe fe92 	bl	80053de <uxListRemove>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d115      	bne.n	80066ec <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c4:	4931      	ldr	r1, [pc, #196]	; (800678c <vTaskDelete+0xf8>)
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	440b      	add	r3, r1
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <vTaskDelete+0x58>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066da:	2201      	movs	r2, #1
 80066dc:	fa02 f303 	lsl.w	r3, r2, r3
 80066e0:	43da      	mvns	r2, r3
 80066e2:	4b2b      	ldr	r3, [pc, #172]	; (8006790 <vTaskDelete+0xfc>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4013      	ands	r3, r2
 80066e8:	4a29      	ldr	r2, [pc, #164]	; (8006790 <vTaskDelete+0xfc>)
 80066ea:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d004      	beq.n	80066fe <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3318      	adds	r3, #24
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fe fe70 	bl	80053de <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80066fe:	4b25      	ldr	r3, [pc, #148]	; (8006794 <vTaskDelete+0x100>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3301      	adds	r3, #1
 8006704:	4a23      	ldr	r2, [pc, #140]	; (8006794 <vTaskDelete+0x100>)
 8006706:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006708:	4b1f      	ldr	r3, [pc, #124]	; (8006788 <vTaskDelete+0xf4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	429a      	cmp	r2, r3
 8006710:	d10b      	bne.n	800672a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3304      	adds	r3, #4
 8006716:	4619      	mov	r1, r3
 8006718:	481f      	ldr	r0, [pc, #124]	; (8006798 <vTaskDelete+0x104>)
 800671a:	f7fe fe03 	bl	8005324 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800671e:	4b1f      	ldr	r3, [pc, #124]	; (800679c <vTaskDelete+0x108>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	4a1d      	ldr	r2, [pc, #116]	; (800679c <vTaskDelete+0x108>)
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	e009      	b.n	800673e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800672a:	4b1d      	ldr	r3, [pc, #116]	; (80067a0 <vTaskDelete+0x10c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3b01      	subs	r3, #1
 8006730:	4a1b      	ldr	r2, [pc, #108]	; (80067a0 <vTaskDelete+0x10c>)
 8006732:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 fc3b 	bl	8006fb0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800673a:	f000 fc67 	bl	800700c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800673e:	f001 f823 	bl	8007788 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006742:	4b18      	ldr	r3, [pc, #96]	; (80067a4 <vTaskDelete+0x110>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d01a      	beq.n	8006780 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800674a:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <vTaskDelete+0xf4>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	429a      	cmp	r2, r3
 8006752:	d115      	bne.n	8006780 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006754:	4b14      	ldr	r3, [pc, #80]	; (80067a8 <vTaskDelete+0x114>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <vTaskDelete+0xdc>
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	e7fe      	b.n	800676e <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8006770:	4b0e      	ldr	r3, [pc, #56]	; (80067ac <vTaskDelete+0x118>)
 8006772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006780:	bf00      	nop
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	200002fc 	.word	0x200002fc
 800678c:	20000300 	.word	0x20000300
 8006790:	20000404 	.word	0x20000404
 8006794:	20000418 	.word	0x20000418
 8006798:	200003d0 	.word	0x200003d0
 800679c:	200003e4 	.word	0x200003e4
 80067a0:	200003fc 	.word	0x200003fc
 80067a4:	20000408 	.word	0x20000408
 80067a8:	20000424 	.word	0x20000424
 80067ac:	e000ed04 	.word	0xe000ed04

080067b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d016      	beq.n	80067f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067c2:	4b13      	ldr	r3, [pc, #76]	; (8006810 <vTaskDelay+0x60>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d009      	beq.n	80067de <vTaskDelay+0x2e>
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	60bb      	str	r3, [r7, #8]
 80067dc:	e7fe      	b.n	80067dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80067de:	f000 f879 	bl	80068d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067e2:	2100      	movs	r1, #0
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fe11 	bl	800740c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067ea:	f000 f881 	bl	80068f0 <xTaskResumeAll>
 80067ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d107      	bne.n	8006806 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80067f6:	4b07      	ldr	r3, [pc, #28]	; (8006814 <vTaskDelay+0x64>)
 80067f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006806:	bf00      	nop
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000424 	.word	0x20000424
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08a      	sub	sp, #40	; 0x28
 800681c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800681e:	2300      	movs	r3, #0
 8006820:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006826:	463a      	mov	r2, r7
 8006828:	1d39      	adds	r1, r7, #4
 800682a:	f107 0308 	add.w	r3, r7, #8
 800682e:	4618      	mov	r0, r3
 8006830:	f7f9 feb6 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	9202      	str	r2, [sp, #8]
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	2300      	movs	r3, #0
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	460a      	mov	r2, r1
 8006846:	491d      	ldr	r1, [pc, #116]	; (80068bc <vTaskStartScheduler+0xa4>)
 8006848:	481d      	ldr	r0, [pc, #116]	; (80068c0 <vTaskStartScheduler+0xa8>)
 800684a:	f7ff fd9d 	bl	8006388 <xTaskCreateStatic>
 800684e:	4602      	mov	r2, r0
 8006850:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <vTaskStartScheduler+0xac>)
 8006852:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006854:	4b1b      	ldr	r3, [pc, #108]	; (80068c4 <vTaskStartScheduler+0xac>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800685c:	2301      	movs	r3, #1
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e001      	b.n	8006866 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006862:	2300      	movs	r3, #0
 8006864:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d115      	bne.n	8006898 <vTaskStartScheduler+0x80>
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800687e:	4b12      	ldr	r3, [pc, #72]	; (80068c8 <vTaskStartScheduler+0xb0>)
 8006880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006884:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006886:	4b11      	ldr	r3, [pc, #68]	; (80068cc <vTaskStartScheduler+0xb4>)
 8006888:	2201      	movs	r2, #1
 800688a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800688c:	4b10      	ldr	r3, [pc, #64]	; (80068d0 <vTaskStartScheduler+0xb8>)
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006892:	f000 fead 	bl	80075f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006896:	e00d      	b.n	80068b4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800689e:	d109      	bne.n	80068b4 <vTaskStartScheduler+0x9c>
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	e7fe      	b.n	80068b2 <vTaskStartScheduler+0x9a>
}
 80068b4:	bf00      	nop
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	08017790 	.word	0x08017790
 80068c0:	08006ea9 	.word	0x08006ea9
 80068c4:	20000420 	.word	0x20000420
 80068c8:	2000041c 	.word	0x2000041c
 80068cc:	20000408 	.word	0x20000408
 80068d0:	20000400 	.word	0x20000400

080068d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80068d8:	4b04      	ldr	r3, [pc, #16]	; (80068ec <vTaskSuspendAll+0x18>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3301      	adds	r3, #1
 80068de:	4a03      	ldr	r2, [pc, #12]	; (80068ec <vTaskSuspendAll+0x18>)
 80068e0:	6013      	str	r3, [r2, #0]
}
 80068e2:	bf00      	nop
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	20000424 	.word	0x20000424

080068f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068fe:	4b41      	ldr	r3, [pc, #260]	; (8006a04 <xTaskResumeAll+0x114>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <xTaskResumeAll+0x2a>
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	e7fe      	b.n	8006918 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800691a:	f000 ff07 	bl	800772c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800691e:	4b39      	ldr	r3, [pc, #228]	; (8006a04 <xTaskResumeAll+0x114>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3b01      	subs	r3, #1
 8006924:	4a37      	ldr	r2, [pc, #220]	; (8006a04 <xTaskResumeAll+0x114>)
 8006926:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006928:	4b36      	ldr	r3, [pc, #216]	; (8006a04 <xTaskResumeAll+0x114>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d161      	bne.n	80069f4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006930:	4b35      	ldr	r3, [pc, #212]	; (8006a08 <xTaskResumeAll+0x118>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d05d      	beq.n	80069f4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006938:	e02e      	b.n	8006998 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800693a:	4b34      	ldr	r3, [pc, #208]	; (8006a0c <xTaskResumeAll+0x11c>)
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3318      	adds	r3, #24
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe fd49 	bl	80053de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3304      	adds	r3, #4
 8006950:	4618      	mov	r0, r3
 8006952:	f7fe fd44 	bl	80053de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	2201      	movs	r2, #1
 800695c:	409a      	lsls	r2, r3
 800695e:	4b2c      	ldr	r3, [pc, #176]	; (8006a10 <xTaskResumeAll+0x120>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4313      	orrs	r3, r2
 8006964:	4a2a      	ldr	r2, [pc, #168]	; (8006a10 <xTaskResumeAll+0x120>)
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4a27      	ldr	r2, [pc, #156]	; (8006a14 <xTaskResumeAll+0x124>)
 8006976:	441a      	add	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3304      	adds	r3, #4
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f7fe fcd0 	bl	8005324 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006988:	4b23      	ldr	r3, [pc, #140]	; (8006a18 <xTaskResumeAll+0x128>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698e:	429a      	cmp	r2, r3
 8006990:	d302      	bcc.n	8006998 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006992:	4b22      	ldr	r3, [pc, #136]	; (8006a1c <xTaskResumeAll+0x12c>)
 8006994:	2201      	movs	r2, #1
 8006996:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006998:	4b1c      	ldr	r3, [pc, #112]	; (8006a0c <xTaskResumeAll+0x11c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1cc      	bne.n	800693a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069a6:	f000 fb31 	bl	800700c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80069aa:	4b1d      	ldr	r3, [pc, #116]	; (8006a20 <xTaskResumeAll+0x130>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d010      	beq.n	80069d8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069b6:	f000 f859 	bl	8006a6c <xTaskIncrementTick>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80069c0:	4b16      	ldr	r3, [pc, #88]	; (8006a1c <xTaskResumeAll+0x12c>)
 80069c2:	2201      	movs	r2, #1
 80069c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1f1      	bne.n	80069b6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80069d2:	4b13      	ldr	r3, [pc, #76]	; (8006a20 <xTaskResumeAll+0x130>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069d8:	4b10      	ldr	r3, [pc, #64]	; (8006a1c <xTaskResumeAll+0x12c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d009      	beq.n	80069f4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069e0:	2301      	movs	r3, #1
 80069e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069e4:	4b0f      	ldr	r3, [pc, #60]	; (8006a24 <xTaskResumeAll+0x134>)
 80069e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069f4:	f000 fec8 	bl	8007788 <vPortExitCritical>

	return xAlreadyYielded;
 80069f8:	68bb      	ldr	r3, [r7, #8]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000424 	.word	0x20000424
 8006a08:	200003fc 	.word	0x200003fc
 8006a0c:	200003bc 	.word	0x200003bc
 8006a10:	20000404 	.word	0x20000404
 8006a14:	20000300 	.word	0x20000300
 8006a18:	200002fc 	.word	0x200002fc
 8006a1c:	20000410 	.word	0x20000410
 8006a20:	2000040c 	.word	0x2000040c
 8006a24:	e000ed04 	.word	0xe000ed04

08006a28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a2e:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <xTaskGetTickCount+0x1c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a34:	687b      	ldr	r3, [r7, #4]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20000400 	.word	0x20000400

08006a48 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a4e:	f000 ff49 	bl	80078e4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006a52:	2300      	movs	r3, #0
 8006a54:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006a56:	4b04      	ldr	r3, [pc, #16]	; (8006a68 <xTaskGetTickCountFromISR+0x20>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a5c:	683b      	ldr	r3, [r7, #0]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	20000400 	.word	0x20000400

08006a6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a76:	4b50      	ldr	r3, [pc, #320]	; (8006bb8 <xTaskIncrementTick+0x14c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f040 808c 	bne.w	8006b98 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a80:	4b4e      	ldr	r3, [pc, #312]	; (8006bbc <xTaskIncrementTick+0x150>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3301      	adds	r3, #1
 8006a86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a88:	4a4c      	ldr	r2, [pc, #304]	; (8006bbc <xTaskIncrementTick+0x150>)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d11f      	bne.n	8006ad4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a94:	4b4a      	ldr	r3, [pc, #296]	; (8006bc0 <xTaskIncrementTick+0x154>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d009      	beq.n	8006ab2 <xTaskIncrementTick+0x46>
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	e7fe      	b.n	8006ab0 <xTaskIncrementTick+0x44>
 8006ab2:	4b43      	ldr	r3, [pc, #268]	; (8006bc0 <xTaskIncrementTick+0x154>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	4b42      	ldr	r3, [pc, #264]	; (8006bc4 <xTaskIncrementTick+0x158>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a40      	ldr	r2, [pc, #256]	; (8006bc0 <xTaskIncrementTick+0x154>)
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	4a40      	ldr	r2, [pc, #256]	; (8006bc4 <xTaskIncrementTick+0x158>)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	4b40      	ldr	r3, [pc, #256]	; (8006bc8 <xTaskIncrementTick+0x15c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	4a3e      	ldr	r2, [pc, #248]	; (8006bc8 <xTaskIncrementTick+0x15c>)
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	f000 fa9c 	bl	800700c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ad4:	4b3d      	ldr	r3, [pc, #244]	; (8006bcc <xTaskIncrementTick+0x160>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d34d      	bcc.n	8006b7a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ade:	4b38      	ldr	r3, [pc, #224]	; (8006bc0 <xTaskIncrementTick+0x154>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <xTaskIncrementTick+0x80>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <xTaskIncrementTick+0x82>
 8006aec:	2300      	movs	r3, #0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d004      	beq.n	8006afc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af2:	4b36      	ldr	r3, [pc, #216]	; (8006bcc <xTaskIncrementTick+0x160>)
 8006af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006af8:	601a      	str	r2, [r3, #0]
					break;
 8006afa:	e03e      	b.n	8006b7a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006afc:	4b30      	ldr	r3, [pc, #192]	; (8006bc0 <xTaskIncrementTick+0x154>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d203      	bcs.n	8006b1c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b14:	4a2d      	ldr	r2, [pc, #180]	; (8006bcc <xTaskIncrementTick+0x160>)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6013      	str	r3, [r2, #0]
						break;
 8006b1a:	e02e      	b.n	8006b7a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe fc5c 	bl	80053de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d004      	beq.n	8006b38 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	3318      	adds	r3, #24
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fe fc53 	bl	80053de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	409a      	lsls	r2, r3
 8006b40:	4b23      	ldr	r3, [pc, #140]	; (8006bd0 <xTaskIncrementTick+0x164>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	4a22      	ldr	r2, [pc, #136]	; (8006bd0 <xTaskIncrementTick+0x164>)
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4a1f      	ldr	r2, [pc, #124]	; (8006bd4 <xTaskIncrementTick+0x168>)
 8006b58:	441a      	add	r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4610      	mov	r0, r2
 8006b62:	f7fe fbdf 	bl	8005324 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6a:	4b1b      	ldr	r3, [pc, #108]	; (8006bd8 <xTaskIncrementTick+0x16c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d3b4      	bcc.n	8006ade <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006b74:	2301      	movs	r3, #1
 8006b76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b78:	e7b1      	b.n	8006ade <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b7a:	4b17      	ldr	r3, [pc, #92]	; (8006bd8 <xTaskIncrementTick+0x16c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b80:	4914      	ldr	r1, [pc, #80]	; (8006bd4 <xTaskIncrementTick+0x168>)
 8006b82:	4613      	mov	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	440b      	add	r3, r1
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d907      	bls.n	8006ba2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006b92:	2301      	movs	r3, #1
 8006b94:	617b      	str	r3, [r7, #20]
 8006b96:	e004      	b.n	8006ba2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b98:	4b10      	ldr	r3, [pc, #64]	; (8006bdc <xTaskIncrementTick+0x170>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	4a0f      	ldr	r2, [pc, #60]	; (8006bdc <xTaskIncrementTick+0x170>)
 8006ba0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ba2:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <xTaskIncrementTick+0x174>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006baa:	2301      	movs	r3, #1
 8006bac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006bae:	697b      	ldr	r3, [r7, #20]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	20000424 	.word	0x20000424
 8006bbc:	20000400 	.word	0x20000400
 8006bc0:	200003b4 	.word	0x200003b4
 8006bc4:	200003b8 	.word	0x200003b8
 8006bc8:	20000414 	.word	0x20000414
 8006bcc:	2000041c 	.word	0x2000041c
 8006bd0:	20000404 	.word	0x20000404
 8006bd4:	20000300 	.word	0x20000300
 8006bd8:	200002fc 	.word	0x200002fc
 8006bdc:	2000040c 	.word	0x2000040c
 8006be0:	20000410 	.word	0x20000410

08006be4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bea:	4b26      	ldr	r3, [pc, #152]	; (8006c84 <vTaskSwitchContext+0xa0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bf2:	4b25      	ldr	r3, [pc, #148]	; (8006c88 <vTaskSwitchContext+0xa4>)
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bf8:	e03e      	b.n	8006c78 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006bfa:	4b23      	ldr	r3, [pc, #140]	; (8006c88 <vTaskSwitchContext+0xa4>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c00:	4b22      	ldr	r3, [pc, #136]	; (8006c8c <vTaskSwitchContext+0xa8>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	fab3 f383 	clz	r3, r3
 8006c0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c0e:	7afb      	ldrb	r3, [r7, #11]
 8006c10:	f1c3 031f 	rsb	r3, r3, #31
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	491e      	ldr	r1, [pc, #120]	; (8006c90 <vTaskSwitchContext+0xac>)
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	440b      	add	r3, r1
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <vTaskSwitchContext+0x5a>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	607b      	str	r3, [r7, #4]
 8006c3c:	e7fe      	b.n	8006c3c <vTaskSwitchContext+0x58>
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	4613      	mov	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4a11      	ldr	r2, [pc, #68]	; (8006c90 <vTaskSwitchContext+0xac>)
 8006c4a:	4413      	add	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	605a      	str	r2, [r3, #4]
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	3308      	adds	r3, #8
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d104      	bne.n	8006c6e <vTaskSwitchContext+0x8a>
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	605a      	str	r2, [r3, #4]
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	4a07      	ldr	r2, [pc, #28]	; (8006c94 <vTaskSwitchContext+0xb0>)
 8006c76:	6013      	str	r3, [r2, #0]
}
 8006c78:	bf00      	nop
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	20000424 	.word	0x20000424
 8006c88:	20000410 	.word	0x20000410
 8006c8c:	20000404 	.word	0x20000404
 8006c90:	20000300 	.word	0x20000300
 8006c94:	200002fc 	.word	0x200002fc

08006c98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d109      	bne.n	8006cbc <vTaskPlaceOnEventList+0x24>
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	e7fe      	b.n	8006cba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cbc:	4b07      	ldr	r3, [pc, #28]	; (8006cdc <vTaskPlaceOnEventList+0x44>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3318      	adds	r3, #24
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7fe fb51 	bl	800536c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cca:	2101      	movs	r1, #1
 8006ccc:	6838      	ldr	r0, [r7, #0]
 8006cce:	f000 fb9d 	bl	800740c <prvAddCurrentTaskToDelayedList>
}
 8006cd2:	bf00      	nop
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	200002fc 	.word	0x200002fc

08006ce0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d109      	bne.n	8006d0a <xTaskRemoveFromEventList+0x2a>
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	e7fe      	b.n	8006d08 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	3318      	adds	r3, #24
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fe fb65 	bl	80053de <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d14:	4b1d      	ldr	r3, [pc, #116]	; (8006d8c <xTaskRemoveFromEventList+0xac>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d11c      	bne.n	8006d56 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fe fb5c 	bl	80053de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	409a      	lsls	r2, r3
 8006d2e:	4b18      	ldr	r3, [pc, #96]	; (8006d90 <xTaskRemoveFromEventList+0xb0>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	4a16      	ldr	r2, [pc, #88]	; (8006d90 <xTaskRemoveFromEventList+0xb0>)
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4a13      	ldr	r2, [pc, #76]	; (8006d94 <xTaskRemoveFromEventList+0xb4>)
 8006d46:	441a      	add	r2, r3
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4610      	mov	r0, r2
 8006d50:	f7fe fae8 	bl	8005324 <vListInsertEnd>
 8006d54:	e005      	b.n	8006d62 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	3318      	adds	r3, #24
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	480e      	ldr	r0, [pc, #56]	; (8006d98 <xTaskRemoveFromEventList+0xb8>)
 8006d5e:	f7fe fae1 	bl	8005324 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d66:	4b0d      	ldr	r3, [pc, #52]	; (8006d9c <xTaskRemoveFromEventList+0xbc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d905      	bls.n	8006d7c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d70:	2301      	movs	r3, #1
 8006d72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d74:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <xTaskRemoveFromEventList+0xc0>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	e001      	b.n	8006d80 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006d80:	697b      	ldr	r3, [r7, #20]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000424 	.word	0x20000424
 8006d90:	20000404 	.word	0x20000404
 8006d94:	20000300 	.word	0x20000300
 8006d98:	200003bc 	.word	0x200003bc
 8006d9c:	200002fc 	.word	0x200002fc
 8006da0:	20000410 	.word	0x20000410

08006da4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006dac:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <vTaskInternalSetTimeOutState+0x24>)
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <vTaskInternalSetTimeOutState+0x28>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	605a      	str	r2, [r3, #4]
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	20000414 	.word	0x20000414
 8006dcc:	20000400 	.word	0x20000400

08006dd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <xTaskCheckForTimeOut+0x24>
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	613b      	str	r3, [r7, #16]
 8006df2:	e7fe      	b.n	8006df2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d109      	bne.n	8006e0e <xTaskCheckForTimeOut+0x3e>
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	e7fe      	b.n	8006e0c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006e0e:	f000 fc8d 	bl	800772c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e12:	4b1d      	ldr	r3, [pc, #116]	; (8006e88 <xTaskCheckForTimeOut+0xb8>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e2a:	d102      	bne.n	8006e32 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	61fb      	str	r3, [r7, #28]
 8006e30:	e023      	b.n	8006e7a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	4b15      	ldr	r3, [pc, #84]	; (8006e8c <xTaskCheckForTimeOut+0xbc>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d007      	beq.n	8006e4e <xTaskCheckForTimeOut+0x7e>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d302      	bcc.n	8006e4e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	61fb      	str	r3, [r7, #28]
 8006e4c:	e015      	b.n	8006e7a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d20b      	bcs.n	8006e70 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff ff9d 	bl	8006da4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
 8006e6e:	e004      	b.n	8006e7a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e76:	2301      	movs	r3, #1
 8006e78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e7a:	f000 fc85 	bl	8007788 <vPortExitCritical>

	return xReturn;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20000400 	.word	0x20000400
 8006e8c:	20000414 	.word	0x20000414

08006e90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e94:	4b03      	ldr	r3, [pc, #12]	; (8006ea4 <vTaskMissedYield+0x14>)
 8006e96:	2201      	movs	r2, #1
 8006e98:	601a      	str	r2, [r3, #0]
}
 8006e9a:	bf00      	nop
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	20000410 	.word	0x20000410

08006ea8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006eb0:	f000 f852 	bl	8006f58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006eb4:	4b06      	ldr	r3, [pc, #24]	; (8006ed0 <prvIdleTask+0x28>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d9f9      	bls.n	8006eb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <prvIdleTask+0x2c>)
 8006ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ecc:	e7f0      	b.n	8006eb0 <prvIdleTask+0x8>
 8006ece:	bf00      	nop
 8006ed0:	20000300 	.word	0x20000300
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ede:	2300      	movs	r3, #0
 8006ee0:	607b      	str	r3, [r7, #4]
 8006ee2:	e00c      	b.n	8006efe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4a12      	ldr	r2, [pc, #72]	; (8006f38 <prvInitialiseTaskLists+0x60>)
 8006ef0:	4413      	add	r3, r2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe f9e9 	bl	80052ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3301      	adds	r3, #1
 8006efc:	607b      	str	r3, [r7, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b06      	cmp	r3, #6
 8006f02:	d9ef      	bls.n	8006ee4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f04:	480d      	ldr	r0, [pc, #52]	; (8006f3c <prvInitialiseTaskLists+0x64>)
 8006f06:	f7fe f9e0 	bl	80052ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f0a:	480d      	ldr	r0, [pc, #52]	; (8006f40 <prvInitialiseTaskLists+0x68>)
 8006f0c:	f7fe f9dd 	bl	80052ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f10:	480c      	ldr	r0, [pc, #48]	; (8006f44 <prvInitialiseTaskLists+0x6c>)
 8006f12:	f7fe f9da 	bl	80052ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f16:	480c      	ldr	r0, [pc, #48]	; (8006f48 <prvInitialiseTaskLists+0x70>)
 8006f18:	f7fe f9d7 	bl	80052ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f1c:	480b      	ldr	r0, [pc, #44]	; (8006f4c <prvInitialiseTaskLists+0x74>)
 8006f1e:	f7fe f9d4 	bl	80052ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f22:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <prvInitialiseTaskLists+0x78>)
 8006f24:	4a05      	ldr	r2, [pc, #20]	; (8006f3c <prvInitialiseTaskLists+0x64>)
 8006f26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f28:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <prvInitialiseTaskLists+0x7c>)
 8006f2a:	4a05      	ldr	r2, [pc, #20]	; (8006f40 <prvInitialiseTaskLists+0x68>)
 8006f2c:	601a      	str	r2, [r3, #0]
}
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20000300 	.word	0x20000300
 8006f3c:	2000038c 	.word	0x2000038c
 8006f40:	200003a0 	.word	0x200003a0
 8006f44:	200003bc 	.word	0x200003bc
 8006f48:	200003d0 	.word	0x200003d0
 8006f4c:	200003e8 	.word	0x200003e8
 8006f50:	200003b4 	.word	0x200003b4
 8006f54:	200003b8 	.word	0x200003b8

08006f58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f5e:	e019      	b.n	8006f94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f60:	f000 fbe4 	bl	800772c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006f64:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <prvCheckTasksWaitingTermination+0x4c>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe fa34 	bl	80053de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f76:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <prvCheckTasksWaitingTermination+0x50>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	4a0a      	ldr	r2, [pc, #40]	; (8006fa8 <prvCheckTasksWaitingTermination+0x50>)
 8006f7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <prvCheckTasksWaitingTermination+0x54>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	4a09      	ldr	r2, [pc, #36]	; (8006fac <prvCheckTasksWaitingTermination+0x54>)
 8006f88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f8a:	f000 fbfd 	bl	8007788 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f80e 	bl	8006fb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f94:	4b05      	ldr	r3, [pc, #20]	; (8006fac <prvCheckTasksWaitingTermination+0x54>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e1      	bne.n	8006f60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	200003d0 	.word	0x200003d0
 8006fa8:	200003fc 	.word	0x200003fc
 8006fac:	200003e4 	.word	0x200003e4

08006fb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d108      	bne.n	8006fd4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fd8c 	bl	8007ae4 <vPortFree>
				vPortFree( pxTCB );
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fd89 	bl	8007ae4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fd2:	e017      	b.n	8007004 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d103      	bne.n	8006fe6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fd80 	bl	8007ae4 <vPortFree>
	}
 8006fe4:	e00e      	b.n	8007004 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d009      	beq.n	8007004 <prvDeleteTCB+0x54>
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	e7fe      	b.n	8007002 <prvDeleteTCB+0x52>
	}
 8007004:	bf00      	nop
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007012:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <prvResetNextTaskUnblockTime+0x44>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <prvResetNextTaskUnblockTime+0x14>
 800701c:	2301      	movs	r3, #1
 800701e:	e000      	b.n	8007022 <prvResetNextTaskUnblockTime+0x16>
 8007020:	2300      	movs	r3, #0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007026:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <prvResetNextTaskUnblockTime+0x48>)
 8007028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800702c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800702e:	e008      	b.n	8007042 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007030:	4b07      	ldr	r3, [pc, #28]	; (8007050 <prvResetNextTaskUnblockTime+0x44>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	4a05      	ldr	r2, [pc, #20]	; (8007054 <prvResetNextTaskUnblockTime+0x48>)
 8007040:	6013      	str	r3, [r2, #0]
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	200003b4 	.word	0x200003b4
 8007054:	2000041c 	.word	0x2000041c

08007058 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800705e:	4b0b      	ldr	r3, [pc, #44]	; (800708c <xTaskGetSchedulerState+0x34>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d102      	bne.n	800706c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007066:	2301      	movs	r3, #1
 8007068:	607b      	str	r3, [r7, #4]
 800706a:	e008      	b.n	800707e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800706c:	4b08      	ldr	r3, [pc, #32]	; (8007090 <xTaskGetSchedulerState+0x38>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d102      	bne.n	800707a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007074:	2302      	movs	r3, #2
 8007076:	607b      	str	r3, [r7, #4]
 8007078:	e001      	b.n	800707e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800707a:	2300      	movs	r3, #0
 800707c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800707e:	687b      	ldr	r3, [r7, #4]
	}
 8007080:	4618      	mov	r0, r3
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	20000408 	.word	0x20000408
 8007090:	20000424 	.word	0x20000424

08007094 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d06e      	beq.n	8007188 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ae:	4b39      	ldr	r3, [pc, #228]	; (8007194 <xTaskPriorityInherit+0x100>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d25e      	bcs.n	8007176 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	db06      	blt.n	80070ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c0:	4b34      	ldr	r3, [pc, #208]	; (8007194 <xTaskPriorityInherit+0x100>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	f1c3 0207 	rsb	r2, r3, #7
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	6959      	ldr	r1, [r3, #20]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d6:	4613      	mov	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4a2e      	ldr	r2, [pc, #184]	; (8007198 <xTaskPriorityInherit+0x104>)
 80070e0:	4413      	add	r3, r2
 80070e2:	4299      	cmp	r1, r3
 80070e4:	d101      	bne.n	80070ea <xTaskPriorityInherit+0x56>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <xTaskPriorityInherit+0x58>
 80070ea:	2300      	movs	r3, #0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d03a      	beq.n	8007166 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	3304      	adds	r3, #4
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fe f972 	bl	80053de <uxListRemove>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d115      	bne.n	800712c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007104:	4924      	ldr	r1, [pc, #144]	; (8007198 <xTaskPriorityInherit+0x104>)
 8007106:	4613      	mov	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	440b      	add	r3, r1
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10a      	bne.n	800712c <xTaskPriorityInherit+0x98>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	2201      	movs	r2, #1
 800711c:	fa02 f303 	lsl.w	r3, r2, r3
 8007120:	43da      	mvns	r2, r3
 8007122:	4b1e      	ldr	r3, [pc, #120]	; (800719c <xTaskPriorityInherit+0x108>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4013      	ands	r3, r2
 8007128:	4a1c      	ldr	r2, [pc, #112]	; (800719c <xTaskPriorityInherit+0x108>)
 800712a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800712c:	4b19      	ldr	r3, [pc, #100]	; (8007194 <xTaskPriorityInherit+0x100>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	2201      	movs	r2, #1
 800713c:	409a      	lsls	r2, r3
 800713e:	4b17      	ldr	r3, [pc, #92]	; (800719c <xTaskPriorityInherit+0x108>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4313      	orrs	r3, r2
 8007144:	4a15      	ldr	r2, [pc, #84]	; (800719c <xTaskPriorityInherit+0x108>)
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4a10      	ldr	r2, [pc, #64]	; (8007198 <xTaskPriorityInherit+0x104>)
 8007156:	441a      	add	r2, r3
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	3304      	adds	r3, #4
 800715c:	4619      	mov	r1, r3
 800715e:	4610      	mov	r0, r2
 8007160:	f7fe f8e0 	bl	8005324 <vListInsertEnd>
 8007164:	e004      	b.n	8007170 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007166:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <xTaskPriorityInherit+0x100>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007170:	2301      	movs	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	e008      	b.n	8007188 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800717a:	4b06      	ldr	r3, [pc, #24]	; (8007194 <xTaskPriorityInherit+0x100>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	429a      	cmp	r2, r3
 8007182:	d201      	bcs.n	8007188 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007184:	2301      	movs	r3, #1
 8007186:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007188:	68fb      	ldr	r3, [r7, #12]
	}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	200002fc 	.word	0x200002fc
 8007198:	20000300 	.word	0x20000300
 800719c:	20000404 	.word	0x20000404

080071a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071ac:	2300      	movs	r3, #0
 80071ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d06c      	beq.n	8007290 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071b6:	4b39      	ldr	r3, [pc, #228]	; (800729c <xTaskPriorityDisinherit+0xfc>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d009      	beq.n	80071d4 <xTaskPriorityDisinherit+0x34>
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	e7fe      	b.n	80071d2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d109      	bne.n	80071f0 <xTaskPriorityDisinherit+0x50>
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	60bb      	str	r3, [r7, #8]
 80071ee:	e7fe      	b.n	80071ee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071f4:	1e5a      	subs	r2, r3, #1
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007202:	429a      	cmp	r2, r3
 8007204:	d044      	beq.n	8007290 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800720a:	2b00      	cmp	r3, #0
 800720c:	d140      	bne.n	8007290 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3304      	adds	r3, #4
 8007212:	4618      	mov	r0, r3
 8007214:	f7fe f8e3 	bl	80053de <uxListRemove>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d115      	bne.n	800724a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007222:	491f      	ldr	r1, [pc, #124]	; (80072a0 <xTaskPriorityDisinherit+0x100>)
 8007224:	4613      	mov	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <xTaskPriorityDisinherit+0xaa>
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	2201      	movs	r2, #1
 800723a:	fa02 f303 	lsl.w	r3, r2, r3
 800723e:	43da      	mvns	r2, r3
 8007240:	4b18      	ldr	r3, [pc, #96]	; (80072a4 <xTaskPriorityDisinherit+0x104>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4013      	ands	r3, r2
 8007246:	4a17      	ldr	r2, [pc, #92]	; (80072a4 <xTaskPriorityDisinherit+0x104>)
 8007248:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007256:	f1c3 0207 	rsb	r2, r3, #7
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007262:	2201      	movs	r2, #1
 8007264:	409a      	lsls	r2, r3
 8007266:	4b0f      	ldr	r3, [pc, #60]	; (80072a4 <xTaskPriorityDisinherit+0x104>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4313      	orrs	r3, r2
 800726c:	4a0d      	ldr	r2, [pc, #52]	; (80072a4 <xTaskPriorityDisinherit+0x104>)
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007274:	4613      	mov	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4a08      	ldr	r2, [pc, #32]	; (80072a0 <xTaskPriorityDisinherit+0x100>)
 800727e:	441a      	add	r2, r3
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	3304      	adds	r3, #4
 8007284:	4619      	mov	r1, r3
 8007286:	4610      	mov	r0, r2
 8007288:	f7fe f84c 	bl	8005324 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800728c:	2301      	movs	r3, #1
 800728e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007290:	697b      	ldr	r3, [r7, #20]
	}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	200002fc 	.word	0x200002fc
 80072a0:	20000300 	.word	0x20000300
 80072a4:	20000404 	.word	0x20000404

080072a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80072b6:	2301      	movs	r3, #1
 80072b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8086 	beq.w	80073ce <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d109      	bne.n	80072de <vTaskPriorityDisinheritAfterTimeout+0x36>
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	e7fe      	b.n	80072dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d902      	bls.n	80072ee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	61fb      	str	r3, [r7, #28]
 80072ec:	e002      	b.n	80072f4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d067      	beq.n	80073ce <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	429a      	cmp	r2, r3
 8007306:	d162      	bne.n	80073ce <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007308:	4b33      	ldr	r3, [pc, #204]	; (80073d8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	429a      	cmp	r2, r3
 8007310:	d109      	bne.n	8007326 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	60bb      	str	r3, [r7, #8]
 8007324:	e7fe      	b.n	8007324 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	69fa      	ldr	r2, [r7, #28]
 8007330:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	2b00      	cmp	r3, #0
 8007338:	db04      	blt.n	8007344 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	f1c3 0207 	rsb	r2, r3, #7
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	6959      	ldr	r1, [r3, #20]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	4613      	mov	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4a22      	ldr	r2, [pc, #136]	; (80073dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007354:	4413      	add	r3, r2
 8007356:	4299      	cmp	r1, r3
 8007358:	d101      	bne.n	800735e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800735e:	2300      	movs	r3, #0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d034      	beq.n	80073ce <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	3304      	adds	r3, #4
 8007368:	4618      	mov	r0, r3
 800736a:	f7fe f838 	bl	80053de <uxListRemove>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d115      	bne.n	80073a0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007378:	4918      	ldr	r1, [pc, #96]	; (80073dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	440b      	add	r3, r1
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10a      	bne.n	80073a0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738e:	2201      	movs	r2, #1
 8007390:	fa02 f303 	lsl.w	r3, r2, r3
 8007394:	43da      	mvns	r2, r3
 8007396:	4b12      	ldr	r3, [pc, #72]	; (80073e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4013      	ands	r3, r2
 800739c:	4a10      	ldr	r2, [pc, #64]	; (80073e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800739e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	2201      	movs	r2, #1
 80073a6:	409a      	lsls	r2, r3
 80073a8:	4b0d      	ldr	r3, [pc, #52]	; (80073e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	4a0c      	ldr	r2, [pc, #48]	; (80073e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80073b0:	6013      	str	r3, [r2, #0]
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4a07      	ldr	r2, [pc, #28]	; (80073dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80073c0:	441a      	add	r2, r3
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	3304      	adds	r3, #4
 80073c6:	4619      	mov	r1, r3
 80073c8:	4610      	mov	r0, r2
 80073ca:	f7fd ffab 	bl	8005324 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073ce:	bf00      	nop
 80073d0:	3720      	adds	r7, #32
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	200002fc 	.word	0x200002fc
 80073dc:	20000300 	.word	0x20000300
 80073e0:	20000404 	.word	0x20000404

080073e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80073e8:	4b07      	ldr	r3, [pc, #28]	; (8007408 <pvTaskIncrementMutexHeldCount+0x24>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d004      	beq.n	80073fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80073f0:	4b05      	ldr	r3, [pc, #20]	; (8007408 <pvTaskIncrementMutexHeldCount+0x24>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073f6:	3201      	adds	r2, #1
 80073f8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80073fa:	4b03      	ldr	r3, [pc, #12]	; (8007408 <pvTaskIncrementMutexHeldCount+0x24>)
 80073fc:	681b      	ldr	r3, [r3, #0]
	}
 80073fe:	4618      	mov	r0, r3
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	200002fc 	.word	0x200002fc

0800740c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007416:	4b29      	ldr	r3, [pc, #164]	; (80074bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800741c:	4b28      	ldr	r3, [pc, #160]	; (80074c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3304      	adds	r3, #4
 8007422:	4618      	mov	r0, r3
 8007424:	f7fd ffdb 	bl	80053de <uxListRemove>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10b      	bne.n	8007446 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800742e:	4b24      	ldr	r3, [pc, #144]	; (80074c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	2201      	movs	r2, #1
 8007436:	fa02 f303 	lsl.w	r3, r2, r3
 800743a:	43da      	mvns	r2, r3
 800743c:	4b21      	ldr	r3, [pc, #132]	; (80074c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4013      	ands	r3, r2
 8007442:	4a20      	ldr	r2, [pc, #128]	; (80074c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007444:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800744c:	d10a      	bne.n	8007464 <prvAddCurrentTaskToDelayedList+0x58>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d007      	beq.n	8007464 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007454:	4b1a      	ldr	r3, [pc, #104]	; (80074c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3304      	adds	r3, #4
 800745a:	4619      	mov	r1, r3
 800745c:	481a      	ldr	r0, [pc, #104]	; (80074c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800745e:	f7fd ff61 	bl	8005324 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007462:	e026      	b.n	80074b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4413      	add	r3, r2
 800746a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800746c:	4b14      	ldr	r3, [pc, #80]	; (80074c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	429a      	cmp	r2, r3
 800747a:	d209      	bcs.n	8007490 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800747c:	4b13      	ldr	r3, [pc, #76]	; (80074cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3304      	adds	r3, #4
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f7fd ff6f 	bl	800536c <vListInsert>
}
 800748e:	e010      	b.n	80074b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007490:	4b0f      	ldr	r3, [pc, #60]	; (80074d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	4b0a      	ldr	r3, [pc, #40]	; (80074c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3304      	adds	r3, #4
 800749a:	4619      	mov	r1, r3
 800749c:	4610      	mov	r0, r2
 800749e:	f7fd ff65 	bl	800536c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074a2:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d202      	bcs.n	80074b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80074ac:	4a09      	ldr	r2, [pc, #36]	; (80074d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6013      	str	r3, [r2, #0]
}
 80074b2:	bf00      	nop
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20000400 	.word	0x20000400
 80074c0:	200002fc 	.word	0x200002fc
 80074c4:	20000404 	.word	0x20000404
 80074c8:	200003e8 	.word	0x200003e8
 80074cc:	200003b8 	.word	0x200003b8
 80074d0:	200003b4 	.word	0x200003b4
 80074d4:	2000041c 	.word	0x2000041c

080074d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3b04      	subs	r3, #4
 80074e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3b04      	subs	r3, #4
 80074f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f023 0201 	bic.w	r2, r3, #1
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3b04      	subs	r3, #4
 8007506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007508:	4a0c      	ldr	r2, [pc, #48]	; (800753c <pxPortInitialiseStack+0x64>)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3b14      	subs	r3, #20
 8007512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3b04      	subs	r3, #4
 800751e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f06f 0202 	mvn.w	r2, #2
 8007526:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	3b20      	subs	r3, #32
 800752c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800752e:	68fb      	ldr	r3, [r7, #12]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	08007541 	.word	0x08007541

08007540 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800754a:	4b11      	ldr	r3, [pc, #68]	; (8007590 <prvTaskExitError+0x50>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007552:	d009      	beq.n	8007568 <prvTaskExitError+0x28>
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	60fb      	str	r3, [r7, #12]
 8007566:	e7fe      	b.n	8007566 <prvTaskExitError+0x26>
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800757a:	bf00      	nop
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0fc      	beq.n	800757c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007582:	bf00      	nop
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	2000000c 	.word	0x2000000c
	...

080075a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <pxCurrentTCBConst2>)
 80075a2:	6819      	ldr	r1, [r3, #0]
 80075a4:	6808      	ldr	r0, [r1, #0]
 80075a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075aa:	f380 8809 	msr	PSP, r0
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f04f 0000 	mov.w	r0, #0
 80075b6:	f380 8811 	msr	BASEPRI, r0
 80075ba:	4770      	bx	lr
 80075bc:	f3af 8000 	nop.w

080075c0 <pxCurrentTCBConst2>:
 80075c0:	200002fc 	.word	0x200002fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop

080075c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075c8:	4808      	ldr	r0, [pc, #32]	; (80075ec <prvPortStartFirstTask+0x24>)
 80075ca:	6800      	ldr	r0, [r0, #0]
 80075cc:	6800      	ldr	r0, [r0, #0]
 80075ce:	f380 8808 	msr	MSP, r0
 80075d2:	f04f 0000 	mov.w	r0, #0
 80075d6:	f380 8814 	msr	CONTROL, r0
 80075da:	b662      	cpsie	i
 80075dc:	b661      	cpsie	f
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	df00      	svc	0
 80075e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075ea:	bf00      	nop
 80075ec:	e000ed08 	.word	0xe000ed08

080075f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075f6:	4b44      	ldr	r3, [pc, #272]	; (8007708 <xPortStartScheduler+0x118>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a44      	ldr	r2, [pc, #272]	; (800770c <xPortStartScheduler+0x11c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d109      	bne.n	8007614 <xPortStartScheduler+0x24>
 8007600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	613b      	str	r3, [r7, #16]
 8007612:	e7fe      	b.n	8007612 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007614:	4b3c      	ldr	r3, [pc, #240]	; (8007708 <xPortStartScheduler+0x118>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a3d      	ldr	r2, [pc, #244]	; (8007710 <xPortStartScheduler+0x120>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d109      	bne.n	8007632 <xPortStartScheduler+0x42>
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	e7fe      	b.n	8007630 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007632:	4b38      	ldr	r3, [pc, #224]	; (8007714 <xPortStartScheduler+0x124>)
 8007634:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	22ff      	movs	r2, #255	; 0xff
 8007642:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800764c:	78fb      	ldrb	r3, [r7, #3]
 800764e:	b2db      	uxtb	r3, r3
 8007650:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007654:	b2da      	uxtb	r2, r3
 8007656:	4b30      	ldr	r3, [pc, #192]	; (8007718 <xPortStartScheduler+0x128>)
 8007658:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800765a:	4b30      	ldr	r3, [pc, #192]	; (800771c <xPortStartScheduler+0x12c>)
 800765c:	2207      	movs	r2, #7
 800765e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007660:	e009      	b.n	8007676 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007662:	4b2e      	ldr	r3, [pc, #184]	; (800771c <xPortStartScheduler+0x12c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3b01      	subs	r3, #1
 8007668:	4a2c      	ldr	r2, [pc, #176]	; (800771c <xPortStartScheduler+0x12c>)
 800766a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	b2db      	uxtb	r3, r3
 8007674:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007676:	78fb      	ldrb	r3, [r7, #3]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767e:	2b80      	cmp	r3, #128	; 0x80
 8007680:	d0ef      	beq.n	8007662 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007682:	4b26      	ldr	r3, [pc, #152]	; (800771c <xPortStartScheduler+0x12c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f1c3 0307 	rsb	r3, r3, #7
 800768a:	2b04      	cmp	r3, #4
 800768c:	d009      	beq.n	80076a2 <xPortStartScheduler+0xb2>
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	60bb      	str	r3, [r7, #8]
 80076a0:	e7fe      	b.n	80076a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076a2:	4b1e      	ldr	r3, [pc, #120]	; (800771c <xPortStartScheduler+0x12c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	021b      	lsls	r3, r3, #8
 80076a8:	4a1c      	ldr	r2, [pc, #112]	; (800771c <xPortStartScheduler+0x12c>)
 80076aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076ac:	4b1b      	ldr	r3, [pc, #108]	; (800771c <xPortStartScheduler+0x12c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076b4:	4a19      	ldr	r2, [pc, #100]	; (800771c <xPortStartScheduler+0x12c>)
 80076b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076c0:	4b17      	ldr	r3, [pc, #92]	; (8007720 <xPortStartScheduler+0x130>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a16      	ldr	r2, [pc, #88]	; (8007720 <xPortStartScheduler+0x130>)
 80076c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076cc:	4b14      	ldr	r3, [pc, #80]	; (8007720 <xPortStartScheduler+0x130>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a13      	ldr	r2, [pc, #76]	; (8007720 <xPortStartScheduler+0x130>)
 80076d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076d8:	f000 f8d6 	bl	8007888 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076dc:	4b11      	ldr	r3, [pc, #68]	; (8007724 <xPortStartScheduler+0x134>)
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076e2:	f000 f8f5 	bl	80078d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076e6:	4b10      	ldr	r3, [pc, #64]	; (8007728 <xPortStartScheduler+0x138>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a0f      	ldr	r2, [pc, #60]	; (8007728 <xPortStartScheduler+0x138>)
 80076ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80076f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076f2:	f7ff ff69 	bl	80075c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076f6:	f7ff fa75 	bl	8006be4 <vTaskSwitchContext>
	prvTaskExitError();
 80076fa:	f7ff ff21 	bl	8007540 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	e000ed00 	.word	0xe000ed00
 800770c:	410fc271 	.word	0x410fc271
 8007710:	410fc270 	.word	0x410fc270
 8007714:	e000e400 	.word	0xe000e400
 8007718:	20000428 	.word	0x20000428
 800771c:	2000042c 	.word	0x2000042c
 8007720:	e000ed20 	.word	0xe000ed20
 8007724:	2000000c 	.word	0x2000000c
 8007728:	e000ef34 	.word	0xe000ef34

0800772c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007744:	4b0e      	ldr	r3, [pc, #56]	; (8007780 <vPortEnterCritical+0x54>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3301      	adds	r3, #1
 800774a:	4a0d      	ldr	r2, [pc, #52]	; (8007780 <vPortEnterCritical+0x54>)
 800774c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800774e:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <vPortEnterCritical+0x54>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d10e      	bne.n	8007774 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007756:	4b0b      	ldr	r3, [pc, #44]	; (8007784 <vPortEnterCritical+0x58>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d009      	beq.n	8007774 <vPortEnterCritical+0x48>
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	603b      	str	r3, [r7, #0]
 8007772:	e7fe      	b.n	8007772 <vPortEnterCritical+0x46>
	}
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	2000000c 	.word	0x2000000c
 8007784:	e000ed04 	.word	0xe000ed04

08007788 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800778e:	4b11      	ldr	r3, [pc, #68]	; (80077d4 <vPortExitCritical+0x4c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d109      	bne.n	80077aa <vPortExitCritical+0x22>
 8007796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	607b      	str	r3, [r7, #4]
 80077a8:	e7fe      	b.n	80077a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80077aa:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <vPortExitCritical+0x4c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	4a08      	ldr	r2, [pc, #32]	; (80077d4 <vPortExitCritical+0x4c>)
 80077b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077b4:	4b07      	ldr	r3, [pc, #28]	; (80077d4 <vPortExitCritical+0x4c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d104      	bne.n	80077c6 <vPortExitCritical+0x3e>
 80077bc:	2300      	movs	r3, #0
 80077be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	2000000c 	.word	0x2000000c
	...

080077e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077e0:	f3ef 8009 	mrs	r0, PSP
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	4b15      	ldr	r3, [pc, #84]	; (8007840 <pxCurrentTCBConst>)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	f01e 0f10 	tst.w	lr, #16
 80077f0:	bf08      	it	eq
 80077f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fa:	6010      	str	r0, [r2, #0]
 80077fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007804:	f380 8811 	msr	BASEPRI, r0
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f7ff f9e8 	bl	8006be4 <vTaskSwitchContext>
 8007814:	f04f 0000 	mov.w	r0, #0
 8007818:	f380 8811 	msr	BASEPRI, r0
 800781c:	bc09      	pop	{r0, r3}
 800781e:	6819      	ldr	r1, [r3, #0]
 8007820:	6808      	ldr	r0, [r1, #0]
 8007822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007826:	f01e 0f10 	tst.w	lr, #16
 800782a:	bf08      	it	eq
 800782c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007830:	f380 8809 	msr	PSP, r0
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	f3af 8000 	nop.w

08007840 <pxCurrentTCBConst>:
 8007840:	200002fc 	.word	0x200002fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop

08007848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007860:	f7ff f904 	bl	8006a6c <xTaskIncrementTick>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800786a:	4b06      	ldr	r3, [pc, #24]	; (8007884 <xPortSysTickHandler+0x3c>)
 800786c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	2300      	movs	r3, #0
 8007874:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800787c:	bf00      	nop
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	e000ed04 	.word	0xe000ed04

08007888 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800788c:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <vPortSetupTimerInterrupt+0x34>)
 800788e:	2200      	movs	r2, #0
 8007890:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007892:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <vPortSetupTimerInterrupt+0x38>)
 8007894:	2200      	movs	r2, #0
 8007896:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007898:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <vPortSetupTimerInterrupt+0x3c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a0a      	ldr	r2, [pc, #40]	; (80078c8 <vPortSetupTimerInterrupt+0x40>)
 800789e:	fba2 2303 	umull	r2, r3, r2, r3
 80078a2:	099b      	lsrs	r3, r3, #6
 80078a4:	4a09      	ldr	r2, [pc, #36]	; (80078cc <vPortSetupTimerInterrupt+0x44>)
 80078a6:	3b01      	subs	r3, #1
 80078a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078aa:	4b04      	ldr	r3, [pc, #16]	; (80078bc <vPortSetupTimerInterrupt+0x34>)
 80078ac:	2207      	movs	r2, #7
 80078ae:	601a      	str	r2, [r3, #0]
}
 80078b0:	bf00      	nop
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	e000e010 	.word	0xe000e010
 80078c0:	e000e018 	.word	0xe000e018
 80078c4:	20000000 	.word	0x20000000
 80078c8:	10624dd3 	.word	0x10624dd3
 80078cc:	e000e014 	.word	0xe000e014

080078d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80078e0 <vPortEnableVFP+0x10>
 80078d4:	6801      	ldr	r1, [r0, #0]
 80078d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80078da:	6001      	str	r1, [r0, #0]
 80078dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078de:	bf00      	nop
 80078e0:	e000ed88 	.word	0xe000ed88

080078e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078ea:	f3ef 8305 	mrs	r3, IPSR
 80078ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b0f      	cmp	r3, #15
 80078f4:	d913      	bls.n	800791e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078f6:	4a16      	ldr	r2, [pc, #88]	; (8007950 <vPortValidateInterruptPriority+0x6c>)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007900:	4b14      	ldr	r3, [pc, #80]	; (8007954 <vPortValidateInterruptPriority+0x70>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	7afa      	ldrb	r2, [r7, #11]
 8007906:	429a      	cmp	r2, r3
 8007908:	d209      	bcs.n	800791e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	607b      	str	r3, [r7, #4]
 800791c:	e7fe      	b.n	800791c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800791e:	4b0e      	ldr	r3, [pc, #56]	; (8007958 <vPortValidateInterruptPriority+0x74>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007926:	4b0d      	ldr	r3, [pc, #52]	; (800795c <vPortValidateInterruptPriority+0x78>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d909      	bls.n	8007942 <vPortValidateInterruptPriority+0x5e>
 800792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	e7fe      	b.n	8007940 <vPortValidateInterruptPriority+0x5c>
	}
 8007942:	bf00      	nop
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	e000e3f0 	.word	0xe000e3f0
 8007954:	20000428 	.word	0x20000428
 8007958:	e000ed0c 	.word	0xe000ed0c
 800795c:	2000042c 	.word	0x2000042c

08007960 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b08a      	sub	sp, #40	; 0x28
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007968:	2300      	movs	r3, #0
 800796a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800796c:	f7fe ffb2 	bl	80068d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007970:	4b57      	ldr	r3, [pc, #348]	; (8007ad0 <pvPortMalloc+0x170>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007978:	f000 f90c 	bl	8007b94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800797c:	4b55      	ldr	r3, [pc, #340]	; (8007ad4 <pvPortMalloc+0x174>)
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4013      	ands	r3, r2
 8007984:	2b00      	cmp	r3, #0
 8007986:	f040 808c 	bne.w	8007aa2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01c      	beq.n	80079ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007990:	2208      	movs	r2, #8
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4413      	add	r3, r2
 8007996:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f003 0307 	and.w	r3, r3, #7
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d013      	beq.n	80079ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f023 0307 	bic.w	r3, r3, #7
 80079a8:	3308      	adds	r3, #8
 80079aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f003 0307 	and.w	r3, r3, #7
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d009      	beq.n	80079ca <pvPortMalloc+0x6a>
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	e7fe      	b.n	80079c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d068      	beq.n	8007aa2 <pvPortMalloc+0x142>
 80079d0:	4b41      	ldr	r3, [pc, #260]	; (8007ad8 <pvPortMalloc+0x178>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d863      	bhi.n	8007aa2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079da:	4b40      	ldr	r3, [pc, #256]	; (8007adc <pvPortMalloc+0x17c>)
 80079dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80079de:	4b3f      	ldr	r3, [pc, #252]	; (8007adc <pvPortMalloc+0x17c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079e4:	e004      	b.n	80079f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d903      	bls.n	8007a02 <pvPortMalloc+0xa2>
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1f1      	bne.n	80079e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a02:	4b33      	ldr	r3, [pc, #204]	; (8007ad0 <pvPortMalloc+0x170>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d04a      	beq.n	8007aa2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2208      	movs	r2, #8
 8007a12:	4413      	add	r3, r2
 8007a14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	1ad2      	subs	r2, r2, r3
 8007a26:	2308      	movs	r3, #8
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d91e      	bls.n	8007a6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4413      	add	r3, r2
 8007a34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d009      	beq.n	8007a54 <pvPortMalloc+0xf4>
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	613b      	str	r3, [r7, #16]
 8007a52:	e7fe      	b.n	8007a52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	1ad2      	subs	r2, r2, r3
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a66:	69b8      	ldr	r0, [r7, #24]
 8007a68:	f000 f8f6 	bl	8007c58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a6c:	4b1a      	ldr	r3, [pc, #104]	; (8007ad8 <pvPortMalloc+0x178>)
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	4a18      	ldr	r2, [pc, #96]	; (8007ad8 <pvPortMalloc+0x178>)
 8007a78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a7a:	4b17      	ldr	r3, [pc, #92]	; (8007ad8 <pvPortMalloc+0x178>)
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	4b18      	ldr	r3, [pc, #96]	; (8007ae0 <pvPortMalloc+0x180>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d203      	bcs.n	8007a8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a86:	4b14      	ldr	r3, [pc, #80]	; (8007ad8 <pvPortMalloc+0x178>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a15      	ldr	r2, [pc, #84]	; (8007ae0 <pvPortMalloc+0x180>)
 8007a8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	4b10      	ldr	r3, [pc, #64]	; (8007ad4 <pvPortMalloc+0x174>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	431a      	orrs	r2, r3
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007aa2:	f7fe ff25 	bl	80068f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d009      	beq.n	8007ac4 <pvPortMalloc+0x164>
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	e7fe      	b.n	8007ac2 <pvPortMalloc+0x162>
	return pvReturn;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3728      	adds	r7, #40	; 0x28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20004038 	.word	0x20004038
 8007ad4:	20004044 	.word	0x20004044
 8007ad8:	2000403c 	.word	0x2000403c
 8007adc:	20004030 	.word	0x20004030
 8007ae0:	20004040 	.word	0x20004040

08007ae4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d046      	beq.n	8007b84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007af6:	2308      	movs	r3, #8
 8007af8:	425b      	negs	r3, r3
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	4413      	add	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	4b20      	ldr	r3, [pc, #128]	; (8007b8c <vPortFree+0xa8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d109      	bne.n	8007b26 <vPortFree+0x42>
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	e7fe      	b.n	8007b24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d009      	beq.n	8007b42 <vPortFree+0x5e>
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	60bb      	str	r3, [r7, #8]
 8007b40:	e7fe      	b.n	8007b40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	4b11      	ldr	r3, [pc, #68]	; (8007b8c <vPortFree+0xa8>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d019      	beq.n	8007b84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d115      	bne.n	8007b84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	4b0b      	ldr	r3, [pc, #44]	; (8007b8c <vPortFree+0xa8>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	43db      	mvns	r3, r3
 8007b62:	401a      	ands	r2, r3
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b68:	f7fe feb4 	bl	80068d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <vPortFree+0xac>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4413      	add	r3, r2
 8007b76:	4a06      	ldr	r2, [pc, #24]	; (8007b90 <vPortFree+0xac>)
 8007b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b7a:	6938      	ldr	r0, [r7, #16]
 8007b7c:	f000 f86c 	bl	8007c58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007b80:	f7fe feb6 	bl	80068f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b84:	bf00      	nop
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	20004044 	.word	0x20004044
 8007b90:	2000403c 	.word	0x2000403c

08007b94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007b9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ba0:	4b27      	ldr	r3, [pc, #156]	; (8007c40 <prvHeapInit+0xac>)
 8007ba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00c      	beq.n	8007bc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3307      	adds	r3, #7
 8007bb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0307 	bic.w	r3, r3, #7
 8007bba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	4a1f      	ldr	r2, [pc, #124]	; (8007c40 <prvHeapInit+0xac>)
 8007bc4:	4413      	add	r3, r2
 8007bc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007bcc:	4a1d      	ldr	r2, [pc, #116]	; (8007c44 <prvHeapInit+0xb0>)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007bd2:	4b1c      	ldr	r3, [pc, #112]	; (8007c44 <prvHeapInit+0xb0>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	4413      	add	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007be0:	2208      	movs	r2, #8
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1a9b      	subs	r3, r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 0307 	bic.w	r3, r3, #7
 8007bee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4a15      	ldr	r2, [pc, #84]	; (8007c48 <prvHeapInit+0xb4>)
 8007bf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bf6:	4b14      	ldr	r3, [pc, #80]	; (8007c48 <prvHeapInit+0xb4>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bfe:	4b12      	ldr	r3, [pc, #72]	; (8007c48 <prvHeapInit+0xb4>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	1ad2      	subs	r2, r2, r3
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c14:	4b0c      	ldr	r3, [pc, #48]	; (8007c48 <prvHeapInit+0xb4>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	4a0a      	ldr	r2, [pc, #40]	; (8007c4c <prvHeapInit+0xb8>)
 8007c22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	4a09      	ldr	r2, [pc, #36]	; (8007c50 <prvHeapInit+0xbc>)
 8007c2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c2c:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <prvHeapInit+0xc0>)
 8007c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c32:	601a      	str	r2, [r3, #0]
}
 8007c34:	bf00      	nop
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	20000430 	.word	0x20000430
 8007c44:	20004030 	.word	0x20004030
 8007c48:	20004038 	.word	0x20004038
 8007c4c:	20004040 	.word	0x20004040
 8007c50:	2000403c 	.word	0x2000403c
 8007c54:	20004044 	.word	0x20004044

08007c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c60:	4b28      	ldr	r3, [pc, #160]	; (8007d04 <prvInsertBlockIntoFreeList+0xac>)
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e002      	b.n	8007c6c <prvInsertBlockIntoFreeList+0x14>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d8f7      	bhi.n	8007c66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	4413      	add	r3, r2
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d108      	bne.n	8007c9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	441a      	add	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	441a      	add	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d118      	bne.n	8007ce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	4b15      	ldr	r3, [pc, #84]	; (8007d08 <prvInsertBlockIntoFreeList+0xb0>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d00d      	beq.n	8007cd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	441a      	add	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	e008      	b.n	8007ce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007cd6:	4b0c      	ldr	r3, [pc, #48]	; (8007d08 <prvInsertBlockIntoFreeList+0xb0>)
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	e003      	b.n	8007ce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d002      	beq.n	8007cf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cf6:	bf00      	nop
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	20004030 	.word	0x20004030
 8007d08:	20004038 	.word	0x20004038

08007d0c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	330c      	adds	r3, #12
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f004 fa09 	bl	800c138 <tcpip_send_msg_wait_sem>
 8007d26:	4603      	mov	r3, r0
 8007d28:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d103      	bne.n	8007d3a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007d38:	e001      	b.n	8007d3e <netconn_apimsg+0x32>
  }
  return err;
 8007d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08a      	sub	sp, #40	; 0x28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	4603      	mov	r3, r0
 8007d50:	603a      	str	r2, [r7, #0]
 8007d52:	71fb      	strb	r3, [r7, #7]
 8007d54:	460b      	mov	r3, r1
 8007d56:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f001 f883 	bl	8008e68 <netconn_alloc>
 8007d62:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d054      	beq.n	8007e14 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007d6a:	79bb      	ldrb	r3, [r7, #6]
 8007d6c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007d72:	f107 0308 	add.w	r3, r7, #8
 8007d76:	4619      	mov	r1, r3
 8007d78:	4829      	ldr	r0, [pc, #164]	; (8007e20 <netconn_new_with_proto_and_callback+0xd8>)
 8007d7a:	f7ff ffc7 	bl	8007d0c <netconn_apimsg>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8007d84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d043      	beq.n	8007e14 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <netconn_new_with_proto_and_callback+0x58>
 8007d94:	4b23      	ldr	r3, [pc, #140]	; (8007e24 <netconn_new_with_proto_and_callback+0xdc>)
 8007d96:	2289      	movs	r2, #137	; 0x89
 8007d98:	4923      	ldr	r1, [pc, #140]	; (8007e28 <netconn_new_with_proto_and_callback+0xe0>)
 8007d9a:	4824      	ldr	r0, [pc, #144]	; (8007e2c <netconn_new_with_proto_and_callback+0xe4>)
 8007d9c:	f00e fc90 	bl	80166c0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	3310      	adds	r3, #16
 8007da4:	4618      	mov	r0, r3
 8007da6:	f00e fae1 	bl	801636c <sys_mbox_valid>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d105      	bne.n	8007dbc <netconn_new_with_proto_and_callback+0x74>
 8007db0:	4b1c      	ldr	r3, [pc, #112]	; (8007e24 <netconn_new_with_proto_and_callback+0xdc>)
 8007db2:	228a      	movs	r2, #138	; 0x8a
 8007db4:	491e      	ldr	r1, [pc, #120]	; (8007e30 <netconn_new_with_proto_and_callback+0xe8>)
 8007db6:	481d      	ldr	r0, [pc, #116]	; (8007e2c <netconn_new_with_proto_and_callback+0xe4>)
 8007db8:	f00e fc82 	bl	80166c0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	3314      	adds	r3, #20
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f00e fad3 	bl	801636c <sys_mbox_valid>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d005      	beq.n	8007dd8 <netconn_new_with_proto_and_callback+0x90>
 8007dcc:	4b15      	ldr	r3, [pc, #84]	; (8007e24 <netconn_new_with_proto_and_callback+0xdc>)
 8007dce:	228c      	movs	r2, #140	; 0x8c
 8007dd0:	4918      	ldr	r1, [pc, #96]	; (8007e34 <netconn_new_with_proto_and_callback+0xec>)
 8007dd2:	4816      	ldr	r0, [pc, #88]	; (8007e2c <netconn_new_with_proto_and_callback+0xe4>)
 8007dd4:	f00e fc74 	bl	80166c0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	330c      	adds	r3, #12
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f00e fb56 	bl	801648e <sys_sem_valid>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d105      	bne.n	8007df4 <netconn_new_with_proto_and_callback+0xac>
 8007de8:	4b0e      	ldr	r3, [pc, #56]	; (8007e24 <netconn_new_with_proto_and_callback+0xdc>)
 8007dea:	228f      	movs	r2, #143	; 0x8f
 8007dec:	4912      	ldr	r1, [pc, #72]	; (8007e38 <netconn_new_with_proto_and_callback+0xf0>)
 8007dee:	480f      	ldr	r0, [pc, #60]	; (8007e2c <netconn_new_with_proto_and_callback+0xe4>)
 8007df0:	f00e fc66 	bl	80166c0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	330c      	adds	r3, #12
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f00e fb3b 	bl	8016474 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	3310      	adds	r3, #16
 8007e02:	4618      	mov	r0, r3
 8007e04:	f00e fa16 	bl	8016234 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e0a:	2007      	movs	r0, #7
 8007e0c:	f004 fe34 	bl	800ca78 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007e10:	2300      	movs	r3, #0
 8007e12:	e000      	b.n	8007e16 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3728      	adds	r7, #40	; 0x28
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	08008e11 	.word	0x08008e11
 8007e24:	08017798 	.word	0x08017798
 8007e28:	080177cc 	.word	0x080177cc
 8007e2c:	080177f0 	.word	0x080177f0
 8007e30:	08017818 	.word	0x08017818
 8007e34:	08017830 	.word	0x08017830
 8007e38:	08017854 	.word	0x08017854

08007e3c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b08a      	sub	sp, #40	; 0x28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <netconn_delete+0x12>
    return ERR_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	e019      	b.n	8007e82 <netconn_delete+0x46>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60fb      	str	r3, [r7, #12]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
 8007e52:	f7fc fe39 	bl	8004ac8 <sys_now>
 8007e56:	4603      	mov	r3, r0
 8007e58:	61bb      	str	r3, [r7, #24]
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007e5a:	f107 030c 	add.w	r3, r7, #12
 8007e5e:	4619      	mov	r1, r3
 8007e60:	480a      	ldr	r0, [pc, #40]	; (8007e8c <netconn_delete+0x50>)
 8007e62:	f7ff ff53 	bl	8007d0c <netconn_apimsg>
 8007e66:	4603      	mov	r3, r0
 8007e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007e6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <netconn_delete+0x3e>
    return err;
 8007e74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e78:	e003      	b.n	8007e82 <netconn_delete+0x46>
  }

  netconn_free(conn);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 f876 	bl	8008f6c <netconn_free>

  return ERR_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3728      	adds	r7, #40	; 0x28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	08009511 	.word	0x08009511

08007e90 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08c      	sub	sp, #48	; 0x30
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d108      	bne.n	8007eb6 <netconn_getaddr+0x26>
 8007ea4:	4b1c      	ldr	r3, [pc, #112]	; (8007f18 <netconn_getaddr+0x88>)
 8007ea6:	22d9      	movs	r2, #217	; 0xd9
 8007ea8:	491c      	ldr	r1, [pc, #112]	; (8007f1c <netconn_getaddr+0x8c>)
 8007eaa:	481d      	ldr	r0, [pc, #116]	; (8007f20 <netconn_getaddr+0x90>)
 8007eac:	f00e fc08 	bl	80166c0 <iprintf>
 8007eb0:	f06f 030f 	mvn.w	r3, #15
 8007eb4:	e02b      	b.n	8007f0e <netconn_getaddr+0x7e>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d108      	bne.n	8007ece <netconn_getaddr+0x3e>
 8007ebc:	4b16      	ldr	r3, [pc, #88]	; (8007f18 <netconn_getaddr+0x88>)
 8007ebe:	22da      	movs	r2, #218	; 0xda
 8007ec0:	4918      	ldr	r1, [pc, #96]	; (8007f24 <netconn_getaddr+0x94>)
 8007ec2:	4817      	ldr	r0, [pc, #92]	; (8007f20 <netconn_getaddr+0x90>)
 8007ec4:	f00e fbfc 	bl	80166c0 <iprintf>
 8007ec8:	f06f 030f 	mvn.w	r3, #15
 8007ecc:	e01f      	b.n	8007f0e <netconn_getaddr+0x7e>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d108      	bne.n	8007ee6 <netconn_getaddr+0x56>
 8007ed4:	4b10      	ldr	r3, [pc, #64]	; (8007f18 <netconn_getaddr+0x88>)
 8007ed6:	22db      	movs	r2, #219	; 0xdb
 8007ed8:	4913      	ldr	r1, [pc, #76]	; (8007f28 <netconn_getaddr+0x98>)
 8007eda:	4811      	ldr	r0, [pc, #68]	; (8007f20 <netconn_getaddr+0x90>)
 8007edc:	f00e fbf0 	bl	80166c0 <iprintf>
 8007ee0:	f06f 030f 	mvn.w	r3, #15
 8007ee4:	e013      	b.n	8007f0e <netconn_getaddr+0x7e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8007eea:	78fb      	ldrb	r3, [r7, #3]
 8007eec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8007ef8:	f107 0314 	add.w	r3, r7, #20
 8007efc:	4619      	mov	r1, r3
 8007efe:	480b      	ldr	r0, [pc, #44]	; (8007f2c <netconn_getaddr+0x9c>)
 8007f00:	f7ff ff04 	bl	8007d0c <netconn_apimsg>
 8007f04:	4603      	mov	r3, r0
 8007f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8007f0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3730      	adds	r7, #48	; 0x30
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	08017798 	.word	0x08017798
 8007f1c:	08017870 	.word	0x08017870
 8007f20:	080177f0 	.word	0x080177f0
 8007f24:	08017890 	.word	0x08017890
 8007f28:	080178b0 	.word	0x080178b0
 8007f2c:	0800a079 	.word	0x0800a079

08007f30 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08c      	sub	sp, #48	; 0x30
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d108      	bne.n	8007f56 <netconn_bind+0x26>
 8007f44:	4b11      	ldr	r3, [pc, #68]	; (8007f8c <netconn_bind+0x5c>)
 8007f46:	22ff      	movs	r2, #255	; 0xff
 8007f48:	4911      	ldr	r1, [pc, #68]	; (8007f90 <netconn_bind+0x60>)
 8007f4a:	4812      	ldr	r0, [pc, #72]	; (8007f94 <netconn_bind+0x64>)
 8007f4c:	f00e fbb8 	bl	80166c0 <iprintf>
 8007f50:	f06f 030f 	mvn.w	r3, #15
 8007f54:	e015      	b.n	8007f82 <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 8007f5c:	4b0e      	ldr	r3, [pc, #56]	; (8007f98 <netconn_bind+0x68>)
 8007f5e:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007f68:	88fb      	ldrh	r3, [r7, #6]
 8007f6a:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007f6c:	f107 0314 	add.w	r3, r7, #20
 8007f70:	4619      	mov	r1, r3
 8007f72:	480a      	ldr	r0, [pc, #40]	; (8007f9c <netconn_bind+0x6c>)
 8007f74:	f7ff feca 	bl	8007d0c <netconn_apimsg>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007f7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3730      	adds	r7, #48	; 0x30
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	08017798 	.word	0x08017798
 8007f90:	080178d0 	.word	0x080178d0
 8007f94:	080177f0 	.word	0x080177f0
 8007f98:	0801a290 	.word	0x0801a290
 8007f9c:	08009719 	.word	0x08009719

08007fa0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08a      	sub	sp, #40	; 0x28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d109      	bne.n	8007fc6 <netconn_listen_with_backlog+0x26>
 8007fb2:	4b0e      	ldr	r3, [pc, #56]	; (8007fec <netconn_listen_with_backlog+0x4c>)
 8007fb4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8007fb8:	490d      	ldr	r1, [pc, #52]	; (8007ff0 <netconn_listen_with_backlog+0x50>)
 8007fba:	480e      	ldr	r0, [pc, #56]	; (8007ff4 <netconn_listen_with_backlog+0x54>)
 8007fbc:	f00e fb80 	bl	80166c0 <iprintf>
 8007fc0:	f06f 030f 	mvn.w	r3, #15
 8007fc4:	e00e      	b.n	8007fe4 <netconn_listen_with_backlog+0x44>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	753b      	strb	r3, [r7, #20]
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007fce:	f107 030c 	add.w	r3, r7, #12
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4808      	ldr	r0, [pc, #32]	; (8007ff8 <netconn_listen_with_backlog+0x58>)
 8007fd6:	f7ff fe99 	bl	8007d0c <netconn_apimsg>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8007fe0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3728      	adds	r7, #40	; 0x28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	08017798 	.word	0x08017798
 8007ff0:	08017930 	.word	0x08017930
 8007ff4:	080177f0 	.word	0x080177f0
 8007ff8:	080097d9 	.word	0x080097d9

08007ffc <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08c      	sub	sp, #48	; 0x30
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d109      	bne.n	8008020 <netconn_accept+0x24>
 800800c:	4b3d      	ldr	r3, [pc, #244]	; (8008104 <netconn_accept+0x108>)
 800800e:	f240 128d 	movw	r2, #397	; 0x18d
 8008012:	493d      	ldr	r1, [pc, #244]	; (8008108 <netconn_accept+0x10c>)
 8008014:	483d      	ldr	r0, [pc, #244]	; (800810c <netconn_accept+0x110>)
 8008016:	f00e fb53 	bl	80166c0 <iprintf>
 800801a:	f06f 030f 	mvn.w	r3, #15
 800801e:	e06d      	b.n	80080fc <netconn_accept+0x100>
  *new_conn = NULL;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d109      	bne.n	8008040 <netconn_accept+0x44>
 800802c:	4b35      	ldr	r3, [pc, #212]	; (8008104 <netconn_accept+0x108>)
 800802e:	f240 128f 	movw	r2, #399	; 0x18f
 8008032:	4937      	ldr	r1, [pc, #220]	; (8008110 <netconn_accept+0x114>)
 8008034:	4835      	ldr	r0, [pc, #212]	; (800810c <netconn_accept+0x110>)
 8008036:	f00e fb43 	bl	80166c0 <iprintf>
 800803a:	f06f 030f 	mvn.w	r3, #15
 800803e:	e05d      	b.n	80080fc <netconn_accept+0x100>

  if (ERR_IS_FATAL(conn->last_err)) {
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008046:	f113 0f0c 	cmn.w	r3, #12
 800804a:	da03      	bge.n	8008054 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008052:	e053      	b.n	80080fc <netconn_accept+0x100>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3314      	adds	r3, #20
 8008058:	4618      	mov	r0, r3
 800805a:	f00e f987 	bl	801636c <sys_mbox_valid>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d102      	bne.n	800806a <netconn_accept+0x6e>
    return ERR_CLSD;
 8008064:	f06f 030e 	mvn.w	r3, #14
 8008068:	e048      	b.n	80080fc <netconn_accept+0x100>
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_ALLOC(msg);
#endif /* TCP_LISTEN_BACKLOG */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f103 0014 	add.w	r0, r3, #20
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	461a      	mov	r2, r3
 8008076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800807a:	4619      	mov	r1, r3
 800807c:	f00e f91b 	bl	80162b6 <sys_arch_mbox_fetch>
 8008080:	4603      	mov	r3, r0
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008086:	d102      	bne.n	800808e <netconn_accept+0x92>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
 8008088:	f06f 0302 	mvn.w	r3, #2
 800808c:	e036      	b.n	80080fc <netconn_accept+0x100>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008096:	2b00      	cmp	r3, #0
 8008098:	d005      	beq.n	80080a6 <netconn_accept+0xaa>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809e:	2200      	movs	r2, #0
 80080a0:	2101      	movs	r1, #1
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	4a1a      	ldr	r2, [pc, #104]	; (8008114 <netconn_accept+0x118>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d102      	bne.n	80080b4 <netconn_accept+0xb8>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 80080ae:	f06f 030c 	mvn.w	r3, #12
 80080b2:	e023      	b.n	80080fc <netconn_accept+0x100>
  }
  if (newconn == NULL) {
 80080b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d114      	bne.n	80080e4 <netconn_accept+0xe8>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00e      	beq.n	80080de <netconn_accept+0xe2>
 80080c0:	f00e fa70 	bl	80165a4 <sys_arch_protect>
 80080c4:	62b8      	str	r0, [r7, #40]	; 0x28
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80080cc:	f113 0f0c 	cmn.w	r3, #12
 80080d0:	db02      	blt.n	80080d8 <netconn_accept+0xdc>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	22f1      	movs	r2, #241	; 0xf1
 80080d6:	721a      	strb	r2, [r3, #8]
 80080d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080da:	f00e fa71 	bl	80165c0 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 80080de:	f06f 030e 	mvn.w	r3, #14
 80080e2:	e00b      	b.n	80080fc <netconn_accept+0x100>
  }
#if TCP_LISTEN_BACKLOG
  /* Let the stack know that we have accepted the connection. */
  API_MSG_VAR_REF(msg).conn = newconn;
 80080e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e6:	60fb      	str	r3, [r7, #12]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
 80080e8:	f107 030c 	add.w	r3, r7, #12
 80080ec:	4619      	mov	r1, r3
 80080ee:	480a      	ldr	r0, [pc, #40]	; (8008118 <netconn_accept+0x11c>)
 80080f0:	f7ff fe0c 	bl	8007d0c <netconn_apimsg>
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080f8:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80080fa:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3730      	adds	r7, #48	; 0x30
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	08017798 	.word	0x08017798
 8008108:	08017950 	.word	0x08017950
 800810c:	080177f0 	.word	0x080177f0
 8008110:	08017970 	.word	0x08017970
 8008114:	200074e4 	.word	0x200074e4
 8008118:	08009b09 	.word	0x08009b09

0800811c <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b08c      	sub	sp, #48	; 0x30
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 8008126:	2300      	movs	r3, #0
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d109      	bne.n	8008144 <netconn_recv_data+0x28>
 8008130:	4b67      	ldr	r3, [pc, #412]	; (80082d0 <netconn_recv_data+0x1b4>)
 8008132:	f240 12e7 	movw	r2, #487	; 0x1e7
 8008136:	4967      	ldr	r1, [pc, #412]	; (80082d4 <netconn_recv_data+0x1b8>)
 8008138:	4867      	ldr	r0, [pc, #412]	; (80082d8 <netconn_recv_data+0x1bc>)
 800813a:	f00e fac1 	bl	80166c0 <iprintf>
 800813e:	f06f 030f 	mvn.w	r3, #15
 8008142:	e0c0      	b.n	80082c6 <netconn_recv_data+0x1aa>
  *new_buf = NULL;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d109      	bne.n	8008164 <netconn_recv_data+0x48>
 8008150:	4b5f      	ldr	r3, [pc, #380]	; (80082d0 <netconn_recv_data+0x1b4>)
 8008152:	f240 12e9 	movw	r2, #489	; 0x1e9
 8008156:	4961      	ldr	r1, [pc, #388]	; (80082dc <netconn_recv_data+0x1c0>)
 8008158:	485f      	ldr	r0, [pc, #380]	; (80082d8 <netconn_recv_data+0x1bc>)
 800815a:	f00e fab1 	bl	80166c0 <iprintf>
 800815e:	f06f 030f 	mvn.w	r3, #15
 8008162:	e0b0      	b.n	80082c6 <netconn_recv_data+0x1aa>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800816c:	2b10      	cmp	r3, #16
 800816e:	d115      	bne.n	800819c <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	3310      	adds	r3, #16
 8008174:	4618      	mov	r0, r3
 8008176:	f00e f8f9 	bl	801636c <sys_mbox_valid>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10d      	bne.n	800819c <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3314      	adds	r3, #20
 8008184:	4618      	mov	r0, r3
 8008186:	f00e f8f1 	bl	801636c <sys_mbox_valid>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <netconn_recv_data+0x7a>
 8008190:	f06f 030a 	mvn.w	r3, #10
 8008194:	e097      	b.n	80082c6 <netconn_recv_data+0x1aa>
 8008196:	f06f 030e 	mvn.w	r3, #14
 800819a:	e094      	b.n	80082c6 <netconn_recv_data+0x1aa>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3310      	adds	r3, #16
 80081a0:	4618      	mov	r0, r3
 80081a2:	f00e f8e3 	bl	801636c <sys_mbox_valid>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d109      	bne.n	80081c0 <netconn_recv_data+0xa4>
 80081ac:	4b48      	ldr	r3, [pc, #288]	; (80082d0 <netconn_recv_data+0x1b4>)
 80081ae:	f240 12f5 	movw	r2, #501	; 0x1f5
 80081b2:	494b      	ldr	r1, [pc, #300]	; (80082e0 <netconn_recv_data+0x1c4>)
 80081b4:	4848      	ldr	r0, [pc, #288]	; (80082d8 <netconn_recv_data+0x1bc>)
 80081b6:	f00e fa83 	bl	80166c0 <iprintf>
 80081ba:	f06f 030a 	mvn.w	r3, #10
 80081be:	e082      	b.n	80082c6 <netconn_recv_data+0x1aa>

  if (ERR_IS_FATAL(conn->last_err)) {
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80081c6:	f113 0f0c 	cmn.w	r3, #12
 80081ca:	da03      	bge.n	80081d4 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80081d2:	e078      	b.n	80082c6 <netconn_recv_data+0x1aa>
    API_MSG_VAR_ALLOC(msg);
  }
#endif /* LWIP_TCP */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f103 0010 	add.w	r0, r3, #16
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	461a      	mov	r2, r3
 80081e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081e4:	4619      	mov	r1, r3
 80081e6:	f00e f866 	bl	80162b6 <sys_arch_mbox_fetch>
 80081ea:	4603      	mov	r3, r0
 80081ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081f0:	d102      	bne.n	80081f8 <netconn_recv_data+0xdc>
#endif /* (LWIP_UDP || LWIP_RAW) */
    {
      API_MSG_VAR_FREE(msg);
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
 80081f2:	f06f 0302 	mvn.w	r3, #2
 80081f6:	e066      	b.n	80082c6 <netconn_recv_data+0x1aa>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008200:	2b10      	cmp	r3, #16
 8008202:	d138      	bne.n	8008276 <netconn_recv_data+0x15a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <netconn_recv_data+0xfa>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	891b      	ldrh	r3, [r3, #8]
 8008212:	617b      	str	r3, [r7, #20]
 8008214:	e001      	b.n	800821a <netconn_recv_data+0xfe>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8008216:	2301      	movs	r3, #1
 8008218:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800821a:	f107 030c 	add.w	r3, r7, #12
 800821e:	4619      	mov	r1, r3
 8008220:	4830      	ldr	r0, [pc, #192]	; (80082e4 <netconn_recv_data+0x1c8>)
 8008222:	f7ff fd73 	bl	8007d0c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	2b00      	cmp	r3, #0
 800822a:	d120      	bne.n	800826e <netconn_recv_data+0x152>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008230:	2b00      	cmp	r3, #0
 8008232:	d005      	beq.n	8008240 <netconn_recv_data+0x124>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008238:	2200      	movs	r2, #0
 800823a:	2101      	movs	r1, #1
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10b      	bne.n	8008260 <netconn_recv_data+0x144>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <netconn_recv_data+0x13e>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008258:	e035      	b.n	80082c6 <netconn_recv_data+0x1aa>
 800825a:	f06f 030d 	mvn.w	r3, #13
 800825e:	e032      	b.n	80082c6 <netconn_recv_data+0x1aa>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008260:	2101      	movs	r1, #1
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f99a 	bl	800859c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008268:	f06f 030e 	mvn.w	r3, #14
 800826c:	e02b      	b.n	80082c6 <netconn_recv_data+0x1aa>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	891b      	ldrh	r3, [r3, #8]
 8008272:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008274:	e00d      	b.n	8008292 <netconn_recv_data+0x176>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	2b00      	cmp	r3, #0
 800827a:	d106      	bne.n	800828a <netconn_recv_data+0x16e>
 800827c:	4b14      	ldr	r3, [pc, #80]	; (80082d0 <netconn_recv_data+0x1b4>)
 800827e:	f240 223e 	movw	r2, #574	; 0x23e
 8008282:	4919      	ldr	r1, [pc, #100]	; (80082e8 <netconn_recv_data+0x1cc>)
 8008284:	4814      	ldr	r0, [pc, #80]	; (80082d8 <netconn_recv_data+0x1bc>)
 8008286:	f00e fa1b 	bl	80166c0 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	891b      	ldrh	r3, [r3, #8]
 8008290:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
 8008292:	f00e f987 	bl	80165a4 <sys_arch_protect>
 8008296:	62b8      	str	r0, [r7, #40]	; 0x28
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800829c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800829e:	1ad2      	subs	r2, r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	629a      	str	r2, [r3, #40]	; 0x28
 80082a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082a6:	f00e f98b 	bl	80165c0 <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d005      	beq.n	80082be <netconn_recv_data+0x1a2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80082b8:	2101      	movs	r1, #1
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80082be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3730      	adds	r7, #48	; 0x30
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	08017798 	.word	0x08017798
 80082d4:	08017990 	.word	0x08017990
 80082d8:	080177f0 	.word	0x080177f0
 80082dc:	080179b0 	.word	0x080179b0
 80082e0:	080179cc 	.word	0x080179cc
 80082e4:	08009a71 	.word	0x08009a71
 80082e8:	080179ec 	.word	0x080179ec

080082ec <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d005      	beq.n	8008308 <netconn_recv_tcp_pbuf+0x1c>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008304:	2b10      	cmp	r3, #16
 8008306:	d009      	beq.n	800831c <netconn_recv_tcp_pbuf+0x30>
 8008308:	4b09      	ldr	r3, [pc, #36]	; (8008330 <netconn_recv_tcp_pbuf+0x44>)
 800830a:	f240 225e 	movw	r2, #606	; 0x25e
 800830e:	4909      	ldr	r1, [pc, #36]	; (8008334 <netconn_recv_tcp_pbuf+0x48>)
 8008310:	4809      	ldr	r0, [pc, #36]	; (8008338 <netconn_recv_tcp_pbuf+0x4c>)
 8008312:	f00e f9d5 	bl	80166c0 <iprintf>
 8008316:	f06f 030f 	mvn.w	r3, #15
 800831a:	e004      	b.n	8008326 <netconn_recv_tcp_pbuf+0x3a>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7ff fefc 	bl	800811c <netconn_recv_data>
 8008324:	4603      	mov	r3, r0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	08017798 	.word	0x08017798
 8008334:	080179b0 	.word	0x080179b0
 8008338:	080177f0 	.word	0x080177f0

0800833c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8008346:	2300      	movs	r3, #0
 8008348:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d109      	bne.n	8008364 <netconn_recv+0x28>
 8008350:	4b31      	ldr	r3, [pc, #196]	; (8008418 <netconn_recv+0xdc>)
 8008352:	f44f 721d 	mov.w	r2, #628	; 0x274
 8008356:	4931      	ldr	r1, [pc, #196]	; (800841c <netconn_recv+0xe0>)
 8008358:	4831      	ldr	r0, [pc, #196]	; (8008420 <netconn_recv+0xe4>)
 800835a:	f00e f9b1 	bl	80166c0 <iprintf>
 800835e:	f06f 030f 	mvn.w	r3, #15
 8008362:	e054      	b.n	800840e <netconn_recv+0xd2>
  *new_buf = NULL;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2200      	movs	r2, #0
 8008368:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d109      	bne.n	8008384 <netconn_recv+0x48>
 8008370:	4b29      	ldr	r3, [pc, #164]	; (8008418 <netconn_recv+0xdc>)
 8008372:	f240 2276 	movw	r2, #630	; 0x276
 8008376:	492b      	ldr	r1, [pc, #172]	; (8008424 <netconn_recv+0xe8>)
 8008378:	4829      	ldr	r0, [pc, #164]	; (8008420 <netconn_recv+0xe4>)
 800837a:	f00e f9a1 	bl	80166c0 <iprintf>
 800837e:	f06f 030f 	mvn.w	r3, #15
 8008382:	e044      	b.n	800840e <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800838c:	2b10      	cmp	r3, #16
 800838e:	d139      	bne.n	8008404 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008394:	2006      	movs	r0, #6
 8008396:	f004 fb1d 	bl	800c9d4 <memp_malloc>
 800839a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d102      	bne.n	80083a8 <netconn_recv+0x6c>
      return ERR_MEM;
 80083a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083a6:	e032      	b.n	800840e <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 80083a8:	f107 030c 	add.w	r3, r7, #12
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff feb4 	bl	800811c <netconn_recv_data>
 80083b4:	4603      	mov	r3, r0
 80083b6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80083b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d006      	beq.n	80083ce <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 80083c0:	6979      	ldr	r1, [r7, #20]
 80083c2:	2006      	movs	r0, #6
 80083c4:	f004 fb58 	bl	800ca78 <memp_free>
      return err;
 80083c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083cc:	e01f      	b.n	800840e <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d106      	bne.n	80083e2 <netconn_recv+0xa6>
 80083d4:	4b10      	ldr	r3, [pc, #64]	; (8008418 <netconn_recv+0xdc>)
 80083d6:	f240 228a 	movw	r2, #650	; 0x28a
 80083da:	4913      	ldr	r1, [pc, #76]	; (8008428 <netconn_recv+0xec>)
 80083dc:	4810      	ldr	r0, [pc, #64]	; (8008420 <netconn_recv+0xe4>)
 80083de:	f00e f96f 	bl	80166c0 <iprintf>

    buf->p = p;
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2200      	movs	r2, #0
 80083f2:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	2200      	movs	r2, #0
 80083f8:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	e004      	b.n	800840e <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7ff fe88 	bl	800811c <netconn_recv_data>
 800840c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800840e:	4618      	mov	r0, r3
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	08017798 	.word	0x08017798
 800841c:	08017990 	.word	0x08017990
 8008420:	080177f0 	.word	0x080177f0
 8008424:	080179b0 	.word	0x080179b0
 8008428:	080179f8 	.word	0x080179f8

0800842c <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08a      	sub	sp, #40	; 0x28
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d109      	bne.n	8008450 <netconn_send+0x24>
 800843c:	4b0e      	ldr	r3, [pc, #56]	; (8008478 <netconn_send+0x4c>)
 800843e:	f240 22c3 	movw	r2, #707	; 0x2c3
 8008442:	490e      	ldr	r1, [pc, #56]	; (800847c <netconn_send+0x50>)
 8008444:	480e      	ldr	r0, [pc, #56]	; (8008480 <netconn_send+0x54>)
 8008446:	f00e f93b 	bl	80166c0 <iprintf>
 800844a:	f06f 030f 	mvn.w	r3, #15
 800844e:	e00e      	b.n	800846e <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8008458:	f107 030c 	add.w	r3, r7, #12
 800845c:	4619      	mov	r1, r3
 800845e:	4809      	ldr	r0, [pc, #36]	; (8008484 <netconn_send+0x58>)
 8008460:	f7ff fc54 	bl	8007d0c <netconn_apimsg>
 8008464:	4603      	mov	r3, r0
 8008466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800846a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800846e:	4618      	mov	r0, r3
 8008470:	3728      	adds	r7, #40	; 0x28
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	08017798 	.word	0x08017798
 800847c:	08017a04 	.word	0x08017a04
 8008480:	080177f0 	.word	0x080177f0
 8008484:	080099a1 	.word	0x080099a1

08008488 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08c      	sub	sp, #48	; 0x30
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d109      	bne.n	80084b0 <netconn_write_partly+0x28>
 800849c:	4b3a      	ldr	r3, [pc, #232]	; (8008588 <netconn_write_partly+0x100>)
 800849e:	f240 22e6 	movw	r2, #742	; 0x2e6
 80084a2:	493a      	ldr	r1, [pc, #232]	; (800858c <netconn_write_partly+0x104>)
 80084a4:	483a      	ldr	r0, [pc, #232]	; (8008590 <netconn_write_partly+0x108>)
 80084a6:	f00e f90b 	bl	80166c0 <iprintf>
 80084aa:	f06f 030f 	mvn.w	r3, #15
 80084ae:	e067      	b.n	8008580 <netconn_write_partly+0xf8>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084b8:	2b10      	cmp	r3, #16
 80084ba:	d009      	beq.n	80084d0 <netconn_write_partly+0x48>
 80084bc:	4b32      	ldr	r3, [pc, #200]	; (8008588 <netconn_write_partly+0x100>)
 80084be:	f240 22e7 	movw	r2, #743	; 0x2e7
 80084c2:	4934      	ldr	r1, [pc, #208]	; (8008594 <netconn_write_partly+0x10c>)
 80084c4:	4832      	ldr	r0, [pc, #200]	; (8008590 <netconn_write_partly+0x108>)
 80084c6:	f00e f8fb 	bl	80166c0 <iprintf>
 80084ca:	f06f 0305 	mvn.w	r3, #5
 80084ce:	e057      	b.n	8008580 <netconn_write_partly+0xf8>
  if (size == 0) {
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <netconn_write_partly+0x52>
    return ERR_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	e052      	b.n	8008580 <netconn_write_partly+0xf8>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80084e0:	f003 0302 	and.w	r3, r3, #2
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d104      	bne.n	80084f2 <netconn_write_partly+0x6a>
 80084e8:	78fb      	ldrb	r3, [r7, #3]
 80084ea:	f003 0304 	and.w	r3, r3, #4
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <netconn_write_partly+0x6e>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e000      	b.n	80084f8 <netconn_write_partly+0x70>
 80084f6:	2300      	movs	r3, #0
 80084f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <netconn_write_partly+0x82>
    dontblock = 1;
 8008504:	2301      	movs	r3, #1
 8008506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800850a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800850e:	2b00      	cmp	r3, #0
 8008510:	d005      	beq.n	800851e <netconn_write_partly+0x96>
 8008512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008514:	2b00      	cmp	r3, #0
 8008516:	d102      	bne.n	800851e <netconn_write_partly+0x96>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008518:	f06f 0305 	mvn.w	r3, #5
 800851c:	e030      	b.n	8008580 <netconn_write_partly+0xf8>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008526:	78fb      	ldrb	r3, [r7, #3]
 8008528:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	623b      	str	r3, [r7, #32]
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d004      	beq.n	8008542 <netconn_write_partly+0xba>
    /* get the time we started, which is later compared to
        sys_now() + conn->send_timeout */
    API_MSG_VAR_REF(msg).msg.w.time_started = sys_now();
 8008538:	f7fc fac6 	bl	8004ac8 <sys_now>
 800853c:	4603      	mov	r3, r0
 800853e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008540:	e001      	b.n	8008546 <netconn_write_partly+0xbe>
  } else {
    API_MSG_VAR_REF(msg).msg.w.time_started = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008546:	f107 0314 	add.w	r3, r7, #20
 800854a:	4619      	mov	r1, r3
 800854c:	4812      	ldr	r0, [pc, #72]	; (8008598 <netconn_write_partly+0x110>)
 800854e:	f7ff fbdd 	bl	8007d0c <netconn_apimsg>
 8008552:	4603      	mov	r3, r0
 8008554:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8008558:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10d      	bne.n	800857c <netconn_write_partly+0xf4>
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00a      	beq.n	800857c <netconn_write_partly+0xf4>
    if (dontblock) {
 8008566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <netconn_write_partly+0xee>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800856e:	6a3a      	ldr	r2, [r7, #32]
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	e002      	b.n	800857c <netconn_write_partly+0xf4>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 8008576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800857c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8008580:	4618      	mov	r0, r3
 8008582:	3730      	adds	r7, #48	; 0x30
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	08017798 	.word	0x08017798
 800858c:	08017a20 	.word	0x08017a20
 8008590:	080177f0 	.word	0x080177f0
 8008594:	08017a3c 	.word	0x08017a3c
 8008598:	08009f19 	.word	0x08009f19

0800859c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08a      	sub	sp, #40	; 0x28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d109      	bne.n	80085c2 <netconn_close_shutdown+0x26>
 80085ae:	4b10      	ldr	r3, [pc, #64]	; (80085f0 <netconn_close_shutdown+0x54>)
 80085b0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80085b4:	490f      	ldr	r1, [pc, #60]	; (80085f4 <netconn_close_shutdown+0x58>)
 80085b6:	4810      	ldr	r0, [pc, #64]	; (80085f8 <netconn_close_shutdown+0x5c>)
 80085b8:	f00e f882 	bl	80166c0 <iprintf>
 80085bc:	f06f 030f 	mvn.w	r3, #15
 80085c0:	e012      	b.n	80085e8 <netconn_close_shutdown+0x4c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
 80085ca:	f7fc fa7d 	bl	8004ac8 <sys_now>
 80085ce:	4603      	mov	r3, r0
 80085d0:	61bb      	str	r3, [r7, #24]
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80085d2:	f107 030c 	add.w	r3, r7, #12
 80085d6:	4619      	mov	r1, r3
 80085d8:	4808      	ldr	r0, [pc, #32]	; (80085fc <netconn_close_shutdown+0x60>)
 80085da:	f7ff fb97 	bl	8007d0c <netconn_apimsg>
 80085de:	4603      	mov	r3, r0
 80085e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 80085e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3728      	adds	r7, #40	; 0x28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	08017798 	.word	0x08017798
 80085f4:	08017a60 	.word	0x08017a60
 80085f8:	080177f0 	.word	0x080177f0
 80085fc:	0800a1b1 	.word	0x0800a1b1

08008600 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08a      	sub	sp, #40	; 0x28
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d105      	bne.n	8008620 <recv_udp+0x20>
 8008614:	4b43      	ldr	r3, [pc, #268]	; (8008724 <recv_udp+0x124>)
 8008616:	22b1      	movs	r2, #177	; 0xb1
 8008618:	4943      	ldr	r1, [pc, #268]	; (8008728 <recv_udp+0x128>)
 800861a:	4844      	ldr	r0, [pc, #272]	; (800872c <recv_udp+0x12c>)
 800861c:	f00e f850 	bl	80166c0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d105      	bne.n	8008632 <recv_udp+0x32>
 8008626:	4b3f      	ldr	r3, [pc, #252]	; (8008724 <recv_udp+0x124>)
 8008628:	22b2      	movs	r2, #178	; 0xb2
 800862a:	4941      	ldr	r1, [pc, #260]	; (8008730 <recv_udp+0x130>)
 800862c:	483f      	ldr	r0, [pc, #252]	; (800872c <recv_udp+0x12c>)
 800862e:	f00e f847 	bl	80166c0 <iprintf>
  conn = (struct netconn *)arg;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	627b      	str	r3, [r7, #36]	; 0x24

  if (conn == NULL) {
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	2b00      	cmp	r3, #0
 800863a:	d103      	bne.n	8008644 <recv_udp+0x44>
    pbuf_free(p);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f004 ffef 	bl	800d620 <pbuf_free>
    return;
 8008642:	e06b      	b.n	800871c <recv_udp+0x11c>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	429a      	cmp	r2, r3
 800864c:	d005      	beq.n	800865a <recv_udp+0x5a>
 800864e:	4b35      	ldr	r3, [pc, #212]	; (8008724 <recv_udp+0x124>)
 8008650:	22ba      	movs	r2, #186	; 0xba
 8008652:	4938      	ldr	r1, [pc, #224]	; (8008734 <recv_udp+0x134>)
 8008654:	4835      	ldr	r0, [pc, #212]	; (800872c <recv_udp+0x12c>)
 8008656:	f00e f833 	bl	80166c0 <iprintf>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
 800865a:	f00d ffa3 	bl	80165a4 <sys_arch_protect>
 800865e:	6238      	str	r0, [r7, #32]
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008664:	61fb      	str	r3, [r7, #28]
 8008666:	6a38      	ldr	r0, [r7, #32]
 8008668:	f00d ffaa 	bl	80165c0 <sys_arch_unprotect>
  if (!sys_mbox_valid(&conn->recvmbox) ||
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	3310      	adds	r3, #16
 8008670:	4618      	mov	r0, r3
 8008672:	f00d fe7b 	bl	801636c <sys_mbox_valid>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d008      	beq.n	800868e <recv_udp+0x8e>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	891b      	ldrh	r3, [r3, #8]
 8008680:	461a      	mov	r2, r3
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	441a      	add	r2, r3
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (!sys_mbox_valid(&conn->recvmbox) ||
 800868a:	429a      	cmp	r2, r3
 800868c:	dd03      	ble.n	8008696 <recv_udp+0x96>
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f004 ffc6 	bl	800d620 <pbuf_free>
    return;
 8008694:	e042      	b.n	800871c <recv_udp+0x11c>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008696:	2006      	movs	r0, #6
 8008698:	f004 f99c 	bl	800c9d4 <memp_malloc>
 800869c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d103      	bne.n	80086ac <recv_udp+0xac>
    pbuf_free(p);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f004 ffbb 	bl	800d620 <pbuf_free>
    return;
 80086aa:	e037      	b.n	800871c <recv_udp+0x11c>
  } else {
    buf->p = p;
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <recv_udp+0xc4>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	e000      	b.n	80086c6 <recv_udp+0xc6>
 80086c4:	2300      	movs	r3, #0
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80086ce:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	891b      	ldrh	r3, [r3, #8]
 80086d4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	3310      	adds	r3, #16
 80086da:	69b9      	ldr	r1, [r7, #24]
 80086dc:	4618      	mov	r0, r3
 80086de:	f00d fdd0 	bl	8016282 <sys_mbox_trypost>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <recv_udp+0xf0>
    netbuf_delete(buf);
 80086e8:	69b8      	ldr	r0, [r7, #24]
 80086ea:	f001 fe27 	bl	800a33c <netbuf_delete>
    return;
 80086ee:	e015      	b.n	800871c <recv_udp+0x11c>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 80086f0:	f00d ff58 	bl	80165a4 <sys_arch_protect>
 80086f4:	6138      	str	r0, [r7, #16]
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086fa:	8afb      	ldrh	r3, [r7, #22]
 80086fc:	441a      	add	r2, r3
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	629a      	str	r2, [r3, #40]	; 0x28
 8008702:	6938      	ldr	r0, [r7, #16]
 8008704:	f00d ff5c 	bl	80165c0 <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870c:	2b00      	cmp	r3, #0
 800870e:	d005      	beq.n	800871c <recv_udp+0x11c>
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008714:	8afa      	ldrh	r2, [r7, #22]
 8008716:	2100      	movs	r1, #0
 8008718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800871a:	4798      	blx	r3
  }
}
 800871c:	3728      	adds	r7, #40	; 0x28
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	08017a7c 	.word	0x08017a7c
 8008728:	08017ab0 	.word	0x08017ab0
 800872c:	08017ad4 	.word	0x08017ad4
 8008730:	08017afc 	.word	0x08017afc
 8008734:	08017b1c 	.word	0x08017b1c

08008738 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b088      	sub	sp, #32
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d105      	bne.n	8008758 <recv_tcp+0x20>
 800874c:	4b3f      	ldr	r3, [pc, #252]	; (800884c <recv_tcp+0x114>)
 800874e:	22f9      	movs	r2, #249	; 0xf9
 8008750:	493f      	ldr	r1, [pc, #252]	; (8008850 <recv_tcp+0x118>)
 8008752:	4840      	ldr	r0, [pc, #256]	; (8008854 <recv_tcp+0x11c>)
 8008754:	f00d ffb4 	bl	80166c0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d105      	bne.n	800876a <recv_tcp+0x32>
 800875e:	4b3b      	ldr	r3, [pc, #236]	; (800884c <recv_tcp+0x114>)
 8008760:	22fa      	movs	r2, #250	; 0xfa
 8008762:	493d      	ldr	r1, [pc, #244]	; (8008858 <recv_tcp+0x120>)
 8008764:	483b      	ldr	r0, [pc, #236]	; (8008854 <recv_tcp+0x11c>)
 8008766:	f00d ffab 	bl	80166c0 <iprintf>
  conn = (struct netconn *)arg;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d102      	bne.n	800877a <recv_tcp+0x42>
    return ERR_VAL;
 8008774:	f06f 0305 	mvn.w	r3, #5
 8008778:	e063      	b.n	8008842 <recv_tcp+0x10a>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	429a      	cmp	r2, r3
 8008782:	d006      	beq.n	8008792 <recv_tcp+0x5a>
 8008784:	4b31      	ldr	r3, [pc, #196]	; (800884c <recv_tcp+0x114>)
 8008786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800878a:	4934      	ldr	r1, [pc, #208]	; (800885c <recv_tcp+0x124>)
 800878c:	4831      	ldr	r0, [pc, #196]	; (8008854 <recv_tcp+0x11c>)
 800878e:	f00d ff97 	bl	80166c0 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	3310      	adds	r3, #16
 8008796:	4618      	mov	r0, r3
 8008798:	f00d fde8 	bl	801636c <sys_mbox_valid>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10d      	bne.n	80087be <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d008      	beq.n	80087ba <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	891b      	ldrh	r3, [r3, #8]
 80087ac:	4619      	mov	r1, r3
 80087ae:	68b8      	ldr	r0, [r7, #8]
 80087b0:	f005 feec 	bl	800e58c <tcp_recved>
      pbuf_free(p);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f004 ff33 	bl	800d620 <pbuf_free>
    }
    return ERR_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	e041      	b.n	8008842 <recv_tcp+0x10a>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 80087be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d011      	beq.n	80087ea <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00e      	beq.n	80087ea <recv_tcp+0xb2>
 80087cc:	f00d feea 	bl	80165a4 <sys_arch_protect>
 80087d0:	6178      	str	r0, [r7, #20]
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80087d8:	f113 0f0c 	cmn.w	r3, #12
 80087dc:	db02      	blt.n	80087e4 <recv_tcp+0xac>
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	78fa      	ldrb	r2, [r7, #3]
 80087e2:	721a      	strb	r2, [r3, #8]
 80087e4:	6978      	ldr	r0, [r7, #20]
 80087e6:	f00d feeb 	bl	80165c0 <sys_arch_unprotect>
  }

  if (p != NULL) {
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <recv_tcp+0xc0>
    len = p->tot_len;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	891b      	ldrh	r3, [r3, #8]
 80087f4:	83fb      	strh	r3, [r7, #30]
 80087f6:	e001      	b.n	80087fc <recv_tcp+0xc4>
  } else {
    len = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	3310      	adds	r3, #16
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	4618      	mov	r0, r3
 8008804:	f00d fd3d 	bl	8016282 <sys_mbox_trypost>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800880e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008812:	e016      	b.n	8008842 <recv_tcp+0x10a>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 8008814:	f00d fec6 	bl	80165a4 <sys_arch_protect>
 8008818:	6138      	str	r0, [r7, #16]
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800881e:	8bfb      	ldrh	r3, [r7, #30]
 8008820:	441a      	add	r2, r3
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	629a      	str	r2, [r3, #40]	; 0x28
 8008826:	6938      	ldr	r0, [r7, #16]
 8008828:	f00d feca 	bl	80165c0 <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008830:	2b00      	cmp	r3, #0
 8008832:	d005      	beq.n	8008840 <recv_tcp+0x108>
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008838:	8bfa      	ldrh	r2, [r7, #30]
 800883a:	2100      	movs	r1, #0
 800883c:	69b8      	ldr	r0, [r7, #24]
 800883e:	4798      	blx	r3
  }

  return ERR_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3720      	adds	r7, #32
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	08017a7c 	.word	0x08017a7c
 8008850:	08017b3c 	.word	0x08017b3c
 8008854:	08017ad4 	.word	0x08017ad4
 8008858:	08017b60 	.word	0x08017b60
 800885c:	08017b80 	.word	0x08017b80

08008860 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d106      	bne.n	8008882 <poll_tcp+0x22>
 8008874:	4b23      	ldr	r3, [pc, #140]	; (8008904 <poll_tcp+0xa4>)
 8008876:	f44f 729c 	mov.w	r2, #312	; 0x138
 800887a:	4923      	ldr	r1, [pc, #140]	; (8008908 <poll_tcp+0xa8>)
 800887c:	4823      	ldr	r0, [pc, #140]	; (800890c <poll_tcp+0xac>)
 800887e:	f00d ff1f 	bl	80166c0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	785b      	ldrb	r3, [r3, #1]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d104      	bne.n	8008894 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800888a:	2101      	movs	r1, #1
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f001 f971 	bl	8009b74 <lwip_netconn_do_writemore>
 8008892:	e007      	b.n	80088a4 <poll_tcp+0x44>
  } else if (conn->state == NETCONN_CLOSE) {
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	785b      	ldrb	r3, [r3, #1]
 8008898:	2b04      	cmp	r3, #4
 800889a:	d103      	bne.n	80088a4 <poll_tcp+0x44>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
      conn->current_msg->msg.sd.polls_left--;
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800889c:	2101      	movs	r1, #1
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f000 fc2e 	bl	8009100 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80088aa:	f003 0310 	and.w	r3, r3, #16
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d023      	beq.n	80088fa <poll_tcp+0x9a>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d01f      	beq.n	80088fa <poll_tcp+0x9a>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80088c2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80088c6:	d318      	bcc.n	80088fa <poll_tcp+0x9a>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	d812      	bhi.n	80088fa <poll_tcp+0x9a>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80088da:	f023 0310 	bic.w	r3, r3, #16
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d005      	beq.n	80088fa <poll_tcp+0x9a>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	2200      	movs	r2, #0
 80088f4:	2102      	movs	r1, #2
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	08017a7c 	.word	0x08017a7c
 8008908:	08017ba0 	.word	0x08017ba0
 800890c:	08017ad4 	.word	0x08017ad4

08008910 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	4613      	mov	r3, r2
 800891c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d106      	bne.n	8008936 <sent_tcp+0x26>
 8008928:	4b21      	ldr	r3, [pc, #132]	; (80089b0 <sent_tcp+0xa0>)
 800892a:	f240 1261 	movw	r2, #353	; 0x161
 800892e:	4921      	ldr	r1, [pc, #132]	; (80089b4 <sent_tcp+0xa4>)
 8008930:	4821      	ldr	r0, [pc, #132]	; (80089b8 <sent_tcp+0xa8>)
 8008932:	f00d fec5 	bl	80166c0 <iprintf>

  if (conn) {
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d034      	beq.n	80089a6 <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d104      	bne.n	800894e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008944:	2101      	movs	r1, #1
 8008946:	6978      	ldr	r0, [r7, #20]
 8008948:	f001 f914 	bl	8009b74 <lwip_netconn_do_writemore>
 800894c:	e007      	b.n	800895e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	785b      	ldrb	r3, [r3, #1]
 8008952:	2b04      	cmp	r3, #4
 8008954:	d103      	bne.n	800895e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008956:	2101      	movs	r1, #1
 8008958:	6978      	ldr	r0, [r7, #20]
 800895a:	f000 fbd1 	bl	8009100 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d01f      	beq.n	80089a6 <sent_tcp+0x96>
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800896e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008972:	d318      	bcc.n	80089a6 <sent_tcp+0x96>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800897c:	2b04      	cmp	r3, #4
 800897e:	d812      	bhi.n	80089a6 <sent_tcp+0x96>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008986:	f023 0310 	bic.w	r3, r3, #16
 800898a:	b2da      	uxtb	r2, r3
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <sent_tcp+0x96>
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899e:	88fa      	ldrh	r2, [r7, #6]
 80089a0:	2102      	movs	r1, #2
 80089a2:	6978      	ldr	r0, [r7, #20]
 80089a4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	08017a7c 	.word	0x08017a7c
 80089b4:	08017ba0 	.word	0x08017ba0
 80089b8:	08017ad4 	.word	0x08017ad4

080089bc <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08a      	sub	sp, #40	; 0x28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d106      	bne.n	80089e0 <err_tcp+0x24>
 80089d2:	4b6d      	ldr	r3, [pc, #436]	; (8008b88 <err_tcp+0x1cc>)
 80089d4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80089d8:	496c      	ldr	r1, [pc, #432]	; (8008b8c <err_tcp+0x1d0>)
 80089da:	486d      	ldr	r0, [pc, #436]	; (8008b90 <err_tcp+0x1d4>)
 80089dc:	f00d fe70 	bl	80166c0 <iprintf>

  conn->pcb.tcp = NULL;
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	2200      	movs	r2, #0
 80089e4:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	785b      	ldrb	r3, [r3, #1]
 80089ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	2200      	movs	r2, #0
 80089f2:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 80089f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089f8:	2b04      	cmp	r3, #4
 80089fa:	d114      	bne.n	8008a26 <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d018      	beq.n	8008a38 <err_tcp+0x7c>
 8008a06:	f00d fdcd 	bl	80165a4 <sys_arch_protect>
 8008a0a:	61b8      	str	r0, [r7, #24]
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008a12:	f113 0f0c 	cmn.w	r3, #12
 8008a16:	db02      	blt.n	8008a1e <err_tcp+0x62>
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	721a      	strb	r2, [r3, #8]
 8008a1e:	69b8      	ldr	r0, [r7, #24]
 8008a20:	f00d fdce 	bl	80165c0 <sys_arch_unprotect>
 8008a24:	e008      	b.n	8008a38 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 8008a26:	f00d fdbd 	bl	80165a4 <sys_arch_protect>
 8008a2a:	61f8      	str	r0, [r7, #28]
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	78fa      	ldrb	r2, [r7, #3]
 8008a30:	721a      	strb	r2, [r3, #8]
 8008a32:	69f8      	ldr	r0, [r7, #28]
 8008a34:	f00d fdc4 	bl	80165c0 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <err_tcp+0x90>
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	2200      	movs	r2, #0
 8008a46:	2104      	movs	r1, #4
 8008a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a4a:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d005      	beq.n	8008a60 <err_tcp+0xa4>
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a58:	2200      	movs	r2, #0
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a5e:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d005      	beq.n	8008a74 <err_tcp+0xb8>
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2102      	movs	r1, #2
 8008a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a72:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	3310      	adds	r3, #16
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f00d fc77 	bl	801636c <sys_mbox_valid>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d005      	beq.n	8008a90 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	3310      	adds	r3, #16
 8008a88:	2100      	movs	r1, #0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f00d fbf9 	bl	8016282 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	3314      	adds	r3, #20
 8008a94:	4618      	mov	r0, r3
 8008a96:	f00d fc69 	bl	801636c <sys_mbox_valid>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d005      	beq.n	8008aac <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	3314      	adds	r3, #20
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f00d fbeb 	bl	8016282 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d007      	beq.n	8008ac4 <err_tcp+0x108>
 8008ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ab8:	2b04      	cmp	r3, #4
 8008aba:	d003      	beq.n	8008ac4 <err_tcp+0x108>
 8008abc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d150      	bne.n	8008b66 <err_tcp+0x1aa>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008aca:	f003 0304 	and.w	r3, r3, #4
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	bf14      	ite	ne
 8008ad2:	2301      	movne	r3, #1
 8008ad4:	2300      	moveq	r3, #0
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008ae0:	f023 0304 	bic.w	r3, r3, #4
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    if (!was_nonblocking_connect) {
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d145      	bne.n	8008b7e <err_tcp+0x1c2>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d106      	bne.n	8008b08 <err_tcp+0x14c>
 8008afa:	4b23      	ldr	r3, [pc, #140]	; (8008b88 <err_tcp+0x1cc>)
 8008afc:	f240 12b3 	movw	r2, #435	; 0x1b3
 8008b00:	4924      	ldr	r1, [pc, #144]	; (8008b94 <err_tcp+0x1d8>)
 8008b02:	4823      	ldr	r0, [pc, #140]	; (8008b90 <err_tcp+0x1d4>)
 8008b04:	f00d fddc 	bl	80166c0 <iprintf>
      conn->current_msg->err = err;
 8008b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	330c      	adds	r3, #12
 8008b18:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008b1a:	6938      	ldr	r0, [r7, #16]
 8008b1c:	f00d fcb7 	bl	801648e <sys_sem_valid>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d106      	bne.n	8008b34 <err_tcp+0x178>
 8008b26:	4b18      	ldr	r3, [pc, #96]	; (8008b88 <err_tcp+0x1cc>)
 8008b28:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8008b2c:	491a      	ldr	r1, [pc, #104]	; (8008b98 <err_tcp+0x1dc>)
 8008b2e:	4818      	ldr	r0, [pc, #96]	; (8008b90 <err_tcp+0x1d4>)
 8008b30:	f00d fdc6 	bl	80166c0 <iprintf>
      conn->current_msg = NULL;
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	2200      	movs	r2, #0
 8008b38:	635a      	str	r2, [r3, #52]	; 0x34
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00e      	beq.n	8008b5e <err_tcp+0x1a2>
 8008b40:	f00d fd30 	bl	80165a4 <sys_arch_protect>
 8008b44:	60f8      	str	r0, [r7, #12]
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008b4c:	f113 0f0c 	cmn.w	r3, #12
 8008b50:	db02      	blt.n	8008b58 <err_tcp+0x19c>
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	78fa      	ldrb	r2, [r7, #3]
 8008b56:	721a      	strb	r2, [r3, #8]
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f00d fd31 	bl	80165c0 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8008b5e:	6938      	ldr	r0, [r7, #16]
 8008b60:	f00d fc7b 	bl	801645a <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008b64:	e00b      	b.n	8008b7e <err_tcp+0x1c2>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d008      	beq.n	8008b80 <err_tcp+0x1c4>
 8008b6e:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <err_tcp+0x1cc>)
 8008b70:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008b74:	4909      	ldr	r1, [pc, #36]	; (8008b9c <err_tcp+0x1e0>)
 8008b76:	4806      	ldr	r0, [pc, #24]	; (8008b90 <err_tcp+0x1d4>)
 8008b78:	f00d fda2 	bl	80166c0 <iprintf>
  }
}
 8008b7c:	e000      	b.n	8008b80 <err_tcp+0x1c4>
      (old_state == NETCONN_CONNECT)) {
 8008b7e:	bf00      	nop
}
 8008b80:	bf00      	nop
 8008b82:	3728      	adds	r7, #40	; 0x28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	08017a7c 	.word	0x08017a7c
 8008b8c:	08017ba0 	.word	0x08017ba0
 8008b90:	08017ad4 	.word	0x08017ad4
 8008b94:	08017bb0 	.word	0x08017bb0
 8008b98:	08017bcc 	.word	0x08017bcc
 8008b9c:	08017be8 	.word	0x08017be8

08008ba0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f006 fadd 	bl	800f170 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008bb6:	490a      	ldr	r1, [pc, #40]	; (8008be0 <setup_tcp+0x40>)
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f006 faeb 	bl	800f194 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008bbe:	4909      	ldr	r1, [pc, #36]	; (8008be4 <setup_tcp+0x44>)
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f006 fb09 	bl	800f1d8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	4907      	ldr	r1, [pc, #28]	; (8008be8 <setup_tcp+0x48>)
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f006 fb5e 	bl	800f28c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008bd0:	4906      	ldr	r1, [pc, #24]	; (8008bec <setup_tcp+0x4c>)
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f006 fb20 	bl	800f218 <tcp_err>
}
 8008bd8:	bf00      	nop
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	08008739 	.word	0x08008739
 8008be4:	08008911 	.word	0x08008911
 8008be8:	08008861 	.word	0x08008861
 8008bec:	080089bd 	.word	0x080089bd

08008bf0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b088      	sub	sp, #32
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d102      	bne.n	8008c0e <accept_function+0x1e>
    return ERR_VAL;
 8008c08:	f06f 0305 	mvn.w	r3, #5
 8008c0c:	e090      	b.n	8008d30 <accept_function+0x140>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	3314      	adds	r3, #20
 8008c12:	4618      	mov	r0, r3
 8008c14:	f00d fbaa 	bl	801636c <sys_mbox_valid>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d102      	bne.n	8008c24 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008c1e:	f06f 0305 	mvn.w	r3, #5
 8008c22:	e085      	b.n	8008d30 <accept_function+0x140>
  }

  if (newpcb == NULL) {
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d115      	bne.n	8008c56 <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	3314      	adds	r3, #20
 8008c2e:	4942      	ldr	r1, [pc, #264]	; (8008d38 <accept_function+0x148>)
 8008c30:	4618      	mov	r0, r3
 8008c32:	f00d fb26 	bl	8016282 <sys_mbox_trypost>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d109      	bne.n	8008c50 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d005      	beq.n	8008c50 <accept_function+0x60>
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	69f8      	ldr	r0, [r7, #28]
 8008c4e:	4798      	blx	r3
    }
    return ERR_VAL;
 8008c50:	f06f 0305 	mvn.w	r3, #5
 8008c54:	e06c      	b.n	8008d30 <accept_function+0x140>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	781a      	ldrb	r2, [r3, #0]
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4610      	mov	r0, r2
 8008c62:	f000 f901 	bl	8008e68 <netconn_alloc>
 8008c66:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d115      	bne.n	8008c9a <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	3314      	adds	r3, #20
 8008c72:	4931      	ldr	r1, [pc, #196]	; (8008d38 <accept_function+0x148>)
 8008c74:	4618      	mov	r0, r3
 8008c76:	f00d fb04 	bl	8016282 <sys_mbox_trypost>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d109      	bne.n	8008c94 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d005      	beq.n	8008c94 <accept_function+0xa4>
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	2100      	movs	r1, #0
 8008c90:	69f8      	ldr	r0, [r7, #28]
 8008c92:	4798      	blx	r3
    }
    return ERR_MEM;
 8008c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c98:	e04a      	b.n	8008d30 <accept_function+0x140>
  }
  newconn->pcb.tcp = newpcb;
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008ca0:	69b8      	ldr	r0, [r7, #24]
 8008ca2:	f7ff ff7d 	bl	8008ba0 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	79fa      	ldrb	r2, [r7, #7]
 8008caa:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);
 8008cac:	68b8      	ldr	r0, [r7, #8]
 8008cae:	f004 ffaf 	bl	800dc10 <tcp_backlog_delayed>

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	3314      	adds	r3, #20
 8008cb6:	69b9      	ldr	r1, [r7, #24]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f00d fae2 	bl	8016282 <sys_mbox_trypost>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d02a      	beq.n	8008d1a <accept_function+0x12a>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008cca:	2100      	movs	r1, #0
 8008ccc:	6978      	ldr	r0, [r7, #20]
 8008cce:	f006 fa4f 	bl	800f170 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	6978      	ldr	r0, [r7, #20]
 8008cd6:	f006 fa5d 	bl	800f194 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008cda:	2100      	movs	r1, #0
 8008cdc:	6978      	ldr	r0, [r7, #20]
 8008cde:	f006 fa7b 	bl	800f1d8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	6978      	ldr	r0, [r7, #20]
 8008ce8:	f006 fad0 	bl	800f28c <tcp_poll>
    tcp_err(pcb, NULL);
 8008cec:	2100      	movs	r1, #0
 8008cee:	6978      	ldr	r0, [r7, #20]
 8008cf0:	f006 fa92 	bl	800f218 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	3310      	adds	r3, #16
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f00d fa98 	bl	8016234 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	3310      	adds	r3, #16
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f00d fb40 	bl	801638e <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008d0e:	69b8      	ldr	r0, [r7, #24]
 8008d10:	f000 f92c 	bl	8008f6c <netconn_free>
    return ERR_MEM;
 8008d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d18:	e00a      	b.n	8008d30 <accept_function+0x140>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d005      	beq.n	8008d2e <accept_function+0x13e>
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d26:	2200      	movs	r2, #0
 8008d28:	2100      	movs	r1, #0
 8008d2a:	69f8      	ldr	r0, [r7, #28]
 8008d2c:	4798      	blx	r3
  }

  return ERR_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3720      	adds	r7, #32
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	200074e4 	.word	0x200074e4

08008d3c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008d3c:	b590      	push	{r4, r7, lr}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d006      	beq.n	8008d60 <pcb_new+0x24>
 8008d52:	4b2b      	ldr	r3, [pc, #172]	; (8008e00 <pcb_new+0xc4>)
 8008d54:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8008d58:	492a      	ldr	r1, [pc, #168]	; (8008e04 <pcb_new+0xc8>)
 8008d5a:	482b      	ldr	r0, [pc, #172]	; (8008e08 <pcb_new+0xcc>)
 8008d5c:	f00d fcb0 	bl	80166c0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d6a:	2b10      	cmp	r3, #16
 8008d6c:	d022      	beq.n	8008db4 <pcb_new+0x78>
 8008d6e:	2b20      	cmp	r3, #32
 8008d70:	d133      	bne.n	8008dda <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681c      	ldr	r4, [r3, #0]
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f00a ff62 	bl	8013c42 <udp_new_ip_type>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d02a      	beq.n	8008de2 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	2b22      	cmp	r3, #34	; 0x22
 8008d94:	d104      	bne.n	8008da0 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6858      	ldr	r0, [r3, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	4917      	ldr	r1, [pc, #92]	; (8008e0c <pcb_new+0xd0>)
 8008dae:	f00a feed 	bl	8013b8c <udp_recv>
    }
    break;
 8008db2:	e016      	b.n	8008de2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681c      	ldr	r4, [r3, #0]
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f006 f9ca 	bl	800f154 <tcp_new_ip_type>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00b      	beq.n	8008de6 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7ff fee4 	bl	8008ba0 <setup_tcp>
    }
    break;
 8008dd8:	e005      	b.n	8008de6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	22fa      	movs	r2, #250	; 0xfa
 8008dde:	711a      	strb	r2, [r3, #4]
    return;
 8008de0:	e00a      	b.n	8008df8 <pcb_new+0xbc>
    break;
 8008de2:	bf00      	nop
 8008de4:	e000      	b.n	8008de8 <pcb_new+0xac>
    break;
 8008de6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d102      	bne.n	8008df8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	22ff      	movs	r2, #255	; 0xff
 8008df6:	711a      	strb	r2, [r3, #4]
  }
}
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd90      	pop	{r4, r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	08017a7c 	.word	0x08017a7c
 8008e04:	08017c04 	.word	0x08017c04
 8008e08:	08017ad4 	.word	0x08017ad4
 8008e0c:	08008601 	.word	0x08008601

08008e10 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d102      	bne.n	8008e32 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f7ff ff85 	bl	8008d3c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d012      	beq.n	8008e60 <lwip_netconn_do_newconn+0x50>
 8008e3a:	f00d fbb3 	bl	80165a4 <sys_arch_protect>
 8008e3e:	60b8      	str	r0, [r7, #8]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008e48:	f113 0f0c 	cmn.w	r3, #12
 8008e4c:	db05      	blt.n	8008e5a <lwip_netconn_do_newconn+0x4a>
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008e58:	721a      	strb	r2, [r3, #8]
 8008e5a:	68b8      	ldr	r0, [r7, #8]
 8008e5c:	f00d fbb0 	bl	80165c0 <sys_arch_unprotect>
}
 8008e60:	bf00      	nop
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	6039      	str	r1, [r7, #0]
 8008e72:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008e74:	2007      	movs	r0, #7
 8008e76:	f003 fdad 	bl	800c9d4 <memp_malloc>
 8008e7a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <netconn_alloc+0x1e>
    return NULL;
 8008e82:	2300      	movs	r3, #0
 8008e84:	e066      	b.n	8008f54 <netconn_alloc+0xec>
  }

  conn->last_err = ERR_OK;
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	79fa      	ldrb	r2, [r7, #7]
 8008e90:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2200      	movs	r2, #0
 8008e96:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8008e98:	79fb      	ldrb	r3, [r7, #7]
 8008e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e9e:	2b10      	cmp	r3, #16
 8008ea0:	d004      	beq.n	8008eac <netconn_alloc+0x44>
 8008ea2:	2b20      	cmp	r3, #32
 8008ea4:	d105      	bne.n	8008eb2 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008ea6:	2306      	movs	r3, #6
 8008ea8:	60fb      	str	r3, [r7, #12]
    break;
 8008eaa:	e00a      	b.n	8008ec2 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008eac:	2306      	movs	r3, #6
 8008eae:	60fb      	str	r3, [r7, #12]
    break;
 8008eb0:	e007      	b.n	8008ec2 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008eb2:	4b2a      	ldr	r3, [pc, #168]	; (8008f5c <netconn_alloc+0xf4>)
 8008eb4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8008eb8:	4929      	ldr	r1, [pc, #164]	; (8008f60 <netconn_alloc+0xf8>)
 8008eba:	482a      	ldr	r0, [pc, #168]	; (8008f64 <netconn_alloc+0xfc>)
 8008ebc:	f00d fc00 	bl	80166c0 <iprintf>
    goto free_and_return;
 8008ec0:	e043      	b.n	8008f4a <netconn_alloc+0xe2>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	3310      	adds	r3, #16
 8008ec6:	68f9      	ldr	r1, [r7, #12]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f00d f991 	bl	80161f0 <sys_mbox_new>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d139      	bne.n	8008f48 <netconn_alloc+0xe0>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	330c      	adds	r3, #12
 8008ed8:	2100      	movs	r1, #0
 8008eda:	4618      	mov	r0, r3
 8008edc:	f00d fa64 	bl	80163a8 <sys_sem_new>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d005      	beq.n	8008ef2 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	3310      	adds	r3, #16
 8008eea:	4618      	mov	r0, r3
 8008eec:	f00d f9a2 	bl	8016234 <sys_mbox_free>
    goto free_and_return;
 8008ef0:	e02b      	b.n	8008f4a <netconn_alloc+0xe2>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	3314      	adds	r3, #20
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f00d fa49 	bl	801638e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2200      	movs	r2, #0
 8008f00:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f08:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	639a      	str	r2, [r3, #56]	; 0x38
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2200      	movs	r2, #0
 8008f14:	635a      	str	r2, [r3, #52]	; 0x34
  conn->write_offset = 0;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	61da      	str	r2, [r3, #28]
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2200      	movs	r2, #0
 8008f26:	621a      	str	r2, [r3, #32]
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	4a0f      	ldr	r2, [pc, #60]	; (8008f68 <netconn_alloc+0x100>)
 8008f2c:	625a      	str	r2, [r3, #36]	; 0x24
  conn->recv_avail   = 0;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2200      	movs	r2, #0
 8008f32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f3a:	859a      	strh	r2, [r3, #44]	; 0x2c
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return conn;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	e005      	b.n	8008f54 <netconn_alloc+0xec>
    goto free_and_return;
 8008f48:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008f4a:	68b9      	ldr	r1, [r7, #8]
 8008f4c:	2007      	movs	r0, #7
 8008f4e:	f003 fd93 	bl	800ca78 <memp_free>
  return NULL;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	08017a7c 	.word	0x08017a7c
 8008f60:	08017c24 	.word	0x08017c24
 8008f64:	08017ad4 	.word	0x08017ad4
 8008f68:	77359400 	.word	0x77359400

08008f6c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d006      	beq.n	8008f8a <netconn_free+0x1e>
 8008f7c:	4b1b      	ldr	r3, [pc, #108]	; (8008fec <netconn_free+0x80>)
 8008f7e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8008f82:	491b      	ldr	r1, [pc, #108]	; (8008ff0 <netconn_free+0x84>)
 8008f84:	481b      	ldr	r0, [pc, #108]	; (8008ff4 <netconn_free+0x88>)
 8008f86:	f00d fb9b 	bl	80166c0 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	3310      	adds	r3, #16
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f00d f9ec 	bl	801636c <sys_mbox_valid>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d006      	beq.n	8008fa8 <netconn_free+0x3c>
 8008f9a:	4b14      	ldr	r3, [pc, #80]	; (8008fec <netconn_free+0x80>)
 8008f9c:	f240 22e2 	movw	r2, #738	; 0x2e2
 8008fa0:	4915      	ldr	r1, [pc, #84]	; (8008ff8 <netconn_free+0x8c>)
 8008fa2:	4814      	ldr	r0, [pc, #80]	; (8008ff4 <netconn_free+0x88>)
 8008fa4:	f00d fb8c 	bl	80166c0 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3314      	adds	r3, #20
 8008fac:	4618      	mov	r0, r3
 8008fae:	f00d f9dd 	bl	801636c <sys_mbox_valid>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d006      	beq.n	8008fc6 <netconn_free+0x5a>
 8008fb8:	4b0c      	ldr	r3, [pc, #48]	; (8008fec <netconn_free+0x80>)
 8008fba:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008fbe:	490f      	ldr	r1, [pc, #60]	; (8008ffc <netconn_free+0x90>)
 8008fc0:	480c      	ldr	r0, [pc, #48]	; (8008ff4 <netconn_free+0x88>)
 8008fc2:	f00d fb7d 	bl	80166c0 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	330c      	adds	r3, #12
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f00d fa52 	bl	8016474 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	330c      	adds	r3, #12
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f00d fa6b 	bl	80164b0 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	2007      	movs	r0, #7
 8008fde:	f003 fd4b 	bl	800ca78 <memp_free>
}
 8008fe2:	bf00      	nop
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	08017a7c 	.word	0x08017a7c
 8008ff0:	08017c4c 	.word	0x08017c4c
 8008ff4:	08017ad4 	.word	0x08017ad4
 8008ff8:	08017c7c 	.word	0x08017c7c
 8008ffc:	08017cb8 	.word	0x08017cb8

08009000 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3310      	adds	r3, #16
 800900c:	4618      	mov	r0, r3
 800900e:	f00d f9ad 	bl	801636c <sys_mbox_valid>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d035      	beq.n	8009084 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009018:	e01e      	b.n	8009058 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009022:	2b10      	cmp	r3, #16
 8009024:	d114      	bne.n	8009050 <netconn_drain+0x50>
        if (mem != NULL) {
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d015      	beq.n	8009058 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d007      	beq.n	8009048 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	891b      	ldrh	r3, [r3, #8]
 8009040:	4619      	mov	r1, r3
 8009042:	4610      	mov	r0, r2
 8009044:	f005 faa2 	bl	800e58c <tcp_recved>
          }
          pbuf_free(p);
 8009048:	6978      	ldr	r0, [r7, #20]
 800904a:	f004 fae9 	bl	800d620 <pbuf_free>
 800904e:	e003      	b.n	8009058 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4618      	mov	r0, r3
 8009054:	f001 f972 	bl	800a33c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3310      	adds	r3, #16
 800905c:	f107 020c 	add.w	r2, r7, #12
 8009060:	4611      	mov	r1, r2
 8009062:	4618      	mov	r0, r3
 8009064:	f00d f966 	bl	8016334 <sys_arch_mbox_tryfetch>
 8009068:	4603      	mov	r3, r0
 800906a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800906e:	d1d4      	bne.n	800901a <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3310      	adds	r3, #16
 8009074:	4618      	mov	r0, r3
 8009076:	f00d f8dd 	bl	8016234 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	3310      	adds	r3, #16
 800907e:	4618      	mov	r0, r3
 8009080:	f00d f985 	bl	801638e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3314      	adds	r3, #20
 8009088:	4618      	mov	r0, r3
 800908a:	f00d f96f 	bl	801636c <sys_mbox_valid>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d02e      	beq.n	80090f2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009094:	e017      	b.n	80090c6 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	4a18      	ldr	r2, [pc, #96]	; (80090fc <netconn_drain+0xfc>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d013      	beq.n	80090c6 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 80090a2:	6938      	ldr	r0, [r7, #16]
 80090a4:	f7ff ffac 	bl	8009000 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d007      	beq.n	80090c0 <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	4618      	mov	r0, r3
 80090b6:	f005 f887 	bl	800e1c8 <tcp_abort>
          newconn->pcb.tcp = NULL;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	2200      	movs	r2, #0
 80090be:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 80090c0:	6938      	ldr	r0, [r7, #16]
 80090c2:	f7ff ff53 	bl	8008f6c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	3314      	adds	r3, #20
 80090ca:	f107 020c 	add.w	r2, r7, #12
 80090ce:	4611      	mov	r1, r2
 80090d0:	4618      	mov	r0, r3
 80090d2:	f00d f92f 	bl	8016334 <sys_arch_mbox_tryfetch>
 80090d6:	4603      	mov	r3, r0
 80090d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090dc:	d1db      	bne.n	8009096 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3314      	adds	r3, #20
 80090e2:	4618      	mov	r0, r3
 80090e4:	f00d f8a6 	bl	8016234 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3314      	adds	r3, #20
 80090ec:	4618      	mov	r0, r3
 80090ee:	f00d f94e 	bl	801638e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80090f2:	bf00      	nop
 80090f4:	3718      	adds	r7, #24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	200074e4 	.word	0x200074e4

08009100 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08a      	sub	sp, #40	; 0x28
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	77fb      	strb	r3, [r7, #31]
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d106      	bne.n	800912a <lwip_netconn_do_close_internal+0x2a>
 800911c:	4ba3      	ldr	r3, [pc, #652]	; (80093ac <lwip_netconn_do_close_internal+0x2ac>)
 800911e:	f240 3243 	movw	r2, #835	; 0x343
 8009122:	49a3      	ldr	r1, [pc, #652]	; (80093b0 <lwip_netconn_do_close_internal+0x2b0>)
 8009124:	48a3      	ldr	r0, [pc, #652]	; (80093b4 <lwip_netconn_do_close_internal+0x2b4>)
 8009126:	f00d facb 	bl	80166c0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009132:	2b10      	cmp	r3, #16
 8009134:	d006      	beq.n	8009144 <lwip_netconn_do_close_internal+0x44>
 8009136:	4b9d      	ldr	r3, [pc, #628]	; (80093ac <lwip_netconn_do_close_internal+0x2ac>)
 8009138:	f44f 7251 	mov.w	r2, #836	; 0x344
 800913c:	499e      	ldr	r1, [pc, #632]	; (80093b8 <lwip_netconn_do_close_internal+0x2b8>)
 800913e:	489d      	ldr	r0, [pc, #628]	; (80093b4 <lwip_netconn_do_close_internal+0x2b4>)
 8009140:	f00d fabe 	bl	80166c0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	785b      	ldrb	r3, [r3, #1]
 8009148:	2b04      	cmp	r3, #4
 800914a:	d006      	beq.n	800915a <lwip_netconn_do_close_internal+0x5a>
 800914c:	4b97      	ldr	r3, [pc, #604]	; (80093ac <lwip_netconn_do_close_internal+0x2ac>)
 800914e:	f240 3245 	movw	r2, #837	; 0x345
 8009152:	499a      	ldr	r1, [pc, #616]	; (80093bc <lwip_netconn_do_close_internal+0x2bc>)
 8009154:	4897      	ldr	r0, [pc, #604]	; (80093b4 <lwip_netconn_do_close_internal+0x2b4>)
 8009156:	f00d fab3 	bl	80166c0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d106      	bne.n	8009170 <lwip_netconn_do_close_internal+0x70>
 8009162:	4b92      	ldr	r3, [pc, #584]	; (80093ac <lwip_netconn_do_close_internal+0x2ac>)
 8009164:	f240 3246 	movw	r2, #838	; 0x346
 8009168:	4995      	ldr	r1, [pc, #596]	; (80093c0 <lwip_netconn_do_close_internal+0x2c0>)
 800916a:	4892      	ldr	r0, [pc, #584]	; (80093b4 <lwip_netconn_do_close_internal+0x2b4>)
 800916c:	f00d faa8 	bl	80166c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009174:	2b00      	cmp	r3, #0
 8009176:	d106      	bne.n	8009186 <lwip_netconn_do_close_internal+0x86>
 8009178:	4b8c      	ldr	r3, [pc, #560]	; (80093ac <lwip_netconn_do_close_internal+0x2ac>)
 800917a:	f240 3247 	movw	r2, #839	; 0x347
 800917e:	4991      	ldr	r1, [pc, #580]	; (80093c4 <lwip_netconn_do_close_internal+0x2c4>)
 8009180:	488c      	ldr	r0, [pc, #560]	; (80093b4 <lwip_netconn_do_close_internal+0x2b4>)
 8009182:	f00d fa9d 	bl	80166c0 <iprintf>

  tpcb = conn->pcb.tcp;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	623b      	str	r3, [r7, #32]
  shut = conn->current_msg->msg.sd.shut;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009190:	7a1b      	ldrb	r3, [r3, #8]
 8009192:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009194:	7dfb      	ldrb	r3, [r7, #23]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	d103      	bne.n	80091b2 <lwip_netconn_do_close_internal+0xb2>
    close = 1;
 80091aa:	2301      	movs	r3, #1
 80091ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80091b0:	e022      	b.n	80091f8 <lwip_netconn_do_close_internal+0xf8>
  } else if (shut_rx &&
 80091b2:	7dbb      	ldrb	r3, [r7, #22]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00f      	beq.n	80091d8 <lwip_netconn_do_close_internal+0xd8>
             ((tpcb->state == FIN_WAIT_1) ||
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80091bc:	2b05      	cmp	r3, #5
 80091be:	d007      	beq.n	80091d0 <lwip_netconn_do_close_internal+0xd0>
              (tpcb->state == FIN_WAIT_2) ||
 80091c0:	6a3b      	ldr	r3, [r7, #32]
 80091c2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80091c4:	2b06      	cmp	r3, #6
 80091c6:	d003      	beq.n	80091d0 <lwip_netconn_do_close_internal+0xd0>
              (tpcb->state == CLOSING))) {
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80091cc:	2b08      	cmp	r3, #8
 80091ce:	d103      	bne.n	80091d8 <lwip_netconn_do_close_internal+0xd8>
    close = 1;
 80091d0:	2301      	movs	r3, #1
 80091d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80091d6:	e00f      	b.n	80091f8 <lwip_netconn_do_close_internal+0xf8>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80091d8:	7d7b      	ldrb	r3, [r7, #21]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d009      	beq.n	80091f2 <lwip_netconn_do_close_internal+0xf2>
 80091de:	6a3b      	ldr	r3, [r7, #32]
 80091e0:	8b5b      	ldrh	r3, [r3, #26]
 80091e2:	f003 0310 	and.w	r3, r3, #16
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <lwip_netconn_do_close_internal+0xf2>
    close = 1;
 80091ea:	2301      	movs	r3, #1
 80091ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80091f0:	e002      	b.n	80091f8 <lwip_netconn_do_close_internal+0xf8>
  } else {
    close = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }

  /* Set back some callback pointers */
  if (close) {
 80091f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d003      	beq.n	8009208 <lwip_netconn_do_close_internal+0x108>
    tcp_arg(tpcb, NULL);
 8009200:	2100      	movs	r1, #0
 8009202:	6a38      	ldr	r0, [r7, #32]
 8009204:	f005 ffb4 	bl	800f170 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	7d1b      	ldrb	r3, [r3, #20]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d104      	bne.n	800921a <lwip_netconn_do_close_internal+0x11a>
    tcp_accept(tpcb, NULL);
 8009210:	2100      	movs	r1, #0
 8009212:	6a38      	ldr	r0, [r7, #32]
 8009214:	f006 f822 	bl	800f25c <tcp_accept>
 8009218:	e01e      	b.n	8009258 <lwip_netconn_do_close_internal+0x158>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800921a:	7dbb      	ldrb	r3, [r7, #22]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d007      	beq.n	8009230 <lwip_netconn_do_close_internal+0x130>
      tcp_recv(tpcb, NULL);
 8009220:	2100      	movs	r1, #0
 8009222:	6a38      	ldr	r0, [r7, #32]
 8009224:	f005 ffb6 	bl	800f194 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009228:	2100      	movs	r1, #0
 800922a:	6a38      	ldr	r0, [r7, #32]
 800922c:	f006 f816 	bl	800f25c <tcp_accept>
    }
    if (shut_tx) {
 8009230:	7d7b      	ldrb	r3, [r7, #21]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <lwip_netconn_do_close_internal+0x13e>
      tcp_sent(tpcb, NULL);
 8009236:	2100      	movs	r1, #0
 8009238:	6a38      	ldr	r0, [r7, #32]
 800923a:	f005 ffcd 	bl	800f1d8 <tcp_sent>
    }
    if (close) {
 800923e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009242:	2b00      	cmp	r3, #0
 8009244:	d008      	beq.n	8009258 <lwip_netconn_do_close_internal+0x158>
      tcp_poll(tpcb, NULL, 0);
 8009246:	2200      	movs	r2, #0
 8009248:	2100      	movs	r1, #0
 800924a:	6a38      	ldr	r0, [r7, #32]
 800924c:	f006 f81e 	bl	800f28c <tcp_poll>
      tcp_err(tpcb, NULL);
 8009250:	2100      	movs	r1, #0
 8009252:	6a38      	ldr	r0, [r7, #32]
 8009254:	f005 ffe0 	bl	800f218 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 8009258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800925c:	2b00      	cmp	r3, #0
 800925e:	d054      	beq.n	800930a <lwip_netconn_do_close_internal+0x20a>
#if LWIP_SO_LINGER
    /* check linger possibilites before calling tcp_close */
    err = ERR_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* linger enabled/required at all? (i.e. is there untransmitted data left?) */
    if ((conn->linger >= 0) && (conn->pcb.tcp->unsent || conn->pcb.tcp->unacked)) {
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800926c:	2b00      	cmp	r3, #0
 800926e:	db3e      	blt.n	80092ee <lwip_netconn_do_close_internal+0x1ee>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009276:	2b00      	cmp	r3, #0
 8009278:	d104      	bne.n	8009284 <lwip_netconn_do_close_internal+0x184>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009280:	2b00      	cmp	r3, #0
 8009282:	d034      	beq.n	80092ee <lwip_netconn_do_close_internal+0x1ee>
      if ((conn->linger == 0)) {
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800928a:	2b00      	cmp	r3, #0
 800928c:	d105      	bne.n	800929a <lwip_netconn_do_close_internal+0x19a>
        /* data left but linger prevents waiting */
        tcp_abort(tpcb);
 800928e:	6a38      	ldr	r0, [r7, #32]
 8009290:	f004 ff9a 	bl	800e1c8 <tcp_abort>
        tpcb = NULL;
 8009294:	2300      	movs	r3, #0
 8009296:	623b      	str	r3, [r7, #32]
 8009298:	e029      	b.n	80092ee <lwip_netconn_do_close_internal+0x1ee>
      } else if (conn->linger > 0) {
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	dd24      	ble.n	80092ee <lwip_netconn_do_close_internal+0x1ee>
        /* data left and linger says we should wait */
        if (netconn_is_nonblocking(conn)) {
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d003      	beq.n	80092ba <lwip_netconn_do_close_internal+0x1ba>
          /* data left on a nonblocking netconn -> cannot linger */
          err = ERR_WOULDBLOCK;
 80092b2:	23f9      	movs	r3, #249	; 0xf9
 80092b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80092b8:	e019      	b.n	80092ee <lwip_netconn_do_close_internal+0x1ee>
        } else if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >=
 80092ba:	f7fb fc05 	bl	8004ac8 <sys_now>
 80092be:	4602      	mov	r2, r0
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	461a      	mov	r2, r3
          (conn->linger * 1000)) {
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80092d0:	4619      	mov	r1, r3
 80092d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092d6:	fb03 f301 	mul.w	r3, r3, r1
        } else if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >=
 80092da:	429a      	cmp	r2, r3
 80092dc:	db05      	blt.n	80092ea <lwip_netconn_do_close_internal+0x1ea>
          /* data left but linger timeout has expired (this happens on further
             calls to this function through poll_tcp */
          tcp_abort(tpcb);
 80092de:	6a38      	ldr	r0, [r7, #32]
 80092e0:	f004 ff72 	bl	800e1c8 <tcp_abort>
          tpcb = NULL;
 80092e4:	2300      	movs	r3, #0
 80092e6:	623b      	str	r3, [r7, #32]
 80092e8:	e001      	b.n	80092ee <lwip_netconn_do_close_internal+0x1ee>
        } else {
          /* data left -> need to wait for ACK after successful close */
          linger_wait_required = 1;
 80092ea:	2301      	movs	r3, #1
 80092ec:	77fb      	strb	r3, [r7, #31]
        }
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
 80092ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d112      	bne.n	800931c <lwip_netconn_do_close_internal+0x21c>
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00f      	beq.n	800931c <lwip_netconn_do_close_internal+0x21c>
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80092fc:	6a38      	ldr	r0, [r7, #32]
 80092fe:	f004 fe4f 	bl	800dfa0 <tcp_close>
 8009302:	4603      	mov	r3, r0
 8009304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009308:	e008      	b.n	800931c <lwip_netconn_do_close_internal+0x21c>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800930a:	7dbb      	ldrb	r3, [r7, #22]
 800930c:	7d7a      	ldrb	r2, [r7, #21]
 800930e:	4619      	mov	r1, r3
 8009310:	6a38      	ldr	r0, [r7, #32]
 8009312:	f004 fe5d 	bl	800dfd0 <tcp_shutdown>
 8009316:	4603      	mov	r3, r0
 8009318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (err == ERR_OK) {
 800931c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10c      	bne.n	800933e <lwip_netconn_do_close_internal+0x23e>
    close_finished = 1;
 8009324:	2301      	movs	r3, #1
 8009326:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if LWIP_SO_LINGER
    if (linger_wait_required) {
 800932a:	7ffb      	ldrb	r3, [r7, #31]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d04e      	beq.n	80093ce <lwip_netconn_do_close_internal+0x2ce>
      /* wait for ACK of all unsent/unacked data by just getting called again */
      close_finished = 0;
 8009330:	2300      	movs	r3, #0
 8009332:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      err = ERR_INPROGRESS;
 8009336:	23fb      	movs	r3, #251	; 0xfb
 8009338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800933c:	e047      	b.n	80093ce <lwip_netconn_do_close_internal+0x2ce>
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800933e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009346:	d13f      	bne.n	80093c8 <lwip_netconn_do_close_internal+0x2c8>
         nonblocking netconns, we have to wait since no standard socket application
         is prepared for close failing because of resource shortage.
         Check the timeout: this is kind of an lwip addition to the standard sockets:
         we wait for some time when failing to allocate a segment for the FIN */
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
      s32_t close_timeout = LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT;
 8009348:	f644 6320 	movw	r3, #20000	; 0x4e20
 800934c:	61bb      	str	r3, [r7, #24]
#if LWIP_SO_SNDTIMEO
      if (conn->send_timeout > 0) {
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	2b00      	cmp	r3, #0
 8009354:	dd02      	ble.n	800935c <lwip_netconn_do_close_internal+0x25c>
        close_timeout = conn->send_timeout;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_LINGER
      if (conn->linger >= 0) {
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8009362:	2b00      	cmp	r3, #0
 8009364:	db08      	blt.n	8009378 <lwip_netconn_do_close_internal+0x278>
        /* use linger timeout (seconds) */
        close_timeout = conn->linger * 1000U;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800936c:	461a      	mov	r2, r3
 800936e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009372:	fb03 f302 	mul.w	r3, r3, r2
 8009376:	61bb      	str	r3, [r7, #24]
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
 8009378:	f7fb fba6 	bl	8004ac8 <sys_now>
 800937c:	4602      	mov	r2, r0
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	461a      	mov	r2, r3
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	4293      	cmp	r3, r2
 800938c:	dc1f      	bgt.n	80093ce <lwip_netconn_do_close_internal+0x2ce>
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (close) {
 8009394:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009398:	2b00      	cmp	r3, #0
 800939a:	d018      	beq.n	80093ce <lwip_netconn_do_close_internal+0x2ce>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800939c:	6a38      	ldr	r0, [r7, #32]
 800939e:	f004 ff13 	bl	800e1c8 <tcp_abort>
          err = ERR_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80093a8:	e011      	b.n	80093ce <lwip_netconn_do_close_internal+0x2ce>
 80093aa:	bf00      	nop
 80093ac:	08017a7c 	.word	0x08017a7c
 80093b0:	08017cf4 	.word	0x08017cf4
 80093b4:	08017ad4 	.word	0x08017ad4
 80093b8:	08017d04 	.word	0x08017d04
 80093bc:	08017d24 	.word	0x08017d24
 80093c0:	08017d48 	.word	0x08017d48
 80093c4:	08017bb0 	.word	0x08017bb0
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80093c8:	2301      	movs	r3, #1
 80093ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    }
  }
  if (close_finished) {
 80093ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d059      	beq.n	800948a <lwip_netconn_do_close_internal+0x38a>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	330c      	adds	r3, #12
 80093de:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80093e8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	635a      	str	r2, [r3, #52]	; 0x34
    conn->state = NETCONN_NONE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80093f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d12a      	bne.n	8009454 <lwip_netconn_do_close_internal+0x354>
      if (close) {
 80093fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00c      	beq.n	8009420 <lwip_netconn_do_close_internal+0x320>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009410:	2b00      	cmp	r3, #0
 8009412:	d005      	beq.n	8009420 <lwip_netconn_do_close_internal+0x320>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009418:	2200      	movs	r2, #0
 800941a:	2104      	movs	r1, #4
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	4798      	blx	r3
      }
      if (shut_rx) {
 8009420:	7dbb      	ldrb	r3, [r7, #22]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d009      	beq.n	800943a <lwip_netconn_do_close_internal+0x33a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	2b00      	cmp	r3, #0
 800942c:	d005      	beq.n	800943a <lwip_netconn_do_close_internal+0x33a>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009432:	2200      	movs	r2, #0
 8009434:	2100      	movs	r1, #0
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	4798      	blx	r3
      }
      if (shut_tx) {
 800943a:	7d7b      	ldrb	r3, [r7, #21]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d009      	beq.n	8009454 <lwip_netconn_do_close_internal+0x354>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <lwip_netconn_do_close_internal+0x354>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944c:	2200      	movs	r2, #0
 800944e:	2102      	movs	r1, #2
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00f      	beq.n	800947a <lwip_netconn_do_close_internal+0x37a>
 800945a:	f00d f8a3 	bl	80165a4 <sys_arch_protect>
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009466:	f113 0f0c 	cmn.w	r3, #12
 800946a:	db03      	blt.n	8009474 <lwip_netconn_do_close_internal+0x374>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009472:	721a      	strb	r2, [r3, #8]
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f00d f8a3 	bl	80165c0 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800947a:	78fb      	ldrb	r3, [r7, #3]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d002      	beq.n	8009486 <lwip_netconn_do_close_internal+0x386>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009480:	6938      	ldr	r0, [r7, #16]
 8009482:	f00c ffea 	bl	801645a <sys_sem_signal>
    }
    return ERR_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	e02f      	b.n	80094ea <lwip_netconn_do_close_internal+0x3ea>
  }
  if (!close_finished) {
 800948a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800948e:	2b00      	cmp	r3, #0
 8009490:	d11e      	bne.n	80094d0 <lwip_netconn_do_close_internal+0x3d0>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	7d1b      	ldrb	r3, [r3, #20]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d106      	bne.n	80094a8 <lwip_netconn_do_close_internal+0x3a8>
 800949a:	4b16      	ldr	r3, [pc, #88]	; (80094f4 <lwip_netconn_do_close_internal+0x3f4>)
 800949c:	f240 32e3 	movw	r2, #995	; 0x3e3
 80094a0:	4915      	ldr	r1, [pc, #84]	; (80094f8 <lwip_netconn_do_close_internal+0x3f8>)
 80094a2:	4816      	ldr	r0, [pc, #88]	; (80094fc <lwip_netconn_do_close_internal+0x3fc>)
 80094a4:	f00d f90c 	bl	80166c0 <iprintf>
    if (shut_tx) {
 80094a8:	7d7b      	ldrb	r3, [r7, #21]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d003      	beq.n	80094b6 <lwip_netconn_do_close_internal+0x3b6>
      tcp_sent(tpcb, sent_tcp);
 80094ae:	4914      	ldr	r1, [pc, #80]	; (8009500 <lwip_netconn_do_close_internal+0x400>)
 80094b0:	6a38      	ldr	r0, [r7, #32]
 80094b2:	f005 fe91 	bl	800f1d8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80094b6:	2201      	movs	r2, #1
 80094b8:	4912      	ldr	r1, [pc, #72]	; (8009504 <lwip_netconn_do_close_internal+0x404>)
 80094ba:	6a38      	ldr	r0, [r7, #32]
 80094bc:	f005 fee6 	bl	800f28c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80094c0:	4911      	ldr	r1, [pc, #68]	; (8009508 <lwip_netconn_do_close_internal+0x408>)
 80094c2:	6a38      	ldr	r0, [r7, #32]
 80094c4:	f005 fea8 	bl	800f218 <tcp_err>
    tcp_arg(tpcb, conn);
 80094c8:	6879      	ldr	r1, [r7, #4]
 80094ca:	6a38      	ldr	r0, [r7, #32]
 80094cc:	f005 fe50 	bl	800f170 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80094d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d106      	bne.n	80094e6 <lwip_netconn_do_close_internal+0x3e6>
 80094d8:	4b06      	ldr	r3, [pc, #24]	; (80094f4 <lwip_netconn_do_close_internal+0x3f4>)
 80094da:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80094de:	490b      	ldr	r1, [pc, #44]	; (800950c <lwip_netconn_do_close_internal+0x40c>)
 80094e0:	4806      	ldr	r0, [pc, #24]	; (80094fc <lwip_netconn_do_close_internal+0x3fc>)
 80094e2:	f00d f8ed 	bl	80166c0 <iprintf>
  return err;
 80094e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3728      	adds	r7, #40	; 0x28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	08017a7c 	.word	0x08017a7c
 80094f8:	08017d5c 	.word	0x08017d5c
 80094fc:	08017ad4 	.word	0x08017ad4
 8009500:	08008911 	.word	0x08008911
 8009504:	08008861 	.word	0x08008861
 8009508:	080089bd 	.word	0x080089bd
 800950c:	08017d80 	.word	0x08017d80

08009510 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	785b      	ldrb	r3, [r3, #1]
 8009522:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009524:	7cfb      	ldrb	r3, [r7, #19]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00d      	beq.n	8009546 <lwip_netconn_do_delconn+0x36>
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009534:	2b10      	cmp	r3, #16
 8009536:	d006      	beq.n	8009546 <lwip_netconn_do_delconn+0x36>
 8009538:	4b70      	ldr	r3, [pc, #448]	; (80096fc <lwip_netconn_do_delconn+0x1ec>)
 800953a:	f240 4201 	movw	r2, #1025	; 0x401
 800953e:	4970      	ldr	r1, [pc, #448]	; (8009700 <lwip_netconn_do_delconn+0x1f0>)
 8009540:	4870      	ldr	r0, [pc, #448]	; (8009704 <lwip_netconn_do_delconn+0x1f4>)
 8009542:	f00d f8bd 	bl	80166c0 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009546:	7cfb      	ldrb	r3, [r7, #19]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d005      	beq.n	8009558 <lwip_netconn_do_delconn+0x48>
 800954c:	7cfb      	ldrb	r3, [r7, #19]
 800954e:	2b02      	cmp	r3, #2
 8009550:	d002      	beq.n	8009558 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009552:	7cfb      	ldrb	r3, [r7, #19]
 8009554:	2b03      	cmp	r3, #3
 8009556:	d10a      	bne.n	800956e <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 8009558:	7cfb      	ldrb	r3, [r7, #19]
 800955a:	2b03      	cmp	r3, #3
 800955c:	d10b      	bne.n	8009576 <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009566:	f003 0304 	and.w	r3, r3, #4
 800956a:	2b00      	cmp	r3, #0
 800956c:	d103      	bne.n	8009576 <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	22fb      	movs	r2, #251	; 0xfb
 8009572:	711a      	strb	r2, [r3, #4]
 8009574:	e09d      	b.n	80096b2 <lwip_netconn_do_delconn+0x1a2>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009576:	7cfb      	ldrb	r3, [r7, #19]
 8009578:	2b03      	cmp	r3, #3
 800957a:	d10e      	bne.n	800959a <lwip_netconn_do_delconn+0x8a>
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009584:	f003 0304 	and.w	r3, r3, #4
 8009588:	2b00      	cmp	r3, #0
 800958a:	d106      	bne.n	800959a <lwip_netconn_do_delconn+0x8a>
 800958c:	4b5b      	ldr	r3, [pc, #364]	; (80096fc <lwip_netconn_do_delconn+0x1ec>)
 800958e:	f240 421f 	movw	r2, #1055	; 0x41f
 8009592:	495d      	ldr	r1, [pc, #372]	; (8009708 <lwip_netconn_do_delconn+0x1f8>)
 8009594:	485b      	ldr	r0, [pc, #364]	; (8009704 <lwip_netconn_do_delconn+0x1f4>)
 8009596:	f00d f893 	bl	80166c0 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2200      	movs	r2, #0
 800959e:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7ff fd2b 	bl	8009000 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d064      	beq.n	800967e <lwip_netconn_do_delconn+0x16e>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095be:	2b10      	cmp	r3, #16
 80095c0:	d00e      	beq.n	80095e0 <lwip_netconn_do_delconn+0xd0>
 80095c2:	2b20      	cmp	r3, #32
 80095c4:	d000      	beq.n	80095c8 <lwip_netconn_do_delconn+0xb8>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 80095c6:	e056      	b.n	8009676 <lwip_netconn_do_delconn+0x166>
        msg->conn->pcb.udp->recv_arg = NULL;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	4618      	mov	r0, r3
 80095da:	f00a fae9 	bl	8013bb0 <udp_remove>
        break;
 80095de:	e04a      	b.n	8009676 <lwip_netconn_do_delconn+0x166>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d104      	bne.n	80095f4 <lwip_netconn_do_delconn+0xe4>
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d006      	beq.n	8009602 <lwip_netconn_do_delconn+0xf2>
 80095f4:	4b41      	ldr	r3, [pc, #260]	; (80096fc <lwip_netconn_do_delconn+0x1ec>)
 80095f6:	f240 4235 	movw	r2, #1077	; 0x435
 80095fa:	4944      	ldr	r1, [pc, #272]	; (800970c <lwip_netconn_do_delconn+0x1fc>)
 80095fc:	4841      	ldr	r0, [pc, #260]	; (8009704 <lwip_netconn_do_delconn+0x1f4>)
 80095fe:	f00d f85f 	bl	80166c0 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2204      	movs	r2, #4
 8009608:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2203      	movs	r2, #3
 800960e:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	635a      	str	r2, [r3, #52]	; 0x34
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2100      	movs	r1, #0
 800961e:	4618      	mov	r0, r3
 8009620:	f7ff fd6e 	bl	8009100 <lwip_netconn_do_close_internal>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d064      	beq.n	80096f4 <lwip_netconn_do_delconn+0x1e4>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	785b      	ldrb	r3, [r3, #1]
 8009630:	2b04      	cmp	r3, #4
 8009632:	d006      	beq.n	8009642 <lwip_netconn_do_delconn+0x132>
 8009634:	4b31      	ldr	r3, [pc, #196]	; (80096fc <lwip_netconn_do_delconn+0x1ec>)
 8009636:	f240 423b 	movw	r2, #1083	; 0x43b
 800963a:	4935      	ldr	r1, [pc, #212]	; (8009710 <lwip_netconn_do_delconn+0x200>)
 800963c:	4831      	ldr	r0, [pc, #196]	; (8009704 <lwip_netconn_do_delconn+0x1f4>)
 800963e:	f00d f83f 	bl	80166c0 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009642:	4834      	ldr	r0, [pc, #208]	; (8009714 <lwip_netconn_do_delconn+0x204>)
 8009644:	f00c ff7b 	bl	801653e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	330c      	adds	r3, #12
 800964e:	2100      	movs	r1, #0
 8009650:	4618      	mov	r0, r3
 8009652:	f00c fed1 	bl	80163f8 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009656:	482f      	ldr	r0, [pc, #188]	; (8009714 <lwip_netconn_do_delconn+0x204>)
 8009658:	f00c ff62 	bl	8016520 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	785b      	ldrb	r3, [r3, #1]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d046      	beq.n	80096f4 <lwip_netconn_do_delconn+0x1e4>
 8009666:	4b25      	ldr	r3, [pc, #148]	; (80096fc <lwip_netconn_do_delconn+0x1ec>)
 8009668:	f240 423f 	movw	r2, #1087	; 0x43f
 800966c:	4928      	ldr	r1, [pc, #160]	; (8009710 <lwip_netconn_do_delconn+0x200>)
 800966e:	4825      	ldr	r0, [pc, #148]	; (8009704 <lwip_netconn_do_delconn+0x1f4>)
 8009670:	f00d f826 	bl	80166c0 <iprintf>
        return;
 8009674:	e03e      	b.n	80096f4 <lwip_netconn_do_delconn+0x1e4>
      }
      msg->conn->pcb.tcp = NULL;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2200      	movs	r2, #0
 800967c:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009684:	2b00      	cmp	r3, #0
 8009686:	d007      	beq.n	8009698 <lwip_netconn_do_delconn+0x188>
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	6810      	ldr	r0, [r2, #0]
 8009692:	2200      	movs	r2, #0
 8009694:	2100      	movs	r1, #0
 8009696:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d007      	beq.n	80096b2 <lwip_netconn_do_delconn+0x1a2>
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	6810      	ldr	r0, [r2, #0]
 80096ac:	2200      	movs	r2, #0
 80096ae:	2102      	movs	r1, #2
 80096b0:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	330c      	adds	r3, #12
 80096b8:	4618      	mov	r0, r3
 80096ba:	f00c fee8 	bl	801648e <sys_sem_valid>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d018      	beq.n	80096f6 <lwip_netconn_do_delconn+0x1e6>
    TCPIP_APIMSG_ACK(msg);
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d014      	beq.n	80096f6 <lwip_netconn_do_delconn+0x1e6>
 80096cc:	f00c ff6a 	bl	80165a4 <sys_arch_protect>
 80096d0:	60f8      	str	r0, [r7, #12]
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80096da:	f113 0f0c 	cmn.w	r3, #12
 80096de:	db05      	blt.n	80096ec <lwip_netconn_do_delconn+0x1dc>
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	697a      	ldr	r2, [r7, #20]
 80096e6:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80096ea:	721a      	strb	r2, [r3, #8]
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f00c ff67 	bl	80165c0 <sys_arch_unprotect>
 80096f2:	e000      	b.n	80096f6 <lwip_netconn_do_delconn+0x1e6>
        return;
 80096f4:	bf00      	nop
  }
}
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	08017a7c 	.word	0x08017a7c
 8009700:	08017d90 	.word	0x08017d90
 8009704:	08017ad4 	.word	0x08017ad4
 8009708:	08017da4 	.word	0x08017da4
 800970c:	08017dc4 	.word	0x08017dc4
 8009710:	08017de0 	.word	0x08017de0
 8009714:	200074e8 	.word	0x200074e8

08009718 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800972c:	f113 0f0c 	cmn.w	r3, #12
 8009730:	da06      	bge.n	8009740 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	711a      	strb	r2, [r3, #4]
 800973e:	e030      	b.n	80097a2 <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	22fa      	movs	r2, #250	; 0xfa
 8009744:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d027      	beq.n	80097a0 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800975a:	2b10      	cmp	r3, #16
 800975c:	d011      	beq.n	8009782 <lwip_netconn_do_bind+0x6a>
 800975e:	2b20      	cmp	r3, #32
 8009760:	d000      	beq.n	8009764 <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 8009762:	e01e      	b.n	80097a2 <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6858      	ldr	r0, [r3, #4]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6899      	ldr	r1, [r3, #8]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	899b      	ldrh	r3, [r3, #12]
 8009772:	461a      	mov	r2, r3
 8009774:	f00a f98e 	bl	8013a94 <udp_bind>
 8009778:	4603      	mov	r3, r0
 800977a:	461a      	mov	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	711a      	strb	r2, [r3, #4]
        break;
 8009780:	e00f      	b.n	80097a2 <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6858      	ldr	r0, [r3, #4]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6899      	ldr	r1, [r3, #8]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	899b      	ldrh	r3, [r3, #12]
 8009790:	461a      	mov	r2, r3
 8009792:	f004 fd25 	bl	800e1e0 <tcp_bind>
 8009796:	4603      	mov	r3, r0
 8009798:	461a      	mov	r2, r3
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	711a      	strb	r2, [r3, #4]
        break;
 800979e:	e000      	b.n	80097a2 <lwip_netconn_do_bind+0x8a>
      }
    }
 80097a0:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d012      	beq.n	80097d0 <lwip_netconn_do_bind+0xb8>
 80097aa:	f00c fefb 	bl	80165a4 <sys_arch_protect>
 80097ae:	60b8      	str	r0, [r7, #8]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80097b8:	f113 0f0c 	cmn.w	r3, #12
 80097bc:	db05      	blt.n	80097ca <lwip_netconn_do_bind+0xb2>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80097c8:	721a      	strb	r2, [r3, #8]
 80097ca:	68b8      	ldr	r0, [r7, #8]
 80097cc:	f00c fef8 	bl	80165c0 <sys_arch_unprotect>
}
 80097d0:	bf00      	nop
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b088      	sub	sp, #32
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80097ec:	f113 0f0c 	cmn.w	r3, #12
 80097f0:	da06      	bge.n	8009800 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	711a      	strb	r2, [r3, #4]
 80097fe:	e0ab      	b.n	8009958 <lwip_netconn_do_listen+0x180>
  } else {
    msg->err = ERR_CONN;
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	22f5      	movs	r2, #245	; 0xf5
 8009804:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 80a3 	beq.w	8009958 <lwip_netconn_do_listen+0x180>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800981c:	2b10      	cmp	r3, #16
 800981e:	f040 8098 	bne.w	8009952 <lwip_netconn_do_listen+0x17a>
        if (msg->conn->state == NETCONN_NONE) {
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	785b      	ldrb	r3, [r3, #1]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d170      	bne.n	800990e <lwip_netconn_do_listen+0x136>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	7d1b      	ldrb	r3, [r3, #20]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <lwip_netconn_do_listen+0x68>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	22fa      	movs	r2, #250	; 0xfa
 800983c:	711a      	strb	r2, [r3, #4]
 800983e:	e08b      	b.n	8009958 <lwip_netconn_do_listen+0x180>
          } else {
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	7a1b      	ldrb	r3, [r3, #8]
 8009844:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	f107 020f 	add.w	r2, r7, #15
 8009850:	7ef9      	ldrb	r1, [r7, #27]
 8009852:	4618      	mov	r0, r3
 8009854:	f004 fd7a 	bl	800e34c <tcp_listen_with_backlog_and_err>
 8009858:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d104      	bne.n	800986a <lwip_netconn_do_listen+0x92>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 8009860:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	711a      	strb	r2, [r3, #4]
 8009868:	e076      	b.n	8009958 <lwip_netconn_do_listen+0x180>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3310      	adds	r3, #16
 8009870:	4618      	mov	r0, r3
 8009872:	f00c fd7b 	bl	801636c <sys_mbox_valid>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00b      	beq.n	8009894 <lwip_netconn_do_listen+0xbc>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3310      	adds	r3, #16
 8009882:	4618      	mov	r0, r3
 8009884:	f00c fcd6 	bl	8016234 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3310      	adds	r3, #16
 800988e:	4618      	mov	r0, r3
 8009890:	f00c fd7d 	bl	801638e <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	2200      	movs	r2, #0
 8009898:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3314      	adds	r3, #20
 80098a0:	4618      	mov	r0, r3
 80098a2:	f00c fd63 	bl	801636c <sys_mbox_valid>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10a      	bne.n	80098c2 <lwip_netconn_do_listen+0xea>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3314      	adds	r3, #20
 80098b2:	2106      	movs	r1, #6
 80098b4:	4618      	mov	r0, r3
 80098b6:	f00c fc9b 	bl	80161f0 <sys_mbox_new>
 80098ba:	4603      	mov	r3, r0
 80098bc:	461a      	mov	r2, r3
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d118      	bne.n	80098fe <lwip_netconn_do_listen+0x126>
                msg->conn->state = NETCONN_LISTEN;
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2202      	movs	r2, #2
 80098d2:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685a      	ldr	r2, [r3, #4]
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4619      	mov	r1, r3
 80098e8:	4610      	mov	r0, r2
 80098ea:	f005 fc41 	bl	800f170 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	4926      	ldr	r1, [pc, #152]	; (8009990 <lwip_netconn_do_listen+0x1b8>)
 80098f6:	4618      	mov	r0, r3
 80098f8:	f005 fcb0 	bl	800f25c <tcp_accept>
 80098fc:	e02c      	b.n	8009958 <lwip_netconn_do_listen+0x180>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 80098fe:	6978      	ldr	r0, [r7, #20]
 8009900:	f004 fb4e 	bl	800dfa0 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2200      	movs	r2, #0
 800990a:	605a      	str	r2, [r3, #4]
 800990c:	e024      	b.n	8009958 <lwip_netconn_do_listen+0x180>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	785b      	ldrb	r3, [r3, #1]
 8009914:	2b02      	cmp	r3, #2
 8009916:	d11f      	bne.n	8009958 <lwip_netconn_do_listen+0x180>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	2200      	movs	r2, #0
 800991c:	711a      	strb	r2, [r3, #4]
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	7d1b      	ldrb	r3, [r3, #20]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d006      	beq.n	8009938 <lwip_netconn_do_listen+0x160>
 800992a:	4b1a      	ldr	r3, [pc, #104]	; (8009994 <lwip_netconn_do_listen+0x1bc>)
 800992c:	f240 525d 	movw	r2, #1373	; 0x55d
 8009930:	4919      	ldr	r1, [pc, #100]	; (8009998 <lwip_netconn_do_listen+0x1c0>)
 8009932:	481a      	ldr	r0, [pc, #104]	; (800999c <lwip_netconn_do_listen+0x1c4>)
 8009934:	f00c fec4 	bl	80166c0 <iprintf>
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	7a1b      	ldrb	r3, [r3, #8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <lwip_netconn_do_listen+0x16e>
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	7a1a      	ldrb	r2, [r3, #8]
 8009944:	e000      	b.n	8009948 <lwip_netconn_do_listen+0x170>
 8009946:	2201      	movs	r2, #1
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	771a      	strb	r2, [r3, #28]
 8009950:	e002      	b.n	8009958 <lwip_netconn_do_listen+0x180>
        }
      } else {
        msg->err = ERR_ARG;
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	22f0      	movs	r2, #240	; 0xf0
 8009956:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d012      	beq.n	8009986 <lwip_netconn_do_listen+0x1ae>
 8009960:	f00c fe20 	bl	80165a4 <sys_arch_protect>
 8009964:	6138      	str	r0, [r7, #16]
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800996e:	f113 0f0c 	cmn.w	r3, #12
 8009972:	db05      	blt.n	8009980 <lwip_netconn_do_listen+0x1a8>
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	69fa      	ldr	r2, [r7, #28]
 800997a:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800997e:	721a      	strb	r2, [r3, #8]
 8009980:	6938      	ldr	r0, [r7, #16]
 8009982:	f00c fe1d 	bl	80165c0 <sys_arch_unprotect>
}
 8009986:	bf00      	nop
 8009988:	3720      	adds	r7, #32
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	08008bf1 	.word	0x08008bf1
 8009994:	08017a7c 	.word	0x08017a7c
 8009998:	08017e80 	.word	0x08017e80
 800999c:	08017ad4 	.word	0x08017ad4

080099a0 <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80099b4:	f113 0f0c 	cmn.w	r3, #12
 80099b8:	da06      	bge.n	80099c8 <lwip_netconn_do_send+0x28>
    msg->err = msg->conn->last_err;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	711a      	strb	r2, [r3, #4]
 80099c6:	e038      	b.n	8009a3a <lwip_netconn_do_send+0x9a>
  } else {
    msg->err = ERR_CONN;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	22f5      	movs	r2, #245	; 0xf5
 80099cc:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d02f      	beq.n	8009a38 <lwip_netconn_do_send+0x98>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099e2:	2b20      	cmp	r3, #32
 80099e4:	d000      	beq.n	80099e8 <lwip_netconn_do_send+0x48>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
 80099e6:	e028      	b.n	8009a3a <lwip_netconn_do_send+0x9a>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10e      	bne.n	8009a10 <lwip_netconn_do_send+0x70>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4619      	mov	r1, r3
 8009a00:	4610      	mov	r0, r2
 8009a02:	f009 ff2d 	bl	8013860 <udp_send>
 8009a06:	4603      	mov	r3, r0
 8009a08:	461a      	mov	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	711a      	strb	r2, [r3, #4]
        break;
 8009a0e:	e014      	b.n	8009a3a <lwip_netconn_do_send+0x9a>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6858      	ldr	r0, [r3, #4]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	6819      	ldr	r1, [r3, #0]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	f103 0208 	add.w	r2, r3, #8
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	899b      	ldrh	r3, [r3, #12]
 8009a2a:	f009 ff31 	bl	8013890 <udp_sendto>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	461a      	mov	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	711a      	strb	r2, [r3, #4]
        break;
 8009a36:	e000      	b.n	8009a3a <lwip_netconn_do_send+0x9a>
      }
    }
 8009a38:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d012      	beq.n	8009a68 <lwip_netconn_do_send+0xc8>
 8009a42:	f00c fdaf 	bl	80165a4 <sys_arch_protect>
 8009a46:	60b8      	str	r0, [r7, #8]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009a50:	f113 0f0c 	cmn.w	r3, #12
 8009a54:	db05      	blt.n	8009a62 <lwip_netconn_do_send+0xc2>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009a60:	721a      	strb	r2, [r3, #8]
 8009a62:	68b8      	ldr	r0, [r7, #8]
 8009a64:	f00c fdac 	bl	80165c0 <sys_arch_unprotect>
}
 8009a68:	bf00      	nop
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d022      	beq.n	8009ad2 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a96:	2b10      	cmp	r3, #16
 8009a98:	d11b      	bne.n	8009ad2 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa6:	d202      	bcs.n	8009aae <lwip_netconn_do_recv+0x3e>
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	e001      	b.n	8009ab2 <lwip_netconn_do_recv+0x42>
 8009aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ab2:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	89fa      	ldrh	r2, [r7, #14]
 8009abc:	4611      	mov	r1, r2
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f004 fd64 	bl	800e58c <tcp_recved>
        remaining -= recved;
 8009ac4:	89fb      	ldrh	r3, [r7, #14]
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1e6      	bne.n	8009aa0 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d012      	beq.n	8009b00 <lwip_netconn_do_recv+0x90>
 8009ada:	f00c fd63 	bl	80165a4 <sys_arch_protect>
 8009ade:	60b8      	str	r0, [r7, #8]
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009ae8:	f113 0f0c 	cmn.w	r3, #12
 8009aec:	db05      	blt.n	8009afa <lwip_netconn_do_recv+0x8a>
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009af8:	721a      	strb	r2, [r3, #8]
 8009afa:	68b8      	ldr	r0, [r7, #8]
 8009afc:	f00c fd60 	bl	80165c0 <sys_arch_unprotect>
}
 8009b00:	bf00      	nop
 8009b02:	3718      	adds	r7, #24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <lwip_netconn_do_accepted>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_accepted(void *m)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00c      	beq.n	8009b3e <lwip_netconn_do_accepted+0x36>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b2e:	2b10      	cmp	r3, #16
 8009b30:	d105      	bne.n	8009b3e <lwip_netconn_do_accepted+0x36>
      tcp_backlog_accepted(msg->conn->pcb.tcp);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f004 f8a5 	bl	800dc88 <tcp_backlog_accepted>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d012      	beq.n	8009b6c <lwip_netconn_do_accepted+0x64>
 8009b46:	f00c fd2d 	bl	80165a4 <sys_arch_protect>
 8009b4a:	60b8      	str	r0, [r7, #8]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009b54:	f113 0f0c 	cmn.w	r3, #12
 8009b58:	db05      	blt.n	8009b66 <lwip_netconn_do_accepted+0x5e>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009b64:	721a      	strb	r2, [r3, #8]
 8009b66:	68b8      	ldr	r0, [r7, #8]
 8009b68:	f00c fd2a 	bl	80165c0 <sys_arch_unprotect>
}
 8009b6c:	bf00      	nop
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08a      	sub	sp, #40	; 0x28
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009b80:	2300      	movs	r3, #0
 8009b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d106      	bne.n	8009b9a <lwip_netconn_do_writemore+0x26>
 8009b8c:	4ba2      	ldr	r3, [pc, #648]	; (8009e18 <lwip_netconn_do_writemore+0x2a4>)
 8009b8e:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8009b92:	49a2      	ldr	r1, [pc, #648]	; (8009e1c <lwip_netconn_do_writemore+0x2a8>)
 8009b94:	48a2      	ldr	r0, [pc, #648]	; (8009e20 <lwip_netconn_do_writemore+0x2ac>)
 8009b96:	f00c fd93 	bl	80166c0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	785b      	ldrb	r3, [r3, #1]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d006      	beq.n	8009bb0 <lwip_netconn_do_writemore+0x3c>
 8009ba2:	4b9d      	ldr	r3, [pc, #628]	; (8009e18 <lwip_netconn_do_writemore+0x2a4>)
 8009ba4:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8009ba8:	499e      	ldr	r1, [pc, #632]	; (8009e24 <lwip_netconn_do_writemore+0x2b0>)
 8009baa:	489d      	ldr	r0, [pc, #628]	; (8009e20 <lwip_netconn_do_writemore+0x2ac>)
 8009bac:	f00c fd88 	bl	80166c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d106      	bne.n	8009bc6 <lwip_netconn_do_writemore+0x52>
 8009bb8:	4b97      	ldr	r3, [pc, #604]	; (8009e18 <lwip_netconn_do_writemore+0x2a4>)
 8009bba:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8009bbe:	499a      	ldr	r1, [pc, #616]	; (8009e28 <lwip_netconn_do_writemore+0x2b4>)
 8009bc0:	4897      	ldr	r0, [pc, #604]	; (8009e20 <lwip_netconn_do_writemore+0x2ac>)
 8009bc2:	f00c fd7d 	bl	80166c0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d106      	bne.n	8009bdc <lwip_netconn_do_writemore+0x68>
 8009bce:	4b92      	ldr	r3, [pc, #584]	; (8009e18 <lwip_netconn_do_writemore+0x2a4>)
 8009bd0:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8009bd4:	4995      	ldr	r1, [pc, #596]	; (8009e2c <lwip_netconn_do_writemore+0x2b8>)
 8009bd6:	4892      	ldr	r0, [pc, #584]	; (8009e20 <lwip_netconn_do_writemore+0x2ac>)
 8009bd8:	f00c fd72 	bl	80166c0 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d306      	bcc.n	8009bf8 <lwip_netconn_do_writemore+0x84>
 8009bea:	4b8b      	ldr	r3, [pc, #556]	; (8009e18 <lwip_netconn_do_writemore+0x2a4>)
 8009bec:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8009bf0:	498f      	ldr	r1, [pc, #572]	; (8009e30 <lwip_netconn_do_writemore+0x2bc>)
 8009bf2:	488b      	ldr	r0, [pc, #556]	; (8009e20 <lwip_netconn_do_writemore+0x2ac>)
 8009bf4:	f00c fd64 	bl	80166c0 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bfc:	7c1b      	ldrb	r3, [r3, #16]
 8009bfe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009c08:	f003 0302 	and.w	r3, r3, #2
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d105      	bne.n	8009c1c <lwip_netconn_do_writemore+0xa8>
 8009c10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009c14:	f003 0304 	and.w	r3, r3, #4
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d001      	beq.n	8009c20 <lwip_netconn_do_writemore+0xac>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e000      	b.n	8009c22 <lwip_netconn_do_writemore+0xae>
 8009c20:	2300      	movs	r3, #0
 8009c22:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

#if LWIP_SO_SNDTIMEO
  if ((conn->send_timeout != 0) &&
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	69db      	ldr	r3, [r3, #28]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d026      	beq.n	8009c7c <lwip_netconn_do_writemore+0x108>
      ((s32_t)(sys_now() - conn->current_msg->msg.w.time_started) >= conn->send_timeout)) {
 8009c2e:	f7fa ff4b 	bl	8004ac8 <sys_now>
 8009c32:	4602      	mov	r2, r0
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	69db      	ldr	r3, [r3, #28]
  if ((conn->send_timeout != 0) &&
 8009c42:	429a      	cmp	r2, r3
 8009c44:	db1a      	blt.n	8009c7c <lwip_netconn_do_writemore+0x108>
    write_finished = 1;
 8009c46:	2301      	movs	r3, #1
 8009c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (conn->write_offset == 0) {
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d107      	bne.n	8009c64 <lwip_netconn_do_writemore+0xf0>
      /* nothing has been written */
      err = ERR_WOULDBLOCK;
 8009c54:	23f9      	movs	r3, #249	; 0xf9
 8009c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      conn->current_msg->msg.w.len = 0;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5e:	2200      	movs	r2, #0
 8009c60:	60da      	str	r2, [r3, #12]
    if (conn->write_offset == 0) {
 8009c62:	e120      	b.n	8009ea6 <lwip_netconn_do_writemore+0x332>
    } else {
      /* partial write */
      err = ERR_OK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      conn->current_msg->msg.w.len = conn->write_offset;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009c72:	60da      	str	r2, [r3, #12]
      conn->write_offset = 0;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	631a      	str	r2, [r3, #48]	; 0x30
    if (conn->write_offset == 0) {
 8009c7a:	e114      	b.n	8009ea6 <lwip_netconn_do_writemore+0x332>
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c80:	689a      	ldr	r2, [r3, #8]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c86:	4413      	add	r3, r2
 8009c88:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8e:	68da      	ldr	r2, [r3, #12]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c9e:	d309      	bcc.n	8009cb4 <lwip_netconn_do_writemore+0x140>
      len = 0xffff;
 8009ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ca4:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 8009ca6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009caa:	f043 0302 	orr.w	r3, r3, #2
 8009cae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009cb2:	e001      	b.n	8009cb8 <lwip_netconn_do_writemore+0x144>
    } else {
      len = (u16_t)diff;
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cc0:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 8009cc2:	8afa      	ldrh	r2, [r7, #22]
 8009cc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d212      	bcs.n	8009cf0 <lwip_netconn_do_writemore+0x17c>
      /* don't try to write more than sendbuf */
      len = available;
 8009cca:	8afb      	ldrh	r3, [r7, #22]
 8009ccc:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 8009cce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d006      	beq.n	8009ce4 <lwip_netconn_do_writemore+0x170>
        if (!len) {
 8009cd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d109      	bne.n	8009cf0 <lwip_netconn_do_writemore+0x17c>
          err = ERR_WOULDBLOCK;
 8009cdc:	23f9      	movs	r3, #249	; 0xf9
 8009cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 8009ce2:	e02a      	b.n	8009d3a <lwip_netconn_do_writemore+0x1c6>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009ce4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009ce8:	f043 0302 	orr.w	r3, r3, #2
 8009cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cf6:	441a      	add	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d906      	bls.n	8009d10 <lwip_netconn_do_writemore+0x19c>
 8009d02:	4b45      	ldr	r3, [pc, #276]	; (8009e18 <lwip_netconn_do_writemore+0x2a4>)
 8009d04:	f240 6213 	movw	r2, #1555	; 0x613
 8009d08:	494a      	ldr	r1, [pc, #296]	; (8009e34 <lwip_netconn_do_writemore+0x2c0>)
 8009d0a:	4845      	ldr	r0, [pc, #276]	; (8009e20 <lwip_netconn_do_writemore+0x2ac>)
 8009d0c:	f00c fcd8 	bl	80166c0 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6858      	ldr	r0, [r3, #4]
 8009d14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009d18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d1a:	69f9      	ldr	r1, [r7, #28]
 8009d1c:	f008 f88a 	bl	8011e34 <tcp_write>
 8009d20:	4603      	mov	r3, r0
 8009d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009d26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d004      	beq.n	8009d38 <lwip_netconn_do_writemore+0x1c4>
 8009d2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d36:	d135      	bne.n	8009da4 <lwip_netconn_do_writemore+0x230>
err_mem:
 8009d38:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8009d3a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d019      	beq.n	8009d76 <lwip_netconn_do_writemore+0x202>
 8009d42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d213      	bcs.n	8009d76 <lwip_netconn_do_writemore+0x202>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d005      	beq.n	8009d62 <lwip_netconn_do_writemore+0x1ee>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d5c:	2103      	movs	r1, #3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009d68:	f043 0310 	orr.w	r3, r3, #16
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8009d74:	e016      	b.n	8009da4 <lwip_netconn_do_writemore+0x230>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d7e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009d82:	d305      	bcc.n	8009d90 <lwip_netconn_do_writemore+0x21c>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009d8c:	2b04      	cmp	r3, #4
 8009d8e:	d909      	bls.n	8009da4 <lwip_netconn_do_writemore+0x230>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d005      	beq.n	8009da4 <lwip_netconn_do_writemore+0x230>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d9e:	2103      	movs	r1, #3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009da4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d145      	bne.n	8009e38 <lwip_netconn_do_writemore+0x2c4>
      err_t out_err;
      conn->write_offset += len;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009db0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009db2:	441a      	add	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	631a      	str	r2, [r3, #48]	; 0x30
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d003      	beq.n	8009dce <lwip_netconn_do_writemore+0x25a>
 8009dc6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d007      	beq.n	8009dde <lwip_netconn_do_writemore+0x26a>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009dd6:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f008 fcd8 	bl	8012798 <tcp_output>
 8009de8:	4603      	mov	r3, r0
 8009dea:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8009dec:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8009df0:	f113 0f0c 	cmn.w	r3, #12
 8009df4:	db04      	blt.n	8009e00 <lwip_netconn_do_writemore+0x28c>
 8009df6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8009dfa:	f113 0f04 	cmn.w	r3, #4
 8009dfe:	d152      	bne.n	8009ea6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009e00:	7d3b      	ldrb	r3, [r7, #20]
 8009e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009e06:	2301      	movs	r3, #1
 8009e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e10:	2200      	movs	r2, #0
 8009e12:	60da      	str	r2, [r3, #12]
 8009e14:	e047      	b.n	8009ea6 <lwip_netconn_do_writemore+0x332>
 8009e16:	bf00      	nop
 8009e18:	08017a7c 	.word	0x08017a7c
 8009e1c:	08017ba0 	.word	0x08017ba0
 8009e20:	08017ad4 	.word	0x08017ad4
 8009e24:	08017eb0 	.word	0x08017eb0
 8009e28:	08017bb0 	.word	0x08017bb0
 8009e2c:	08017ed0 	.word	0x08017ed0
 8009e30:	08017ee8 	.word	0x08017ee8
 8009e34:	08017f1c 	.word	0x08017f1c
      }
    } else if (err == ERR_MEM) {
 8009e38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e40:	d12a      	bne.n	8009e98 <lwip_netconn_do_writemore+0x324>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f008 fca6 	bl	8012798 <tcp_output>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8009e50:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8009e54:	f113 0f0c 	cmn.w	r3, #12
 8009e58:	db04      	blt.n	8009e64 <lwip_netconn_do_writemore+0x2f0>
 8009e5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8009e5e:	f113 0f04 	cmn.w	r3, #4
 8009e62:	d10a      	bne.n	8009e7a <lwip_netconn_do_writemore+0x306>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009e64:	7d7b      	ldrb	r3, [r7, #21]
 8009e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e74:	2200      	movs	r2, #0
 8009e76:	60da      	str	r2, [r3, #12]
 8009e78:	e015      	b.n	8009ea6 <lwip_netconn_do_writemore+0x332>
      } else if (dontblock) {
 8009e7a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d011      	beq.n	8009ea6 <lwip_netconn_do_writemore+0x332>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 8009e82:	23f9      	movs	r3, #249	; 0xf9
 8009e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e92:	2200      	movs	r2, #0
 8009e94:	60da      	str	r2, [r3, #12]
 8009e96:	e006      	b.n	8009ea6 <lwip_netconn_do_writemore+0x332>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 8009ea6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d02c      	beq.n	8009f08 <lwip_netconn_do_writemore+0x394>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	330c      	adds	r3, #12
 8009eb6:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ebc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009ec0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	635a      	str	r2, [r3, #52]	; 0x34
    conn->write_offset = 0;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	631a      	str	r2, [r3, #48]	; 0x30
    conn->state = NETCONN_NONE;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00f      	beq.n	8009efa <lwip_netconn_do_writemore+0x386>
 8009eda:	f00c fb63 	bl	80165a4 <sys_arch_protect>
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009ee6:	f113 0f0c 	cmn.w	r3, #12
 8009eea:	db03      	blt.n	8009ef4 <lwip_netconn_do_writemore+0x380>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009ef2:	721a      	strb	r2, [r3, #8]
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f00c fb63 	bl	80165c0 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d006      	beq.n	8009f0e <lwip_netconn_do_writemore+0x39a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009f00:	6938      	ldr	r0, [r7, #16]
 8009f02:	f00c faaa 	bl	801645a <sys_sem_signal>
 8009f06:	e002      	b.n	8009f0e <lwip_netconn_do_writemore+0x39a>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f0c:	e000      	b.n	8009f10 <lwip_netconn_do_writemore+0x39c>
  }
#endif
  return ERR_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3728      	adds	r7, #40	; 0x28
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009f2c:	f113 0f0c 	cmn.w	r3, #12
 8009f30:	da06      	bge.n	8009f40 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	711a      	strb	r2, [r3, #4]
 8009f3e:	e072      	b.n	800a026 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f4a:	2b10      	cmp	r3, #16
 8009f4c:	d168      	bne.n	800a020 <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	785b      	ldrb	r3, [r3, #1]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d003      	beq.n	8009f60 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	22fb      	movs	r2, #251	; 0xfb
 8009f5c:	711a      	strb	r2, [r3, #4]
 8009f5e:	e062      	b.n	800a026 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d056      	beq.n	800a018 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d104      	bne.n	8009f86 <lwip_netconn_do_write+0x6e>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d006      	beq.n	8009f94 <lwip_netconn_do_write+0x7c>
 8009f86:	4b36      	ldr	r3, [pc, #216]	; (800a060 <lwip_netconn_do_write+0x148>)
 8009f88:	f240 6283 	movw	r2, #1667	; 0x683
 8009f8c:	4935      	ldr	r1, [pc, #212]	; (800a064 <lwip_netconn_do_write+0x14c>)
 8009f8e:	4836      	ldr	r0, [pc, #216]	; (800a068 <lwip_netconn_do_write+0x150>)
 8009f90:	f00c fb96 	bl	80166c0 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d106      	bne.n	8009faa <lwip_netconn_do_write+0x92>
 8009f9c:	4b30      	ldr	r3, [pc, #192]	; (800a060 <lwip_netconn_do_write+0x148>)
 8009f9e:	f240 6284 	movw	r2, #1668	; 0x684
 8009fa2:	4932      	ldr	r1, [pc, #200]	; (800a06c <lwip_netconn_do_write+0x154>)
 8009fa4:	4830      	ldr	r0, [pc, #192]	; (800a068 <lwip_netconn_do_write+0x150>)
 8009fa6:	f00c fb8b 	bl	80166c0 <iprintf>
        msg->conn->current_msg = msg;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	635a      	str	r2, [r3, #52]	; 0x34
        msg->conn->write_offset = 0;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7ff fdd7 	bl	8009b74 <lwip_netconn_do_writemore>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d044      	beq.n	800a056 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	785b      	ldrb	r3, [r3, #1]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d006      	beq.n	8009fe4 <lwip_netconn_do_write+0xcc>
 8009fd6:	4b22      	ldr	r3, [pc, #136]	; (800a060 <lwip_netconn_do_write+0x148>)
 8009fd8:	f240 6289 	movw	r2, #1673	; 0x689
 8009fdc:	4924      	ldr	r1, [pc, #144]	; (800a070 <lwip_netconn_do_write+0x158>)
 8009fde:	4822      	ldr	r0, [pc, #136]	; (800a068 <lwip_netconn_do_write+0x150>)
 8009fe0:	f00c fb6e 	bl	80166c0 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009fe4:	4823      	ldr	r0, [pc, #140]	; (800a074 <lwip_netconn_do_write+0x15c>)
 8009fe6:	f00c faaa 	bl	801653e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	330c      	adds	r3, #12
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f00c fa00 	bl	80163f8 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009ff8:	481e      	ldr	r0, [pc, #120]	; (800a074 <lwip_netconn_do_write+0x15c>)
 8009ffa:	f00c fa91 	bl	8016520 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	785b      	ldrb	r3, [r3, #1]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d126      	bne.n	800a056 <lwip_netconn_do_write+0x13e>
 800a008:	4b15      	ldr	r3, [pc, #84]	; (800a060 <lwip_netconn_do_write+0x148>)
 800a00a:	f240 628d 	movw	r2, #1677	; 0x68d
 800a00e:	4918      	ldr	r1, [pc, #96]	; (800a070 <lwip_netconn_do_write+0x158>)
 800a010:	4815      	ldr	r0, [pc, #84]	; (800a068 <lwip_netconn_do_write+0x150>)
 800a012:	f00c fb55 	bl	80166c0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a016:	e01e      	b.n	800a056 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	22f5      	movs	r2, #245	; 0xf5
 800a01c:	711a      	strb	r2, [r3, #4]
 800a01e:	e002      	b.n	800a026 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	22fa      	movs	r2, #250	; 0xfa
 800a024:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d014      	beq.n	800a058 <lwip_netconn_do_write+0x140>
 800a02e:	f00c fab9 	bl	80165a4 <sys_arch_protect>
 800a032:	60b8      	str	r0, [r7, #8]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a03c:	f113 0f0c 	cmn.w	r3, #12
 800a040:	db05      	blt.n	800a04e <lwip_netconn_do_write+0x136>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a04c:	721a      	strb	r2, [r3, #8]
 800a04e:	68b8      	ldr	r0, [r7, #8]
 800a050:	f00c fab6 	bl	80165c0 <sys_arch_unprotect>
 800a054:	e000      	b.n	800a058 <lwip_netconn_do_write+0x140>
        return;
 800a056:	bf00      	nop
}
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	08017a7c 	.word	0x08017a7c
 800a064:	08017dc4 	.word	0x08017dc4
 800a068:	08017ad4 	.word	0x08017ad4
 800a06c:	08017f48 	.word	0x08017f48
 800a070:	08017de0 	.word	0x08017de0
 800a074:	200074e8 	.word	0x200074e8

0800a078 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d06c      	beq.n	800a168 <lwip_netconn_do_getaddr+0xf0>
    if (msg->msg.ad.local) {
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	7c1b      	ldrb	r3, [r3, #16]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d007      	beq.n	800a0a6 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	6812      	ldr	r2, [r2, #0]
 800a0a2:	601a      	str	r2, [r3, #0]
 800a0a4:	e006      	b.n	800a0b4 <lwip_netconn_do_getaddr+0x3c>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	6852      	ldr	r2, [r2, #4]
 800a0b2:	601a      	str	r2, [r3, #0]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0c4:	2b10      	cmp	r3, #16
 800a0c6:	d021      	beq.n	800a10c <lwip_netconn_do_getaddr+0x94>
 800a0c8:	2b20      	cmp	r3, #32
 800a0ca:	d144      	bne.n	800a156 <lwip_netconn_do_getaddr+0xde>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	7c1b      	ldrb	r3, [r3, #16]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d007      	beq.n	800a0e4 <lwip_netconn_do_getaddr+0x6c>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	685a      	ldr	r2, [r3, #4]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	8a52      	ldrh	r2, [r2, #18]
 800a0e0:	801a      	strh	r2, [r3, #0]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
 800a0e2:	e044      	b.n	800a16e <lwip_netconn_do_getaddr+0xf6>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	7c1b      	ldrb	r3, [r3, #16]
 800a0ec:	f003 0304 	and.w	r3, r3, #4
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d103      	bne.n	800a0fc <lwip_netconn_do_getaddr+0x84>
          msg->err = ERR_CONN;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	22f5      	movs	r2, #245	; 0xf5
 800a0f8:	711a      	strb	r2, [r3, #4]
      break;
 800a0fa:	e038      	b.n	800a16e <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	8a92      	ldrh	r2, [r2, #20]
 800a108:	801a      	strh	r2, [r3, #0]
      break;
 800a10a:	e030      	b.n	800a16e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	7c1b      	ldrb	r3, [r3, #16]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10f      	bne.n	800a134 <lwip_netconn_do_getaddr+0xbc>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	7d1b      	ldrb	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d005      	beq.n	800a12c <lwip_netconn_do_getaddr+0xb4>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	7d1b      	ldrb	r3, [r3, #20]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d103      	bne.n	800a134 <lwip_netconn_do_getaddr+0xbc>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	22f5      	movs	r2, #245	; 0xf5
 800a130:	711a      	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
 800a132:	e01c      	b.n	800a16e <lwip_netconn_do_getaddr+0xf6>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	7c1b      	ldrb	r3, [r3, #16]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d004      	beq.n	800a146 <lwip_netconn_do_getaddr+0xce>
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	8adb      	ldrh	r3, [r3, #22]
 800a144:	e003      	b.n	800a14e <lwip_netconn_do_getaddr+0xd6>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	8b1b      	ldrh	r3, [r3, #24]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	68d2      	ldr	r2, [r2, #12]
 800a152:	8013      	strh	r3, [r2, #0]
      break;
 800a154:	e00b      	b.n	800a16e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
 800a156:	4b13      	ldr	r3, [pc, #76]	; (800a1a4 <lwip_netconn_do_getaddr+0x12c>)
 800a158:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a15c:	4912      	ldr	r1, [pc, #72]	; (800a1a8 <lwip_netconn_do_getaddr+0x130>)
 800a15e:	4813      	ldr	r0, [pc, #76]	; (800a1ac <lwip_netconn_do_getaddr+0x134>)
 800a160:	f00c faae 	bl	80166c0 <iprintf>
      break;
 800a164:	bf00      	nop
 800a166:	e002      	b.n	800a16e <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	22f5      	movs	r2, #245	; 0xf5
 800a16c:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d012      	beq.n	800a19c <lwip_netconn_do_getaddr+0x124>
 800a176:	f00c fa15 	bl	80165a4 <sys_arch_protect>
 800a17a:	60b8      	str	r0, [r7, #8]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a184:	f113 0f0c 	cmn.w	r3, #12
 800a188:	db05      	blt.n	800a196 <lwip_netconn_do_getaddr+0x11e>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a194:	721a      	strb	r2, [r3, #8]
 800a196:	68b8      	ldr	r0, [r7, #8]
 800a198:	f00c fa12 	bl	80165c0 <sys_arch_unprotect>
}
 800a19c:	bf00      	nop
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	08017a7c 	.word	0x08017a7c
 800a1a8:	08017f5c 	.word	0x08017f5c
 800a1ac:	08017ad4 	.word	0x08017ad4

0800a1b0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	785b      	ldrb	r3, [r3, #1]
 800a1c2:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d06e      	beq.n	800a2ac <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a1d8:	2b10      	cmp	r3, #16
 800a1da:	d167      	bne.n	800a2ac <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a1e0:	2b03      	cmp	r3, #3
 800a1e2:	d002      	beq.n	800a1ea <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a1e4:	7cfb      	ldrb	r3, [r7, #19]
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d060      	beq.n	800a2ac <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a1ea:	7cfb      	ldrb	r3, [r7, #19]
 800a1ec:	2b03      	cmp	r3, #3
 800a1ee:	d103      	bne.n	800a1f8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	22f5      	movs	r2, #245	; 0xf5
 800a1f4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a1f6:	e05c      	b.n	800a2b2 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800a1f8:	7cfb      	ldrb	r3, [r7, #19]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d103      	bne.n	800a206 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	22fb      	movs	r2, #251	; 0xfb
 800a202:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a204:	e055      	b.n	800a2b2 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	7a1b      	ldrb	r3, [r3, #8]
 800a20a:	f003 0301 	and.w	r3, r3, #1
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d004      	beq.n	800a21c <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4618      	mov	r0, r3
 800a218:	f7fe fef2 	bl	8009000 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a222:	2b00      	cmp	r3, #0
 800a224:	d104      	bne.n	800a230 <lwip_netconn_do_close+0x80>
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d006      	beq.n	800a23e <lwip_netconn_do_close+0x8e>
 800a230:	4b2e      	ldr	r3, [pc, #184]	; (800a2ec <lwip_netconn_do_close+0x13c>)
 800a232:	f240 721c 	movw	r2, #1820	; 0x71c
 800a236:	492e      	ldr	r1, [pc, #184]	; (800a2f0 <lwip_netconn_do_close+0x140>)
 800a238:	482e      	ldr	r0, [pc, #184]	; (800a2f4 <lwip_netconn_do_close+0x144>)
 800a23a:	f00c fa41 	bl	80166c0 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2204      	movs	r2, #4
 800a244:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	635a      	str	r2, [r3, #52]	; 0x34
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2100      	movs	r1, #0
 800a254:	4618      	mov	r0, r3
 800a256:	f7fe ff53 	bl	8009100 <lwip_netconn_do_close_internal>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d040      	beq.n	800a2e2 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	785b      	ldrb	r3, [r3, #1]
 800a266:	2b04      	cmp	r3, #4
 800a268:	d006      	beq.n	800a278 <lwip_netconn_do_close+0xc8>
 800a26a:	4b20      	ldr	r3, [pc, #128]	; (800a2ec <lwip_netconn_do_close+0x13c>)
 800a26c:	f240 7221 	movw	r2, #1825	; 0x721
 800a270:	4921      	ldr	r1, [pc, #132]	; (800a2f8 <lwip_netconn_do_close+0x148>)
 800a272:	4820      	ldr	r0, [pc, #128]	; (800a2f4 <lwip_netconn_do_close+0x144>)
 800a274:	f00c fa24 	bl	80166c0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a278:	4820      	ldr	r0, [pc, #128]	; (800a2fc <lwip_netconn_do_close+0x14c>)
 800a27a:	f00c f960 	bl	801653e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	330c      	adds	r3, #12
 800a284:	2100      	movs	r1, #0
 800a286:	4618      	mov	r0, r3
 800a288:	f00c f8b6 	bl	80163f8 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a28c:	481b      	ldr	r0, [pc, #108]	; (800a2fc <lwip_netconn_do_close+0x14c>)
 800a28e:	f00c f947 	bl	8016520 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	785b      	ldrb	r3, [r3, #1]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d022      	beq.n	800a2e2 <lwip_netconn_do_close+0x132>
 800a29c:	4b13      	ldr	r3, [pc, #76]	; (800a2ec <lwip_netconn_do_close+0x13c>)
 800a29e:	f240 7225 	movw	r2, #1829	; 0x725
 800a2a2:	4915      	ldr	r1, [pc, #84]	; (800a2f8 <lwip_netconn_do_close+0x148>)
 800a2a4:	4813      	ldr	r0, [pc, #76]	; (800a2f4 <lwip_netconn_do_close+0x144>)
 800a2a6:	f00c fa0b 	bl	80166c0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a2aa:	e01a      	b.n	800a2e2 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	22f5      	movs	r2, #245	; 0xf5
 800a2b0:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d014      	beq.n	800a2e4 <lwip_netconn_do_close+0x134>
 800a2ba:	f00c f973 	bl	80165a4 <sys_arch_protect>
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a2c8:	f113 0f0c 	cmn.w	r3, #12
 800a2cc:	db05      	blt.n	800a2da <lwip_netconn_do_close+0x12a>
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	697a      	ldr	r2, [r7, #20]
 800a2d4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a2d8:	721a      	strb	r2, [r3, #8]
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f00c f970 	bl	80165c0 <sys_arch_unprotect>
 800a2e0:	e000      	b.n	800a2e4 <lwip_netconn_do_close+0x134>
      return;
 800a2e2:	bf00      	nop
}
 800a2e4:	3718      	adds	r7, #24
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	08017a7c 	.word	0x08017a7c
 800a2f0:	08017dc4 	.word	0x08017dc4
 800a2f4:	08017ad4 	.word	0x08017ad4
 800a2f8:	08017de0 	.word	0x08017de0
 800a2fc:	200074e8 	.word	0x200074e8

0800a300 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	4603      	mov	r3, r0
 800a308:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800a30a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	dc04      	bgt.n	800a31c <err_to_errno+0x1c>
 800a312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a316:	425b      	negs	r3, r3
 800a318:	2b10      	cmp	r3, #16
 800a31a:	dd01      	ble.n	800a320 <err_to_errno+0x20>
    return EIO;
 800a31c:	2305      	movs	r3, #5
 800a31e:	e005      	b.n	800a32c <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800a320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a324:	425b      	negs	r3, r3
 800a326:	4a04      	ldr	r2, [pc, #16]	; (800a338 <err_to_errno+0x38>)
 800a328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	0801a13c 	.word	0x0801a13c

0800a33c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d013      	beq.n	800a372 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00b      	beq.n	800a36a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4618      	mov	r0, r3
 800a358:	f003 f962 	bl	800d620 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	605a      	str	r2, [r3, #4]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a36a:	6879      	ldr	r1, [r7, #4]
 800a36c:	2006      	movs	r0, #6
 800a36e:	f002 fb83 	bl	800ca78 <memp_free>
  }
}
 800a372:	bf00      	nop
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
	...

0800a37c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d106      	bne.n	800a398 <netbuf_free+0x1c>
 800a38a:	4b0d      	ldr	r3, [pc, #52]	; (800a3c0 <netbuf_free+0x44>)
 800a38c:	2281      	movs	r2, #129	; 0x81
 800a38e:	490d      	ldr	r1, [pc, #52]	; (800a3c4 <netbuf_free+0x48>)
 800a390:	480d      	ldr	r0, [pc, #52]	; (800a3c8 <netbuf_free+0x4c>)
 800a392:	f00c f995 	bl	80166c0 <iprintf>
 800a396:	e00f      	b.n	800a3b8 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d004      	beq.n	800a3aa <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f003 f93b 	bl	800d620 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	605a      	str	r2, [r3, #4]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	601a      	str	r2, [r3, #0]
}
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	08017f74 	.word	0x08017f74
 800a3c4:	08018010 	.word	0x08018010
 800a3c8:	08017fc4 	.word	0x08017fc4

0800a3cc <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d108      	bne.n	800a3f2 <netbuf_ref+0x26>
 800a3e0:	4b1c      	ldr	r3, [pc, #112]	; (800a454 <netbuf_ref+0x88>)
 800a3e2:	2295      	movs	r2, #149	; 0x95
 800a3e4:	491c      	ldr	r1, [pc, #112]	; (800a458 <netbuf_ref+0x8c>)
 800a3e6:	481d      	ldr	r0, [pc, #116]	; (800a45c <netbuf_ref+0x90>)
 800a3e8:	f00c f96a 	bl	80166c0 <iprintf>
 800a3ec:	f06f 030f 	mvn.w	r3, #15
 800a3f0:	e02b      	b.n	800a44a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d004      	beq.n	800a404 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f003 f90e 	bl	800d620 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800a404:	2202      	movs	r2, #2
 800a406:	2100      	movs	r1, #0
 800a408:	2000      	movs	r0, #0
 800a40a:	f002 fd97 	bl	800cf3c <pbuf_alloc>
 800a40e:	4602      	mov	r2, r0
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d105      	bne.n	800a428 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800a422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a426:	e010      	b.n	800a44a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	88fa      	ldrh	r2, [r7, #6]
 800a436:	811a      	strh	r2, [r3, #8]
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	6812      	ldr	r2, [r2, #0]
 800a43c:	891b      	ldrh	r3, [r3, #8]
 800a43e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	08017f74 	.word	0x08017f74
 800a458:	0801802c 	.word	0x0801802c
 800a45c:	08017fc4 	.word	0x08017fc4

0800a460 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int s)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	db02      	blt.n	800a474 <get_socket+0x14>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b07      	cmp	r3, #7
 800a472:	dd04      	ble.n	800a47e <get_socket+0x1e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 800a474:	4b0e      	ldr	r3, [pc, #56]	; (800a4b0 <get_socket+0x50>)
 800a476:	2209      	movs	r2, #9
 800a478:	601a      	str	r2, [r3, #0]
    return NULL;
 800a47a:	2300      	movs	r3, #0
 800a47c:	e011      	b.n	800a4a2 <get_socket+0x42>
  }

  sock = &sockets[s];
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	4613      	mov	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4413      	add	r3, r2
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	4a0a      	ldr	r2, [pc, #40]	; (800a4b4 <get_socket+0x54>)
 800a48a:	4413      	add	r3, r2
 800a48c:	60fb      	str	r3, [r7, #12]

  if (!sock->conn) {
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d104      	bne.n	800a4a0 <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 800a496:	4b06      	ldr	r3, [pc, #24]	; (800a4b0 <get_socket+0x50>)
 800a498:	2209      	movs	r2, #9
 800a49a:	601a      	str	r2, [r3, #0]
    return NULL;
 800a49c:	2300      	movs	r3, #0
 800a49e:	e000      	b.n	800a4a2 <get_socket+0x42>
  }

  return sock;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3714      	adds	r7, #20
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	2000dc70 	.word	0x2000dc70
 800a4b4:	20004048 	.word	0x20004048

0800a4b8 <tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int s)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  s -= LWIP_SOCKET_OFFSET;
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	db02      	blt.n	800a4cc <tryget_socket+0x14>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2b07      	cmp	r3, #7
 800a4ca:	dd01      	ble.n	800a4d0 <tryget_socket+0x18>
    return NULL;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	e012      	b.n	800a4f6 <tryget_socket+0x3e>
  }
  if (!sockets[s].conn) {
 800a4d0:	490c      	ldr	r1, [pc, #48]	; (800a504 <tryget_socket+0x4c>)
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	440b      	add	r3, r1
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d101      	bne.n	800a4e8 <tryget_socket+0x30>
    return NULL;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	e006      	b.n	800a4f6 <tryget_socket+0x3e>
  }
  return &sockets[s];
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4413      	add	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	4a04      	ldr	r2, [pc, #16]	; (800a504 <tryget_socket+0x4c>)
 800a4f4:	4413      	add	r3, r2
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	370c      	adds	r7, #12
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	20004048 	.word	0x20004048

0800a508 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a512:	2300      	movs	r3, #0
 800a514:	60fb      	str	r3, [r7, #12]
 800a516:	e074      	b.n	800a602 <alloc_socket+0xfa>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800a518:	f00c f844 	bl	80165a4 <sys_arch_protect>
 800a51c:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 800a51e:	493d      	ldr	r1, [pc, #244]	; (800a614 <alloc_socket+0x10c>)
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	4613      	mov	r3, r2
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	440b      	add	r3, r1
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d161      	bne.n	800a5f6 <alloc_socket+0xee>
 800a532:	4938      	ldr	r1, [pc, #224]	; (800a614 <alloc_socket+0x10c>)
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	4613      	mov	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	4413      	add	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	440b      	add	r3, r1
 800a540:	3311      	adds	r3, #17
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d156      	bne.n	800a5f6 <alloc_socket+0xee>
      sockets[i].conn       = newconn;
 800a548:	4932      	ldr	r1, [pc, #200]	; (800a614 <alloc_socket+0x10c>)
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	4613      	mov	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4413      	add	r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	440b      	add	r3, r1
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800a55a:	68b8      	ldr	r0, [r7, #8]
 800a55c:	f00c f830 	bl	80165c0 <sys_arch_unprotect>
      sockets[i].lastdata   = NULL;
 800a560:	492c      	ldr	r1, [pc, #176]	; (800a614 <alloc_socket+0x10c>)
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	4613      	mov	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4413      	add	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	440b      	add	r3, r1
 800a56e:	3304      	adds	r3, #4
 800a570:	2200      	movs	r2, #0
 800a572:	601a      	str	r2, [r3, #0]
      sockets[i].lastoffset = 0;
 800a574:	4927      	ldr	r1, [pc, #156]	; (800a614 <alloc_socket+0x10c>)
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	4613      	mov	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	440b      	add	r3, r1
 800a582:	3308      	adds	r3, #8
 800a584:	2200      	movs	r2, #0
 800a586:	801a      	strh	r2, [r3, #0]
      sockets[i].rcvevent   = 0;
 800a588:	4922      	ldr	r1, [pc, #136]	; (800a614 <alloc_socket+0x10c>)
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	4613      	mov	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	440b      	add	r3, r1
 800a596:	330a      	adds	r3, #10
 800a598:	2200      	movs	r2, #0
 800a59a:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5a4:	2b10      	cmp	r3, #16
 800a5a6:	d102      	bne.n	800a5ae <alloc_socket+0xa6>
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <alloc_socket+0xaa>
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e000      	b.n	800a5b4 <alloc_socket+0xac>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	b298      	uxth	r0, r3
 800a5b6:	4917      	ldr	r1, [pc, #92]	; (800a614 <alloc_socket+0x10c>)
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	4413      	add	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	440b      	add	r3, r1
 800a5c4:	330c      	adds	r3, #12
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800a5ca:	4912      	ldr	r1, [pc, #72]	; (800a614 <alloc_socket+0x10c>)
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	4413      	add	r3, r2
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	440b      	add	r3, r1
 800a5d8:	330e      	adds	r3, #14
 800a5da:	2200      	movs	r2, #0
 800a5dc:	801a      	strh	r2, [r3, #0]
      sockets[i].err        = 0;
 800a5de:	490d      	ldr	r1, [pc, #52]	; (800a614 <alloc_socket+0x10c>)
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	440b      	add	r3, r1
 800a5ec:	3310      	adds	r3, #16
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	701a      	strb	r2, [r3, #0]
      return i + LWIP_SOCKET_OFFSET;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	e00a      	b.n	800a60c <alloc_socket+0x104>
    }
    SYS_ARCH_UNPROTECT(lev);
 800a5f6:	68b8      	ldr	r0, [r7, #8]
 800a5f8:	f00b ffe2 	bl	80165c0 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	3301      	adds	r3, #1
 800a600:	60fb      	str	r3, [r7, #12]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b07      	cmp	r3, #7
 800a606:	dd87      	ble.n	800a518 <alloc_socket+0x10>
  }
  return -1;
 800a608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	20004048 	.word	0x20004048

0800a618 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  void *lastdata;

  lastdata         = sock->lastdata;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	60fb      	str	r3, [r7, #12]
  sock->lastdata   = NULL;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	605a      	str	r2, [r3, #4]
  sock->lastoffset = 0;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	811a      	strh	r2, [r3, #8]
  sock->err        = 0;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	741a      	strb	r2, [r3, #16]

  /* Protect socket array */
  SYS_ARCH_SET(sock->conn, NULL);
 800a63a:	f00b ffb3 	bl	80165a4 <sys_arch_protect>
 800a63e:	60b8      	str	r0, [r7, #8]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	68b8      	ldr	r0, [r7, #8]
 800a648:	f00b ffba 	bl	80165c0 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d009      	beq.n	800a666 <free_socket+0x4e>
    if (is_tcp) {
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d003      	beq.n	800a660 <free_socket+0x48>
      pbuf_free((struct pbuf *)lastdata);
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f002 ffe1 	bl	800d620 <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
 800a65e:	e002      	b.n	800a666 <free_socket+0x4e>
      netbuf_delete((struct netbuf *)lastdata);
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f7ff fe6b 	bl	800a33c <netbuf_delete>
}
 800a666:	bf00      	nop
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
	...

0800a670 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800a670:	b590      	push	{r4, r7, lr}
 800a672:	b097      	sub	sp, #92	; 0x5c
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	847b      	strh	r3, [r7, #34]	; 0x22
  int newsock;
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f7ff feed 	bl	800a460 <get_socket>
 800a686:	6578      	str	r0, [r7, #84]	; 0x54
  if (!sock) {
 800a688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d102      	bne.n	800a694 <lwip_accept+0x24>
    return -1;
 800a68e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a692:	e12a      	b.n	800a8ea <lwip_accept+0x27a>
  }

  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
 800a694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a69c:	f003 0302 	and.w	r3, r3, #2
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00a      	beq.n	800a6ba <lwip_accept+0x4a>
 800a6a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6a6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	dc05      	bgt.n	800a6ba <lwip_accept+0x4a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
    set_errno(EWOULDBLOCK);
 800a6ae:	4b91      	ldr	r3, [pc, #580]	; (800a8f4 <lwip_accept+0x284>)
 800a6b0:	220b      	movs	r2, #11
 800a6b2:	601a      	str	r2, [r3, #0]
    return -1;
 800a6b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6b8:	e117      	b.n	800a8ea <lwip_accept+0x27a>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800a6ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fd fc99 	bl	8007ffc <netconn_accept>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (err != ERR_OK) {
 800a6d0:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d038      	beq.n	800a74a <lwip_accept+0xda>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800a6d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6e2:	2b10      	cmp	r3, #16
 800a6e4:	d00c      	beq.n	800a700 <lwip_accept+0x90>
      sock_set_errno(sock, EOPNOTSUPP);
 800a6e6:	235f      	movs	r3, #95	; 0x5f
 800a6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6f0:	741a      	strb	r2, [r3, #16]
 800a6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d025      	beq.n	800a744 <lwip_accept+0xd4>
 800a6f8:	4a7e      	ldr	r2, [pc, #504]	; (800a8f4 <lwip_accept+0x284>)
 800a6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fc:	6013      	str	r3, [r2, #0]
 800a6fe:	e021      	b.n	800a744 <lwip_accept+0xd4>
    } else if (err == ERR_CLSD) {
 800a700:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800a704:	f113 0f0f 	cmn.w	r3, #15
 800a708:	d10c      	bne.n	800a724 <lwip_accept+0xb4>
      sock_set_errno(sock, EINVAL);
 800a70a:	2316      	movs	r3, #22
 800a70c:	633b      	str	r3, [r7, #48]	; 0x30
 800a70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a710:	b2da      	uxtb	r2, r3
 800a712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a714:	741a      	strb	r2, [r3, #16]
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d013      	beq.n	800a744 <lwip_accept+0xd4>
 800a71c:	4a75      	ldr	r2, [pc, #468]	; (800a8f4 <lwip_accept+0x284>)
 800a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a720:	6013      	str	r3, [r2, #0]
 800a722:	e00f      	b.n	800a744 <lwip_accept+0xd4>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800a724:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800a728:	4618      	mov	r0, r3
 800a72a:	f7ff fde9 	bl	800a300 <err_to_errno>
 800a72e:	6378      	str	r0, [r7, #52]	; 0x34
 800a730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a732:	b2da      	uxtb	r2, r3
 800a734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a736:	741a      	strb	r2, [r3, #16]
 800a738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d002      	beq.n	800a744 <lwip_accept+0xd4>
 800a73e:	4a6d      	ldr	r2, [pc, #436]	; (800a8f4 <lwip_accept+0x284>)
 800a740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a742:	6013      	str	r3, [r2, #0]
    }
    return -1;
 800a744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a748:	e0cf      	b.n	800a8ea <lwip_accept+0x27a>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800a74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d106      	bne.n	800a75e <lwip_accept+0xee>
 800a750:	4b69      	ldr	r3, [pc, #420]	; (800a8f8 <lwip_accept+0x288>)
 800a752:	f240 12f5 	movw	r2, #501	; 0x1f5
 800a756:	4969      	ldr	r1, [pc, #420]	; (800a8fc <lwip_accept+0x28c>)
 800a758:	4869      	ldr	r0, [pc, #420]	; (800a900 <lwip_accept+0x290>)
 800a75a:	f00b ffb1 	bl	80166c0 <iprintf>

  newsock = alloc_socket(newconn, 1);
 800a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a760:	2101      	movs	r1, #1
 800a762:	4618      	mov	r0, r3
 800a764:	f7ff fed0 	bl	800a508 <alloc_socket>
 800a768:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (newsock == -1) {
 800a76a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a76c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a770:	d112      	bne.n	800a798 <lwip_accept+0x128>
    netconn_delete(newconn);
 800a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a774:	4618      	mov	r0, r3
 800a776:	f7fd fb61 	bl	8007e3c <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800a77a:	2317      	movs	r3, #23
 800a77c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a780:	b2da      	uxtb	r2, r3
 800a782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a784:	741a      	strb	r2, [r3, #16]
 800a786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <lwip_accept+0x122>
 800a78c:	4a59      	ldr	r2, [pc, #356]	; (800a8f4 <lwip_accept+0x284>)
 800a78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a790:	6013      	str	r3, [r2, #0]
    return -1;
 800a792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a796:	e0a8      	b.n	800a8ea <lwip_accept+0x27a>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800a798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	db02      	blt.n	800a7a4 <lwip_accept+0x134>
 800a79e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7a0:	2b07      	cmp	r3, #7
 800a7a2:	dd06      	ble.n	800a7b2 <lwip_accept+0x142>
 800a7a4:	4b54      	ldr	r3, [pc, #336]	; (800a8f8 <lwip_accept+0x288>)
 800a7a6:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a7aa:	4956      	ldr	r1, [pc, #344]	; (800a904 <lwip_accept+0x294>)
 800a7ac:	4854      	ldr	r0, [pc, #336]	; (800a900 <lwip_accept+0x290>)
 800a7ae:	f00b ff87 	bl	80166c0 <iprintf>
  LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
 800a7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b6:	4a54      	ldr	r2, [pc, #336]	; (800a908 <lwip_accept+0x298>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d006      	beq.n	800a7ca <lwip_accept+0x15a>
 800a7bc:	4b4e      	ldr	r3, [pc, #312]	; (800a8f8 <lwip_accept+0x288>)
 800a7be:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800a7c2:	4952      	ldr	r1, [pc, #328]	; (800a90c <lwip_accept+0x29c>)
 800a7c4:	484e      	ldr	r0, [pc, #312]	; (800a900 <lwip_accept+0x290>)
 800a7c6:	f00b ff7b 	bl	80166c0 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800a7ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	4413      	add	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4a4e      	ldr	r2, [pc, #312]	; (800a910 <lwip_accept+0x2a0>)
 800a7d6:	4413      	add	r3, r2
 800a7d8:	64bb      	str	r3, [r7, #72]	; 0x48
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800a7da:	f00b fee3 	bl	80165a4 <sys_arch_protect>
 800a7de:	6478      	str	r0, [r7, #68]	; 0x44
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
 800a7e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7e2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	b21a      	sxth	r2, r3
 800a7f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7fa:	815a      	strh	r2, [r3, #10]
  newconn->socket = newsock;
 800a7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a800:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800a802:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a804:	f00b fedc 	bl	80165c0 <sys_arch_unprotect>

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if (addr != NULL) {
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d060      	beq.n	800a8d0 <lwip_accept+0x260>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800a80e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a810:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800a814:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a818:	2300      	movs	r3, #0
 800a81a:	f7fd fb39 	bl	8007e90 <netconn_getaddr>
 800a81e:	4603      	mov	r3, r0
 800a820:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (err != ERR_OK) {
 800a824:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d01a      	beq.n	800a862 <lwip_accept+0x1f2>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fd fb04 	bl	8007e3c <netconn_delete>
      free_socket(nsock, 1);
 800a834:	2101      	movs	r1, #1
 800a836:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a838:	f7ff feee 	bl	800a618 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800a83c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800a840:	4618      	mov	r0, r3
 800a842:	f7ff fd5d 	bl	800a300 <err_to_errno>
 800a846:	6438      	str	r0, [r7, #64]	; 0x40
 800a848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a84a:	b2da      	uxtb	r2, r3
 800a84c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a84e:	741a      	strb	r2, [r3, #16]
 800a850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a852:	2b00      	cmp	r3, #0
 800a854:	d002      	beq.n	800a85c <lwip_accept+0x1ec>
 800a856:	4a27      	ldr	r2, [pc, #156]	; (800a8f4 <lwip_accept+0x284>)
 800a858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a85a:	6013      	str	r3, [r2, #0]
      return -1;
 800a85c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a860:	e043      	b.n	800a8ea <lwip_accept+0x27a>
    }
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d106      	bne.n	800a876 <lwip_accept+0x206>
 800a868:	4b23      	ldr	r3, [pc, #140]	; (800a8f8 <lwip_accept+0x288>)
 800a86a:	f240 2219 	movw	r2, #537	; 0x219
 800a86e:	4929      	ldr	r1, [pc, #164]	; (800a914 <lwip_accept+0x2a4>)
 800a870:	4823      	ldr	r0, [pc, #140]	; (800a900 <lwip_accept+0x290>)
 800a872:	f00b ff25 	bl	80166c0 <iprintf>

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800a876:	f107 0310 	add.w	r3, r7, #16
 800a87a:	2210      	movs	r2, #16
 800a87c:	701a      	strb	r2, [r3, #0]
 800a87e:	f107 0310 	add.w	r3, r7, #16
 800a882:	2202      	movs	r2, #2
 800a884:	705a      	strb	r2, [r3, #1]
 800a886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a888:	f107 0410 	add.w	r4, r7, #16
 800a88c:	4618      	mov	r0, r3
 800a88e:	f001 fcb3 	bl	800c1f8 <lwip_htons>
 800a892:	4603      	mov	r3, r0
 800a894:	8063      	strh	r3, [r4, #2]
 800a896:	f107 0310 	add.w	r3, r7, #16
 800a89a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a89c:	605a      	str	r2, [r3, #4]
 800a89e:	f107 0310 	add.w	r3, r7, #16
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	2208      	movs	r2, #8
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f00b ff01 	bl	80166b0 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	7c3a      	ldrb	r2, [r7, #16]
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d903      	bls.n	800a8c0 <lwip_accept+0x250>
      *addrlen = tempaddr.sa.sa_len;
 800a8b8:	7c3b      	ldrb	r3, [r7, #16]
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	f107 0310 	add.w	r3, r7, #16
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	68b8      	ldr	r0, [r7, #8]
 800a8cc:	f00b fee5 	bl	801669a <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8d6:	b2da      	uxtb	r2, r3
 800a8d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8da:	741a      	strb	r2, [r3, #16]
 800a8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d002      	beq.n	800a8e8 <lwip_accept+0x278>
 800a8e2:	4a04      	ldr	r2, [pc, #16]	; (800a8f4 <lwip_accept+0x284>)
 800a8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8e6:	6013      	str	r3, [r2, #0]
  return newsock;
 800a8e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	375c      	adds	r7, #92	; 0x5c
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd90      	pop	{r4, r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	2000dc70 	.word	0x2000dc70
 800a8f8:	0801810c 	.word	0x0801810c
 800a8fc:	08018140 	.word	0x08018140
 800a900:	08018150 	.word	0x08018150
 800a904:	08018178 	.word	0x08018178
 800a908:	0800b8b1 	.word	0x0800b8b1
 800a90c:	08018190 	.word	0x08018190
 800a910:	20004048 	.word	0x20004048
 800a914:	080181b4 	.word	0x080181b4

0800a918 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08a      	sub	sp, #40	; 0x28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f7ff fd9b 	bl	800a460 <get_socket>
 800a92a:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d102      	bne.n	800a938 <lwip_bind+0x20>
    return -1;
 800a932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a936:	e05d      	b.n	800a9f4 <lwip_bind+0xdc>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b10      	cmp	r3, #16
 800a93c:	d108      	bne.n	800a950 <lwip_bind+0x38>
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	785b      	ldrb	r3, [r3, #1]
 800a942:	2b02      	cmp	r3, #2
 800a944:	d104      	bne.n	800a950 <lwip_bind+0x38>
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	f003 0303 	and.w	r3, r3, #3
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d018      	beq.n	800a982 <lwip_bind+0x6a>
 800a950:	4b2a      	ldr	r3, [pc, #168]	; (800a9fc <lwip_bind+0xe4>)
 800a952:	f240 2242 	movw	r2, #578	; 0x242
 800a956:	492a      	ldr	r1, [pc, #168]	; (800aa00 <lwip_bind+0xe8>)
 800a958:	482a      	ldr	r0, [pc, #168]	; (800aa04 <lwip_bind+0xec>)
 800a95a:	f00b feb1 	bl	80166c0 <iprintf>
 800a95e:	f06f 000f 	mvn.w	r0, #15
 800a962:	f7ff fccd 	bl	800a300 <err_to_errno>
 800a966:	6178      	str	r0, [r7, #20]
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	741a      	strb	r2, [r3, #16]
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d002      	beq.n	800a97c <lwip_bind+0x64>
 800a976:	4a24      	ldr	r2, [pc, #144]	; (800aa08 <lwip_bind+0xf0>)
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a980:	e038      	b.n	800a9f4 <lwip_bind+0xdc>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	613b      	str	r3, [r7, #16]
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	885b      	ldrh	r3, [r3, #2]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f001 fc33 	bl	800c1f8 <lwip_htons>
 800a992:	4603      	mov	r3, r0
 800a994:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800a996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a99c:	f107 0110 	add.w	r1, r7, #16
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fd fac5 	bl	8007f30 <netconn_bind>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800a9ac:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d012      	beq.n	800a9da <lwip_bind+0xc2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800a9b4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7ff fca1 	bl	800a300 <err_to_errno>
 800a9be:	61b8      	str	r0, [r7, #24]
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	741a      	strb	r2, [r3, #16]
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d002      	beq.n	800a9d4 <lwip_bind+0xbc>
 800a9ce:	4a0e      	ldr	r2, [pc, #56]	; (800aa08 <lwip_bind+0xf0>)
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	6013      	str	r3, [r2, #0]
    return -1;
 800a9d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9d8:	e00c      	b.n	800a9f4 <lwip_bind+0xdc>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800a9da:	2300      	movs	r3, #0
 800a9dc:	61fb      	str	r3, [r7, #28]
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	741a      	strb	r2, [r3, #16]
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d002      	beq.n	800a9f2 <lwip_bind+0xda>
 800a9ec:	4a06      	ldr	r2, [pc, #24]	; (800aa08 <lwip_bind+0xf0>)
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	6013      	str	r3, [r2, #0]
  return 0;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3728      	adds	r7, #40	; 0x28
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	0801810c 	.word	0x0801810c
 800aa00:	080181d0 	.word	0x080181d0
 800aa04:	08018150 	.word	0x08018150
 800aa08:	2000dc70 	.word	0x2000dc70

0800aa0c <lwip_close>:

int
lwip_close(int s)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f7ff fd21 	bl	800a460 <get_socket>
 800aa1e:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d102      	bne.n	800aa2c <lwip_close+0x20>
    return -1;
 800aa26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa2a:	e03d      	b.n	800aaa8 <lwip_close+0x9c>
  }

  if (sock->conn != NULL) {
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00b      	beq.n	800aa4c <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa3e:	2b10      	cmp	r3, #16
 800aa40:	bf0c      	ite	eq
 800aa42:	2301      	moveq	r3, #1
 800aa44:	2300      	movne	r3, #0
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	617b      	str	r3, [r7, #20]
 800aa4a:	e00a      	b.n	800aa62 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d006      	beq.n	800aa62 <lwip_close+0x56>
 800aa54:	4b16      	ldr	r3, [pc, #88]	; (800aab0 <lwip_close+0xa4>)
 800aa56:	f44f 721c 	mov.w	r2, #624	; 0x270
 800aa5a:	4916      	ldr	r1, [pc, #88]	; (800aab4 <lwip_close+0xa8>)
 800aa5c:	4816      	ldr	r0, [pc, #88]	; (800aab8 <lwip_close+0xac>)
 800aa5e:	f00b fe2f 	bl	80166c0 <iprintf>
#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
#endif /* LWIP_IGMP */

  err = netconn_delete(sock->conn);
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fd f9e8 	bl	8007e3c <netconn_delete>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800aa70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d012      	beq.n	800aa9e <lwip_close+0x92>
    sock_set_errno(sock, err_to_errno(err));
 800aa78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7ff fc3f 	bl	800a300 <err_to_errno>
 800aa82:	60b8      	str	r0, [r7, #8]
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	741a      	strb	r2, [r3, #16]
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <lwip_close+0x8c>
 800aa92:	4a0a      	ldr	r2, [pc, #40]	; (800aabc <lwip_close+0xb0>)
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	6013      	str	r3, [r2, #0]
    return -1;
 800aa98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa9c:	e004      	b.n	800aaa8 <lwip_close+0x9c>
  }

  free_socket(sock, is_tcp);
 800aa9e:	6979      	ldr	r1, [r7, #20]
 800aaa0:	6938      	ldr	r0, [r7, #16]
 800aaa2:	f7ff fdb9 	bl	800a618 <free_socket>
  set_errno(0);
  return 0;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3718      	adds	r7, #24
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	0801810c 	.word	0x0801810c
 800aab4:	080181ec 	.word	0x080181ec
 800aab8:	08018150 	.word	0x08018150
 800aabc:	2000dc70 	.word	0x2000dc70

0800aac0 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f7ff fcc8 	bl	800a460 <get_socket>
 800aad0:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d102      	bne.n	800aade <lwip_listen+0x1e>
    return -1;
 800aad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aadc:	e04c      	b.n	800ab78 <lwip_listen+0xb8>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	2bfe      	cmp	r3, #254	; 0xfe
 800aae2:	dc03      	bgt.n	800aaec <lwip_listen+0x2c>
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aaea:	e000      	b.n	800aaee <lwip_listen+0x2e>
 800aaec:	23ff      	movs	r3, #255	; 0xff
 800aaee:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	b2d2      	uxtb	r2, r2
 800aaf8:	4611      	mov	r1, r2
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fd fa50 	bl	8007fa0 <netconn_listen_with_backlog>
 800ab00:	4603      	mov	r3, r0
 800ab02:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800ab04:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d028      	beq.n	800ab5e <lwip_listen+0x9e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab16:	2b10      	cmp	r3, #16
 800ab18:	d00e      	beq.n	800ab38 <lwip_listen+0x78>
      sock_set_errno(sock, EOPNOTSUPP);
 800ab1a:	235f      	movs	r3, #95	; 0x5f
 800ab1c:	60fb      	str	r3, [r7, #12]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	741a      	strb	r2, [r3, #16]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <lwip_listen+0x72>
 800ab2c:	4a14      	ldr	r2, [pc, #80]	; (800ab80 <lwip_listen+0xc0>)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6013      	str	r3, [r2, #0]
      return -1;
 800ab32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab36:	e01f      	b.n	800ab78 <lwip_listen+0xb8>
    }
    sock_set_errno(sock, err_to_errno(err));
 800ab38:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7ff fbdf 	bl	800a300 <err_to_errno>
 800ab42:	6138      	str	r0, [r7, #16]
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	b2da      	uxtb	r2, r3
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	741a      	strb	r2, [r3, #16]
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d002      	beq.n	800ab58 <lwip_listen+0x98>
 800ab52:	4a0b      	ldr	r2, [pc, #44]	; (800ab80 <lwip_listen+0xc0>)
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	6013      	str	r3, [r2, #0]
    return -1;
 800ab58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab5c:	e00c      	b.n	800ab78 <lwip_listen+0xb8>
  }

  sock_set_errno(sock, 0);
 800ab5e:	2300      	movs	r3, #0
 800ab60:	617b      	str	r3, [r7, #20]
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	b2da      	uxtb	r2, r3
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	741a      	strb	r2, [r3, #16]
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <lwip_listen+0xb6>
 800ab70:	4a03      	ldr	r2, [pc, #12]	; (800ab80 <lwip_listen+0xc0>)
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	6013      	str	r3, [r2, #0]
  return 0;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3720      	adds	r7, #32
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	2000dc70 	.word	0x2000dc70

0800ab84 <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800ab84:	b590      	push	{r4, r7, lr}
 800ab86:	b097      	sub	sp, #92	; 0x5c
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
 800ab90:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  void             *buf = NULL;
 800ab92:	2300      	movs	r3, #0
 800ab94:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	64fb      	str	r3, [r7, #76]	; 0x4c
  u8_t             done = 0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  err_t            err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f7ff fc5d 	bl	800a460 <get_socket>
 800aba6:	6438      	str	r0, [r7, #64]	; 0x40
  if (!sock) {
 800aba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d102      	bne.n	800abb4 <lwip_recvfrom+0x30>
    return -1;
 800abae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abb2:	e19b      	b.n	800aeec <lwip_recvfrom+0x368>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
 800abb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d003      	beq.n	800abc4 <lwip_recvfrom+0x40>
      buf = sock->lastdata;
 800abbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	62bb      	str	r3, [r7, #40]	; 0x28
 800abc2:	e08e      	b.n	800ace2 <lwip_recvfrom+0x15e>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	f003 0308 	and.w	r3, r3, #8
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d107      	bne.n	800abde <lwip_recvfrom+0x5a>
 800abce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800abd6:	f003 0302 	and.w	r3, r3, #2
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d01b      	beq.n	800ac16 <lwip_recvfrom+0x92>
          (sock->rcvevent <= 0)) {
 800abde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abe0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	dc16      	bgt.n	800ac16 <lwip_recvfrom+0x92>
        if (off > 0) {
 800abe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abea:	2b00      	cmp	r3, #0
 800abec:	dd0d      	ble.n	800ac0a <lwip_recvfrom+0x86>
          /* already received data, return that */
          sock_set_errno(sock, 0);
 800abee:	2300      	movs	r3, #0
 800abf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abf8:	741a      	strb	r2, [r3, #16]
 800abfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d002      	beq.n	800ac06 <lwip_recvfrom+0x82>
 800ac00:	4aa9      	ldr	r2, [pc, #676]	; (800aea8 <lwip_recvfrom+0x324>)
 800ac02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac04:	6013      	str	r3, [r2, #0]
          return off;
 800ac06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac08:	e170      	b.n	800aeec <lwip_recvfrom+0x368>
        }
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
 800ac0a:	4ba7      	ldr	r3, [pc, #668]	; (800aea8 <lwip_recvfrom+0x324>)
 800ac0c:	220b      	movs	r2, #11
 800ac0e:	601a      	str	r2, [r3, #0]
        return -1;
 800ac10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac14:	e16a      	b.n	800aeec <lwip_recvfrom+0x368>
      }

      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800ac16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac20:	2b10      	cmp	r3, #16
 800ac22:	d10b      	bne.n	800ac3c <lwip_recvfrom+0xb8>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
 800ac24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fd fb5c 	bl	80082ec <netconn_recv_tcp_pbuf>
 800ac34:	4603      	mov	r3, r0
 800ac36:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800ac3a:	e00a      	b.n	800ac52 <lwip_recvfrom+0xce>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
 800ac3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ac44:	4611      	mov	r1, r2
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fd fb78 	bl	800833c <netconn_recv>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
 800ac52:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d036      	beq.n	800acc8 <lwip_recvfrom+0x144>
        if (off > 0) {
 800ac5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	dd19      	ble.n	800ac94 <lwip_recvfrom+0x110>
          if (err == ERR_CLSD) {
 800ac60:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 800ac64:	f113 0f0f 	cmn.w	r3, #15
 800ac68:	d106      	bne.n	800ac78 <lwip_recvfrom+0xf4>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
 800ac6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	2100      	movs	r1, #0
 800ac72:	4618      	mov	r0, r3
 800ac74:	f000 fe1c 	bl	800b8b0 <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
 800ac78:	2300      	movs	r3, #0
 800ac7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7e:	b2da      	uxtb	r2, r3
 800ac80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac82:	741a      	strb	r2, [r3, #16]
 800ac84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d002      	beq.n	800ac90 <lwip_recvfrom+0x10c>
 800ac8a:	4a87      	ldr	r2, [pc, #540]	; (800aea8 <lwip_recvfrom+0x324>)
 800ac8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8e:	6013      	str	r3, [r2, #0]
          return off;
 800ac90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac92:	e12b      	b.n	800aeec <lwip_recvfrom+0x368>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800ac94:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7ff fb31 	bl	800a300 <err_to_errno>
 800ac9e:	63b8      	str	r0, [r7, #56]	; 0x38
 800aca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aca6:	741a      	strb	r2, [r3, #16]
 800aca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d002      	beq.n	800acb4 <lwip_recvfrom+0x130>
 800acae:	4a7e      	ldr	r2, [pc, #504]	; (800aea8 <lwip_recvfrom+0x324>)
 800acb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb2:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800acb4:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 800acb8:	f113 0f0f 	cmn.w	r3, #15
 800acbc:	d101      	bne.n	800acc2 <lwip_recvfrom+0x13e>
          return 0;
 800acbe:	2300      	movs	r3, #0
 800acc0:	e114      	b.n	800aeec <lwip_recvfrom+0x368>
        } else {
          return -1;
 800acc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acc6:	e111      	b.n	800aeec <lwip_recvfrom+0x368>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
 800acc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acca:	2b00      	cmp	r3, #0
 800accc:	d106      	bne.n	800acdc <lwip_recvfrom+0x158>
 800acce:	4b77      	ldr	r3, [pc, #476]	; (800aeac <lwip_recvfrom+0x328>)
 800acd0:	f240 3227 	movw	r2, #807	; 0x327
 800acd4:	4976      	ldr	r1, [pc, #472]	; (800aeb0 <lwip_recvfrom+0x32c>)
 800acd6:	4877      	ldr	r0, [pc, #476]	; (800aeb4 <lwip_recvfrom+0x330>)
 800acd8:	f00b fcf2 	bl	80166c0 <iprintf>
      sock->lastdata = buf;
 800acdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ace0:	605a      	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800ace2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acec:	2b10      	cmp	r3, #16
 800acee:	d102      	bne.n	800acf6 <lwip_recvfrom+0x172>
      p = (struct pbuf *)buf;
 800acf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf2:	657b      	str	r3, [r7, #84]	; 0x54
 800acf4:	e002      	b.n	800acfc <lwip_recvfrom+0x178>
    } else {
      p = ((struct netbuf *)buf)->p;
 800acf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	657b      	str	r3, [r7, #84]	; 0x54
    }
    buflen = p->tot_len;
 800acfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acfe:	891b      	ldrh	r3, [r3, #8]
 800ad00:	867b      	strh	r3, [r7, #50]	; 0x32
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
 800ad02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad04:	891b      	ldrh	r3, [r3, #8]
 800ad06:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	867b      	strh	r3, [r7, #50]	; 0x32

    if (len > buflen) {
 800ad0c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d903      	bls.n	800ad1c <lwip_recvfrom+0x198>
      copylen = buflen;
 800ad14:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ad16:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800ad1a:	e002      	b.n	800ad22 <lwip_recvfrom+0x19e>
    } else {
      copylen = (u16_t)len;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
 800ad22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	18d1      	adds	r1, r2, r3
 800ad28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad2a:	891b      	ldrh	r3, [r3, #8]
 800ad2c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800ad30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ad32:	f002 fe81 	bl	800da38 <pbuf_copy_partial>

    off += copylen;
 800ad36:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ad3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad3c:	4413      	add	r3, r2
 800ad3e:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800ad40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad4a:	2b10      	cmp	r3, #16
 800ad4c:	d127      	bne.n	800ad9e <lwip_recvfrom+0x21a>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
 800ad4e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d206      	bcs.n	800ad66 <lwip_recvfrom+0x1e2>
 800ad58:	4b54      	ldr	r3, [pc, #336]	; (800aeac <lwip_recvfrom+0x328>)
 800ad5a:	f240 3243 	movw	r2, #835	; 0x343
 800ad5e:	4956      	ldr	r1, [pc, #344]	; (800aeb8 <lwip_recvfrom+0x334>)
 800ad60:	4854      	ldr	r0, [pc, #336]	; (800aeb4 <lwip_recvfrom+0x330>)
 800ad62:	f00b fcad 	bl	80166c0 <iprintf>
      len -= copylen;
 800ad66:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	607b      	str	r3, [r7, #4]
      if ((len <= 0) ||
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00f      	beq.n	800ad96 <lwip_recvfrom+0x212>
          (p->flags & PBUF_FLAG_PUSH) ||
 800ad76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad78:	7b5b      	ldrb	r3, [r3, #13]
 800ad7a:	f003 0301 	and.w	r3, r3, #1
      if ((len <= 0) ||
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d109      	bne.n	800ad96 <lwip_recvfrom+0x212>
          (sock->rcvevent <= 0) ||
 800ad82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad84:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	dd04      	ble.n	800ad96 <lwip_recvfrom+0x212>
          ((flags & MSG_PEEK) != 0)) {
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	f003 0301 	and.w	r3, r3, #1
          (sock->rcvevent <= 0) ||
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d006      	beq.n	800ada4 <lwip_recvfrom+0x220>
        done = 1;
 800ad96:	2301      	movs	r3, #1
 800ad98:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800ad9c:	e002      	b.n	800ada4 <lwip_recvfrom+0x220>
      }
    } else {
      done = 1;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    }

    /* Check to see from where the data was.*/
    if (done) {
 800ada4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d04c      	beq.n	800ae46 <lwip_recvfrom+0x2c2>
#if !SOCKETS_DEBUG
      if (from && fromlen)
 800adac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d049      	beq.n	800ae46 <lwip_recvfrom+0x2c2>
 800adb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d046      	beq.n	800ae46 <lwip_recvfrom+0x2c2>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800adb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adc2:	2b10      	cmp	r3, #16
 800adc4:	d10b      	bne.n	800adde <lwip_recvfrom+0x25a>
          fromaddr = &tmpaddr;
 800adc6:	f107 0320 	add.w	r3, r7, #32
 800adca:	647b      	str	r3, [r7, #68]	; 0x44
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
 800adcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adce:	6818      	ldr	r0, [r3, #0]
 800add0:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800add4:	2300      	movs	r3, #0
 800add6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800add8:	f7fd f85a 	bl	8007e90 <netconn_getaddr>
 800addc:	e005      	b.n	800adea <lwip_recvfrom+0x266>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
 800adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade0:	899b      	ldrh	r3, [r3, #12]
 800ade2:	84fb      	strh	r3, [r7, #38]	; 0x26
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	3308      	adds	r3, #8
 800ade8:	647b      	str	r3, [r7, #68]	; 0x44
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800adea:	f107 0310 	add.w	r3, r7, #16
 800adee:	2210      	movs	r2, #16
 800adf0:	701a      	strb	r2, [r3, #0]
 800adf2:	f107 0310 	add.w	r3, r7, #16
 800adf6:	2202      	movs	r2, #2
 800adf8:	705a      	strb	r2, [r3, #1]
 800adfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800adfc:	f107 0410 	add.w	r4, r7, #16
 800ae00:	4618      	mov	r0, r3
 800ae02:	f001 f9f9 	bl	800c1f8 <lwip_htons>
 800ae06:	4603      	mov	r3, r0
 800ae08:	8063      	strh	r3, [r4, #2]
 800ae0a:	f107 0310 	add.w	r3, r7, #16
 800ae0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae10:	6812      	ldr	r2, [r2, #0]
 800ae12:	605a      	str	r2, [r3, #4]
 800ae14:	f107 0310 	add.w	r3, r7, #16
 800ae18:	3308      	adds	r3, #8
 800ae1a:	2208      	movs	r2, #8
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f00b fc46 	bl	80166b0 <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
 800ae24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	7c3a      	ldrb	r2, [r7, #16]
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d903      	bls.n	800ae36 <lwip_recvfrom+0x2b2>
            *fromlen = saddr.sa.sa_len;
 800ae2e:	7c3b      	ldrb	r3, [r7, #16]
 800ae30:	461a      	mov	r2, r3
 800ae32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae34:	601a      	str	r2, [r3, #0]
          }
          MEMCPY(from, &saddr, *fromlen);
 800ae36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	f107 0310 	add.w	r3, r7, #16
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800ae42:	f00b fc2a 	bl	801669a <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	f003 0301 	and.w	r3, r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d13b      	bne.n	800aec8 <lwip_recvfrom+0x344>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
 800ae50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae5a:	2b10      	cmp	r3, #16
 800ae5c:	d111      	bne.n	800ae82 <lwip_recvfrom+0x2fe>
 800ae5e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ae60:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	dd0b      	ble.n	800ae82 <lwip_recvfrom+0x2fe>
        sock->lastdata = buf;
 800ae6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae6e:	605a      	str	r2, [r3, #4]
        sock->lastoffset += copylen;
 800ae70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae72:	891a      	ldrh	r2, [r3, #8]
 800ae74:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ae78:	4413      	add	r3, r2
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae7e:	811a      	strh	r2, [r3, #8]
 800ae80:	e022      	b.n	800aec8 <lwip_recvfrom+0x344>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
 800ae82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae84:	2200      	movs	r2, #0
 800ae86:	605a      	str	r2, [r3, #4]
        sock->lastoffset = 0;
 800ae88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	811a      	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800ae8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae98:	2b10      	cmp	r3, #16
 800ae9a:	d10f      	bne.n	800aebc <lwip_recvfrom+0x338>
          pbuf_free((struct pbuf *)buf);
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f002 fbbe 	bl	800d620 <pbuf_free>
 800aea4:	e00e      	b.n	800aec4 <lwip_recvfrom+0x340>
 800aea6:	bf00      	nop
 800aea8:	2000dc70 	.word	0x2000dc70
 800aeac:	0801810c 	.word	0x0801810c
 800aeb0:	08018224 	.word	0x08018224
 800aeb4:	08018150 	.word	0x08018150
 800aeb8:	08018230 	.word	0x08018230
        } else {
          netbuf_delete((struct netbuf *)buf);
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7ff fa3c 	bl	800a33c <netbuf_delete>
        }
        buf = NULL;
 800aec4:	2300      	movs	r3, #0
 800aec6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
    }
  } while (!done);
 800aec8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f43f ae71 	beq.w	800abb4 <lwip_recvfrom+0x30>

  sock_set_errno(sock, 0);
 800aed2:	2300      	movs	r3, #0
 800aed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aedc:	741a      	strb	r2, [r3, #16]
 800aede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <lwip_recvfrom+0x366>
 800aee4:	4a03      	ldr	r2, [pc, #12]	; (800aef4 <lwip_recvfrom+0x370>)
 800aee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee8:	6013      	str	r3, [r2, #0]
  return off;
 800aeea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	375c      	adds	r7, #92	; 0x5c
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd90      	pop	{r4, r7, pc}
 800aef4:	2000dc70 	.word	0x2000dc70

0800aef8 <lwip_recv>:
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
}

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af02      	add	r7, sp, #8
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800af06:	2300      	movs	r3, #0
 800af08:	9301      	str	r3, [sp, #4]
 800af0a:	2300      	movs	r3, #0
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	68b9      	ldr	r1, [r7, #8]
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f7ff fe35 	bl	800ab84 <lwip_recvfrom>
 800af1a:	4603      	mov	r3, r0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b08a      	sub	sp, #40	; 0x28
 800af28:	af02      	add	r7, sp, #8
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
 800af30:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f7ff fa94 	bl	800a460 <get_socket>
 800af38:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d102      	bne.n	800af46 <lwip_send+0x22>
    return -1;
 800af40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af44:	e04b      	b.n	800afde <lwip_send+0xba>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af50:	2b10      	cmp	r3, #16
 800af52:	d00b      	beq.n	800af6c <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800af54:	2300      	movs	r3, #0
 800af56:	9301      	str	r3, [sp, #4]
 800af58:	2300      	movs	r3, #0
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	68b9      	ldr	r1, [r7, #8]
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f000 f842 	bl	800afec <lwip_sendto>
 800af68:	4603      	mov	r3, r0
 800af6a:	e038      	b.n	800afde <lwip_send+0xba>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	10db      	asrs	r3, r3, #3
 800af70:	b25b      	sxtb	r3, r3
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	b25b      	sxtb	r3, r3
  write_flags = NETCONN_COPY |
 800af78:	f043 0301 	orr.w	r3, r3, #1
 800af7c:	b25a      	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	105b      	asrs	r3, r3, #1
 800af82:	b25b      	sxtb	r3, r3
 800af84:	f003 0304 	and.w	r3, r3, #4
 800af88:	b25b      	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800af8a:	4313      	orrs	r3, r2
 800af8c:	b25b      	sxtb	r3, r3
  write_flags = NETCONN_COPY |
 800af8e:	76fb      	strb	r3, [r7, #27]
  written = 0;
 800af90:	2300      	movs	r3, #0
 800af92:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	6818      	ldr	r0, [r3, #0]
 800af98:	7efa      	ldrb	r2, [r7, #27]
 800af9a:	f107 0310 	add.w	r3, r7, #16
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	4613      	mov	r3, r2
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	68b9      	ldr	r1, [r7, #8]
 800afa6:	f7fd fa6f 	bl	8008488 <netconn_write_partly>
 800afaa:	4603      	mov	r3, r0
 800afac:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800afae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7ff f9a4 	bl	800a300 <err_to_errno>
 800afb8:	6178      	str	r0, [r7, #20]
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	741a      	strb	r2, [r3, #16]
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <lwip_send+0xaa>
 800afc8:	4a07      	ldr	r2, [pc, #28]	; (800afe8 <lwip_send+0xc4>)
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? (int)written : -1);
 800afce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d101      	bne.n	800afda <lwip_send+0xb6>
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	e001      	b.n	800afde <lwip_send+0xba>
 800afda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3720      	adds	r7, #32
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	2000dc70 	.word	0x2000dc70

0800afec <lwip_sendto>:
}

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b08e      	sub	sp, #56	; 0x38
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
 800aff8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f7ff fa30 	bl	800a460 <get_socket>
 800b000:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800b002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b004:	2b00      	cmp	r3, #0
 800b006:	d102      	bne.n	800b00e <lwip_sendto+0x22>
    return -1;
 800b008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b00c:	e094      	b.n	800b138 <lwip_sendto+0x14c>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800b00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b018:	2b10      	cmp	r3, #16
 800b01a:	d107      	bne.n	800b02c <lwip_sendto+0x40>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	68b9      	ldr	r1, [r7, #8]
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f7ff ff7e 	bl	800af24 <lwip_send>
 800b028:	4603      	mov	r3, r0
 800b02a:	e085      	b.n	800b138 <lwip_sendto+0x14c>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b032:	d306      	bcc.n	800b042 <lwip_sendto+0x56>
 800b034:	4b42      	ldr	r3, [pc, #264]	; (800b140 <lwip_sendto+0x154>)
 800b036:	f240 427b 	movw	r2, #1147	; 0x47b
 800b03a:	4942      	ldr	r1, [pc, #264]	; (800b144 <lwip_sendto+0x158>)
 800b03c:	4842      	ldr	r0, [pc, #264]	; (800b148 <lwip_sendto+0x15c>)
 800b03e:	f00b fb3f 	bl	80166c0 <iprintf>
  short_size = (u16_t)size;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800b046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d102      	bne.n	800b052 <lwip_sendto+0x66>
 800b04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d024      	beq.n	800b09c <lwip_sendto+0xb0>
 800b052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b054:	2b10      	cmp	r3, #16
 800b056:	d108      	bne.n	800b06a <lwip_sendto+0x7e>
 800b058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b05a:	785b      	ldrb	r3, [r3, #1]
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d104      	bne.n	800b06a <lwip_sendto+0x7e>
 800b060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b062:	f003 0303 	and.w	r3, r3, #3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d018      	beq.n	800b09c <lwip_sendto+0xb0>
 800b06a:	4b35      	ldr	r3, [pc, #212]	; (800b140 <lwip_sendto+0x154>)
 800b06c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800b070:	4936      	ldr	r1, [pc, #216]	; (800b14c <lwip_sendto+0x160>)
 800b072:	4835      	ldr	r0, [pc, #212]	; (800b148 <lwip_sendto+0x15c>)
 800b074:	f00b fb24 	bl	80166c0 <iprintf>
 800b078:	f06f 000f 	mvn.w	r0, #15
 800b07c:	f7ff f940 	bl	800a300 <err_to_errno>
 800b080:	62b8      	str	r0, [r7, #40]	; 0x28
 800b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b084:	b2da      	uxtb	r2, r3
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	741a      	strb	r2, [r3, #16]
 800b08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <lwip_sendto+0xaa>
 800b090:	4a2f      	ldr	r2, [pc, #188]	; (800b150 <lwip_sendto+0x164>)
 800b092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b09a:	e04d      	b.n	800b138 <lwip_sendto+0x14c>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800b09c:	2300      	movs	r3, #0
 800b09e:	61bb      	str	r3, [r7, #24]
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	617b      	str	r3, [r7, #20]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800b0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00a      	beq.n	800b0c0 <lwip_sendto+0xd4>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800b0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	61fb      	str	r3, [r7, #28]
 800b0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0b2:	885b      	ldrh	r3, [r3, #2]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f001 f89f 	bl	800c1f8 <lwip_htons>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 800b0be:	e003      	b.n	800b0c8 <lwip_sendto+0xdc>
  } else {
    remote_port = 0;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	61fb      	str	r3, [r7, #28]
  }
  netbuf_fromport(&buf) = remote_port;
 800b0c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b0ca:	843b      	strh	r3, [r7, #32]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800b0cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b0ce:	f107 0314 	add.w	r3, r7, #20
 800b0d2:	68b9      	ldr	r1, [r7, #8]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff f979 	bl	800a3cc <netbuf_ref>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800b0e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d10a      	bne.n	800b0fe <lwip_sendto+0x112>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f107 0214 	add.w	r2, r7, #20
 800b0f0:	4611      	mov	r1, r2
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7fd f99a 	bl	800842c <netconn_send>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800b0fe:	f107 0314 	add.w	r3, r7, #20
 800b102:	4618      	mov	r0, r3
 800b104:	f7ff f93a 	bl	800a37c <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800b108:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7ff f8f7 	bl	800a300 <err_to_errno>
 800b112:	6278      	str	r0, [r7, #36]	; 0x24
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	b2da      	uxtb	r2, r3
 800b118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11a:	741a      	strb	r2, [r3, #16]
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d002      	beq.n	800b128 <lwip_sendto+0x13c>
 800b122:	4a0b      	ldr	r2, [pc, #44]	; (800b150 <lwip_sendto+0x164>)
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b126:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? short_size : -1);
 800b128:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <lwip_sendto+0x148>
 800b130:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b132:	e001      	b.n	800b138 <lwip_sendto+0x14c>
 800b134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3738      	adds	r7, #56	; 0x38
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	0801810c 	.word	0x0801810c
 800b144:	080182d0 	.word	0x080182d0
 800b148:	08018150 	.word	0x08018150
 800b14c:	080182f4 	.word	0x080182f4
 800b150:	2000dc70 	.word	0x2000dc70

0800b154 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	2b02      	cmp	r3, #2
 800b164:	d00d      	beq.n	800b182 <lwip_socket+0x2e>
 800b166:	2b03      	cmp	r3, #3
 800b168:	d002      	beq.n	800b170 <lwip_socket+0x1c>
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d016      	beq.n	800b19c <lwip_socket+0x48>
 800b16e:	e01c      	b.n	800b1aa <lwip_socket+0x56>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	b2db      	uxtb	r3, r3
 800b174:	4a21      	ldr	r2, [pc, #132]	; (800b1fc <lwip_socket+0xa8>)
 800b176:	4619      	mov	r1, r3
 800b178:	2040      	movs	r0, #64	; 0x40
 800b17a:	f7fc fde5 	bl	8007d48 <netconn_new_with_proto_and_callback>
 800b17e:	6178      	str	r0, [r7, #20]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 800b180:	e019      	b.n	800b1b6 <lwip_socket+0x62>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2b88      	cmp	r3, #136	; 0x88
 800b186:	d101      	bne.n	800b18c <lwip_socket+0x38>
 800b188:	2321      	movs	r3, #33	; 0x21
 800b18a:	e000      	b.n	800b18e <lwip_socket+0x3a>
 800b18c:	2320      	movs	r3, #32
 800b18e:	4a1b      	ldr	r2, [pc, #108]	; (800b1fc <lwip_socket+0xa8>)
 800b190:	2100      	movs	r1, #0
 800b192:	4618      	mov	r0, r3
 800b194:	f7fc fdd8 	bl	8007d48 <netconn_new_with_proto_and_callback>
 800b198:	6178      	str	r0, [r7, #20]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 800b19a:	e00c      	b.n	800b1b6 <lwip_socket+0x62>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 800b19c:	4a17      	ldr	r2, [pc, #92]	; (800b1fc <lwip_socket+0xa8>)
 800b19e:	2100      	movs	r1, #0
 800b1a0:	2010      	movs	r0, #16
 800b1a2:	f7fc fdd1 	bl	8007d48 <netconn_new_with_proto_and_callback>
 800b1a6:	6178      	str	r0, [r7, #20]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 800b1a8:	e005      	b.n	800b1b6 <lwip_socket+0x62>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
 800b1aa:	4b15      	ldr	r3, [pc, #84]	; (800b200 <lwip_socket+0xac>)
 800b1ac:	2216      	movs	r2, #22
 800b1ae:	601a      	str	r2, [r3, #0]
    return -1;
 800b1b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1b4:	e01e      	b.n	800b1f4 <lwip_socket+0xa0>
  }

  if (!conn) {
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d105      	bne.n	800b1c8 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800b1bc:	4b10      	ldr	r3, [pc, #64]	; (800b200 <lwip_socket+0xac>)
 800b1be:	2269      	movs	r2, #105	; 0x69
 800b1c0:	601a      	str	r2, [r3, #0]
    return -1;
 800b1c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1c6:	e015      	b.n	800b1f4 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	6978      	ldr	r0, [r7, #20]
 800b1cc:	f7ff f99c 	bl	800a508 <alloc_socket>
 800b1d0:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1d8:	d108      	bne.n	800b1ec <lwip_socket+0x98>
    netconn_delete(conn);
 800b1da:	6978      	ldr	r0, [r7, #20]
 800b1dc:	f7fc fe2e 	bl	8007e3c <netconn_delete>
    set_errno(ENFILE);
 800b1e0:	4b07      	ldr	r3, [pc, #28]	; (800b200 <lwip_socket+0xac>)
 800b1e2:	2217      	movs	r2, #23
 800b1e4:	601a      	str	r2, [r3, #0]
    return -1;
 800b1e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1ea:	e003      	b.n	800b1f4 <lwip_socket+0xa0>
  }
  conn->socket = i;
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	619a      	str	r2, [r3, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800b1f2:	693b      	ldr	r3, [r7, #16]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3718      	adds	r7, #24
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	0800b8b1 	.word	0x0800b8b1
 800b200:	2000dc70 	.word	0x2000dc70

0800b204 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b098      	sub	sp, #96	; 0x60
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
 800b210:	603b      	str	r3, [r7, #0]
  int i, nready = 0;
 800b212:	2300      	movs	r3, #0
 800b214:	65bb      	str	r3, [r7, #88]	; 0x58
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 800b216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b21a:	653b      	str	r3, [r7, #80]	; 0x50
 800b21c:	2300      	movs	r3, #0
 800b21e:	657b      	str	r3, [r7, #84]	; 0x54
 800b220:	e007      	b.n	800b232 <lwip_selscan+0x2e>
 800b222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b224:	1c5a      	adds	r2, r3, #1
 800b226:	653a      	str	r2, [r7, #80]	; 0x50
 800b228:	2200      	movs	r2, #0
 800b22a:	701a      	strb	r2, [r3, #0]
 800b22c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b22e:	3301      	adds	r3, #1
 800b230:	657b      	str	r3, [r7, #84]	; 0x54
 800b232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b234:	2b07      	cmp	r3, #7
 800b236:	d9f4      	bls.n	800b222 <lwip_selscan+0x1e>
  FD_ZERO(&lwriteset);
 800b238:	f107 031c 	add.w	r3, r7, #28
 800b23c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b23e:	2300      	movs	r3, #0
 800b240:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b242:	e007      	b.n	800b254 <lwip_selscan+0x50>
 800b244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b246:	1c5a      	adds	r2, r3, #1
 800b248:	64ba      	str	r2, [r7, #72]	; 0x48
 800b24a:	2200      	movs	r2, #0
 800b24c:	701a      	strb	r2, [r3, #0]
 800b24e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b250:	3301      	adds	r3, #1
 800b252:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b256:	2b07      	cmp	r3, #7
 800b258:	d9f4      	bls.n	800b244 <lwip_selscan+0x40>
  FD_ZERO(&lexceptset);
 800b25a:	f107 0314 	add.w	r3, r7, #20
 800b25e:	643b      	str	r3, [r7, #64]	; 0x40
 800b260:	2300      	movs	r3, #0
 800b262:	647b      	str	r3, [r7, #68]	; 0x44
 800b264:	e007      	b.n	800b276 <lwip_selscan+0x72>
 800b266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b268:	1c5a      	adds	r2, r3, #1
 800b26a:	643a      	str	r2, [r7, #64]	; 0x40
 800b26c:	2200      	movs	r2, #0
 800b26e:	701a      	strb	r2, [r3, #0]
 800b270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b272:	3301      	adds	r3, #1
 800b274:	647b      	str	r3, [r7, #68]	; 0x44
 800b276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b278:	2b07      	cmp	r3, #7
 800b27a:	d9f4      	bls.n	800b266 <lwip_selscan+0x62>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800b27c:	2300      	movs	r3, #0
 800b27e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b280:	e0df      	b.n	800b442 <lwip_selscan+0x23e>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00d      	beq.n	800b2a4 <lwip_selscan+0xa0>
 800b288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b28a:	095a      	lsrs	r2, r3, #5
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b292:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b294:	f002 021f 	and.w	r2, r2, #31
 800b298:	2101      	movs	r1, #1
 800b29a:	fa01 f202 	lsl.w	r2, r1, r2
 800b29e:	4013      	ands	r3, r2
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d123      	bne.n	800b2ec <lwip_selscan+0xe8>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00d      	beq.n	800b2c6 <lwip_selscan+0xc2>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 800b2aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2ac:	095a      	lsrs	r2, r3, #5
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2b6:	f002 021f 	and.w	r2, r2, #31
 800b2ba:	2101      	movs	r1, #1
 800b2bc:	fa01 f202 	lsl.w	r2, r1, r2
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d112      	bne.n	800b2ec <lwip_selscan+0xe8>
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f000 80b6 	beq.w	800b43a <lwip_selscan+0x236>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 800b2ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2d0:	095a      	lsrs	r2, r3, #5
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2da:	f002 021f 	and.w	r2, r2, #31
 800b2de:	2101      	movs	r1, #1
 800b2e0:	fa01 f202 	lsl.w	r2, r1, r2
 800b2e4:	4013      	ands	r3, r2
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 80a7 	beq.w	800b43a <lwip_selscan+0x236>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 800b2ec:	f00b f95a 	bl	80165a4 <sys_arch_protect>
 800b2f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    sock = tryget_socket(i);
 800b2f2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b2f4:	f7ff f8e0 	bl	800a4b8 <tryget_socket>
 800b2f8:	63b8      	str	r0, [r7, #56]	; 0x38
    if (sock != NULL) {
 800b2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f000 8098 	beq.w	800b432 <lwip_selscan+0x22e>
      void* lastdata = sock->lastdata;
 800b302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	637b      	str	r3, [r7, #52]	; 0x34
      s16_t rcvevent = sock->rcvevent;
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	895b      	ldrh	r3, [r3, #10]
 800b30c:	867b      	strh	r3, [r7, #50]	; 0x32
      u16_t sendevent = sock->sendevent;
 800b30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b310:	899b      	ldrh	r3, [r3, #12]
 800b312:	863b      	strh	r3, [r7, #48]	; 0x30
      u16_t errevent = sock->errevent;
 800b314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b316:	89db      	ldrh	r3, [r3, #14]
 800b318:	85fb      	strh	r3, [r7, #46]	; 0x2e
      SYS_ARCH_UNPROTECT(lev);
 800b31a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b31c:	f00b f950 	bl	80165c0 <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d02c      	beq.n	800b380 <lwip_selscan+0x17c>
 800b326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b328:	095a      	lsrs	r2, r3, #5
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b330:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b332:	f002 021f 	and.w	r2, r2, #31
 800b336:	2101      	movs	r1, #1
 800b338:	fa01 f202 	lsl.w	r2, r1, r2
 800b33c:	4013      	ands	r3, r2
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d01e      	beq.n	800b380 <lwip_selscan+0x17c>
 800b342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b344:	2b00      	cmp	r3, #0
 800b346:	d103      	bne.n	800b350 <lwip_selscan+0x14c>
 800b348:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	dd17      	ble.n	800b380 <lwip_selscan+0x17c>
        FD_SET(i, &lreadset);
 800b350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b352:	095a      	lsrs	r2, r3, #5
 800b354:	0093      	lsls	r3, r2, #2
 800b356:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800b35a:	440b      	add	r3, r1
 800b35c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b360:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b362:	f001 011f 	and.w	r1, r1, #31
 800b366:	2001      	movs	r0, #1
 800b368:	fa00 f101 	lsl.w	r1, r0, r1
 800b36c:	4319      	orrs	r1, r3
 800b36e:	0093      	lsls	r3, r2, #2
 800b370:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b374:	4413      	add	r3, r2
 800b376:	f843 1c3c 	str.w	r1, [r3, #-60]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
 800b37a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b37c:	3301      	adds	r3, #1
 800b37e:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d028      	beq.n	800b3d8 <lwip_selscan+0x1d4>
 800b386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b388:	095a      	lsrs	r2, r3, #5
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b390:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b392:	f002 021f 	and.w	r2, r2, #31
 800b396:	2101      	movs	r1, #1
 800b398:	fa01 f202 	lsl.w	r2, r1, r2
 800b39c:	4013      	ands	r3, r2
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d01a      	beq.n	800b3d8 <lwip_selscan+0x1d4>
 800b3a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d017      	beq.n	800b3d8 <lwip_selscan+0x1d4>
        FD_SET(i, &lwriteset);
 800b3a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3aa:	095a      	lsrs	r2, r3, #5
 800b3ac:	0093      	lsls	r3, r2, #2
 800b3ae:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800b3b2:	440b      	add	r3, r1
 800b3b4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b3b8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b3ba:	f001 011f 	and.w	r1, r1, #31
 800b3be:	2001      	movs	r0, #1
 800b3c0:	fa00 f101 	lsl.w	r1, r0, r1
 800b3c4:	4319      	orrs	r1, r3
 800b3c6:	0093      	lsls	r3, r2, #2
 800b3c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f843 1c44 	str.w	r1, [r3, #-68]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
 800b3d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d02e      	beq.n	800b43c <lwip_selscan+0x238>
 800b3de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3e0:	095a      	lsrs	r2, r3, #5
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3ea:	f002 021f 	and.w	r2, r2, #31
 800b3ee:	2101      	movs	r1, #1
 800b3f0:	fa01 f202 	lsl.w	r2, r1, r2
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d020      	beq.n	800b43c <lwip_selscan+0x238>
 800b3fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d01d      	beq.n	800b43c <lwip_selscan+0x238>
        FD_SET(i, &lexceptset);
 800b400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b402:	095a      	lsrs	r2, r3, #5
 800b404:	0093      	lsls	r3, r2, #2
 800b406:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800b40a:	440b      	add	r3, r1
 800b40c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b410:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b412:	f001 011f 	and.w	r1, r1, #31
 800b416:	2001      	movs	r0, #1
 800b418:	fa00 f101 	lsl.w	r1, r0, r1
 800b41c:	4319      	orrs	r1, r3
 800b41e:	0093      	lsls	r3, r2, #2
 800b420:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b424:	4413      	add	r3, r2
 800b426:	f843 1c4c 	str.w	r1, [r3, #-76]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 800b42a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b42c:	3301      	adds	r3, #1
 800b42e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b430:	e004      	b.n	800b43c <lwip_selscan+0x238>
      }
    } else {
      SYS_ARCH_UNPROTECT(lev);
 800b432:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b434:	f00b f8c4 	bl	80165c0 <sys_arch_unprotect>
 800b438:	e000      	b.n	800b43c <lwip_selscan+0x238>
      continue;
 800b43a:	bf00      	nop
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800b43c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b43e:	3301      	adds	r3, #1
 800b440:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b442:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	429a      	cmp	r2, r3
 800b448:	f6ff af1b 	blt.w	800b282 <lwip_selscan+0x7e>
      /* continue on to next FD in list */
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 800b44c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b44e:	461a      	mov	r2, r3
 800b450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b454:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b458:	e882 0003 	stmia.w	r2, {r0, r1}
  *writeset_out = lwriteset;
 800b45c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b45e:	461a      	mov	r2, r3
 800b460:	f107 031c 	add.w	r3, r7, #28
 800b464:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b468:	e882 0003 	stmia.w	r2, {r0, r1}
  *exceptset_out = lexceptset;
 800b46c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b46e:	461a      	mov	r2, r3
 800b470:	f107 0314 	add.w	r3, r7, #20
 800b474:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b478:	e882 0003 	stmia.w	r2, {r0, r1}

  LWIP_ASSERT("nready >= 0", nready >= 0);
 800b47c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b47e:	2b00      	cmp	r3, #0
 800b480:	da06      	bge.n	800b490 <lwip_selscan+0x28c>
 800b482:	4b06      	ldr	r3, [pc, #24]	; (800b49c <lwip_selscan+0x298>)
 800b484:	f240 5256 	movw	r2, #1366	; 0x556
 800b488:	4905      	ldr	r1, [pc, #20]	; (800b4a0 <lwip_selscan+0x29c>)
 800b48a:	4806      	ldr	r0, [pc, #24]	; (800b4a4 <lwip_selscan+0x2a0>)
 800b48c:	f00b f918 	bl	80166c0 <iprintf>
  return nready;
 800b490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800b492:	4618      	mov	r0, r3
 800b494:	3760      	adds	r7, #96	; 0x60
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	0801810c 	.word	0x0801810c
 800b4a0:	08018314 	.word	0x08018314
 800b4a4:	08018150 	.word	0x08018150

0800b4a8 <lwip_select>:

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 800b4a8:	b590      	push	{r4, r7, lr}
 800b4aa:	b09f      	sub	sp, #124	; 0x7c
 800b4ac:	af04      	add	r7, sp, #16
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
 800b4b4:	603b      	str	r3, [r7, #0]
  u32_t waitres = 0;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	667b      	str	r3, [r7, #100]	; 0x64
                  timeout ? (s32_t)timeout->tv_sec : (s32_t)-1,
                  timeout ? (s32_t)timeout->tv_usec : (s32_t)-1));

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800b4ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b4be:	9302      	str	r3, [sp, #8]
 800b4c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b4ca:	9300      	str	r3, [sp, #0]
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	68b9      	ldr	r1, [r7, #8]
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7ff fe96 	bl	800b204 <lwip_selscan>
 800b4d8:	6638      	str	r0, [r7, #96]	; 0x60

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
 800b4da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f040 81b2 	bne.w	800b846 <lwip_select+0x39e>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 800b4e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d009      	beq.n	800b4fc <lwip_select+0x54>
 800b4e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4ee:	4323      	orrs	r3, r4
 800b4f0:	d104      	bne.n	800b4fc <lwip_select+0x54>
 800b4f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f000 81a7 	beq.w	800b84a <lwip_select+0x3a2>
    /* None ready: add our semaphore to list:
       We don't actually need any dynamic memory. Our entry on the
       list is only valid while we are in this function, so it's ok
       to use local variables. */

    select_cb.next = NULL;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	617b      	str	r3, [r7, #20]
    select_cb.prev = NULL;
 800b500:	2300      	movs	r3, #0
 800b502:	61bb      	str	r3, [r7, #24]
    select_cb.readset = readset;
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	61fb      	str	r3, [r7, #28]
    select_cb.writeset = writeset;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	623b      	str	r3, [r7, #32]
    select_cb.exceptset = exceptset;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	627b      	str	r3, [r7, #36]	; 0x24
    select_cb.sem_signalled = 0;
 800b510:	2300      	movs	r3, #0
 800b512:	62bb      	str	r3, [r7, #40]	; 0x28
#if LWIP_NETCONN_SEM_PER_THREAD
    select_cb.sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    if (sys_sem_new(&select_cb.sem, 0) != ERR_OK) {
 800b514:	f107 0314 	add.w	r3, r7, #20
 800b518:	3318      	adds	r3, #24
 800b51a:	2100      	movs	r1, #0
 800b51c:	4618      	mov	r0, r3
 800b51e:	f00a ff43 	bl	80163a8 <sys_sem_new>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d005      	beq.n	800b534 <lwip_select+0x8c>
      /* failed to create semaphore */
      set_errno(ENOMEM);
 800b528:	4ba2      	ldr	r3, [pc, #648]	; (800b7b4 <lwip_select+0x30c>)
 800b52a:	220c      	movs	r2, #12
 800b52c:	601a      	str	r2, [r3, #0]
      return -1;
 800b52e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b532:	e1af      	b.n	800b894 <lwip_select+0x3ec>
    }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    /* Protect the select_cb_list */
    SYS_ARCH_PROTECT(lev);
 800b534:	f00b f836 	bl	80165a4 <sys_arch_protect>
 800b538:	6538      	str	r0, [r7, #80]	; 0x50

    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
 800b53a:	4b9f      	ldr	r3, [pc, #636]	; (800b7b8 <lwip_select+0x310>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	617b      	str	r3, [r7, #20]
    if (select_cb_list != NULL) {
 800b540:	4b9d      	ldr	r3, [pc, #628]	; (800b7b8 <lwip_select+0x310>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d004      	beq.n	800b552 <lwip_select+0xaa>
      select_cb_list->prev = &select_cb;
 800b548:	4b9b      	ldr	r3, [pc, #620]	; (800b7b8 <lwip_select+0x310>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f107 0214 	add.w	r2, r7, #20
 800b550:	605a      	str	r2, [r3, #4]
    }
    select_cb_list = &select_cb;
 800b552:	4a99      	ldr	r2, [pc, #612]	; (800b7b8 <lwip_select+0x310>)
 800b554:	f107 0314 	add.w	r3, r7, #20
 800b558:	6013      	str	r3, [r2, #0]
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
 800b55a:	4b98      	ldr	r3, [pc, #608]	; (800b7bc <lwip_select+0x314>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	3301      	adds	r3, #1
 800b560:	4a96      	ldr	r2, [pc, #600]	; (800b7bc <lwip_select+0x314>)
 800b562:	6013      	str	r3, [r2, #0]

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);
 800b564:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b566:	f00b f82b 	bl	80165c0 <sys_arch_unprotect>

    /* Increase select_waiting for each socket we are interested in */
    maxfdp2 = maxfdp1;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	657b      	str	r3, [r7, #84]	; 0x54
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800b56e:	2300      	movs	r3, #0
 800b570:	65bb      	str	r3, [r7, #88]	; 0x58
 800b572:	e05d      	b.n	800b630 <lwip_select+0x188>
      if ((readset && FD_ISSET(i, readset)) ||
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00d      	beq.n	800b596 <lwip_select+0xee>
 800b57a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b57c:	095a      	lsrs	r2, r3, #5
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b586:	f002 021f 	and.w	r2, r2, #31
 800b58a:	2101      	movs	r1, #1
 800b58c:	fa01 f202 	lsl.w	r2, r1, r2
 800b590:	4013      	ands	r3, r2
 800b592:	2b00      	cmp	r3, #0
 800b594:	d121      	bne.n	800b5da <lwip_select+0x132>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00d      	beq.n	800b5b8 <lwip_select+0x110>
          (writeset && FD_ISSET(i, writeset)) ||
 800b59c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b59e:	095a      	lsrs	r2, r3, #5
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5a8:	f002 021f 	and.w	r2, r2, #31
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	fa01 f202 	lsl.w	r2, r1, r2
 800b5b2:	4013      	ands	r3, r2
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d110      	bne.n	800b5da <lwip_select+0x132>
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d035      	beq.n	800b62a <lwip_select+0x182>
          (exceptset && FD_ISSET(i, exceptset))) {
 800b5be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5c0:	095a      	lsrs	r2, r3, #5
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5ca:	f002 021f 	and.w	r2, r2, #31
 800b5ce:	2101      	movs	r1, #1
 800b5d0:	fa01 f202 	lsl.w	r2, r1, r2
 800b5d4:	4013      	ands	r3, r2
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d027      	beq.n	800b62a <lwip_select+0x182>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
 800b5da:	f00a ffe3 	bl	80165a4 <sys_arch_protect>
 800b5de:	6538      	str	r0, [r7, #80]	; 0x50
        sock = tryget_socket(i);
 800b5e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b5e2:	f7fe ff69 	bl	800a4b8 <tryget_socket>
 800b5e6:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (sock != NULL) {
 800b5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d011      	beq.n	800b612 <lwip_select+0x16a>
          sock->select_waiting++;
 800b5ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5f0:	7c5b      	ldrb	r3, [r3, #17]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	b2da      	uxtb	r2, r3
 800b5f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5f8:	745a      	strb	r2, [r3, #17]
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 800b5fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5fc:	7c5b      	ldrb	r3, [r3, #17]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d110      	bne.n	800b624 <lwip_select+0x17c>
 800b602:	4b6f      	ldr	r3, [pc, #444]	; (800b7c0 <lwip_select+0x318>)
 800b604:	f240 52ab 	movw	r2, #1451	; 0x5ab
 800b608:	496e      	ldr	r1, [pc, #440]	; (800b7c4 <lwip_select+0x31c>)
 800b60a:	486f      	ldr	r0, [pc, #444]	; (800b7c8 <lwip_select+0x320>)
 800b60c:	f00b f858 	bl	80166c0 <iprintf>
 800b610:	e008      	b.n	800b624 <lwip_select+0x17c>
        } else {
          /* Not a valid socket */
          nready = -1;
 800b612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b616:	663b      	str	r3, [r7, #96]	; 0x60
          maxfdp2 = i;
 800b618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b61a:	657b      	str	r3, [r7, #84]	; 0x54
          SYS_ARCH_UNPROTECT(lev);
 800b61c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b61e:	f00a ffcf 	bl	80165c0 <sys_arch_unprotect>
          break;
 800b622:	e009      	b.n	800b638 <lwip_select+0x190>
        }
        SYS_ARCH_UNPROTECT(lev);
 800b624:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b626:	f00a ffcb 	bl	80165c0 <sys_arch_unprotect>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800b62a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b62c:	3301      	adds	r3, #1
 800b62e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b630:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	429a      	cmp	r2, r3
 800b636:	db9d      	blt.n	800b574 <lwip_select+0xcc>
      }
    }

    if (nready >= 0) {
 800b638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	db39      	blt.n	800b6b2 <lwip_select+0x20a>
      /* Call lwip_selscan again: there could have been events between
         the last scan (without us on the list) and putting us on the list! */
      nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800b63e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b642:	9302      	str	r3, [sp, #8]
 800b644:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b648:	9301      	str	r3, [sp, #4]
 800b64a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	68b9      	ldr	r1, [r7, #8]
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f7ff fdd4 	bl	800b204 <lwip_selscan>
 800b65c:	6638      	str	r0, [r7, #96]	; 0x60
      if (!nready) {
 800b65e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b660:	2b00      	cmp	r3, #0
 800b662:	d126      	bne.n	800b6b2 <lwip_select+0x20a>
        /* Still none ready, just wait to be woken */
        if (timeout == 0) {
 800b664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b666:	2b00      	cmp	r3, #0
 800b668:	d102      	bne.n	800b670 <lwip_select+0x1c8>
          /* Wait forever */
          msectimeout = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b66e:	e018      	b.n	800b6a2 <lwip_select+0x1fa>
        } else {
          msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
 800b670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b672:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b676:	461a      	mov	r2, r3
 800b678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b67c:	fb03 f202 	mul.w	r2, r3, r2
 800b680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b688:	4950      	ldr	r1, [pc, #320]	; (800b7cc <lwip_select+0x324>)
 800b68a:	fb81 0103 	smull	r0, r1, r1, r3
 800b68e:	1189      	asrs	r1, r1, #6
 800b690:	17db      	asrs	r3, r3, #31
 800b692:	1acb      	subs	r3, r1, r3
 800b694:	4413      	add	r3, r2
 800b696:	65fb      	str	r3, [r7, #92]	; 0x5c
          if (msectimeout == 0) {
 800b698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <lwip_select+0x1fa>
            /* Wait 1ms at least (0 means wait forever) */
            msectimeout = 1;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	65fb      	str	r3, [r7, #92]	; 0x5c
          }
        }

        waitres = sys_arch_sem_wait(SELECT_SEM_PTR(select_cb.sem), msectimeout);
 800b6a2:	f107 0314 	add.w	r3, r7, #20
 800b6a6:	3318      	adds	r3, #24
 800b6a8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f00a fea4 	bl	80163f8 <sys_arch_sem_wait>
 800b6b0:	6678      	str	r0, [r7, #100]	; 0x64
#endif
      }
    }

    /* Decrease select_waiting for each socket we are interested in */
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6b6:	e05b      	b.n	800b770 <lwip_select+0x2c8>
      if ((readset && FD_ISSET(i, readset)) ||
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00d      	beq.n	800b6da <lwip_select+0x232>
 800b6be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6c0:	095a      	lsrs	r2, r3, #5
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6ca:	f002 021f 	and.w	r2, r2, #31
 800b6ce:	2101      	movs	r1, #1
 800b6d0:	fa01 f202 	lsl.w	r2, r1, r2
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d121      	bne.n	800b71e <lwip_select+0x276>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00d      	beq.n	800b6fc <lwip_select+0x254>
          (writeset && FD_ISSET(i, writeset)) ||
 800b6e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6e2:	095a      	lsrs	r2, r3, #5
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6ec:	f002 021f 	and.w	r2, r2, #31
 800b6f0:	2101      	movs	r1, #1
 800b6f2:	fa01 f202 	lsl.w	r2, r1, r2
 800b6f6:	4013      	ands	r3, r2
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d110      	bne.n	800b71e <lwip_select+0x276>
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d033      	beq.n	800b76a <lwip_select+0x2c2>
          (exceptset && FD_ISSET(i, exceptset))) {
 800b702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b704:	095a      	lsrs	r2, r3, #5
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b70c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b70e:	f002 021f 	and.w	r2, r2, #31
 800b712:	2101      	movs	r1, #1
 800b714:	fa01 f202 	lsl.w	r2, r1, r2
 800b718:	4013      	ands	r3, r2
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d025      	beq.n	800b76a <lwip_select+0x2c2>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
 800b71e:	f00a ff41 	bl	80165a4 <sys_arch_protect>
 800b722:	6538      	str	r0, [r7, #80]	; 0x50
        sock = tryget_socket(i);
 800b724:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b726:	f7fe fec7 	bl	800a4b8 <tryget_socket>
 800b72a:	64b8      	str	r0, [r7, #72]	; 0x48
        if (sock != NULL) {
 800b72c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d015      	beq.n	800b75e <lwip_select+0x2b6>
          /* for now, handle select_waiting==0... */
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 800b732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b734:	7c5b      	ldrb	r3, [r3, #17]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d106      	bne.n	800b748 <lwip_select+0x2a0>
 800b73a:	4b21      	ldr	r3, [pc, #132]	; (800b7c0 <lwip_select+0x318>)
 800b73c:	f240 52d9 	movw	r2, #1497	; 0x5d9
 800b740:	4920      	ldr	r1, [pc, #128]	; (800b7c4 <lwip_select+0x31c>)
 800b742:	4821      	ldr	r0, [pc, #132]	; (800b7c8 <lwip_select+0x320>)
 800b744:	f00a ffbc 	bl	80166c0 <iprintf>
          if (sock->select_waiting > 0) {
 800b748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b74a:	7c5b      	ldrb	r3, [r3, #17]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d009      	beq.n	800b764 <lwip_select+0x2bc>
            sock->select_waiting--;
 800b750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b752:	7c5b      	ldrb	r3, [r3, #17]
 800b754:	3b01      	subs	r3, #1
 800b756:	b2da      	uxtb	r2, r3
 800b758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b75a:	745a      	strb	r2, [r3, #17]
 800b75c:	e002      	b.n	800b764 <lwip_select+0x2bc>
          }
        } else {
          /* Not a valid socket */
          nready = -1;
 800b75e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b762:	663b      	str	r3, [r7, #96]	; 0x60
        }
        SYS_ARCH_UNPROTECT(lev);
 800b764:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b766:	f00a ff2b 	bl	80165c0 <sys_arch_unprotect>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800b76a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b76c:	3301      	adds	r3, #1
 800b76e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b770:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b774:	429a      	cmp	r2, r3
 800b776:	db9f      	blt.n	800b6b8 <lwip_select+0x210>
      }
    }
    /* Take us off the list */
    SYS_ARCH_PROTECT(lev);
 800b778:	f00a ff14 	bl	80165a4 <sys_arch_protect>
 800b77c:	6538      	str	r0, [r7, #80]	; 0x50
    if (select_cb.next != NULL) {
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <lwip_select+0x2e2>
      select_cb.next->prev = select_cb.prev;
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	69ba      	ldr	r2, [r7, #24]
 800b788:	605a      	str	r2, [r3, #4]
    }
    if (select_cb_list == &select_cb) {
 800b78a:	4b0b      	ldr	r3, [pc, #44]	; (800b7b8 <lwip_select+0x310>)
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	f107 0314 	add.w	r3, r7, #20
 800b792:	429a      	cmp	r2, r3
 800b794:	d11e      	bne.n	800b7d4 <lwip_select+0x32c>
      LWIP_ASSERT("select_cb.prev == NULL", select_cb.prev == NULL);
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d006      	beq.n	800b7aa <lwip_select+0x302>
 800b79c:	4b08      	ldr	r3, [pc, #32]	; (800b7c0 <lwip_select+0x318>)
 800b79e:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800b7a2:	490b      	ldr	r1, [pc, #44]	; (800b7d0 <lwip_select+0x328>)
 800b7a4:	4808      	ldr	r0, [pc, #32]	; (800b7c8 <lwip_select+0x320>)
 800b7a6:	f00a ff8b 	bl	80166c0 <iprintf>
      select_cb_list = select_cb.next;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	4a02      	ldr	r2, [pc, #8]	; (800b7b8 <lwip_select+0x310>)
 800b7ae:	6013      	str	r3, [r2, #0]
 800b7b0:	e01d      	b.n	800b7ee <lwip_select+0x346>
 800b7b2:	bf00      	nop
 800b7b4:	2000dc70 	.word	0x2000dc70
 800b7b8:	200040e8 	.word	0x200040e8
 800b7bc:	200040ec 	.word	0x200040ec
 800b7c0:	0801810c 	.word	0x0801810c
 800b7c4:	08018320 	.word	0x08018320
 800b7c8:	08018150 	.word	0x08018150
 800b7cc:	10624dd3 	.word	0x10624dd3
 800b7d0:	0801833c 	.word	0x0801833c
    } else {
      LWIP_ASSERT("select_cb.prev != NULL", select_cb.prev != NULL);
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d106      	bne.n	800b7e8 <lwip_select+0x340>
 800b7da:	4b30      	ldr	r3, [pc, #192]	; (800b89c <lwip_select+0x3f4>)
 800b7dc:	f240 52ed 	movw	r2, #1517	; 0x5ed
 800b7e0:	492f      	ldr	r1, [pc, #188]	; (800b8a0 <lwip_select+0x3f8>)
 800b7e2:	4830      	ldr	r0, [pc, #192]	; (800b8a4 <lwip_select+0x3fc>)
 800b7e4:	f00a ff6c 	bl	80166c0 <iprintf>
      select_cb.prev->next = select_cb.next;
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	697a      	ldr	r2, [r7, #20]
 800b7ec:	601a      	str	r2, [r3, #0]
    }
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
 800b7ee:	4b2e      	ldr	r3, [pc, #184]	; (800b8a8 <lwip_select+0x400>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	4a2c      	ldr	r2, [pc, #176]	; (800b8a8 <lwip_select+0x400>)
 800b7f6:	6013      	str	r3, [r2, #0]
    SYS_ARCH_UNPROTECT(lev);
 800b7f8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b7fa:	f00a fee1 	bl	80165c0 <sys_arch_unprotect>
    if (select_cb.sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
      /* don't leave the thread-local semaphore signalled */
      sys_arch_sem_wait(select_cb.sem, 1);
    }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    sys_sem_free(&select_cb.sem);
 800b7fe:	f107 0314 	add.w	r3, r7, #20
 800b802:	3318      	adds	r3, #24
 800b804:	4618      	mov	r0, r3
 800b806:	f00a fe35 	bl	8016474 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    if (nready < 0) {
 800b80a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	da05      	bge.n	800b81c <lwip_select+0x374>
      /* This happens when a socket got closed while waiting */
      set_errno(EBADF);
 800b810:	4b26      	ldr	r3, [pc, #152]	; (800b8ac <lwip_select+0x404>)
 800b812:	2209      	movs	r2, #9
 800b814:	601a      	str	r2, [r3, #0]
      return -1;
 800b816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b81a:	e03b      	b.n	800b894 <lwip_select+0x3ec>
    }

    if (waitres == SYS_ARCH_TIMEOUT) {
 800b81c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b81e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b822:	d014      	beq.n	800b84e <lwip_select+0x3a6>
         or we would have returned earlier. */
      goto return_copy_fdsets;
    }

    /* See what's set */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800b824:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b828:	9302      	str	r3, [sp, #8]
 800b82a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b82e:	9301      	str	r3, [sp, #4]
 800b830:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	68b9      	ldr	r1, [r7, #8]
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f7ff fce1 	bl	800b204 <lwip_selscan>
 800b842:	6638      	str	r0, [r7, #96]	; 0x60
 800b844:	e004      	b.n	800b850 <lwip_select+0x3a8>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
return_copy_fdsets:
 800b846:	bf00      	nop
 800b848:	e002      	b.n	800b850 <lwip_select+0x3a8>
      goto return_copy_fdsets;
 800b84a:	bf00      	nop
 800b84c:	e000      	b.n	800b850 <lwip_select+0x3a8>
      goto return_copy_fdsets;
 800b84e:	bf00      	nop
  set_errno(0);
  if (readset) {
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d007      	beq.n	800b866 <lwip_select+0x3be>
    *readset = lreadset;
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	461a      	mov	r2, r3
 800b85a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b85e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b862:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (writeset) {
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d007      	beq.n	800b87c <lwip_select+0x3d4>
    *writeset = lwriteset;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	461a      	mov	r2, r3
 800b870:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b874:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b878:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (exceptset) {
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d007      	beq.n	800b892 <lwip_select+0x3ea>
    *exceptset = lexceptset;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	461a      	mov	r2, r3
 800b886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b88a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b88e:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  return nready;
 800b892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
}
 800b894:	4618      	mov	r0, r3
 800b896:	376c      	adds	r7, #108	; 0x6c
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd90      	pop	{r4, r7, pc}
 800b89c:	0801810c 	.word	0x0801810c
 800b8a0:	08018354 	.word	0x08018354
 800b8a4:	08018150 	.word	0x08018150
 800b8a8:	200040ec 	.word	0x200040ec
 800b8ac:	2000dc70 	.word	0x2000dc70

0800b8b0 <event_callback>:
 * Callback registered in the netconn layer for each socket-netconn.
 * Processes recvevent (data available) and wakes up tasks waiting for select.
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b088      	sub	sp, #32
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	70fb      	strb	r3, [r7, #3]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 80eb 	beq.w	800ba9e <event_callback+0x1ee>
    s = conn->socket;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	61fb      	str	r3, [r7, #28]
    if (s < 0) {
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	da18      	bge.n	800b906 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800b8d4:	f00a fe66 	bl	80165a4 <sys_arch_protect>
 800b8d8:	6178      	str	r0, [r7, #20]
      if (conn->socket < 0) {
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	da0b      	bge.n	800b8fa <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800b8e2:	78fb      	ldrb	r3, [r7, #3]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d104      	bne.n	800b8f2 <event_callback+0x42>
          conn->socket--;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	1e5a      	subs	r2, r3, #1
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800b8f2:	6978      	ldr	r0, [r7, #20]
 800b8f4:	f00a fe64 	bl	80165c0 <sys_arch_unprotect>
        return;
 800b8f8:	e0d4      	b.n	800baa4 <event_callback+0x1f4>
      }
      s = conn->socket;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	699b      	ldr	r3, [r3, #24]
 800b8fe:	61fb      	str	r3, [r7, #28]
      SYS_ARCH_UNPROTECT(lev);
 800b900:	6978      	ldr	r0, [r7, #20]
 800b902:	f00a fe5d 	bl	80165c0 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800b906:	69f8      	ldr	r0, [r7, #28]
 800b908:	f7fe fdaa 	bl	800a460 <get_socket>
 800b90c:	60f8      	str	r0, [r7, #12]
    if (!sock) {
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	f000 80c6 	beq.w	800baa2 <event_callback+0x1f2>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
 800b916:	f00a fe45 	bl	80165a4 <sys_arch_protect>
 800b91a:	6178      	str	r0, [r7, #20]
  /* Set event as required */
  switch (evt) {
 800b91c:	78fb      	ldrb	r3, [r7, #3]
 800b91e:	2b04      	cmp	r3, #4
 800b920:	d82c      	bhi.n	800b97c <event_callback+0xcc>
 800b922:	a201      	add	r2, pc, #4	; (adr r2, 800b928 <event_callback+0x78>)
 800b924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b928:	0800b93d 	.word	0x0800b93d
 800b92c:	0800b951 	.word	0x0800b951
 800b930:	0800b965 	.word	0x0800b965
 800b934:	0800b96d 	.word	0x0800b96d
 800b938:	0800b975 	.word	0x0800b975
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b942:	b29b      	uxth	r3, r3
 800b944:	3301      	adds	r3, #1
 800b946:	b29b      	uxth	r3, r3
 800b948:	b21a      	sxth	r2, r3
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	815a      	strh	r2, [r3, #10]
      break;
 800b94e:	e01d      	b.n	800b98c <event_callback+0xdc>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b956:	b29b      	uxth	r3, r3
 800b958:	3b01      	subs	r3, #1
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	b21a      	sxth	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	815a      	strh	r2, [r3, #10]
      break;
 800b962:	e013      	b.n	800b98c <event_callback+0xdc>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2201      	movs	r2, #1
 800b968:	819a      	strh	r2, [r3, #12]
      break;
 800b96a:	e00f      	b.n	800b98c <event_callback+0xdc>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2200      	movs	r2, #0
 800b970:	819a      	strh	r2, [r3, #12]
      break;
 800b972:	e00b      	b.n	800b98c <event_callback+0xdc>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2201      	movs	r2, #1
 800b978:	81da      	strh	r2, [r3, #14]
      break;
 800b97a:	e007      	b.n	800b98c <event_callback+0xdc>
    default:
      LWIP_ASSERT("unknown event", 0);
 800b97c:	4b4b      	ldr	r3, [pc, #300]	; (800baac <event_callback+0x1fc>)
 800b97e:	f240 625d 	movw	r2, #1629	; 0x65d
 800b982:	494b      	ldr	r1, [pc, #300]	; (800bab0 <event_callback+0x200>)
 800b984:	484b      	ldr	r0, [pc, #300]	; (800bab4 <event_callback+0x204>)
 800b986:	f00a fe9b 	bl	80166c0 <iprintf>
      break;
 800b98a:	bf00      	nop
  }

  if (sock->select_waiting == 0) {
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	7c5b      	ldrb	r3, [r3, #17]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d103      	bne.n	800b99c <event_callback+0xec>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
 800b994:	6978      	ldr	r0, [r7, #20]
 800b996:	f00a fe13 	bl	80165c0 <sys_arch_unprotect>
    return;
 800b99a:	e083      	b.n	800baa4 <event_callback+0x1f4>
  /* NOTE: This code goes through the select_cb_list list multiple times
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
 800b99c:	bf00      	nop
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800b99e:	4b46      	ldr	r3, [pc, #280]	; (800bab8 <event_callback+0x208>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	61bb      	str	r3, [r7, #24]
 800b9a4:	e074      	b.n	800ba90 <event_callback+0x1e0>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
 800b9a6:	4b45      	ldr	r3, [pc, #276]	; (800babc <event_callback+0x20c>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	60bb      	str	r3, [r7, #8]
    if (scb->sem_signalled == 0) {
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	695b      	ldr	r3, [r3, #20]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d15e      	bne.n	800ba72 <event_callback+0x1c2>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	613b      	str	r3, [r7, #16]
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	dd14      	ble.n	800b9ec <event_callback+0x13c>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d010      	beq.n	800b9ec <event_callback+0x13c>
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	69fa      	ldr	r2, [r7, #28]
 800b9d0:	0952      	lsrs	r2, r2, #5
 800b9d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d6:	69fa      	ldr	r2, [r7, #28]
 800b9d8:	f002 021f 	and.w	r2, r2, #31
 800b9dc:	2101      	movs	r1, #1
 800b9de:	fa01 f202 	lsl.w	r2, r1, r2
 800b9e2:	4013      	ands	r3, r2
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d001      	beq.n	800b9ec <event_callback+0x13c>
          do_signal = 1;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	613b      	str	r3, [r7, #16]
        }
      }
      if (sock->sendevent != 0) {
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	899b      	ldrh	r3, [r3, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d017      	beq.n	800ba24 <event_callback+0x174>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d114      	bne.n	800ba24 <event_callback+0x174>
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d010      	beq.n	800ba24 <event_callback+0x174>
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	69fa      	ldr	r2, [r7, #28]
 800ba08:	0952      	lsrs	r2, r2, #5
 800ba0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba0e:	69fa      	ldr	r2, [r7, #28]
 800ba10:	f002 021f 	and.w	r2, r2, #31
 800ba14:	2101      	movs	r1, #1
 800ba16:	fa01 f202 	lsl.w	r2, r1, r2
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d001      	beq.n	800ba24 <event_callback+0x174>
          do_signal = 1;
 800ba20:	2301      	movs	r3, #1
 800ba22:	613b      	str	r3, [r7, #16]
        }
      }
      if (sock->errevent != 0) {
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	89db      	ldrh	r3, [r3, #14]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d017      	beq.n	800ba5c <event_callback+0x1ac>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d114      	bne.n	800ba5c <event_callback+0x1ac>
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d010      	beq.n	800ba5c <event_callback+0x1ac>
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	69fa      	ldr	r2, [r7, #28]
 800ba40:	0952      	lsrs	r2, r2, #5
 800ba42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba46:	69fa      	ldr	r2, [r7, #28]
 800ba48:	f002 021f 	and.w	r2, r2, #31
 800ba4c:	2101      	movs	r1, #1
 800ba4e:	fa01 f202 	lsl.w	r2, r1, r2
 800ba52:	4013      	ands	r3, r2
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d001      	beq.n	800ba5c <event_callback+0x1ac>
          do_signal = 1;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	613b      	str	r3, [r7, #16]
        }
      }
      if (do_signal) {
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d007      	beq.n	800ba72 <event_callback+0x1c2>
        scb->sem_signalled = 1;
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	2201      	movs	r2, #1
 800ba66:	615a      	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	3318      	adds	r3, #24
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f00a fcf4 	bl	801645a <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
 800ba72:	6978      	ldr	r0, [r7, #20]
 800ba74:	f00a fda4 	bl	80165c0 <sys_arch_unprotect>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
 800ba78:	f00a fd94 	bl	80165a4 <sys_arch_protect>
 800ba7c:	6178      	str	r0, [r7, #20]
    if (last_select_cb_ctr != select_cb_ctr) {
 800ba7e:	4b0f      	ldr	r3, [pc, #60]	; (800babc <event_callback+0x20c>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d000      	beq.n	800ba8a <event_callback+0x1da>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
 800ba88:	e789      	b.n	800b99e <event_callback+0xee>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	61bb      	str	r3, [r7, #24]
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d187      	bne.n	800b9a6 <event_callback+0xf6>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
 800ba96:	6978      	ldr	r0, [r7, #20]
 800ba98:	f00a fd92 	bl	80165c0 <sys_arch_unprotect>
 800ba9c:	e002      	b.n	800baa4 <event_callback+0x1f4>
    return;
 800ba9e:	bf00      	nop
 800baa0:	e000      	b.n	800baa4 <event_callback+0x1f4>
      return;
 800baa2:	bf00      	nop
}
 800baa4:	3720      	adds	r7, #32
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	0801810c 	.word	0x0801810c
 800bab0:	0801836c 	.word	0x0801836c
 800bab4:	08018150 	.word	0x08018150
 800bab8:	200040e8 	.word	0x200040e8
 800babc:	200040ec 	.word	0x200040ec

0800bac0 <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b08a      	sub	sp, #40	; 0x28
 800bac4:	af02      	add	r7, sp, #8
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
 800bacc:	603b      	str	r3, [r7, #0]
  u8_t err = 0;
 800bace:	2300      	movs	r3, #0
 800bad0:	77fb      	strb	r3, [r7, #31]
  struct lwip_sock *sock = get_socket(s);
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7fe fcc4 	bl	800a460 <get_socket>
 800bad8:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d102      	bne.n	800bae6 <lwip_setsockopt+0x26>
    return -1;
 800bae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bae4:	e034      	b.n	800bb50 <lwip_setsockopt+0x90>
  }

  if (NULL == optval) {
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d10e      	bne.n	800bb0a <lwip_setsockopt+0x4a>
    sock_set_errno(sock, EFAULT);
 800baec:	230e      	movs	r3, #14
 800baee:	613b      	str	r3, [r7, #16]
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	741a      	strb	r2, [r3, #16]
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d002      	beq.n	800bb04 <lwip_setsockopt+0x44>
 800bafe:	4a16      	ldr	r2, [pc, #88]	; (800bb58 <lwip_setsockopt+0x98>)
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	6013      	str	r3, [r2, #0]
    return -1;
 800bb04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb08:	e022      	b.n	800bb50 <lwip_setsockopt+0x90>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 800bb0a:	4814      	ldr	r0, [pc, #80]	; (800bb5c <lwip_setsockopt+0x9c>)
 800bb0c:	f00a fd08 	bl	8016520 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 800bb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	68b9      	ldr	r1, [r7, #8]
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f000 f820 	bl	800bb60 <lwip_setsockopt_impl>
 800bb20:	4603      	mov	r3, r0
 800bb22:	77fb      	strb	r3, [r7, #31]
  UNLOCK_TCPIP_CORE();
 800bb24:	480d      	ldr	r0, [pc, #52]	; (800bb5c <lwip_setsockopt+0x9c>)
 800bb26:	f00a fd0a 	bl	801653e <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 800bb2a:	7ffb      	ldrb	r3, [r7, #31]
 800bb2c:	617b      	str	r3, [r7, #20]
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	741a      	strb	r2, [r3, #16]
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <lwip_setsockopt+0x82>
 800bb3c:	4a06      	ldr	r2, [pc, #24]	; (800bb58 <lwip_setsockopt+0x98>)
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	6013      	str	r3, [r2, #0]
  return err ? -1 : 0;
 800bb42:	7ffb      	ldrb	r3, [r7, #31]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <lwip_setsockopt+0x8e>
 800bb48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb4c:	e000      	b.n	800bb50 <lwip_setsockopt+0x90>
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3720      	adds	r7, #32
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	2000dc70 	.word	0x2000dc70
 800bb5c:	200074e8 	.word	0x200074e8

0800bb60 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static u8_t
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b088      	sub	sp, #32
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	603b      	str	r3, [r7, #0]
  u8_t err = 0;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	77fb      	strb	r3, [r7, #31]
  struct lwip_sock *sock = tryget_socket(s);
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f7fe fca0 	bl	800a4b8 <tryget_socket>
 800bb78:	6178      	str	r0, [r7, #20]
  if (!sock) {
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <lwip_setsockopt_impl+0x24>
    return EBADF;
 800bb80:	2309      	movs	r3, #9
 800bb82:	e1bf      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
  }

  switch (level) {
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	2b06      	cmp	r3, #6
 800bb88:	f000 8137 	beq.w	800bdfa <lwip_setsockopt_impl+0x29a>
 800bb8c:	2b06      	cmp	r3, #6
 800bb8e:	dc03      	bgt.n	800bb98 <lwip_setsockopt_impl+0x38>
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f000 80f9 	beq.w	800bd88 <lwip_setsockopt_impl+0x228>
 800bb96:	e1b1      	b.n	800befc <lwip_setsockopt_impl+0x39c>
 800bb98:	2bff      	cmp	r3, #255	; 0xff
 800bb9a:	f000 81ab 	beq.w	800bef4 <lwip_setsockopt_impl+0x394>
 800bb9e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800bba2:	4293      	cmp	r3, r2
 800bba4:	f040 81aa 	bne.w	800befc <lwip_setsockopt_impl+0x39c>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2b80      	cmp	r3, #128	; 0x80
 800bbac:	f000 8087 	beq.w	800bcbe <lwip_setsockopt_impl+0x15e>
 800bbb0:	2b80      	cmp	r3, #128	; 0x80
 800bbb2:	dc06      	bgt.n	800bbc2 <lwip_setsockopt_impl+0x62>
 800bbb4:	2b08      	cmp	r3, #8
 800bbb6:	d01b      	beq.n	800bbf0 <lwip_setsockopt_impl+0x90>
 800bbb8:	2b20      	cmp	r3, #32
 800bbba:	d019      	beq.n	800bbf0 <lwip_setsockopt_impl+0x90>
 800bbbc:	2b04      	cmp	r3, #4
 800bbbe:	d017      	beq.n	800bbf0 <lwip_setsockopt_impl+0x90>
 800bbc0:	e0de      	b.n	800bd80 <lwip_setsockopt_impl+0x220>
 800bbc2:	f241 0205 	movw	r2, #4101	; 0x1005
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d046      	beq.n	800bc58 <lwip_setsockopt_impl+0xf8>
 800bbca:	f241 0205 	movw	r2, #4101	; 0x1005
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	dc04      	bgt.n	800bbdc <lwip_setsockopt_impl+0x7c>
 800bbd2:	f241 0202 	movw	r2, #4098	; 0x1002
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d060      	beq.n	800bc9c <lwip_setsockopt_impl+0x13c>
 800bbda:	e0d1      	b.n	800bd80 <lwip_setsockopt_impl+0x220>
 800bbdc:	f241 0206 	movw	r2, #4102	; 0x1006
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d04a      	beq.n	800bc7a <lwip_setsockopt_impl+0x11a>
 800bbe4:	f241 020a 	movw	r2, #4106	; 0x100a
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	f000 8094 	beq.w	800bd16 <lwip_setsockopt_impl+0x1b6>
 800bbee:	e0c7      	b.n	800bd80 <lwip_setsockopt_impl+0x220>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800bbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	d801      	bhi.n	800bbfa <lwip_setsockopt_impl+0x9a>
 800bbf6:	2316      	movs	r3, #22
 800bbf8:	e184      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d004      	beq.n	800bc0c <lwip_setsockopt_impl+0xac>
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d101      	bne.n	800bc10 <lwip_setsockopt_impl+0xb0>
 800bc0c:	2316      	movs	r3, #22
 800bc0e:	e179      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
      if (*(const int*)optval) {
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00e      	beq.n	800bc36 <lwip_setsockopt_impl+0xd6>
        ip_set_option(sock->conn->pcb.ip, optname);
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	7a1b      	ldrb	r3, [r3, #8]
 800bc20:	b25a      	sxtb	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	b25b      	sxtb	r3, r3
 800bc26:	4313      	orrs	r3, r2
 800bc28:	b25a      	sxtb	r2, r3
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	b2d2      	uxtb	r2, r2
 800bc32:	721a      	strb	r2, [r3, #8]
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(const int*)optval?"on":"off")));
      break;
 800bc34:	e0a7      	b.n	800bd86 <lwip_setsockopt_impl+0x226>
        ip_reset_option(sock->conn->pcb.ip, optname);
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	7a1b      	ldrb	r3, [r3, #8]
 800bc3e:	b25a      	sxtb	r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	b25b      	sxtb	r3, r3
 800bc44:	43db      	mvns	r3, r3
 800bc46:	b25b      	sxtb	r3, r3
 800bc48:	4013      	ands	r3, r2
 800bc4a:	b25a      	sxtb	r2, r3
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	b2d2      	uxtb	r2, r2
 800bc54:	721a      	strb	r2, [r3, #8]
      break;
 800bc56:	e096      	b.n	800bd86 <lwip_setsockopt_impl+0x226>
    /* SO_TYPE is get-only */
    /* SO_ERROR is get-only */

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
 800bc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5a:	2b03      	cmp	r3, #3
 800bc5c:	d801      	bhi.n	800bc62 <lwip_setsockopt_impl+0x102>
 800bc5e:	2316      	movs	r3, #22
 800bc60:	e150      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <lwip_setsockopt_impl+0x10e>
 800bc6a:	2316      	movs	r3, #22
 800bc6c:	e14a      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
      netconn_set_sendtimeout(sock->conn, LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	683a      	ldr	r2, [r7, #0]
 800bc74:	6812      	ldr	r2, [r2, #0]
 800bc76:	61da      	str	r2, [r3, #28]
      break;
 800bc78:	e085      	b.n	800bd86 <lwip_setsockopt_impl+0x226>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
 800bc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d801      	bhi.n	800bc84 <lwip_setsockopt_impl+0x124>
 800bc80:	2316      	movs	r3, #22
 800bc82:	e13f      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d101      	bne.n	800bc90 <lwip_setsockopt_impl+0x130>
 800bc8c:	2316      	movs	r3, #22
 800bc8e:	e139      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
      netconn_set_recvtimeout(sock->conn, (int)LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	683a      	ldr	r2, [r7, #0]
 800bc96:	6812      	ldr	r2, [r2, #0]
 800bc98:	621a      	str	r2, [r3, #32]
      break;
 800bc9a:	e074      	b.n	800bd86 <lwip_setsockopt_impl+0x226>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, int);
 800bc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9e:	2b03      	cmp	r3, #3
 800bca0:	d801      	bhi.n	800bca6 <lwip_setsockopt_impl+0x146>
 800bca2:	2316      	movs	r3, #22
 800bca4:	e12e      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d101      	bne.n	800bcb2 <lwip_setsockopt_impl+0x152>
 800bcae:	2316      	movs	r3, #22
 800bcb0:	e128      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
      netconn_set_recvbufsize(sock->conn, *(const int*)optval);
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	6812      	ldr	r2, [r2, #0]
 800bcba:	625a      	str	r2, [r3, #36]	; 0x24
      break;
 800bcbc:	e063      	b.n	800bd86 <lwip_setsockopt_impl+0x226>
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
    case SO_LINGER:
      {
        const struct linger* linger = (const struct linger*)optval;
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	613b      	str	r3, [r7, #16]
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct linger);
 800bcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc4:	2b07      	cmp	r3, #7
 800bcc6:	d801      	bhi.n	800bccc <lwip_setsockopt_impl+0x16c>
 800bcc8:	2316      	movs	r3, #22
 800bcca:	e11b      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d101      	bne.n	800bcd8 <lwip_setsockopt_impl+0x178>
 800bcd4:	2316      	movs	r3, #22
 800bcd6:	e115      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
        if (linger->l_onoff) {
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d014      	beq.n	800bd0a <lwip_setsockopt_impl+0x1aa>
          int lingersec = linger->l_linger;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	61bb      	str	r3, [r7, #24]
          if (lingersec < 0) {
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	da01      	bge.n	800bcf0 <lwip_setsockopt_impl+0x190>
            return EINVAL;
 800bcec:	2316      	movs	r3, #22
 800bcee:	e109      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
          }
          if (lingersec > 0xFFFF) {
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcf6:	db02      	blt.n	800bcfe <lwip_setsockopt_impl+0x19e>
            lingersec = 0xFFFF;
 800bcf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcfc:	61bb      	str	r3, [r7, #24]
          }
          sock->conn->linger = (s16_t)lingersec;
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	69ba      	ldr	r2, [r7, #24]
 800bd04:	b212      	sxth	r2, r2
 800bd06:	859a      	strh	r2, [r3, #44]	; 0x2c
        } else {
          sock->conn->linger = -1;
        }
      }
      break;
 800bd08:	e03d      	b.n	800bd86 <lwip_setsockopt_impl+0x226>
          sock->conn->linger = -1;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd12:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 800bd14:	e037      	b.n	800bd86 <lwip_setsockopt_impl+0x226>
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	2b03      	cmp	r3, #3
 800bd1a:	d801      	bhi.n	800bd20 <lwip_setsockopt_impl+0x1c0>
 800bd1c:	2316      	movs	r3, #22
 800bd1e:	e0f1      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d004      	beq.n	800bd32 <lwip_setsockopt_impl+0x1d2>
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d101      	bne.n	800bd36 <lwip_setsockopt_impl+0x1d6>
 800bd32:	2316      	movs	r3, #22
 800bd34:	e0e6      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd40:	2b20      	cmp	r3, #32
 800bd42:	d001      	beq.n	800bd48 <lwip_setsockopt_impl+0x1e8>
 800bd44:	235c      	movs	r3, #92	; 0x5c
 800bd46:	e0dd      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      if (*(const int*)optval) {
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00b      	beq.n	800bd68 <lwip_setsockopt_impl+0x208>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	7c1a      	ldrb	r2, [r3, #16]
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	f042 0201 	orr.w	r2, r2, #1
 800bd62:	b2d2      	uxtb	r2, r2
 800bd64:	741a      	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
      }
      break;
 800bd66:	e00e      	b.n	800bd86 <lwip_setsockopt_impl+0x226>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	7c1a      	ldrb	r2, [r3, #16]
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	f022 0201 	bic.w	r2, r2, #1
 800bd7a:	b2d2      	uxtb	r2, r2
 800bd7c:	741a      	strb	r2, [r3, #16]
      break;
 800bd7e:	e002      	b.n	800bd86 <lwip_setsockopt_impl+0x226>
#endif /* LWIP_UDP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
 800bd80:	235c      	movs	r3, #92	; 0x5c
 800bd82:	77fb      	strb	r3, [r7, #31]
      break;
 800bd84:	bf00      	nop
    }  /* switch (optname) */
    break;
 800bd86:	e0bc      	b.n	800bf02 <lwip_setsockopt_impl+0x3a2>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d019      	beq.n	800bdc2 <lwip_setsockopt_impl+0x262>
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d12f      	bne.n	800bdf2 <lwip_setsockopt_impl+0x292>
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800bd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd94:	2b03      	cmp	r3, #3
 800bd96:	d801      	bhi.n	800bd9c <lwip_setsockopt_impl+0x23c>
 800bd98:	2316      	movs	r3, #22
 800bd9a:	e0b3      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d004      	beq.n	800bdae <lwip_setsockopt_impl+0x24e>
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d101      	bne.n	800bdb2 <lwip_setsockopt_impl+0x252>
 800bdae:	2316      	movs	r3, #22
 800bdb0:	e0a8      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
      sock->conn->pcb.ip->ttl = (u8_t)(*(const int*)optval);
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	b2d2      	uxtb	r2, r2
 800bdbe:	729a      	strb	r2, [r3, #10]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
 800bdc0:	e01a      	b.n	800bdf8 <lwip_setsockopt_impl+0x298>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc4:	2b03      	cmp	r3, #3
 800bdc6:	d801      	bhi.n	800bdcc <lwip_setsockopt_impl+0x26c>
 800bdc8:	2316      	movs	r3, #22
 800bdca:	e09b      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d004      	beq.n	800bdde <lwip_setsockopt_impl+0x27e>
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d101      	bne.n	800bde2 <lwip_setsockopt_impl+0x282>
 800bdde:	2316      	movs	r3, #22
 800bde0:	e090      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
      sock->conn->pcb.ip->tos = (u8_t)(*(const int*)optval);
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	b2d2      	uxtb	r2, r2
 800bdee:	725a      	strb	r2, [r3, #9]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                  s, sock->conn->pcb.ip->tos));
      break;
 800bdf0:	e002      	b.n	800bdf8 <lwip_setsockopt_impl+0x298>
      break;
#endif /* LWIP_IGMP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
 800bdf2:	235c      	movs	r3, #92	; 0x5c
 800bdf4:	77fb      	strb	r3, [r7, #31]
      break;
 800bdf6:	bf00      	nop
    }  /* switch (optname) */
    break;
 800bdf8:	e083      	b.n	800bf02 <lwip_setsockopt_impl+0x3a2>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 800bdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfc:	2b03      	cmp	r3, #3
 800bdfe:	d801      	bhi.n	800be04 <lwip_setsockopt_impl+0x2a4>
 800be00:	2316      	movs	r3, #22
 800be02:	e07f      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d004      	beq.n	800be16 <lwip_setsockopt_impl+0x2b6>
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d101      	bne.n	800be1a <lwip_setsockopt_impl+0x2ba>
 800be16:	2316      	movs	r3, #22
 800be18:	e074      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be24:	2b10      	cmp	r3, #16
 800be26:	d001      	beq.n	800be2c <lwip_setsockopt_impl+0x2cc>
 800be28:	235c      	movs	r3, #92	; 0x5c
 800be2a:	e06b      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
    if (sock->conn->pcb.tcp->state == LISTEN) {
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	7d1b      	ldrb	r3, [r3, #20]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d101      	bne.n	800be3c <lwip_setsockopt_impl+0x2dc>
      return EINVAL;
 800be38:	2316      	movs	r3, #22
 800be3a:	e063      	b.n	800bf04 <lwip_setsockopt_impl+0x3a4>
    }
    switch (optname) {
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3b01      	subs	r3, #1
 800be40:	2b04      	cmp	r3, #4
 800be42:	d853      	bhi.n	800beec <lwip_setsockopt_impl+0x38c>
 800be44:	a201      	add	r2, pc, #4	; (adr r2, 800be4c <lwip_setsockopt_impl+0x2ec>)
 800be46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be4a:	bf00      	nop
 800be4c:	0800be61 	.word	0x0800be61
 800be50:	0800be99 	.word	0x0800be99
 800be54:	0800bea9 	.word	0x0800bea9
 800be58:	0800bec3 	.word	0x0800bec3
 800be5c:	0800bedd 	.word	0x0800bedd
    case TCP_NODELAY:
      if (*(const int*)optval) {
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00b      	beq.n	800be80 <lwip_setsockopt_impl+0x320>
        tcp_nagle_disable(sock->conn->pcb.tcp);
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	8b5a      	ldrh	r2, [r3, #26]
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be7a:	b292      	uxth	r2, r2
 800be7c:	835a      	strh	r2, [r3, #26]
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(const int *)optval)?"on":"off") );
      break;
 800be7e:	e038      	b.n	800bef2 <lwip_setsockopt_impl+0x392>
        tcp_nagle_enable(sock->conn->pcb.tcp);
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	8b5a      	ldrh	r2, [r3, #26]
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be92:	b292      	uxth	r2, r2
 800be94:	835a      	strh	r2, [r3, #26]
      break;
 800be96:	e02c      	b.n	800bef2 <lwip_setsockopt_impl+0x392>
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int*)optval);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
 800bea6:	e024      	b.n	800bef2 <lwip_setsockopt_impl+0x392>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(const int*)optval);
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4619      	mov	r1, r3
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800beb8:	fb02 f201 	mul.w	r2, r2, r1
 800bebc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
 800bec0:	e017      	b.n	800bef2 <lwip_setsockopt_impl+0x392>
    case TCP_KEEPINTVL:
      sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(const int*)optval);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4619      	mov	r1, r3
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bed2:	fb02 f201 	mul.w	r2, r2, r1
 800bed6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_intvl));
      break;
 800beda:	e00a      	b.n	800bef2 <lwip_setsockopt_impl+0x392>
    case TCP_KEEPCNT:
      sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(const int*)optval);
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_cnt));
      break;
 800beea:	e002      	b.n	800bef2 <lwip_setsockopt_impl+0x392>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
 800beec:	235c      	movs	r3, #92	; 0x5c
 800beee:	77fb      	strb	r3, [r7, #31]
      break;
 800bef0:	bf00      	nop
    }  /* switch (optname) */
    break;
 800bef2:	e006      	b.n	800bf02 <lwip_setsockopt_impl+0x3a2>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
 800bef4:	235c      	movs	r3, #92	; 0x5c
 800bef6:	77fb      	strb	r3, [r7, #31]
      break;
 800bef8:	bf00      	nop
    }  /* switch (optname) */
    break;
 800befa:	e002      	b.n	800bf02 <lwip_setsockopt_impl+0x3a2>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
 800befc:	235c      	movs	r3, #92	; 0x5c
 800befe:	77fb      	strb	r3, [r7, #31]
    break;
 800bf00:	bf00      	nop
  }  /* switch (level) */

  return err;
 800bf02:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3720      	adds	r7, #32
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800bf14:	4b29      	ldr	r3, [pc, #164]	; (800bfbc <tcpip_thread+0xb0>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d005      	beq.n	800bf28 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800bf1c:	4b27      	ldr	r3, [pc, #156]	; (800bfbc <tcpip_thread+0xb0>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a27      	ldr	r2, [pc, #156]	; (800bfc0 <tcpip_thread+0xb4>)
 800bf22:	6812      	ldr	r2, [r2, #0]
 800bf24:	4610      	mov	r0, r2
 800bf26:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800bf28:	4826      	ldr	r0, [pc, #152]	; (800bfc4 <tcpip_thread+0xb8>)
 800bf2a:	f00a faf9 	bl	8016520 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800bf2e:	4825      	ldr	r0, [pc, #148]	; (800bfc4 <tcpip_thread+0xb8>)
 800bf30:	f00a fb05 	bl	801653e <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800bf34:	f107 030c 	add.w	r3, r7, #12
 800bf38:	4619      	mov	r1, r3
 800bf3a:	4823      	ldr	r0, [pc, #140]	; (800bfc8 <tcpip_thread+0xbc>)
 800bf3c:	f007 fa80 	bl	8013440 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800bf40:	4820      	ldr	r0, [pc, #128]	; (800bfc4 <tcpip_thread+0xb8>)
 800bf42:	f00a faed 	bl	8016520 <sys_mutex_lock>
    if (msg == NULL) {
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d106      	bne.n	800bf5a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bf4c:	4b1f      	ldr	r3, [pc, #124]	; (800bfcc <tcpip_thread+0xc0>)
 800bf4e:	2269      	movs	r2, #105	; 0x69
 800bf50:	491f      	ldr	r1, [pc, #124]	; (800bfd0 <tcpip_thread+0xc4>)
 800bf52:	4820      	ldr	r0, [pc, #128]	; (800bfd4 <tcpip_thread+0xc8>)
 800bf54:	f00a fbb4 	bl	80166c0 <iprintf>
      continue;
 800bf58:	e02f      	b.n	800bfba <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	2b03      	cmp	r3, #3
 800bf60:	d011      	beq.n	800bf86 <tcpip_thread+0x7a>
 800bf62:	2b04      	cmp	r3, #4
 800bf64:	d01b      	beq.n	800bf9e <tcpip_thread+0x92>
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	d120      	bne.n	800bfac <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	6850      	ldr	r0, [r2, #4]
 800bf72:	68fa      	ldr	r2, [r7, #12]
 800bf74:	6892      	ldr	r2, [r2, #8]
 800bf76:	4611      	mov	r1, r2
 800bf78:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	2009      	movs	r0, #9
 800bf80:	f000 fd7a 	bl	800ca78 <memp_free>
      break;
 800bf84:	e019      	b.n	800bfba <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	6892      	ldr	r2, [r2, #8]
 800bf8e:	4610      	mov	r0, r2
 800bf90:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	4619      	mov	r1, r3
 800bf96:	2008      	movs	r0, #8
 800bf98:	f000 fd6e 	bl	800ca78 <memp_free>
      break;
 800bf9c:	e00d      	b.n	800bfba <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	6892      	ldr	r2, [r2, #8]
 800bfa6:	4610      	mov	r0, r2
 800bfa8:	4798      	blx	r3
      break;
 800bfaa:	e006      	b.n	800bfba <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bfac:	4b07      	ldr	r3, [pc, #28]	; (800bfcc <tcpip_thread+0xc0>)
 800bfae:	229b      	movs	r2, #155	; 0x9b
 800bfb0:	4907      	ldr	r1, [pc, #28]	; (800bfd0 <tcpip_thread+0xc4>)
 800bfb2:	4808      	ldr	r0, [pc, #32]	; (800bfd4 <tcpip_thread+0xc8>)
 800bfb4:	f00a fb84 	bl	80166c0 <iprintf>
      break;
 800bfb8:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800bfba:	e7b8      	b.n	800bf2e <tcpip_thread+0x22>
 800bfbc:	200040f0 	.word	0x200040f0
 800bfc0:	200040f4 	.word	0x200040f4
 800bfc4:	200074e8 	.word	0x200074e8
 800bfc8:	200040f8 	.word	0x200040f8
 800bfcc:	0801837c 	.word	0x0801837c
 800bfd0:	080183ac 	.word	0x080183ac
 800bfd4:	080183cc 	.word	0x080183cc

0800bfd8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b086      	sub	sp, #24
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800bfe4:	481a      	ldr	r0, [pc, #104]	; (800c050 <tcpip_inpkt+0x78>)
 800bfe6:	f00a f9c1 	bl	801636c <sys_mbox_valid>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d105      	bne.n	800bffc <tcpip_inpkt+0x24>
 800bff0:	4b18      	ldr	r3, [pc, #96]	; (800c054 <tcpip_inpkt+0x7c>)
 800bff2:	22b5      	movs	r2, #181	; 0xb5
 800bff4:	4918      	ldr	r1, [pc, #96]	; (800c058 <tcpip_inpkt+0x80>)
 800bff6:	4819      	ldr	r0, [pc, #100]	; (800c05c <tcpip_inpkt+0x84>)
 800bff8:	f00a fb62 	bl	80166c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800bffc:	2009      	movs	r0, #9
 800bffe:	f000 fce9 	bl	800c9d4 <memp_malloc>
 800c002:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d102      	bne.n	800c010 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c00a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c00e:	e01a      	b.n	800c046 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	2202      	movs	r2, #2
 800c014:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	68ba      	ldr	r2, [r7, #8]
 800c020:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800c028:	6979      	ldr	r1, [r7, #20]
 800c02a:	4809      	ldr	r0, [pc, #36]	; (800c050 <tcpip_inpkt+0x78>)
 800c02c:	f00a f929 	bl	8016282 <sys_mbox_trypost>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d006      	beq.n	800c044 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c036:	6979      	ldr	r1, [r7, #20]
 800c038:	2009      	movs	r0, #9
 800c03a:	f000 fd1d 	bl	800ca78 <memp_free>
    return ERR_MEM;
 800c03e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c042:	e000      	b.n	800c046 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c044:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c046:	4618      	mov	r0, r3
 800c048:	3718      	adds	r7, #24
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	200040f8 	.word	0x200040f8
 800c054:	0801837c 	.word	0x0801837c
 800c058:	080183f4 	.word	0x080183f4
 800c05c:	080183cc 	.word	0x080183cc

0800c060 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c070:	f003 0318 	and.w	r3, r3, #24
 800c074:	2b00      	cmp	r3, #0
 800c076:	d006      	beq.n	800c086 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c078:	4a08      	ldr	r2, [pc, #32]	; (800c09c <tcpip_input+0x3c>)
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f7ff ffab 	bl	800bfd8 <tcpip_inpkt>
 800c082:	4603      	mov	r3, r0
 800c084:	e005      	b.n	800c092 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800c086:	4a06      	ldr	r2, [pc, #24]	; (800c0a0 <tcpip_input+0x40>)
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff ffa4 	bl	800bfd8 <tcpip_inpkt>
 800c090:	4603      	mov	r3, r0
}
 800c092:	4618      	mov	r0, r3
 800c094:	3708      	adds	r7, #8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	08016039 	.word	0x08016039
 800c0a0:	08014ed9 	.word	0x08014ed9

0800c0a4 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b086      	sub	sp, #24
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800c0b2:	481d      	ldr	r0, [pc, #116]	; (800c128 <tcpip_callback_with_block+0x84>)
 800c0b4:	f00a f95a 	bl	801636c <sys_mbox_valid>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d105      	bne.n	800c0ca <tcpip_callback_with_block+0x26>
 800c0be:	4b1b      	ldr	r3, [pc, #108]	; (800c12c <tcpip_callback_with_block+0x88>)
 800c0c0:	22ee      	movs	r2, #238	; 0xee
 800c0c2:	491b      	ldr	r1, [pc, #108]	; (800c130 <tcpip_callback_with_block+0x8c>)
 800c0c4:	481b      	ldr	r0, [pc, #108]	; (800c134 <tcpip_callback_with_block+0x90>)
 800c0c6:	f00a fafb 	bl	80166c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c0ca:	2008      	movs	r0, #8
 800c0cc:	f000 fc82 	bl	800c9d4 <memp_malloc>
 800c0d0:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d102      	bne.n	800c0de <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800c0d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0dc:	e01f      	b.n	800c11e <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	2203      	movs	r2, #3
 800c0e2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	609a      	str	r2, [r3, #8]
  if (block) {
 800c0f0:	79fb      	ldrb	r3, [r7, #7]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d004      	beq.n	800c100 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800c0f6:	6979      	ldr	r1, [r7, #20]
 800c0f8:	480b      	ldr	r0, [pc, #44]	; (800c128 <tcpip_callback_with_block+0x84>)
 800c0fa:	f00a f8ad 	bl	8016258 <sys_mbox_post>
 800c0fe:	e00d      	b.n	800c11c <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800c100:	6979      	ldr	r1, [r7, #20]
 800c102:	4809      	ldr	r0, [pc, #36]	; (800c128 <tcpip_callback_with_block+0x84>)
 800c104:	f00a f8bd 	bl	8016282 <sys_mbox_trypost>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d006      	beq.n	800c11c <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c10e:	6979      	ldr	r1, [r7, #20]
 800c110:	2008      	movs	r0, #8
 800c112:	f000 fcb1 	bl	800ca78 <memp_free>
      return ERR_MEM;
 800c116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c11a:	e000      	b.n	800c11e <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3718      	adds	r7, #24
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	200040f8 	.word	0x200040f8
 800c12c:	0801837c 	.word	0x0801837c
 800c130:	080183f4 	.word	0x080183f4
 800c134:	080183cc 	.word	0x080183cc

0800c138 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c144:	4806      	ldr	r0, [pc, #24]	; (800c160 <tcpip_send_msg_wait_sem+0x28>)
 800c146:	f00a f9eb 	bl	8016520 <sys_mutex_lock>
  fn(apimsg);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	68b8      	ldr	r0, [r7, #8]
 800c14e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c150:	4803      	ldr	r0, [pc, #12]	; (800c160 <tcpip_send_msg_wait_sem+0x28>)
 800c152:	f00a f9f4 	bl	801653e <sys_mutex_unlock>
  return ERR_OK;
 800c156:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	200074e8 	.word	0x200074e8

0800c164 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af02      	add	r7, sp, #8
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c16e:	f000 f86a 	bl	800c246 <lwip_init>

  tcpip_init_done = initfunc;
 800c172:	4a17      	ldr	r2, [pc, #92]	; (800c1d0 <tcpip_init+0x6c>)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c178:	4a16      	ldr	r2, [pc, #88]	; (800c1d4 <tcpip_init+0x70>)
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c17e:	2106      	movs	r1, #6
 800c180:	4815      	ldr	r0, [pc, #84]	; (800c1d8 <tcpip_init+0x74>)
 800c182:	f00a f835 	bl	80161f0 <sys_mbox_new>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d006      	beq.n	800c19a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c18c:	4b13      	ldr	r3, [pc, #76]	; (800c1dc <tcpip_init+0x78>)
 800c18e:	f240 12d5 	movw	r2, #469	; 0x1d5
 800c192:	4913      	ldr	r1, [pc, #76]	; (800c1e0 <tcpip_init+0x7c>)
 800c194:	4813      	ldr	r0, [pc, #76]	; (800c1e4 <tcpip_init+0x80>)
 800c196:	f00a fa93 	bl	80166c0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c19a:	4813      	ldr	r0, [pc, #76]	; (800c1e8 <tcpip_init+0x84>)
 800c19c:	f00a f9a4 	bl	80164e8 <sys_mutex_new>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d006      	beq.n	800c1b4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c1a6:	4b0d      	ldr	r3, [pc, #52]	; (800c1dc <tcpip_init+0x78>)
 800c1a8:	f240 12d9 	movw	r2, #473	; 0x1d9
 800c1ac:	490f      	ldr	r1, [pc, #60]	; (800c1ec <tcpip_init+0x88>)
 800c1ae:	480d      	ldr	r0, [pc, #52]	; (800c1e4 <tcpip_init+0x80>)
 800c1b0:	f00a fa86 	bl	80166c0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1bc:	2200      	movs	r2, #0
 800c1be:	490c      	ldr	r1, [pc, #48]	; (800c1f0 <tcpip_init+0x8c>)
 800c1c0:	480c      	ldr	r0, [pc, #48]	; (800c1f4 <tcpip_init+0x90>)
 800c1c2:	f00a f9c9 	bl	8016558 <sys_thread_new>
}
 800c1c6:	bf00      	nop
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	200040f0 	.word	0x200040f0
 800c1d4:	200040f4 	.word	0x200040f4
 800c1d8:	200040f8 	.word	0x200040f8
 800c1dc:	0801837c 	.word	0x0801837c
 800c1e0:	08018404 	.word	0x08018404
 800c1e4:	080183cc 	.word	0x080183cc
 800c1e8:	200074e8 	.word	0x200074e8
 800c1ec:	08018428 	.word	0x08018428
 800c1f0:	0800bf0d 	.word	0x0800bf0d
 800c1f4:	0801844c 	.word	0x0801844c

0800c1f8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	4603      	mov	r3, r0
 800c200:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800c202:	88fb      	ldrh	r3, [r7, #6]
 800c204:	ba5b      	rev16	r3, r3
 800c206:	b29b      	uxth	r3, r3
}
 800c208:	4618      	mov	r0, r3
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	061a      	lsls	r2, r3, #24
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	021b      	lsls	r3, r3, #8
 800c224:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c228:	431a      	orrs	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	0a1b      	lsrs	r3, r3, #8
 800c22e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c232:	431a      	orrs	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	0e1b      	lsrs	r3, r3, #24
 800c238:	4313      	orrs	r3, r2
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	370c      	adds	r7, #12
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr

0800c246 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b082      	sub	sp, #8
 800c24a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c24c:	2300      	movs	r3, #0
 800c24e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c250:	f00a f93c 	bl	80164cc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c254:	f000 f8a6 	bl	800c3a4 <mem_init>
  memp_init();
 800c258:	f000 fb70 	bl	800c93c <memp_init>
  pbuf_init();
  netif_init();
 800c25c:	f000 fc36 	bl	800cacc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c260:	f007 f914 	bl	801348c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c264:	f001 fc62 	bl	800db2c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800c268:	f006 ffa6 	bl	80131b8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c26c:	bf00      	nop
 800c26e:	3708      	adds	r7, #8
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c27c:	4b40      	ldr	r3, [pc, #256]	; (800c380 <plug_holes+0x10c>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	429a      	cmp	r2, r3
 800c284:	d206      	bcs.n	800c294 <plug_holes+0x20>
 800c286:	4b3f      	ldr	r3, [pc, #252]	; (800c384 <plug_holes+0x110>)
 800c288:	f240 125d 	movw	r2, #349	; 0x15d
 800c28c:	493e      	ldr	r1, [pc, #248]	; (800c388 <plug_holes+0x114>)
 800c28e:	483f      	ldr	r0, [pc, #252]	; (800c38c <plug_holes+0x118>)
 800c290:	f00a fa16 	bl	80166c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c294:	4b3e      	ldr	r3, [pc, #248]	; (800c390 <plug_holes+0x11c>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d306      	bcc.n	800c2ac <plug_holes+0x38>
 800c29e:	4b39      	ldr	r3, [pc, #228]	; (800c384 <plug_holes+0x110>)
 800c2a0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c2a4:	493b      	ldr	r1, [pc, #236]	; (800c394 <plug_holes+0x120>)
 800c2a6:	4839      	ldr	r0, [pc, #228]	; (800c38c <plug_holes+0x118>)
 800c2a8:	f00a fa0a 	bl	80166c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	791b      	ldrb	r3, [r3, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d006      	beq.n	800c2c2 <plug_holes+0x4e>
 800c2b4:	4b33      	ldr	r3, [pc, #204]	; (800c384 <plug_holes+0x110>)
 800c2b6:	f240 125f 	movw	r2, #351	; 0x15f
 800c2ba:	4937      	ldr	r1, [pc, #220]	; (800c398 <plug_holes+0x124>)
 800c2bc:	4833      	ldr	r0, [pc, #204]	; (800c38c <plug_holes+0x118>)
 800c2be:	f00a f9ff 	bl	80166c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	881b      	ldrh	r3, [r3, #0]
 800c2c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c2ca:	d906      	bls.n	800c2da <plug_holes+0x66>
 800c2cc:	4b2d      	ldr	r3, [pc, #180]	; (800c384 <plug_holes+0x110>)
 800c2ce:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800c2d2:	4932      	ldr	r1, [pc, #200]	; (800c39c <plug_holes+0x128>)
 800c2d4:	482d      	ldr	r0, [pc, #180]	; (800c38c <plug_holes+0x118>)
 800c2d6:	f00a f9f3 	bl	80166c0 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800c2da:	4b29      	ldr	r3, [pc, #164]	; (800c380 <plug_holes+0x10c>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	8812      	ldrh	r2, [r2, #0]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d01f      	beq.n	800c32e <plug_holes+0xba>
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	791b      	ldrb	r3, [r3, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d11b      	bne.n	800c32e <plug_holes+0xba>
 800c2f6:	4b26      	ldr	r3, [pc, #152]	; (800c390 <plug_holes+0x11c>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d016      	beq.n	800c32e <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c300:	4b27      	ldr	r3, [pc, #156]	; (800c3a0 <plug_holes+0x12c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	429a      	cmp	r2, r3
 800c308:	d102      	bne.n	800c310 <plug_holes+0x9c>
      lfree = mem;
 800c30a:	4a25      	ldr	r2, [pc, #148]	; (800c3a0 <plug_holes+0x12c>)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	881a      	ldrh	r2, [r3, #0]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4a19      	ldr	r2, [pc, #100]	; (800c380 <plug_holes+0x10c>)
 800c31c:	6812      	ldr	r2, [r2, #0]
 800c31e:	1a99      	subs	r1, r3, r2
 800c320:	4b17      	ldr	r3, [pc, #92]	; (800c380 <plug_holes+0x10c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	8812      	ldrh	r2, [r2, #0]
 800c328:	4413      	add	r3, r2
 800c32a:	b28a      	uxth	r2, r1
 800c32c:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800c32e:	4b14      	ldr	r3, [pc, #80]	; (800c380 <plug_holes+0x10c>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	8852      	ldrh	r2, [r2, #2]
 800c336:	4413      	add	r3, r2
 800c338:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d01a      	beq.n	800c378 <plug_holes+0x104>
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	791b      	ldrb	r3, [r3, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d116      	bne.n	800c378 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c34a:	4b15      	ldr	r3, [pc, #84]	; (800c3a0 <plug_holes+0x12c>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	429a      	cmp	r2, r3
 800c352:	d102      	bne.n	800c35a <plug_holes+0xe6>
      lfree = pmem;
 800c354:	4a12      	ldr	r2, [pc, #72]	; (800c3a0 <plug_holes+0x12c>)
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	881a      	ldrh	r2, [r3, #0]
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	4a06      	ldr	r2, [pc, #24]	; (800c380 <plug_holes+0x10c>)
 800c366:	6812      	ldr	r2, [r2, #0]
 800c368:	1a99      	subs	r1, r3, r2
 800c36a:	4b05      	ldr	r3, [pc, #20]	; (800c380 <plug_holes+0x10c>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	8812      	ldrh	r2, [r2, #0]
 800c372:	4413      	add	r3, r2
 800c374:	b28a      	uxth	r2, r1
 800c376:	805a      	strh	r2, [r3, #2]
  }
}
 800c378:	bf00      	nop
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	200040fc 	.word	0x200040fc
 800c384:	0801845c 	.word	0x0801845c
 800c388:	0801848c 	.word	0x0801848c
 800c38c:	080184a4 	.word	0x080184a4
 800c390:	20004100 	.word	0x20004100
 800c394:	080184cc 	.word	0x080184cc
 800c398:	080184e8 	.word	0x080184e8
 800c39c:	08018504 	.word	0x08018504
 800c3a0:	20004104 	.word	0x20004104

0800c3a4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c3aa:	4b1e      	ldr	r3, [pc, #120]	; (800c424 <mem_init+0x80>)
 800c3ac:	3303      	adds	r3, #3
 800c3ae:	f023 0303 	bic.w	r3, r3, #3
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	4b1c      	ldr	r3, [pc, #112]	; (800c428 <mem_init+0x84>)
 800c3b6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c3b8:	4b1b      	ldr	r3, [pc, #108]	; (800c428 <mem_init+0x84>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800c3c4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800c3d2:	4b15      	ldr	r3, [pc, #84]	; (800c428 <mem_init+0x84>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800c3da:	4a14      	ldr	r2, [pc, #80]	; (800c42c <mem_init+0x88>)
 800c3dc:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c3de:	4b13      	ldr	r3, [pc, #76]	; (800c42c <mem_init+0x88>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c3e6:	4b11      	ldr	r3, [pc, #68]	; (800c42c <mem_init+0x88>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800c3ee:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c3f0:	4b0e      	ldr	r3, [pc, #56]	; (800c42c <mem_init+0x88>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800c3f8:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c3fa:	4b0b      	ldr	r3, [pc, #44]	; (800c428 <mem_init+0x84>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a0c      	ldr	r2, [pc, #48]	; (800c430 <mem_init+0x8c>)
 800c400:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c402:	480c      	ldr	r0, [pc, #48]	; (800c434 <mem_init+0x90>)
 800c404:	f00a f870 	bl	80164e8 <sys_mutex_new>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d006      	beq.n	800c41c <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c40e:	4b0a      	ldr	r3, [pc, #40]	; (800c438 <mem_init+0x94>)
 800c410:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c414:	4909      	ldr	r1, [pc, #36]	; (800c43c <mem_init+0x98>)
 800c416:	480a      	ldr	r0, [pc, #40]	; (800c440 <mem_init+0x9c>)
 800c418:	f00a f952 	bl	80166c0 <iprintf>
  }
}
 800c41c:	bf00      	nop
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	20007504 	.word	0x20007504
 800c428:	200040fc 	.word	0x200040fc
 800c42c:	20004100 	.word	0x20004100
 800c430:	20004104 	.word	0x20004104
 800c434:	20004108 	.word	0x20004108
 800c438:	0801845c 	.word	0x0801845c
 800c43c:	08018530 	.word	0x08018530
 800c440:	080184a4 	.word	0x080184a4

0800c444 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d050      	beq.n	800c4f4 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f003 0303 	and.w	r3, r3, #3
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d006      	beq.n	800c46a <mem_free+0x26>
 800c45c:	4b27      	ldr	r3, [pc, #156]	; (800c4fc <mem_free+0xb8>)
 800c45e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800c462:	4927      	ldr	r1, [pc, #156]	; (800c500 <mem_free+0xbc>)
 800c464:	4827      	ldr	r0, [pc, #156]	; (800c504 <mem_free+0xc0>)
 800c466:	f00a f92b 	bl	80166c0 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c46a:	4b27      	ldr	r3, [pc, #156]	; (800c508 <mem_free+0xc4>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	429a      	cmp	r2, r3
 800c472:	d304      	bcc.n	800c47e <mem_free+0x3a>
 800c474:	4b25      	ldr	r3, [pc, #148]	; (800c50c <mem_free+0xc8>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d306      	bcc.n	800c48c <mem_free+0x48>
 800c47e:	4b1f      	ldr	r3, [pc, #124]	; (800c4fc <mem_free+0xb8>)
 800c480:	f240 12af 	movw	r2, #431	; 0x1af
 800c484:	4922      	ldr	r1, [pc, #136]	; (800c510 <mem_free+0xcc>)
 800c486:	481f      	ldr	r0, [pc, #124]	; (800c504 <mem_free+0xc0>)
 800c488:	f00a f91a 	bl	80166c0 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c48c:	4b1e      	ldr	r3, [pc, #120]	; (800c508 <mem_free+0xc4>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	429a      	cmp	r2, r3
 800c494:	d304      	bcc.n	800c4a0 <mem_free+0x5c>
 800c496:	4b1d      	ldr	r3, [pc, #116]	; (800c50c <mem_free+0xc8>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d306      	bcc.n	800c4ae <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800c4a0:	f00a f880 	bl	80165a4 <sys_arch_protect>
 800c4a4:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800c4a6:	68b8      	ldr	r0, [r7, #8]
 800c4a8:	f00a f88a 	bl	80165c0 <sys_arch_unprotect>
    return;
 800c4ac:	e023      	b.n	800c4f6 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c4ae:	4819      	ldr	r0, [pc, #100]	; (800c514 <mem_free+0xd0>)
 800c4b0:	f00a f836 	bl	8016520 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	3b08      	subs	r3, #8
 800c4b8:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	791b      	ldrb	r3, [r3, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d106      	bne.n	800c4d0 <mem_free+0x8c>
 800c4c2:	4b0e      	ldr	r3, [pc, #56]	; (800c4fc <mem_free+0xb8>)
 800c4c4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800c4c8:	4913      	ldr	r1, [pc, #76]	; (800c518 <mem_free+0xd4>)
 800c4ca:	480e      	ldr	r0, [pc, #56]	; (800c504 <mem_free+0xc0>)
 800c4cc:	f00a f8f8 	bl	80166c0 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c4d6:	4b11      	ldr	r3, [pc, #68]	; (800c51c <mem_free+0xd8>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d202      	bcs.n	800c4e6 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c4e0:	4a0e      	ldr	r2, [pc, #56]	; (800c51c <mem_free+0xd8>)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f7ff fec4 	bl	800c274 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c4ec:	4809      	ldr	r0, [pc, #36]	; (800c514 <mem_free+0xd0>)
 800c4ee:	f00a f826 	bl	801653e <sys_mutex_unlock>
 800c4f2:	e000      	b.n	800c4f6 <mem_free+0xb2>
    return;
 800c4f4:	bf00      	nop
}
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	0801845c 	.word	0x0801845c
 800c500:	0801854c 	.word	0x0801854c
 800c504:	080184a4 	.word	0x080184a4
 800c508:	200040fc 	.word	0x200040fc
 800c50c:	20004100 	.word	0x20004100
 800c510:	08018570 	.word	0x08018570
 800c514:	20004108 	.word	0x20004108
 800c518:	08018588 	.word	0x08018588
 800c51c:	20004104 	.word	0x20004104

0800c520 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b088      	sub	sp, #32
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	460b      	mov	r3, r1
 800c52a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800c52c:	887b      	ldrh	r3, [r7, #2]
 800c52e:	3303      	adds	r3, #3
 800c530:	b29b      	uxth	r3, r3
 800c532:	f023 0303 	bic.w	r3, r3, #3
 800c536:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800c538:	887b      	ldrh	r3, [r7, #2]
 800c53a:	2b0b      	cmp	r3, #11
 800c53c:	d801      	bhi.n	800c542 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c53e:	230c      	movs	r3, #12
 800c540:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800c542:	887b      	ldrh	r3, [r7, #2]
 800c544:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c548:	d901      	bls.n	800c54e <mem_trim+0x2e>
    return NULL;
 800c54a:	2300      	movs	r3, #0
 800c54c:	e0bd      	b.n	800c6ca <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c54e:	4b61      	ldr	r3, [pc, #388]	; (800c6d4 <mem_trim+0x1b4>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	429a      	cmp	r2, r3
 800c556:	d304      	bcc.n	800c562 <mem_trim+0x42>
 800c558:	4b5f      	ldr	r3, [pc, #380]	; (800c6d8 <mem_trim+0x1b8>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d306      	bcc.n	800c570 <mem_trim+0x50>
 800c562:	4b5e      	ldr	r3, [pc, #376]	; (800c6dc <mem_trim+0x1bc>)
 800c564:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c568:	495d      	ldr	r1, [pc, #372]	; (800c6e0 <mem_trim+0x1c0>)
 800c56a:	485e      	ldr	r0, [pc, #376]	; (800c6e4 <mem_trim+0x1c4>)
 800c56c:	f00a f8a8 	bl	80166c0 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c570:	4b58      	ldr	r3, [pc, #352]	; (800c6d4 <mem_trim+0x1b4>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	429a      	cmp	r2, r3
 800c578:	d304      	bcc.n	800c584 <mem_trim+0x64>
 800c57a:	4b57      	ldr	r3, [pc, #348]	; (800c6d8 <mem_trim+0x1b8>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	429a      	cmp	r2, r3
 800c582:	d307      	bcc.n	800c594 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800c584:	f00a f80e 	bl	80165a4 <sys_arch_protect>
 800c588:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f00a f818 	bl	80165c0 <sys_arch_unprotect>
    return rmem;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	e09a      	b.n	800c6ca <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	3b08      	subs	r3, #8
 800c598:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	4a4d      	ldr	r2, [pc, #308]	; (800c6d4 <mem_trim+0x1b4>)
 800c59e:	6812      	ldr	r2, [r2, #0]
 800c5a0:	1a9b      	subs	r3, r3, r2
 800c5a2:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	881a      	ldrh	r2, [r3, #0]
 800c5a8:	8b7b      	ldrh	r3, [r7, #26]
 800c5aa:	1ad3      	subs	r3, r2, r3
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	3b08      	subs	r3, #8
 800c5b0:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c5b2:	887a      	ldrh	r2, [r7, #2]
 800c5b4:	8b3b      	ldrh	r3, [r7, #24]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d906      	bls.n	800c5c8 <mem_trim+0xa8>
 800c5ba:	4b48      	ldr	r3, [pc, #288]	; (800c6dc <mem_trim+0x1bc>)
 800c5bc:	f240 2206 	movw	r2, #518	; 0x206
 800c5c0:	4949      	ldr	r1, [pc, #292]	; (800c6e8 <mem_trim+0x1c8>)
 800c5c2:	4848      	ldr	r0, [pc, #288]	; (800c6e4 <mem_trim+0x1c4>)
 800c5c4:	f00a f87c 	bl	80166c0 <iprintf>
  if (newsize > size) {
 800c5c8:	887a      	ldrh	r2, [r7, #2]
 800c5ca:	8b3b      	ldrh	r3, [r7, #24]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d901      	bls.n	800c5d4 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	e07a      	b.n	800c6ca <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800c5d4:	887a      	ldrh	r2, [r7, #2]
 800c5d6:	8b3b      	ldrh	r3, [r7, #24]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d101      	bne.n	800c5e0 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	e074      	b.n	800c6ca <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c5e0:	4842      	ldr	r0, [pc, #264]	; (800c6ec <mem_trim+0x1cc>)
 800c5e2:	f009 ff9d 	bl	8016520 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800c5e6:	4b3b      	ldr	r3, [pc, #236]	; (800c6d4 <mem_trim+0x1b4>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	69fa      	ldr	r2, [r7, #28]
 800c5ec:	8812      	ldrh	r2, [r2, #0]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	791b      	ldrb	r3, [r3, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d131      	bne.n	800c65e <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	881b      	ldrh	r3, [r3, #0]
 800c5fe:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800c600:	8b7a      	ldrh	r2, [r7, #26]
 800c602:	887b      	ldrh	r3, [r7, #2]
 800c604:	4413      	add	r3, r2
 800c606:	b29b      	uxth	r3, r3
 800c608:	3308      	adds	r3, #8
 800c60a:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800c60c:	4b38      	ldr	r3, [pc, #224]	; (800c6f0 <mem_trim+0x1d0>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	697a      	ldr	r2, [r7, #20]
 800c612:	429a      	cmp	r2, r3
 800c614:	d105      	bne.n	800c622 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800c616:	4b2f      	ldr	r3, [pc, #188]	; (800c6d4 <mem_trim+0x1b4>)
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	8a7b      	ldrh	r3, [r7, #18]
 800c61c:	4413      	add	r3, r2
 800c61e:	4a34      	ldr	r2, [pc, #208]	; (800c6f0 <mem_trim+0x1d0>)
 800c620:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800c622:	4b2c      	ldr	r3, [pc, #176]	; (800c6d4 <mem_trim+0x1b4>)
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	8a7b      	ldrh	r3, [r7, #18]
 800c628:	4413      	add	r3, r2
 800c62a:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	2200      	movs	r2, #0
 800c630:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	8a3a      	ldrh	r2, [r7, #16]
 800c636:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	8b7a      	ldrh	r2, [r7, #26]
 800c63c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	8a7a      	ldrh	r2, [r7, #18]
 800c642:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	881b      	ldrh	r3, [r3, #0]
 800c648:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c64c:	d039      	beq.n	800c6c2 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c64e:	4b21      	ldr	r3, [pc, #132]	; (800c6d4 <mem_trim+0x1b4>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	697a      	ldr	r2, [r7, #20]
 800c654:	8812      	ldrh	r2, [r2, #0]
 800c656:	4413      	add	r3, r2
 800c658:	8a7a      	ldrh	r2, [r7, #18]
 800c65a:	805a      	strh	r2, [r3, #2]
 800c65c:	e031      	b.n	800c6c2 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c65e:	887b      	ldrh	r3, [r7, #2]
 800c660:	f103 0214 	add.w	r2, r3, #20
 800c664:	8b3b      	ldrh	r3, [r7, #24]
 800c666:	429a      	cmp	r2, r3
 800c668:	d82b      	bhi.n	800c6c2 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800c66a:	8b7a      	ldrh	r2, [r7, #26]
 800c66c:	887b      	ldrh	r3, [r7, #2]
 800c66e:	4413      	add	r3, r2
 800c670:	b29b      	uxth	r3, r3
 800c672:	3308      	adds	r3, #8
 800c674:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800c676:	4b17      	ldr	r3, [pc, #92]	; (800c6d4 <mem_trim+0x1b4>)
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	8a7b      	ldrh	r3, [r7, #18]
 800c67c:	4413      	add	r3, r2
 800c67e:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800c680:	4b1b      	ldr	r3, [pc, #108]	; (800c6f0 <mem_trim+0x1d0>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	697a      	ldr	r2, [r7, #20]
 800c686:	429a      	cmp	r2, r3
 800c688:	d202      	bcs.n	800c690 <mem_trim+0x170>
      lfree = mem2;
 800c68a:	4a19      	ldr	r2, [pc, #100]	; (800c6f0 <mem_trim+0x1d0>)
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	2200      	movs	r2, #0
 800c694:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	881a      	ldrh	r2, [r3, #0]
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	8b7a      	ldrh	r2, [r7, #26]
 800c6a2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	8a7a      	ldrh	r2, [r7, #18]
 800c6a8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	881b      	ldrh	r3, [r3, #0]
 800c6ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c6b2:	d006      	beq.n	800c6c2 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c6b4:	4b07      	ldr	r3, [pc, #28]	; (800c6d4 <mem_trim+0x1b4>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	697a      	ldr	r2, [r7, #20]
 800c6ba:	8812      	ldrh	r2, [r2, #0]
 800c6bc:	4413      	add	r3, r2
 800c6be:	8a7a      	ldrh	r2, [r7, #18]
 800c6c0:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c6c2:	480a      	ldr	r0, [pc, #40]	; (800c6ec <mem_trim+0x1cc>)
 800c6c4:	f009 ff3b 	bl	801653e <sys_mutex_unlock>
  return rmem;
 800c6c8:	687b      	ldr	r3, [r7, #4]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3720      	adds	r7, #32
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	200040fc 	.word	0x200040fc
 800c6d8:	20004100 	.word	0x20004100
 800c6dc:	0801845c 	.word	0x0801845c
 800c6e0:	0801859c 	.word	0x0801859c
 800c6e4:	080184a4 	.word	0x080184a4
 800c6e8:	080185b4 	.word	0x080185b4
 800c6ec:	20004108 	.word	0x20004108
 800c6f0:	20004104 	.word	0x20004104

0800c6f4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b088      	sub	sp, #32
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800c6fe:	88fb      	ldrh	r3, [r7, #6]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d101      	bne.n	800c708 <mem_malloc+0x14>
    return NULL;
 800c704:	2300      	movs	r3, #0
 800c706:	e0d1      	b.n	800c8ac <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800c708:	88fb      	ldrh	r3, [r7, #6]
 800c70a:	3303      	adds	r3, #3
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	f023 0303 	bic.w	r3, r3, #3
 800c712:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800c714:	88fb      	ldrh	r3, [r7, #6]
 800c716:	2b0b      	cmp	r3, #11
 800c718:	d801      	bhi.n	800c71e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c71a:	230c      	movs	r3, #12
 800c71c:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800c71e:	88fb      	ldrh	r3, [r7, #6]
 800c720:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c724:	d901      	bls.n	800c72a <mem_malloc+0x36>
    return NULL;
 800c726:	2300      	movs	r3, #0
 800c728:	e0c0      	b.n	800c8ac <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c72a:	4862      	ldr	r0, [pc, #392]	; (800c8b4 <mem_malloc+0x1c0>)
 800c72c:	f009 fef8 	bl	8016520 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800c730:	4b61      	ldr	r3, [pc, #388]	; (800c8b8 <mem_malloc+0x1c4>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	461a      	mov	r2, r3
 800c736:	4b61      	ldr	r3, [pc, #388]	; (800c8bc <mem_malloc+0x1c8>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	1ad3      	subs	r3, r2, r3
 800c73c:	83fb      	strh	r3, [r7, #30]
 800c73e:	e0aa      	b.n	800c896 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800c740:	4b5e      	ldr	r3, [pc, #376]	; (800c8bc <mem_malloc+0x1c8>)
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	8bfb      	ldrh	r3, [r7, #30]
 800c746:	4413      	add	r3, r2
 800c748:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	791b      	ldrb	r3, [r3, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	f040 809b 	bne.w	800c88a <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	881b      	ldrh	r3, [r3, #0]
 800c758:	461a      	mov	r2, r3
 800c75a:	8bfb      	ldrh	r3, [r7, #30]
 800c75c:	1ad3      	subs	r3, r2, r3
 800c75e:	f1a3 0208 	sub.w	r2, r3, #8
 800c762:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800c764:	429a      	cmp	r2, r3
 800c766:	f0c0 8090 	bcc.w	800c88a <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	881b      	ldrh	r3, [r3, #0]
 800c76e:	461a      	mov	r2, r3
 800c770:	8bfb      	ldrh	r3, [r7, #30]
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	f1a3 0208 	sub.w	r2, r3, #8
 800c778:	88fb      	ldrh	r3, [r7, #6]
 800c77a:	3314      	adds	r3, #20
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d327      	bcc.n	800c7d0 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800c780:	8bfa      	ldrh	r2, [r7, #30]
 800c782:	88fb      	ldrh	r3, [r7, #6]
 800c784:	4413      	add	r3, r2
 800c786:	b29b      	uxth	r3, r3
 800c788:	3308      	adds	r3, #8
 800c78a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800c78c:	4b4b      	ldr	r3, [pc, #300]	; (800c8bc <mem_malloc+0x1c8>)
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	8a7b      	ldrh	r3, [r7, #18]
 800c792:	4413      	add	r3, r2
 800c794:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2200      	movs	r2, #0
 800c79a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	881a      	ldrh	r2, [r3, #0]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	8bfa      	ldrh	r2, [r7, #30]
 800c7a8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	8a7a      	ldrh	r2, [r7, #18]
 800c7ae:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	881b      	ldrh	r3, [r3, #0]
 800c7ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c7be:	d00a      	beq.n	800c7d6 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c7c0:	4b3e      	ldr	r3, [pc, #248]	; (800c8bc <mem_malloc+0x1c8>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	8812      	ldrh	r2, [r2, #0]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	8a7a      	ldrh	r2, [r7, #18]
 800c7cc:	805a      	strh	r2, [r3, #2]
 800c7ce:	e002      	b.n	800c7d6 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c7d6:	4b38      	ldr	r3, [pc, #224]	; (800c8b8 <mem_malloc+0x1c4>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	697a      	ldr	r2, [r7, #20]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d127      	bne.n	800c830 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800c7e0:	4b35      	ldr	r3, [pc, #212]	; (800c8b8 <mem_malloc+0x1c4>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c7e6:	e005      	b.n	800c7f4 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800c7e8:	4b34      	ldr	r3, [pc, #208]	; (800c8bc <mem_malloc+0x1c8>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	69ba      	ldr	r2, [r7, #24]
 800c7ee:	8812      	ldrh	r2, [r2, #0]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c7f4:	69bb      	ldr	r3, [r7, #24]
 800c7f6:	791b      	ldrb	r3, [r3, #4]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d004      	beq.n	800c806 <mem_malloc+0x112>
 800c7fc:	4b30      	ldr	r3, [pc, #192]	; (800c8c0 <mem_malloc+0x1cc>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	69ba      	ldr	r2, [r7, #24]
 800c802:	429a      	cmp	r2, r3
 800c804:	d1f0      	bne.n	800c7e8 <mem_malloc+0xf4>
          }
          lfree = cur;
 800c806:	4a2c      	ldr	r2, [pc, #176]	; (800c8b8 <mem_malloc+0x1c4>)
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c80c:	4b2a      	ldr	r3, [pc, #168]	; (800c8b8 <mem_malloc+0x1c4>)
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	4b2b      	ldr	r3, [pc, #172]	; (800c8c0 <mem_malloc+0x1cc>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	429a      	cmp	r2, r3
 800c816:	d00b      	beq.n	800c830 <mem_malloc+0x13c>
 800c818:	4b27      	ldr	r3, [pc, #156]	; (800c8b8 <mem_malloc+0x1c4>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	791b      	ldrb	r3, [r3, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d006      	beq.n	800c830 <mem_malloc+0x13c>
 800c822:	4b28      	ldr	r3, [pc, #160]	; (800c8c4 <mem_malloc+0x1d0>)
 800c824:	f240 22cf 	movw	r2, #719	; 0x2cf
 800c828:	4927      	ldr	r1, [pc, #156]	; (800c8c8 <mem_malloc+0x1d4>)
 800c82a:	4828      	ldr	r0, [pc, #160]	; (800c8cc <mem_malloc+0x1d8>)
 800c82c:	f009 ff48 	bl	80166c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c830:	4820      	ldr	r0, [pc, #128]	; (800c8b4 <mem_malloc+0x1c0>)
 800c832:	f009 fe84 	bl	801653e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c836:	88fa      	ldrh	r2, [r7, #6]
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	4413      	add	r3, r2
 800c83c:	3308      	adds	r3, #8
 800c83e:	4a20      	ldr	r2, [pc, #128]	; (800c8c0 <mem_malloc+0x1cc>)
 800c840:	6812      	ldr	r2, [r2, #0]
 800c842:	4293      	cmp	r3, r2
 800c844:	d906      	bls.n	800c854 <mem_malloc+0x160>
 800c846:	4b1f      	ldr	r3, [pc, #124]	; (800c8c4 <mem_malloc+0x1d0>)
 800c848:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c84c:	4920      	ldr	r1, [pc, #128]	; (800c8d0 <mem_malloc+0x1dc>)
 800c84e:	481f      	ldr	r0, [pc, #124]	; (800c8cc <mem_malloc+0x1d8>)
 800c850:	f009 ff36 	bl	80166c0 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	f003 0303 	and.w	r3, r3, #3
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d006      	beq.n	800c86c <mem_malloc+0x178>
 800c85e:	4b19      	ldr	r3, [pc, #100]	; (800c8c4 <mem_malloc+0x1d0>)
 800c860:	f240 22d6 	movw	r2, #726	; 0x2d6
 800c864:	491b      	ldr	r1, [pc, #108]	; (800c8d4 <mem_malloc+0x1e0>)
 800c866:	4819      	ldr	r0, [pc, #100]	; (800c8cc <mem_malloc+0x1d8>)
 800c868:	f009 ff2a 	bl	80166c0 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	f003 0303 	and.w	r3, r3, #3
 800c872:	2b00      	cmp	r3, #0
 800c874:	d006      	beq.n	800c884 <mem_malloc+0x190>
 800c876:	4b13      	ldr	r3, [pc, #76]	; (800c8c4 <mem_malloc+0x1d0>)
 800c878:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800c87c:	4916      	ldr	r1, [pc, #88]	; (800c8d8 <mem_malloc+0x1e4>)
 800c87e:	4813      	ldr	r0, [pc, #76]	; (800c8cc <mem_malloc+0x1d8>)
 800c880:	f009 ff1e 	bl	80166c0 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	3308      	adds	r3, #8
 800c888:	e010      	b.n	800c8ac <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800c88a:	4b0c      	ldr	r3, [pc, #48]	; (800c8bc <mem_malloc+0x1c8>)
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	8bfb      	ldrh	r3, [r7, #30]
 800c890:	4413      	add	r3, r2
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800c896:	8bfa      	ldrh	r2, [r7, #30]
 800c898:	88fb      	ldrh	r3, [r7, #6]
 800c89a:	f5c3 5340 	rsb	r3, r3, #12288	; 0x3000
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	f4ff af4e 	bcc.w	800c740 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c8a4:	4803      	ldr	r0, [pc, #12]	; (800c8b4 <mem_malloc+0x1c0>)
 800c8a6:	f009 fe4a 	bl	801653e <sys_mutex_unlock>
  return NULL;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3720      	adds	r7, #32
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	20004108 	.word	0x20004108
 800c8b8:	20004104 	.word	0x20004104
 800c8bc:	200040fc 	.word	0x200040fc
 800c8c0:	20004100 	.word	0x20004100
 800c8c4:	0801845c 	.word	0x0801845c
 800c8c8:	080185d4 	.word	0x080185d4
 800c8cc:	080184a4 	.word	0x080184a4
 800c8d0:	080185f0 	.word	0x080185f0
 800c8d4:	08018620 	.word	0x08018620
 800c8d8:	08018650 	.word	0x08018650

0800c8dc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	3303      	adds	r3, #3
 800c8f2:	f023 0303 	bic.w	r3, r3, #3
 800c8f6:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	60fb      	str	r3, [r7, #12]
 800c8fc:	e011      	b.n	800c922 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	689b      	ldr	r3, [r3, #8]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	68ba      	ldr	r2, [r7, #8]
 800c90e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	881b      	ldrh	r3, [r3, #0]
 800c914:	461a      	mov	r2, r3
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	4413      	add	r3, r2
 800c91a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	3301      	adds	r3, #1
 800c920:	60fb      	str	r3, [r7, #12]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	885b      	ldrh	r3, [r3, #2]
 800c926:	461a      	mov	r2, r3
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	4293      	cmp	r3, r2
 800c92c:	dbe7      	blt.n	800c8fe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c92e:	bf00      	nop
 800c930:	3714      	adds	r7, #20
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
	...

0800c93c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c942:	2300      	movs	r3, #0
 800c944:	80fb      	strh	r3, [r7, #6]
 800c946:	e009      	b.n	800c95c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c948:	88fb      	ldrh	r3, [r7, #6]
 800c94a:	4a08      	ldr	r2, [pc, #32]	; (800c96c <memp_init+0x30>)
 800c94c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c950:	4618      	mov	r0, r3
 800c952:	f7ff ffc3 	bl	800c8dc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c956:	88fb      	ldrh	r3, [r7, #6]
 800c958:	3301      	adds	r3, #1
 800c95a:	80fb      	strh	r3, [r7, #6]
 800c95c:	88fb      	ldrh	r3, [r7, #6]
 800c95e:	2b0c      	cmp	r3, #12
 800c960:	d9f2      	bls.n	800c948 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c962:	bf00      	nop
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	0801a21c 	.word	0x0801a21c

0800c970 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c978:	f009 fe14 	bl	80165a4 <sys_arch_protect>
 800c97c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d015      	beq.n	800c9b8 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	68ba      	ldr	r2, [r7, #8]
 800c992:	6812      	ldr	r2, [r2, #0]
 800c994:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	f003 0303 	and.w	r3, r3, #3
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d006      	beq.n	800c9ae <do_memp_malloc_pool+0x3e>
 800c9a0:	4b09      	ldr	r3, [pc, #36]	; (800c9c8 <do_memp_malloc_pool+0x58>)
 800c9a2:	f240 1249 	movw	r2, #329	; 0x149
 800c9a6:	4909      	ldr	r1, [pc, #36]	; (800c9cc <do_memp_malloc_pool+0x5c>)
 800c9a8:	4809      	ldr	r0, [pc, #36]	; (800c9d0 <do_memp_malloc_pool+0x60>)
 800c9aa:	f009 fe89 	bl	80166c0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	f009 fe06 	bl	80165c0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	e003      	b.n	800c9c0 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f009 fe01 	bl	80165c0 <sys_arch_unprotect>
  return NULL;
 800c9be:	2300      	movs	r3, #0
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3710      	adds	r7, #16
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	08018674 	.word	0x08018674
 800c9cc:	080186a4 	.word	0x080186a4
 800c9d0:	080186c8 	.word	0x080186c8

0800c9d4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	4603      	mov	r3, r0
 800c9dc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c9de:	79fb      	ldrb	r3, [r7, #7]
 800c9e0:	2b0c      	cmp	r3, #12
 800c9e2:	d908      	bls.n	800c9f6 <memp_malloc+0x22>
 800c9e4:	4b0a      	ldr	r3, [pc, #40]	; (800ca10 <memp_malloc+0x3c>)
 800c9e6:	f240 1287 	movw	r2, #391	; 0x187
 800c9ea:	490a      	ldr	r1, [pc, #40]	; (800ca14 <memp_malloc+0x40>)
 800c9ec:	480a      	ldr	r0, [pc, #40]	; (800ca18 <memp_malloc+0x44>)
 800c9ee:	f009 fe67 	bl	80166c0 <iprintf>
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	e008      	b.n	800ca08 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c9f6:	79fb      	ldrb	r3, [r7, #7]
 800c9f8:	4a08      	ldr	r2, [pc, #32]	; (800ca1c <memp_malloc+0x48>)
 800c9fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7ff ffb6 	bl	800c970 <do_memp_malloc_pool>
 800ca04:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ca06:	68fb      	ldr	r3, [r7, #12]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	08018674 	.word	0x08018674
 800ca14:	08018704 	.word	0x08018704
 800ca18:	080186c8 	.word	0x080186c8
 800ca1c:	0801a21c 	.word	0x0801a21c

0800ca20 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	f003 0303 	and.w	r3, r3, #3
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d006      	beq.n	800ca42 <do_memp_free_pool+0x22>
 800ca34:	4b0d      	ldr	r3, [pc, #52]	; (800ca6c <do_memp_free_pool+0x4c>)
 800ca36:	f240 129d 	movw	r2, #413	; 0x19d
 800ca3a:	490d      	ldr	r1, [pc, #52]	; (800ca70 <do_memp_free_pool+0x50>)
 800ca3c:	480d      	ldr	r0, [pc, #52]	; (800ca74 <do_memp_free_pool+0x54>)
 800ca3e:	f009 fe3f 	bl	80166c0 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ca46:	f009 fdad 	bl	80165a4 <sys_arch_protect>
 800ca4a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ca5e:	68b8      	ldr	r0, [r7, #8]
 800ca60:	f009 fdae 	bl	80165c0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ca64:	bf00      	nop
 800ca66:	3710      	adds	r7, #16
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	08018674 	.word	0x08018674
 800ca70:	08018724 	.word	0x08018724
 800ca74:	080186c8 	.word	0x080186c8

0800ca78 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	4603      	mov	r3, r0
 800ca80:	6039      	str	r1, [r7, #0]
 800ca82:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ca84:	79fb      	ldrb	r3, [r7, #7]
 800ca86:	2b0c      	cmp	r3, #12
 800ca88:	d907      	bls.n	800ca9a <memp_free+0x22>
 800ca8a:	4b0c      	ldr	r3, [pc, #48]	; (800cabc <memp_free+0x44>)
 800ca8c:	f240 12db 	movw	r2, #475	; 0x1db
 800ca90:	490b      	ldr	r1, [pc, #44]	; (800cac0 <memp_free+0x48>)
 800ca92:	480c      	ldr	r0, [pc, #48]	; (800cac4 <memp_free+0x4c>)
 800ca94:	f009 fe14 	bl	80166c0 <iprintf>
 800ca98:	e00c      	b.n	800cab4 <memp_free+0x3c>

  if (mem == NULL) {
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d008      	beq.n	800cab2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800caa0:	79fb      	ldrb	r3, [r7, #7]
 800caa2:	4a09      	ldr	r2, [pc, #36]	; (800cac8 <memp_free+0x50>)
 800caa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caa8:	6839      	ldr	r1, [r7, #0]
 800caaa:	4618      	mov	r0, r3
 800caac:	f7ff ffb8 	bl	800ca20 <do_memp_free_pool>
 800cab0:	e000      	b.n	800cab4 <memp_free+0x3c>
    return;
 800cab2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	08018674 	.word	0x08018674
 800cac0:	08018744 	.word	0x08018744
 800cac4:	080186c8 	.word	0x080186c8
 800cac8:	0801a21c 	.word	0x0801a21c

0800cacc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cacc:	b480      	push	{r7}
 800cace:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cad0:	bf00      	nop
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
	...

0800cadc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d105      	bne.n	800cafc <netif_add+0x20>
 800caf0:	4b22      	ldr	r3, [pc, #136]	; (800cb7c <netif_add+0xa0>)
 800caf2:	22fb      	movs	r2, #251	; 0xfb
 800caf4:	4922      	ldr	r1, [pc, #136]	; (800cb80 <netif_add+0xa4>)
 800caf6:	4823      	ldr	r0, [pc, #140]	; (800cb84 <netif_add+0xa8>)
 800caf8:	f009 fde2 	bl	80166c0 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2200      	movs	r2, #0
 800cb06:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2200      	movs	r2, #0
 800cb12:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2203      	movs	r2, #3
 800cb1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2200      	movs	r2, #0
 800cb22:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	69ba      	ldr	r2, [r7, #24]
 800cb2e:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
 800cb30:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <netif_add+0xac>)
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	1c5a      	adds	r2, r3, #1
 800cb36:	b2d1      	uxtb	r1, r2
 800cb38:	4a13      	ldr	r2, [pc, #76]	; (800cb88 <netif_add+0xac>)
 800cb3a:	7011      	strb	r1, [r2, #0]
 800cb3c:	68fa      	ldr	r2, [r7, #12]
 800cb3e:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  netif->input = input;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6a3a      	ldr	r2, [r7, #32]
 800cb46:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	68b9      	ldr	r1, [r7, #8]
 800cb4e:	68f8      	ldr	r0, [r7, #12]
 800cb50:	f000 f81e 	bl	800cb90 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	4798      	blx	r3
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <netif_add+0x88>
    return NULL;
 800cb60:	2300      	movs	r3, #0
 800cb62:	e007      	b.n	800cb74 <netif_add+0x98>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cb64:	4b09      	ldr	r3, [pc, #36]	; (800cb8c <netif_add+0xb0>)
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cb6c:	4a07      	ldr	r2, [pc, #28]	; (800cb8c <netif_add+0xb0>)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800cb72:	68fb      	ldr	r3, [r7, #12]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	08018760 	.word	0x08018760
 800cb80:	08018794 	.word	0x08018794
 800cb84:	080187ac 	.word	0x080187ac
 800cb88:	20004140 	.word	0x20004140
 800cb8c:	2000dc44 	.word	0x2000dc44

0800cb90 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
 800cb9c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d003      	beq.n	800cbac <netif_set_addr+0x1c>
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d10c      	bne.n	800cbc6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800cbac:	68b9      	ldr	r1, [r7, #8]
 800cbae:	68f8      	ldr	r0, [r7, #12]
 800cbb0:	f000 f81a 	bl	800cbe8 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800cbb4:	6879      	ldr	r1, [r7, #4]
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f000 f86a 	bl	800cc90 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800cbbc:	6839      	ldr	r1, [r7, #0]
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f000 f852 	bl	800cc68 <netif_set_gw>
 800cbc4:	e00b      	b.n	800cbde <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800cbc6:	6879      	ldr	r1, [r7, #4]
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f000 f861 	bl	800cc90 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800cbce:	6839      	ldr	r1, [r7, #0]
 800cbd0:	68f8      	ldr	r0, [r7, #12]
 800cbd2:	f000 f849 	bl	800cc68 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800cbd6:	68b9      	ldr	r1, [r7, #8]
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f000 f805 	bl	800cbe8 <netif_set_ipaddr>
  }
}
 800cbde:	bf00      	nop
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
	...

0800cbe8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d003      	beq.n	800cc00 <netif_set_ipaddr+0x18>
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	60fb      	str	r3, [r7, #12]
 800cbfe:	e002      	b.n	800cc06 <netif_set_ipaddr+0x1e>
 800cc00:	4b18      	ldr	r3, [pc, #96]	; (800cc64 <netif_set_ipaddr+0x7c>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	3304      	adds	r3, #4
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d024      	beq.n	800cc5c <netif_set_ipaddr+0x74>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	3304      	adds	r3, #4
 800cc16:	f107 020c 	add.w	r2, r7, #12
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f002 fc77 	bl	800f510 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	3304      	adds	r3, #4
 800cc26:	f107 020c 	add.w	r2, r7, #12
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f007 f815 	bl	8013c5c <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d002      	beq.n	800cc3e <netif_set_ipaddr+0x56>
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	e000      	b.n	800cc40 <netif_set_ipaddr+0x58>
 800cc3e:	2300      	movs	r3, #0
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cc44:	2101      	movs	r1, #1
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f871 	bl	800cd2e <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	69db      	ldr	r3, [r3, #28]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d003      	beq.n	800cc5c <netif_set_ipaddr+0x74>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	69db      	ldr	r3, [r3, #28]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	4798      	blx	r3
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800cc5c:	bf00      	nop
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	0801a290 	.word	0x0801a290

0800cc68 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d002      	beq.n	800cc7e <netif_set_gw+0x16>
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	e000      	b.n	800cc80 <netif_set_gw+0x18>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800cc84:	bf00      	nop
 800cc86:	370c      	adds	r7, #12
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d002      	beq.n	800cca6 <netif_set_netmask+0x16>
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	e000      	b.n	800cca8 <netif_set_netmask+0x18>
 800cca6:	2300      	movs	r3, #0
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ccc0:	4a04      	ldr	r2, [pc, #16]	; (800ccd4 <netif_set_default+0x1c>)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ccc6:	bf00      	nop
 800ccc8:	370c      	adds	r7, #12
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop
 800ccd4:	2000dc48 	.word	0x2000dc48

0800ccd8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800cce6:	f003 0301 	and.w	r3, r3, #1
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d11b      	bne.n	800cd26 <netif_set_up+0x4e>
    netif->flags |= NETIF_FLAG_UP;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ccf4:	f043 0301 	orr.w	r3, r3, #1
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	69db      	ldr	r3, [r3, #28]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d003      	beq.n	800cd10 <netif_set_up+0x38>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	69db      	ldr	r3, [r3, #28]
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	4798      	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800cd16:	f003 0304 	and.w	r3, r3, #4
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d003      	beq.n	800cd26 <netif_set_up+0x4e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800cd1e:	2103      	movs	r1, #3
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f804 	bl	800cd2e <netif_issue_reports>
    }
  }
}
 800cd26:	bf00      	nop
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b082      	sub	sp, #8
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
 800cd36:	460b      	mov	r3, r1
 800cd38:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cd3a:	78fb      	ldrb	r3, [r7, #3]
 800cd3c:	f003 0301 	and.w	r3, r3, #1
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d011      	beq.n	800cd68 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	3304      	adds	r3, #4
 800cd48:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00c      	beq.n	800cd68 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800cd54:	f003 0308 	and.w	r3, r3, #8
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d005      	beq.n	800cd68 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	3304      	adds	r3, #4
 800cd60:	4619      	mov	r1, r3
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f007 feae 	bl	8014ac4 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800cd68:	bf00      	nop
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800cd7e:	f003 0301 	and.w	r3, r3, #1
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d01a      	beq.n	800cdbc <netif_set_down+0x4c>
    netif->flags &= ~NETIF_FLAG_UP;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800cd8c:	f023 0301 	bic.w	r3, r3, #1
 800cd90:	b2da      	uxtb	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800cd9e:	f003 0308 	and.w	r3, r3, #8
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d002      	beq.n	800cdac <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f007 fa52 	bl	8014250 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	69db      	ldr	r3, [r3, #28]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d003      	beq.n	800cdbc <netif_set_down+0x4c>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	69db      	ldr	r3, [r3, #28]
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	4798      	blx	r3
  }
}
 800cdbc:	bf00      	nop
 800cdbe:	3708      	adds	r7, #8
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800cdd2:	f003 0304 	and.w	r3, r3, #4
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d11b      	bne.n	800ce12 <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800cde0:	f043 0304 	orr.w	r3, r3, #4
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800cdf2:	f003 0301 	and.w	r3, r3, #1
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d003      	beq.n	800ce02 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800cdfa:	2103      	movs	r1, #3
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f7ff ff96 	bl	800cd2e <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6a1b      	ldr	r3, [r3, #32]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d003      	beq.n	800ce12 <netif_set_link_up+0x4e>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a1b      	ldr	r3, [r3, #32]
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	4798      	blx	r3
  }
}
 800ce12:	bf00      	nop
 800ce14:	3708      	adds	r7, #8
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b082      	sub	sp, #8
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ce28:	f003 0304 	and.w	r3, r3, #4
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d010      	beq.n	800ce52 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ce36:	f023 0304 	bic.w	r3, r3, #4
 800ce3a:	b2da      	uxtb	r2, r3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    NETIF_LINK_CALLBACK(netif);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6a1b      	ldr	r3, [r3, #32]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d003      	beq.n	800ce52 <netif_set_link_down+0x38>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6a1b      	ldr	r3, [r3, #32]
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	4798      	blx	r3
  }
}
 800ce52:	bf00      	nop
 800ce54:	3708      	adds	r7, #8
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ce5a:	b480      	push	{r7}
 800ce5c:	b083      	sub	sp, #12
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
 800ce62:	6039      	str	r1, [r7, #0]
  if (netif) {
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d002      	beq.n	800ce70 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	683a      	ldr	r2, [r7, #0]
 800ce6e:	621a      	str	r2, [r3, #32]
  }
}
 800ce70:	bf00      	nop
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ce82:	f009 fb8f 	bl	80165a4 <sys_arch_protect>
 800ce86:	6038      	str	r0, [r7, #0]
 800ce88:	4b0f      	ldr	r3, [pc, #60]	; (800cec8 <pbuf_free_ooseq+0x4c>)
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	6838      	ldr	r0, [r7, #0]
 800ce90:	f009 fb96 	bl	80165c0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ce94:	4b0d      	ldr	r3, [pc, #52]	; (800cecc <pbuf_free_ooseq+0x50>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	607b      	str	r3, [r7, #4]
 800ce9a:	e00f      	b.n	800cebc <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d008      	beq.n	800ceb6 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f001 ffa0 	bl	800edee <tcp_segs_free>
      pcb->ooseq = NULL;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800ceb4:	e005      	b.n	800cec2 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	607b      	str	r3, [r7, #4]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1ec      	bne.n	800ce9c <pbuf_free_ooseq+0x20>
    }
  }
}
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	2000dc4c 	.word	0x2000dc4c
 800cecc:	2000dc54 	.word	0x2000dc54

0800ced0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ced8:	f7ff ffd0 	bl	800ce7c <pbuf_free_ooseq>
}
 800cedc:	bf00      	nop
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ceea:	f009 fb5b 	bl	80165a4 <sys_arch_protect>
 800ceee:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cef0:	4b10      	ldr	r3, [pc, #64]	; (800cf34 <pbuf_pool_is_empty+0x50>)
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cef6:	4b0f      	ldr	r3, [pc, #60]	; (800cf34 <pbuf_pool_is_empty+0x50>)
 800cef8:	2201      	movs	r2, #1
 800cefa:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f009 fb5f 	bl	80165c0 <sys_arch_unprotect>

  if (!queued) {
 800cf02:	78fb      	ldrb	r3, [r7, #3]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d110      	bne.n	800cf2a <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cf08:	2200      	movs	r2, #0
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	480a      	ldr	r0, [pc, #40]	; (800cf38 <pbuf_pool_is_empty+0x54>)
 800cf0e:	f7ff f8c9 	bl	800c0a4 <tcpip_callback_with_block>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d008      	beq.n	800cf2a <pbuf_pool_is_empty+0x46>
 800cf18:	f009 fb44 	bl	80165a4 <sys_arch_protect>
 800cf1c:	6078      	str	r0, [r7, #4]
 800cf1e:	4b05      	ldr	r3, [pc, #20]	; (800cf34 <pbuf_pool_is_empty+0x50>)
 800cf20:	2200      	movs	r2, #0
 800cf22:	701a      	strb	r2, [r3, #0]
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f009 fb4b 	bl	80165c0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cf2a:	bf00      	nop
 800cf2c:	3708      	adds	r7, #8
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	2000dc4c 	.word	0x2000dc4c
 800cf38:	0800ced1 	.word	0x0800ced1

0800cf3c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b088      	sub	sp, #32
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	4603      	mov	r3, r0
 800cf44:	71fb      	strb	r3, [r7, #7]
 800cf46:	460b      	mov	r3, r1
 800cf48:	80bb      	strh	r3, [r7, #4]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800cf4e:	79fb      	ldrb	r3, [r7, #7]
 800cf50:	2b04      	cmp	r3, #4
 800cf52:	d81c      	bhi.n	800cf8e <pbuf_alloc+0x52>
 800cf54:	a201      	add	r2, pc, #4	; (adr r2, 800cf5c <pbuf_alloc+0x20>)
 800cf56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf5a:	bf00      	nop
 800cf5c:	0800cf71 	.word	0x0800cf71
 800cf60:	0800cf77 	.word	0x0800cf77
 800cf64:	0800cf7d 	.word	0x0800cf7d
 800cf68:	0800cf83 	.word	0x0800cf83
 800cf6c:	0800cf89 	.word	0x0800cf89
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800cf70:	2336      	movs	r3, #54	; 0x36
 800cf72:	82fb      	strh	r3, [r7, #22]
    break;
 800cf74:	e014      	b.n	800cfa0 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800cf76:	2322      	movs	r3, #34	; 0x22
 800cf78:	82fb      	strh	r3, [r7, #22]
    break;
 800cf7a:	e011      	b.n	800cfa0 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800cf7c:	230e      	movs	r3, #14
 800cf7e:	82fb      	strh	r3, [r7, #22]
    break;
 800cf80:	e00e      	b.n	800cfa0 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800cf82:	2300      	movs	r3, #0
 800cf84:	82fb      	strh	r3, [r7, #22]
    break;
 800cf86:	e00b      	b.n	800cfa0 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	82fb      	strh	r3, [r7, #22]
    break;
 800cf8c:	e008      	b.n	800cfa0 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800cf8e:	4ba5      	ldr	r3, [pc, #660]	; (800d224 <pbuf_alloc+0x2e8>)
 800cf90:	f44f 728b 	mov.w	r2, #278	; 0x116
 800cf94:	49a4      	ldr	r1, [pc, #656]	; (800d228 <pbuf_alloc+0x2ec>)
 800cf96:	48a5      	ldr	r0, [pc, #660]	; (800d22c <pbuf_alloc+0x2f0>)
 800cf98:	f009 fb92 	bl	80166c0 <iprintf>
    return NULL;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	e15d      	b.n	800d25c <pbuf_alloc+0x320>
  }

  switch (type) {
 800cfa0:	79bb      	ldrb	r3, [r7, #6]
 800cfa2:	2b03      	cmp	r3, #3
 800cfa4:	f200 8134 	bhi.w	800d210 <pbuf_alloc+0x2d4>
 800cfa8:	a201      	add	r2, pc, #4	; (adr r2, 800cfb0 <pbuf_alloc+0x74>)
 800cfaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfae:	bf00      	nop
 800cfb0:	0800d151 	.word	0x0800d151
 800cfb4:	0800d1dd 	.word	0x0800d1dd
 800cfb8:	0800d1dd 	.word	0x0800d1dd
 800cfbc:	0800cfc1 	.word	0x0800cfc1
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cfc0:	200c      	movs	r0, #12
 800cfc2:	f7ff fd07 	bl	800c9d4 <memp_malloc>
 800cfc6:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d103      	bne.n	800cfd6 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800cfce:	f7ff ff89 	bl	800cee4 <pbuf_pool_is_empty>
      return NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	e142      	b.n	800d25c <pbuf_alloc+0x320>
    }
    p->type = type;
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	79ba      	ldrb	r2, [r7, #6]
 800cfda:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800cfe2:	8afb      	ldrh	r3, [r7, #22]
 800cfe4:	3310      	adds	r3, #16
 800cfe6:	69fa      	ldr	r2, [r7, #28]
 800cfe8:	4413      	add	r3, r2
 800cfea:	3303      	adds	r3, #3
 800cfec:	f023 0303 	bic.w	r3, r3, #3
 800cff0:	461a      	mov	r2, r3
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	f003 0303 	and.w	r3, r3, #3
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d006      	beq.n	800d010 <pbuf_alloc+0xd4>
 800d002:	4b88      	ldr	r3, [pc, #544]	; (800d224 <pbuf_alloc+0x2e8>)
 800d004:	f240 1229 	movw	r2, #297	; 0x129
 800d008:	4989      	ldr	r1, [pc, #548]	; (800d230 <pbuf_alloc+0x2f4>)
 800d00a:	4888      	ldr	r0, [pc, #544]	; (800d22c <pbuf_alloc+0x2f0>)
 800d00c:	f009 fb58 	bl	80166c0 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800d010:	69fb      	ldr	r3, [r7, #28]
 800d012:	88ba      	ldrh	r2, [r7, #4]
 800d014:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800d016:	8afb      	ldrh	r3, [r7, #22]
 800d018:	3303      	adds	r3, #3
 800d01a:	f023 0303 	bic.w	r3, r3, #3
 800d01e:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800d022:	88bb      	ldrh	r3, [r7, #4]
 800d024:	4293      	cmp	r3, r2
 800d026:	bf28      	it	cs
 800d028:	4613      	movcs	r3, r2
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	69fa      	ldr	r2, [r7, #28]
 800d036:	8952      	ldrh	r2, [r2, #10]
 800d038:	441a      	add	r2, r3
 800d03a:	69fb      	ldr	r3, [r7, #28]
 800d03c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d040:	429a      	cmp	r2, r3
 800d042:	d906      	bls.n	800d052 <pbuf_alloc+0x116>
 800d044:	4b77      	ldr	r3, [pc, #476]	; (800d224 <pbuf_alloc+0x2e8>)
 800d046:	f44f 7298 	mov.w	r2, #304	; 0x130
 800d04a:	497a      	ldr	r1, [pc, #488]	; (800d234 <pbuf_alloc+0x2f8>)
 800d04c:	4877      	ldr	r0, [pc, #476]	; (800d22c <pbuf_alloc+0x2f0>)
 800d04e:	f009 fb37 	bl	80166c0 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d052:	8afb      	ldrh	r3, [r7, #22]
 800d054:	3303      	adds	r3, #3
 800d056:	f023 0303 	bic.w	r3, r3, #3
 800d05a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d05e:	d106      	bne.n	800d06e <pbuf_alloc+0x132>
 800d060:	4b70      	ldr	r3, [pc, #448]	; (800d224 <pbuf_alloc+0x2e8>)
 800d062:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d066:	4974      	ldr	r1, [pc, #464]	; (800d238 <pbuf_alloc+0x2fc>)
 800d068:	4870      	ldr	r0, [pc, #448]	; (800d22c <pbuf_alloc+0x2f0>)
 800d06a:	f009 fb29 	bl	80166c0 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	2201      	movs	r2, #1
 800d072:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800d078:	88bb      	ldrh	r3, [r7, #4]
 800d07a:	69fa      	ldr	r2, [r7, #28]
 800d07c:	8952      	ldrh	r2, [r2, #10]
 800d07e:	1a9b      	subs	r3, r3, r2
 800d080:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800d082:	e061      	b.n	800d148 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d084:	200c      	movs	r0, #12
 800d086:	f7ff fca5 	bl	800c9d4 <memp_malloc>
 800d08a:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d106      	bne.n	800d0a0 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800d092:	f7ff ff27 	bl	800cee4 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800d096:	69f8      	ldr	r0, [r7, #28]
 800d098:	f000 fac2 	bl	800d620 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800d09c:	2300      	movs	r3, #0
 800d09e:	e0dd      	b.n	800d25c <pbuf_alloc+0x320>
      }
      q->type = type;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	79ba      	ldrb	r2, [r7, #6]
 800d0a4:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	dd06      	ble.n	800d0d0 <pbuf_alloc+0x194>
 800d0c2:	4b58      	ldr	r3, [pc, #352]	; (800d224 <pbuf_alloc+0x2e8>)
 800d0c4:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800d0c8:	495c      	ldr	r1, [pc, #368]	; (800d23c <pbuf_alloc+0x300>)
 800d0ca:	4858      	ldr	r0, [pc, #352]	; (800d22c <pbuf_alloc+0x2f0>)
 800d0cc:	f009 faf8 	bl	80166c0 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d0e0:	bf28      	it	cs
 800d0e2:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f103 0210 	add.w	r2, r3, #16
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	f003 0303 	and.w	r3, r3, #3
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d006      	beq.n	800d110 <pbuf_alloc+0x1d4>
 800d102:	4b48      	ldr	r3, [pc, #288]	; (800d224 <pbuf_alloc+0x2e8>)
 800d104:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800d108:	494d      	ldr	r1, [pc, #308]	; (800d240 <pbuf_alloc+0x304>)
 800d10a:	4848      	ldr	r0, [pc, #288]	; (800d22c <pbuf_alloc+0x2f0>)
 800d10c:	f009 fad8 	bl	80166c0 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800d110:	69fb      	ldr	r3, [r7, #28]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	69fa      	ldr	r2, [r7, #28]
 800d116:	8952      	ldrh	r2, [r2, #10]
 800d118:	441a      	add	r2, r3
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d120:	429a      	cmp	r2, r3
 800d122:	d906      	bls.n	800d132 <pbuf_alloc+0x1f6>
 800d124:	4b3f      	ldr	r3, [pc, #252]	; (800d224 <pbuf_alloc+0x2e8>)
 800d126:	f240 1255 	movw	r2, #341	; 0x155
 800d12a:	4942      	ldr	r1, [pc, #264]	; (800d234 <pbuf_alloc+0x2f8>)
 800d12c:	483f      	ldr	r0, [pc, #252]	; (800d22c <pbuf_alloc+0x2f0>)
 800d12e:	f009 fac7 	bl	80166c0 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2201      	movs	r2, #1
 800d136:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	895b      	ldrh	r3, [r3, #10]
 800d13c:	461a      	mov	r2, r3
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	1a9b      	subs	r3, r3, r2
 800d142:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	dc9a      	bgt.n	800d084 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800d14e:	e07e      	b.n	800d24e <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800d150:	8afb      	ldrh	r3, [r7, #22]
 800d152:	3313      	adds	r3, #19
 800d154:	b29b      	uxth	r3, r3
 800d156:	f023 0303 	bic.w	r3, r3, #3
 800d15a:	b29a      	uxth	r2, r3
 800d15c:	88bb      	ldrh	r3, [r7, #4]
 800d15e:	3303      	adds	r3, #3
 800d160:	b29b      	uxth	r3, r3
 800d162:	f023 0303 	bic.w	r3, r3, #3
 800d166:	b29b      	uxth	r3, r3
 800d168:	4413      	add	r3, r2
 800d16a:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800d16c:	897a      	ldrh	r2, [r7, #10]
 800d16e:	88bb      	ldrh	r3, [r7, #4]
 800d170:	3303      	adds	r3, #3
 800d172:	f023 0303 	bic.w	r3, r3, #3
 800d176:	429a      	cmp	r2, r3
 800d178:	d201      	bcs.n	800d17e <pbuf_alloc+0x242>
        return NULL;
 800d17a:	2300      	movs	r3, #0
 800d17c:	e06e      	b.n	800d25c <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800d17e:	897b      	ldrh	r3, [r7, #10]
 800d180:	4618      	mov	r0, r3
 800d182:	f7ff fab7 	bl	800c6f4 <mem_malloc>
 800d186:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d101      	bne.n	800d192 <pbuf_alloc+0x256>
      return NULL;
 800d18e:	2300      	movs	r3, #0
 800d190:	e064      	b.n	800d25c <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800d192:	8afb      	ldrh	r3, [r7, #22]
 800d194:	3310      	adds	r3, #16
 800d196:	69fa      	ldr	r2, [r7, #28]
 800d198:	4413      	add	r3, r2
 800d19a:	3303      	adds	r3, #3
 800d19c:	f023 0303 	bic.w	r3, r3, #3
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	88ba      	ldrh	r2, [r7, #4]
 800d1aa:	811a      	strh	r2, [r3, #8]
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	891a      	ldrh	r2, [r3, #8]
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	601a      	str	r2, [r3, #0]
    p->type = type;
 800d1ba:	69fb      	ldr	r3, [r7, #28]
 800d1bc:	79ba      	ldrb	r2, [r7, #6]
 800d1be:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	f003 0303 	and.w	r3, r3, #3
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d03f      	beq.n	800d24c <pbuf_alloc+0x310>
 800d1cc:	4b15      	ldr	r3, [pc, #84]	; (800d224 <pbuf_alloc+0x2e8>)
 800d1ce:	f240 1277 	movw	r2, #375	; 0x177
 800d1d2:	491c      	ldr	r1, [pc, #112]	; (800d244 <pbuf_alloc+0x308>)
 800d1d4:	4815      	ldr	r0, [pc, #84]	; (800d22c <pbuf_alloc+0x2f0>)
 800d1d6:	f009 fa73 	bl	80166c0 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800d1da:	e037      	b.n	800d24c <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d1dc:	200b      	movs	r0, #11
 800d1de:	f7ff fbf9 	bl	800c9d4 <memp_malloc>
 800d1e2:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d101      	bne.n	800d1ee <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	e036      	b.n	800d25c <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	88ba      	ldrh	r2, [r7, #4]
 800d1f8:	811a      	strh	r2, [r3, #8]
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	891a      	ldrh	r2, [r3, #8]
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	2200      	movs	r2, #0
 800d206:	601a      	str	r2, [r3, #0]
    p->type = type;
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	79ba      	ldrb	r2, [r7, #6]
 800d20c:	731a      	strb	r2, [r3, #12]
    break;
 800d20e:	e01e      	b.n	800d24e <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d210:	4b04      	ldr	r3, [pc, #16]	; (800d224 <pbuf_alloc+0x2e8>)
 800d212:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800d216:	490c      	ldr	r1, [pc, #48]	; (800d248 <pbuf_alloc+0x30c>)
 800d218:	4804      	ldr	r0, [pc, #16]	; (800d22c <pbuf_alloc+0x2f0>)
 800d21a:	f009 fa51 	bl	80166c0 <iprintf>
    return NULL;
 800d21e:	2300      	movs	r3, #0
 800d220:	e01c      	b.n	800d25c <pbuf_alloc+0x320>
 800d222:	bf00      	nop
 800d224:	080187d4 	.word	0x080187d4
 800d228:	08018804 	.word	0x08018804
 800d22c:	08018820 	.word	0x08018820
 800d230:	08018848 	.word	0x08018848
 800d234:	08018878 	.word	0x08018878
 800d238:	080188ac 	.word	0x080188ac
 800d23c:	080188e0 	.word	0x080188e0
 800d240:	080188f4 	.word	0x080188f4
 800d244:	08018924 	.word	0x08018924
 800d248:	08018950 	.word	0x08018950
    break;
 800d24c:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	2201      	movs	r2, #1
 800d252:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	2200      	movs	r2, #0
 800d258:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d25a:	69fb      	ldr	r3, [r7, #28]
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3720      	adds	r7, #32
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	603b      	str	r3, [r7, #0]
 800d26c:	4603      	mov	r3, r0
 800d26e:	71fb      	strb	r3, [r7, #7]
 800d270:	460b      	mov	r3, r1
 800d272:	80bb      	strh	r3, [r7, #4]
 800d274:	4613      	mov	r3, r2
 800d276:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800d278:	79fb      	ldrb	r3, [r7, #7]
 800d27a:	2b04      	cmp	r3, #4
 800d27c:	d81b      	bhi.n	800d2b6 <pbuf_alloced_custom+0x52>
 800d27e:	a201      	add	r2, pc, #4	; (adr r2, 800d284 <pbuf_alloced_custom+0x20>)
 800d280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d284:	0800d299 	.word	0x0800d299
 800d288:	0800d29f 	.word	0x0800d29f
 800d28c:	0800d2a5 	.word	0x0800d2a5
 800d290:	0800d2ab 	.word	0x0800d2ab
 800d294:	0800d2b1 	.word	0x0800d2b1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800d298:	2336      	movs	r3, #54	; 0x36
 800d29a:	81fb      	strh	r3, [r7, #14]
    break;
 800d29c:	e014      	b.n	800d2c8 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800d29e:	2322      	movs	r3, #34	; 0x22
 800d2a0:	81fb      	strh	r3, [r7, #14]
    break;
 800d2a2:	e011      	b.n	800d2c8 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800d2a4:	230e      	movs	r3, #14
 800d2a6:	81fb      	strh	r3, [r7, #14]
    break;
 800d2a8:	e00e      	b.n	800d2c8 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	81fb      	strh	r3, [r7, #14]
    break;
 800d2ae:	e00b      	b.n	800d2c8 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	81fb      	strh	r3, [r7, #14]
    break;
 800d2b4:	e008      	b.n	800d2c8 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800d2b6:	4b1d      	ldr	r3, [pc, #116]	; (800d32c <pbuf_alloced_custom+0xc8>)
 800d2b8:	f240 12c5 	movw	r2, #453	; 0x1c5
 800d2bc:	491c      	ldr	r1, [pc, #112]	; (800d330 <pbuf_alloced_custom+0xcc>)
 800d2be:	481d      	ldr	r0, [pc, #116]	; (800d334 <pbuf_alloced_custom+0xd0>)
 800d2c0:	f009 f9fe 	bl	80166c0 <iprintf>
    return NULL;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	e02d      	b.n	800d324 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d2c8:	89fb      	ldrh	r3, [r7, #14]
 800d2ca:	3303      	adds	r3, #3
 800d2cc:	f023 0203 	bic.w	r2, r3, #3
 800d2d0:	88bb      	ldrh	r3, [r7, #4]
 800d2d2:	441a      	add	r2, r3
 800d2d4:	8bbb      	ldrh	r3, [r7, #28]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d901      	bls.n	800d2de <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	e022      	b.n	800d324 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d008      	beq.n	800d2fc <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d2ea:	89fb      	ldrh	r3, [r7, #14]
 800d2ec:	3303      	adds	r3, #3
 800d2ee:	f023 0303 	bic.w	r3, r3, #3
 800d2f2:	69ba      	ldr	r2, [r7, #24]
 800d2f4:	441a      	add	r2, r3
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	605a      	str	r2, [r3, #4]
 800d2fa:	e002      	b.n	800d302 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	2200      	movs	r2, #0
 800d300:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	2202      	movs	r2, #2
 800d306:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	88ba      	ldrh	r2, [r7, #4]
 800d30c:	811a      	strh	r2, [r3, #8]
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	891a      	ldrh	r2, [r3, #8]
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	79ba      	ldrb	r2, [r7, #6]
 800d31a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	2201      	movs	r2, #1
 800d320:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800d322:	683b      	ldr	r3, [r7, #0]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3710      	adds	r7, #16
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	080187d4 	.word	0x080187d4
 800d330:	0801896c 	.word	0x0801896c
 800d334:	08018820 	.word	0x08018820

0800d338 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b086      	sub	sp, #24
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	460b      	mov	r3, r1
 800d342:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d106      	bne.n	800d358 <pbuf_realloc+0x20>
 800d34a:	4b4b      	ldr	r3, [pc, #300]	; (800d478 <pbuf_realloc+0x140>)
 800d34c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d350:	494a      	ldr	r1, [pc, #296]	; (800d47c <pbuf_realloc+0x144>)
 800d352:	484b      	ldr	r0, [pc, #300]	; (800d480 <pbuf_realloc+0x148>)
 800d354:	f009 f9b4 	bl	80166c0 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	7b1b      	ldrb	r3, [r3, #12]
 800d35c:	2b03      	cmp	r3, #3
 800d35e:	d012      	beq.n	800d386 <pbuf_realloc+0x4e>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	7b1b      	ldrb	r3, [r3, #12]
 800d364:	2b01      	cmp	r3, #1
 800d366:	d00e      	beq.n	800d386 <pbuf_realloc+0x4e>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	7b1b      	ldrb	r3, [r3, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d00a      	beq.n	800d386 <pbuf_realloc+0x4e>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	7b1b      	ldrb	r3, [r3, #12]
 800d374:	2b02      	cmp	r3, #2
 800d376:	d006      	beq.n	800d386 <pbuf_realloc+0x4e>
 800d378:	4b3f      	ldr	r3, [pc, #252]	; (800d478 <pbuf_realloc+0x140>)
 800d37a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d37e:	4941      	ldr	r1, [pc, #260]	; (800d484 <pbuf_realloc+0x14c>)
 800d380:	483f      	ldr	r0, [pc, #252]	; (800d480 <pbuf_realloc+0x148>)
 800d382:	f009 f99d 	bl	80166c0 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	891b      	ldrh	r3, [r3, #8]
 800d38a:	887a      	ldrh	r2, [r7, #2]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d26f      	bcs.n	800d470 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800d390:	887b      	ldrh	r3, [r7, #2]
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	8912      	ldrh	r2, [r2, #8]
 800d396:	1a9b      	subs	r3, r3, r2
 800d398:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d39a:	887b      	ldrh	r3, [r7, #2]
 800d39c:	827b      	strh	r3, [r7, #18]
  q = p;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d3a2:	e025      	b.n	800d3f0 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	895b      	ldrh	r3, [r3, #10]
 800d3a8:	8a7a      	ldrh	r2, [r7, #18]
 800d3aa:	1ad3      	subs	r3, r2, r3
 800d3ac:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	dd06      	ble.n	800d3c6 <pbuf_realloc+0x8e>
 800d3b8:	4b2f      	ldr	r3, [pc, #188]	; (800d478 <pbuf_realloc+0x140>)
 800d3ba:	f240 220b 	movw	r2, #523	; 0x20b
 800d3be:	4932      	ldr	r1, [pc, #200]	; (800d488 <pbuf_realloc+0x150>)
 800d3c0:	482f      	ldr	r0, [pc, #188]	; (800d480 <pbuf_realloc+0x148>)
 800d3c2:	f009 f97d 	bl	80166c0 <iprintf>
    q->tot_len += (u16_t)grow;
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	891a      	ldrh	r2, [r3, #8]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	4413      	add	r3, r2
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d106      	bne.n	800d3f0 <pbuf_realloc+0xb8>
 800d3e2:	4b25      	ldr	r3, [pc, #148]	; (800d478 <pbuf_realloc+0x140>)
 800d3e4:	f240 220f 	movw	r2, #527	; 0x20f
 800d3e8:	4928      	ldr	r1, [pc, #160]	; (800d48c <pbuf_realloc+0x154>)
 800d3ea:	4825      	ldr	r0, [pc, #148]	; (800d480 <pbuf_realloc+0x148>)
 800d3ec:	f009 f968 	bl	80166c0 <iprintf>
  while (rem_len > q->len) {
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	895b      	ldrh	r3, [r3, #10]
 800d3f4:	8a7a      	ldrh	r2, [r7, #18]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d8d4      	bhi.n	800d3a4 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	7b1b      	ldrb	r3, [r3, #12]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d122      	bne.n	800d448 <pbuf_realloc+0x110>
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	895b      	ldrh	r3, [r3, #10]
 800d406:	8a7a      	ldrh	r2, [r7, #18]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d01d      	beq.n	800d448 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	7b5b      	ldrb	r3, [r3, #13]
 800d410:	f003 0302 	and.w	r3, r3, #2
 800d414:	2b00      	cmp	r3, #0
 800d416:	d117      	bne.n	800d448 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	461a      	mov	r2, r3
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	1ad3      	subs	r3, r2, r3
 800d422:	b29a      	uxth	r2, r3
 800d424:	8a7b      	ldrh	r3, [r7, #18]
 800d426:	4413      	add	r3, r2
 800d428:	b29b      	uxth	r3, r3
 800d42a:	4619      	mov	r1, r3
 800d42c:	6978      	ldr	r0, [r7, #20]
 800d42e:	f7ff f877 	bl	800c520 <mem_trim>
 800d432:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d106      	bne.n	800d448 <pbuf_realloc+0x110>
 800d43a:	4b0f      	ldr	r3, [pc, #60]	; (800d478 <pbuf_realloc+0x140>)
 800d43c:	f240 221d 	movw	r2, #541	; 0x21d
 800d440:	4913      	ldr	r1, [pc, #76]	; (800d490 <pbuf_realloc+0x158>)
 800d442:	480f      	ldr	r0, [pc, #60]	; (800d480 <pbuf_realloc+0x148>)
 800d444:	f009 f93c 	bl	80166c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	8a7a      	ldrh	r2, [r7, #18]
 800d44c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	895a      	ldrh	r2, [r3, #10]
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d004      	beq.n	800d468 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4618      	mov	r0, r3
 800d464:	f000 f8dc 	bl	800d620 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	2200      	movs	r2, #0
 800d46c:	601a      	str	r2, [r3, #0]
 800d46e:	e000      	b.n	800d472 <pbuf_realloc+0x13a>
    return;
 800d470:	bf00      	nop

}
 800d472:	3718      	adds	r7, #24
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	080187d4 	.word	0x080187d4
 800d47c:	08018990 	.word	0x08018990
 800d480:	08018820 	.word	0x08018820
 800d484:	080189a8 	.word	0x080189a8
 800d488:	080189c4 	.word	0x080189c4
 800d48c:	080189d8 	.word	0x080189d8
 800d490:	080189f0 	.word	0x080189f0

0800d494 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	460b      	mov	r3, r1
 800d49e:	807b      	strh	r3, [r7, #2]
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d106      	bne.n	800d4b8 <pbuf_header_impl+0x24>
 800d4aa:	4b46      	ldr	r3, [pc, #280]	; (800d5c4 <pbuf_header_impl+0x130>)
 800d4ac:	f240 223f 	movw	r2, #575	; 0x23f
 800d4b0:	4945      	ldr	r1, [pc, #276]	; (800d5c8 <pbuf_header_impl+0x134>)
 800d4b2:	4846      	ldr	r0, [pc, #280]	; (800d5cc <pbuf_header_impl+0x138>)
 800d4b4:	f009 f904 	bl	80166c0 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800d4b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d002      	beq.n	800d4c6 <pbuf_header_impl+0x32>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d101      	bne.n	800d4ca <pbuf_header_impl+0x36>
    return 0;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	e078      	b.n	800d5bc <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800d4ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	da10      	bge.n	800d4f4 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800d4d2:	887b      	ldrh	r3, [r7, #2]
 800d4d4:	425b      	negs	r3, r3
 800d4d6:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	895b      	ldrh	r3, [r3, #10]
 800d4dc:	89fa      	ldrh	r2, [r7, #14]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d90a      	bls.n	800d4f8 <pbuf_header_impl+0x64>
 800d4e2:	4b38      	ldr	r3, [pc, #224]	; (800d5c4 <pbuf_header_impl+0x130>)
 800d4e4:	f240 2247 	movw	r2, #583	; 0x247
 800d4e8:	4939      	ldr	r1, [pc, #228]	; (800d5d0 <pbuf_header_impl+0x13c>)
 800d4ea:	4838      	ldr	r0, [pc, #224]	; (800d5cc <pbuf_header_impl+0x138>)
 800d4ec:	f009 f8e8 	bl	80166c0 <iprintf>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	e063      	b.n	800d5bc <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800d4f4:	887b      	ldrh	r3, [r7, #2]
 800d4f6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	7b1b      	ldrb	r3, [r3, #12]
 800d4fc:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800d504:	89bb      	ldrh	r3, [r7, #12]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d002      	beq.n	800d510 <pbuf_header_impl+0x7c>
 800d50a:	89bb      	ldrh	r3, [r7, #12]
 800d50c:	2b03      	cmp	r3, #3
 800d50e:	d112      	bne.n	800d536 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	685a      	ldr	r2, [r3, #4]
 800d514:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d518:	425b      	negs	r3, r3
 800d51a:	441a      	add	r2, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	685a      	ldr	r2, [r3, #4]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	3310      	adds	r3, #16
 800d528:	429a      	cmp	r2, r3
 800d52a:	d238      	bcs.n	800d59e <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	68ba      	ldr	r2, [r7, #8]
 800d530:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800d532:	2301      	movs	r3, #1
 800d534:	e042      	b.n	800d5bc <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800d536:	89bb      	ldrh	r3, [r7, #12]
 800d538:	2b02      	cmp	r3, #2
 800d53a:	d002      	beq.n	800d542 <pbuf_header_impl+0xae>
 800d53c:	89bb      	ldrh	r3, [r7, #12]
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d124      	bne.n	800d58c <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800d542:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d546:	2b00      	cmp	r3, #0
 800d548:	da0d      	bge.n	800d566 <pbuf_header_impl+0xd2>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	895b      	ldrh	r3, [r3, #10]
 800d54e:	89fa      	ldrh	r2, [r7, #14]
 800d550:	429a      	cmp	r2, r3
 800d552:	d808      	bhi.n	800d566 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	685a      	ldr	r2, [r3, #4]
 800d558:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d55c:	425b      	negs	r3, r3
 800d55e:	441a      	add	r2, r3
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	605a      	str	r2, [r3, #4]
 800d564:	e011      	b.n	800d58a <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800d566:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	dd0b      	ble.n	800d586 <pbuf_header_impl+0xf2>
 800d56e:	787b      	ldrb	r3, [r7, #1]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d008      	beq.n	800d586 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	685a      	ldr	r2, [r3, #4]
 800d578:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d57c:	425b      	negs	r3, r3
 800d57e:	441a      	add	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	605a      	str	r2, [r3, #4]
 800d584:	e001      	b.n	800d58a <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d586:	2301      	movs	r3, #1
 800d588:	e018      	b.n	800d5bc <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800d58a:	e008      	b.n	800d59e <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800d58c:	4b0d      	ldr	r3, [pc, #52]	; (800d5c4 <pbuf_header_impl+0x130>)
 800d58e:	f240 2277 	movw	r2, #631	; 0x277
 800d592:	4910      	ldr	r1, [pc, #64]	; (800d5d4 <pbuf_header_impl+0x140>)
 800d594:	480d      	ldr	r0, [pc, #52]	; (800d5cc <pbuf_header_impl+0x138>)
 800d596:	f009 f893 	bl	80166c0 <iprintf>
    return 1;
 800d59a:	2301      	movs	r3, #1
 800d59c:	e00e      	b.n	800d5bc <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	895a      	ldrh	r2, [r3, #10]
 800d5a2:	887b      	ldrh	r3, [r7, #2]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	891a      	ldrh	r2, [r3, #8]
 800d5b0:	887b      	ldrh	r3, [r7, #2]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800d5ba:	2300      	movs	r3, #0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	080187d4 	.word	0x080187d4
 800d5c8:	08018a0c 	.word	0x08018a0c
 800d5cc:	08018820 	.word	0x08018820
 800d5d0:	08018a18 	.word	0x08018a18
 800d5d4:	08018a38 	.word	0x08018a38

0800d5d8 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800d5e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f7ff ff51 	bl	800d494 <pbuf_header_impl>
 800d5f2:	4603      	mov	r3, r0
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3708      	adds	r7, #8
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	460b      	mov	r3, r1
 800d606:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800d608:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d60c:	2201      	movs	r2, #1
 800d60e:	4619      	mov	r1, r3
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f7ff ff3f 	bl	800d494 <pbuf_header_impl>
 800d616:	4603      	mov	r3, r0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3708      	adds	r7, #8
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b088      	sub	sp, #32
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d10b      	bne.n	800d646 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d106      	bne.n	800d642 <pbuf_free+0x22>
 800d634:	4b41      	ldr	r3, [pc, #260]	; (800d73c <pbuf_free+0x11c>)
 800d636:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d63a:	4941      	ldr	r1, [pc, #260]	; (800d740 <pbuf_free+0x120>)
 800d63c:	4841      	ldr	r0, [pc, #260]	; (800d744 <pbuf_free+0x124>)
 800d63e:	f009 f83f 	bl	80166c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d642:	2300      	movs	r3, #0
 800d644:	e076      	b.n	800d734 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	7b1b      	ldrb	r3, [r3, #12]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d012      	beq.n	800d674 <pbuf_free+0x54>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	7b1b      	ldrb	r3, [r3, #12]
 800d652:	2b01      	cmp	r3, #1
 800d654:	d00e      	beq.n	800d674 <pbuf_free+0x54>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	7b1b      	ldrb	r3, [r3, #12]
 800d65a:	2b02      	cmp	r3, #2
 800d65c:	d00a      	beq.n	800d674 <pbuf_free+0x54>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	7b1b      	ldrb	r3, [r3, #12]
 800d662:	2b03      	cmp	r3, #3
 800d664:	d006      	beq.n	800d674 <pbuf_free+0x54>
 800d666:	4b35      	ldr	r3, [pc, #212]	; (800d73c <pbuf_free+0x11c>)
 800d668:	f240 22de 	movw	r2, #734	; 0x2de
 800d66c:	4936      	ldr	r1, [pc, #216]	; (800d748 <pbuf_free+0x128>)
 800d66e:	4835      	ldr	r0, [pc, #212]	; (800d744 <pbuf_free+0x124>)
 800d670:	f009 f826 	bl	80166c0 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800d674:	2300      	movs	r3, #0
 800d676:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d678:	e058      	b.n	800d72c <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d67a:	f008 ff93 	bl	80165a4 <sys_arch_protect>
 800d67e:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	89db      	ldrh	r3, [r3, #14]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d106      	bne.n	800d696 <pbuf_free+0x76>
 800d688:	4b2c      	ldr	r3, [pc, #176]	; (800d73c <pbuf_free+0x11c>)
 800d68a:	f240 22eb 	movw	r2, #747	; 0x2eb
 800d68e:	492f      	ldr	r1, [pc, #188]	; (800d74c <pbuf_free+0x12c>)
 800d690:	482c      	ldr	r0, [pc, #176]	; (800d744 <pbuf_free+0x124>)
 800d692:	f009 f815 	bl	80166c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	89db      	ldrh	r3, [r3, #14]
 800d69a:	3b01      	subs	r3, #1
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	81da      	strh	r2, [r3, #14]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	89db      	ldrh	r3, [r3, #14]
 800d6a6:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800d6a8:	69b8      	ldr	r0, [r7, #24]
 800d6aa:	f008 ff89 	bl	80165c0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d6ae:	8afb      	ldrh	r3, [r7, #22]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d139      	bne.n	800d728 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	7b1b      	ldrb	r3, [r3, #12]
 800d6be:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	7b5b      	ldrb	r3, [r3, #13]
 800d6c4:	f003 0302 	and.w	r3, r3, #2
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d011      	beq.n	800d6f0 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	691b      	ldr	r3, [r3, #16]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d106      	bne.n	800d6e6 <pbuf_free+0xc6>
 800d6d8:	4b18      	ldr	r3, [pc, #96]	; (800d73c <pbuf_free+0x11c>)
 800d6da:	f240 22f9 	movw	r2, #761	; 0x2f9
 800d6de:	491c      	ldr	r1, [pc, #112]	; (800d750 <pbuf_free+0x130>)
 800d6e0:	4818      	ldr	r0, [pc, #96]	; (800d744 <pbuf_free+0x124>)
 800d6e2:	f008 ffed 	bl	80166c0 <iprintf>
        pc->custom_free_function(p);
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	691b      	ldr	r3, [r3, #16]
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	4798      	blx	r3
 800d6ee:	e015      	b.n	800d71c <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800d6f0:	89fb      	ldrh	r3, [r7, #14]
 800d6f2:	2b03      	cmp	r3, #3
 800d6f4:	d104      	bne.n	800d700 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800d6f6:	6879      	ldr	r1, [r7, #4]
 800d6f8:	200c      	movs	r0, #12
 800d6fa:	f7ff f9bd 	bl	800ca78 <memp_free>
 800d6fe:	e00d      	b.n	800d71c <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800d700:	89fb      	ldrh	r3, [r7, #14]
 800d702:	2b01      	cmp	r3, #1
 800d704:	d002      	beq.n	800d70c <pbuf_free+0xec>
 800d706:	89fb      	ldrh	r3, [r7, #14]
 800d708:	2b02      	cmp	r3, #2
 800d70a:	d104      	bne.n	800d716 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800d70c:	6879      	ldr	r1, [r7, #4]
 800d70e:	200b      	movs	r0, #11
 800d710:	f7ff f9b2 	bl	800ca78 <memp_free>
 800d714:	e002      	b.n	800d71c <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7fe fe94 	bl	800c444 <mem_free>
        }
      }
      count++;
 800d71c:	7ffb      	ldrb	r3, [r7, #31]
 800d71e:	3301      	adds	r3, #1
 800d720:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	607b      	str	r3, [r7, #4]
 800d726:	e001      	b.n	800d72c <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800d728:	2300      	movs	r3, #0
 800d72a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d1a3      	bne.n	800d67a <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d732:	7ffb      	ldrb	r3, [r7, #31]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3720      	adds	r7, #32
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	080187d4 	.word	0x080187d4
 800d740:	08018a0c 	.word	0x08018a0c
 800d744:	08018820 	.word	0x08018820
 800d748:	08018a48 	.word	0x08018a48
 800d74c:	08018a60 	.word	0x08018a60
 800d750:	08018a78 	.word	0x08018a78

0800d754 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d75c:	2300      	movs	r3, #0
 800d75e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d760:	e005      	b.n	800d76e <pbuf_clen+0x1a>
    ++len;
 800d762:	89fb      	ldrh	r3, [r7, #14]
 800d764:	3301      	adds	r3, #1
 800d766:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1f6      	bne.n	800d762 <pbuf_clen+0xe>
  }
  return len;
 800d774:	89fb      	ldrh	r3, [r7, #14]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3714      	adds	r7, #20
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
	...

0800d784 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d016      	beq.n	800d7c0 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800d792:	f008 ff07 	bl	80165a4 <sys_arch_protect>
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	89db      	ldrh	r3, [r3, #14]
 800d79c:	3301      	adds	r3, #1
 800d79e:	b29a      	uxth	r2, r3
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	81da      	strh	r2, [r3, #14]
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f008 ff0b 	bl	80165c0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	89db      	ldrh	r3, [r3, #14]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d106      	bne.n	800d7c0 <pbuf_ref+0x3c>
 800d7b2:	4b05      	ldr	r3, [pc, #20]	; (800d7c8 <pbuf_ref+0x44>)
 800d7b4:	f240 3239 	movw	r2, #825	; 0x339
 800d7b8:	4904      	ldr	r1, [pc, #16]	; (800d7cc <pbuf_ref+0x48>)
 800d7ba:	4805      	ldr	r0, [pc, #20]	; (800d7d0 <pbuf_ref+0x4c>)
 800d7bc:	f008 ff80 	bl	80166c0 <iprintf>
  }
}
 800d7c0:	bf00      	nop
 800d7c2:	3710      	adds	r7, #16
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	080187d4 	.word	0x080187d4
 800d7cc:	08018a9c 	.word	0x08018a9c
 800d7d0:	08018820 	.word	0x08018820

0800d7d4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d002      	beq.n	800d7ea <pbuf_cat+0x16>
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d107      	bne.n	800d7fa <pbuf_cat+0x26>
 800d7ea:	4b20      	ldr	r3, [pc, #128]	; (800d86c <pbuf_cat+0x98>)
 800d7ec:	f240 324d 	movw	r2, #845	; 0x34d
 800d7f0:	491f      	ldr	r1, [pc, #124]	; (800d870 <pbuf_cat+0x9c>)
 800d7f2:	4820      	ldr	r0, [pc, #128]	; (800d874 <pbuf_cat+0xa0>)
 800d7f4:	f008 ff64 	bl	80166c0 <iprintf>
 800d7f8:	e034      	b.n	800d864 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	60fb      	str	r3, [r7, #12]
 800d7fe:	e00a      	b.n	800d816 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	891a      	ldrh	r2, [r3, #8]
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	891b      	ldrh	r3, [r3, #8]
 800d808:	4413      	add	r3, r2
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	60fb      	str	r3, [r7, #12]
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1f0      	bne.n	800d800 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	891a      	ldrh	r2, [r3, #8]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	895b      	ldrh	r3, [r3, #10]
 800d826:	429a      	cmp	r2, r3
 800d828:	d006      	beq.n	800d838 <pbuf_cat+0x64>
 800d82a:	4b10      	ldr	r3, [pc, #64]	; (800d86c <pbuf_cat+0x98>)
 800d82c:	f240 3255 	movw	r2, #853	; 0x355
 800d830:	4911      	ldr	r1, [pc, #68]	; (800d878 <pbuf_cat+0xa4>)
 800d832:	4810      	ldr	r0, [pc, #64]	; (800d874 <pbuf_cat+0xa0>)
 800d834:	f008 ff44 	bl	80166c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d006      	beq.n	800d84e <pbuf_cat+0x7a>
 800d840:	4b0a      	ldr	r3, [pc, #40]	; (800d86c <pbuf_cat+0x98>)
 800d842:	f240 3256 	movw	r2, #854	; 0x356
 800d846:	490d      	ldr	r1, [pc, #52]	; (800d87c <pbuf_cat+0xa8>)
 800d848:	480a      	ldr	r0, [pc, #40]	; (800d874 <pbuf_cat+0xa0>)
 800d84a:	f008 ff39 	bl	80166c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	891a      	ldrh	r2, [r3, #8]
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	891b      	ldrh	r3, [r3, #8]
 800d856:	4413      	add	r3, r2
 800d858:	b29a      	uxth	r2, r3
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	683a      	ldr	r2, [r7, #0]
 800d862:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d864:	3710      	adds	r7, #16
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	080187d4 	.word	0x080187d4
 800d870:	08018ab0 	.word	0x08018ab0
 800d874:	08018820 	.word	0x08018820
 800d878:	08018ae8 	.word	0x08018ae8
 800d87c:	08018b18 	.word	0x08018b18

0800d880 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d88a:	6839      	ldr	r1, [r7, #0]
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f7ff ffa1 	bl	800d7d4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d892:	6838      	ldr	r0, [r7, #0]
 800d894:	f7ff ff76 	bl	800d784 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d898:	bf00      	nop
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	81fb      	strh	r3, [r7, #14]
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d008      	beq.n	800d8ca <pbuf_copy+0x2a>
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d005      	beq.n	800d8ca <pbuf_copy+0x2a>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	891a      	ldrh	r2, [r3, #8]
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	891b      	ldrh	r3, [r3, #8]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d209      	bcs.n	800d8de <pbuf_copy+0x3e>
 800d8ca:	4b54      	ldr	r3, [pc, #336]	; (800da1c <pbuf_copy+0x17c>)
 800d8cc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d8d0:	4953      	ldr	r1, [pc, #332]	; (800da20 <pbuf_copy+0x180>)
 800d8d2:	4854      	ldr	r0, [pc, #336]	; (800da24 <pbuf_copy+0x184>)
 800d8d4:	f008 fef4 	bl	80166c0 <iprintf>
 800d8d8:	f06f 030f 	mvn.w	r3, #15
 800d8dc:	e099      	b.n	800da12 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	895b      	ldrh	r3, [r3, #10]
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	89fb      	ldrh	r3, [r7, #14]
 800d8e6:	1ad2      	subs	r2, r2, r3
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	895b      	ldrh	r3, [r3, #10]
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	89bb      	ldrh	r3, [r7, #12]
 800d8f0:	1acb      	subs	r3, r1, r3
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	db05      	blt.n	800d902 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	895a      	ldrh	r2, [r3, #10]
 800d8fa:	89bb      	ldrh	r3, [r7, #12]
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	817b      	strh	r3, [r7, #10]
 800d900:	e004      	b.n	800d90c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	895a      	ldrh	r2, [r3, #10]
 800d906:	89fb      	ldrh	r3, [r7, #14]
 800d908:	1ad3      	subs	r3, r2, r3
 800d90a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	685a      	ldr	r2, [r3, #4]
 800d910:	89fb      	ldrh	r3, [r7, #14]
 800d912:	18d0      	adds	r0, r2, r3
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	685a      	ldr	r2, [r3, #4]
 800d918:	89bb      	ldrh	r3, [r7, #12]
 800d91a:	4413      	add	r3, r2
 800d91c:	897a      	ldrh	r2, [r7, #10]
 800d91e:	4619      	mov	r1, r3
 800d920:	f008 febb 	bl	801669a <memcpy>
    offset_to += len;
 800d924:	89fa      	ldrh	r2, [r7, #14]
 800d926:	897b      	ldrh	r3, [r7, #10]
 800d928:	4413      	add	r3, r2
 800d92a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800d92c:	89ba      	ldrh	r2, [r7, #12]
 800d92e:	897b      	ldrh	r3, [r7, #10]
 800d930:	4413      	add	r3, r2
 800d932:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	895b      	ldrh	r3, [r3, #10]
 800d938:	89fa      	ldrh	r2, [r7, #14]
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d906      	bls.n	800d94c <pbuf_copy+0xac>
 800d93e:	4b37      	ldr	r3, [pc, #220]	; (800da1c <pbuf_copy+0x17c>)
 800d940:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d944:	4938      	ldr	r1, [pc, #224]	; (800da28 <pbuf_copy+0x188>)
 800d946:	4837      	ldr	r0, [pc, #220]	; (800da24 <pbuf_copy+0x184>)
 800d948:	f008 feba 	bl	80166c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	895b      	ldrh	r3, [r3, #10]
 800d950:	89ba      	ldrh	r2, [r7, #12]
 800d952:	429a      	cmp	r2, r3
 800d954:	d906      	bls.n	800d964 <pbuf_copy+0xc4>
 800d956:	4b31      	ldr	r3, [pc, #196]	; (800da1c <pbuf_copy+0x17c>)
 800d958:	f240 32ce 	movw	r2, #974	; 0x3ce
 800d95c:	4933      	ldr	r1, [pc, #204]	; (800da2c <pbuf_copy+0x18c>)
 800d95e:	4831      	ldr	r0, [pc, #196]	; (800da24 <pbuf_copy+0x184>)
 800d960:	f008 feae 	bl	80166c0 <iprintf>
    if (offset_from >= p_from->len) {
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	895b      	ldrh	r3, [r3, #10]
 800d968:	89ba      	ldrh	r2, [r7, #12]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d304      	bcc.n	800d978 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d96e:	2300      	movs	r3, #0
 800d970:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	895b      	ldrh	r3, [r3, #10]
 800d97c:	89fa      	ldrh	r2, [r7, #14]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d114      	bne.n	800d9ac <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d982:	2300      	movs	r3, #0
 800d984:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d10c      	bne.n	800d9ac <pbuf_copy+0x10c>
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d009      	beq.n	800d9ac <pbuf_copy+0x10c>
 800d998:	4b20      	ldr	r3, [pc, #128]	; (800da1c <pbuf_copy+0x17c>)
 800d99a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d99e:	4924      	ldr	r1, [pc, #144]	; (800da30 <pbuf_copy+0x190>)
 800d9a0:	4820      	ldr	r0, [pc, #128]	; (800da24 <pbuf_copy+0x184>)
 800d9a2:	f008 fe8d 	bl	80166c0 <iprintf>
 800d9a6:	f06f 030f 	mvn.w	r3, #15
 800d9aa:	e032      	b.n	800da12 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d013      	beq.n	800d9da <pbuf_copy+0x13a>
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	895a      	ldrh	r2, [r3, #10]
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	891b      	ldrh	r3, [r3, #8]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d10d      	bne.n	800d9da <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d009      	beq.n	800d9da <pbuf_copy+0x13a>
 800d9c6:	4b15      	ldr	r3, [pc, #84]	; (800da1c <pbuf_copy+0x17c>)
 800d9c8:	f240 32de 	movw	r2, #990	; 0x3de
 800d9cc:	4919      	ldr	r1, [pc, #100]	; (800da34 <pbuf_copy+0x194>)
 800d9ce:	4815      	ldr	r0, [pc, #84]	; (800da24 <pbuf_copy+0x184>)
 800d9d0:	f008 fe76 	bl	80166c0 <iprintf>
 800d9d4:	f06f 0305 	mvn.w	r3, #5
 800d9d8:	e01b      	b.n	800da12 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d013      	beq.n	800da08 <pbuf_copy+0x168>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	895a      	ldrh	r2, [r3, #10]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	891b      	ldrh	r3, [r3, #8]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d10d      	bne.n	800da08 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d009      	beq.n	800da08 <pbuf_copy+0x168>
 800d9f4:	4b09      	ldr	r3, [pc, #36]	; (800da1c <pbuf_copy+0x17c>)
 800d9f6:	f240 32e3 	movw	r2, #995	; 0x3e3
 800d9fa:	490e      	ldr	r1, [pc, #56]	; (800da34 <pbuf_copy+0x194>)
 800d9fc:	4809      	ldr	r0, [pc, #36]	; (800da24 <pbuf_copy+0x184>)
 800d9fe:	f008 fe5f 	bl	80166c0 <iprintf>
 800da02:	f06f 0305 	mvn.w	r3, #5
 800da06:	e004      	b.n	800da12 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f47f af67 	bne.w	800d8de <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	080187d4 	.word	0x080187d4
 800da20:	08018b64 	.word	0x08018b64
 800da24:	08018820 	.word	0x08018820
 800da28:	08018b94 	.word	0x08018b94
 800da2c:	08018bac 	.word	0x08018bac
 800da30:	08018bc8 	.word	0x08018bc8
 800da34:	08018bd8 	.word	0x08018bd8

0800da38 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b088      	sub	sp, #32
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	4611      	mov	r1, r2
 800da44:	461a      	mov	r2, r3
 800da46:	460b      	mov	r3, r1
 800da48:	80fb      	strh	r3, [r7, #6]
 800da4a:	4613      	mov	r3, r2
 800da4c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800da4e:	2300      	movs	r3, #0
 800da50:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d108      	bne.n	800da6a <pbuf_copy_partial+0x32>
 800da58:	4b30      	ldr	r3, [pc, #192]	; (800db1c <pbuf_copy_partial+0xe4>)
 800da5a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800da5e:	4930      	ldr	r1, [pc, #192]	; (800db20 <pbuf_copy_partial+0xe8>)
 800da60:	4830      	ldr	r0, [pc, #192]	; (800db24 <pbuf_copy_partial+0xec>)
 800da62:	f008 fe2d 	bl	80166c0 <iprintf>
 800da66:	2300      	movs	r3, #0
 800da68:	e054      	b.n	800db14 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d108      	bne.n	800da82 <pbuf_copy_partial+0x4a>
 800da70:	4b2a      	ldr	r3, [pc, #168]	; (800db1c <pbuf_copy_partial+0xe4>)
 800da72:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800da76:	492c      	ldr	r1, [pc, #176]	; (800db28 <pbuf_copy_partial+0xf0>)
 800da78:	482a      	ldr	r0, [pc, #168]	; (800db24 <pbuf_copy_partial+0xec>)
 800da7a:	f008 fe21 	bl	80166c0 <iprintf>
 800da7e:	2300      	movs	r3, #0
 800da80:	e048      	b.n	800db14 <pbuf_copy_partial+0xdc>

  left = 0;
 800da82:	2300      	movs	r3, #0
 800da84:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <pbuf_copy_partial+0x5a>
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d101      	bne.n	800da96 <pbuf_copy_partial+0x5e>
    return 0;
 800da92:	2300      	movs	r3, #0
 800da94:	e03e      	b.n	800db14 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	61fb      	str	r3, [r7, #28]
 800da9a:	e034      	b.n	800db06 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800da9c:	88bb      	ldrh	r3, [r7, #4]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00a      	beq.n	800dab8 <pbuf_copy_partial+0x80>
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	895b      	ldrh	r3, [r3, #10]
 800daa6:	88ba      	ldrh	r2, [r7, #4]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d305      	bcc.n	800dab8 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	895b      	ldrh	r3, [r3, #10]
 800dab0:	88ba      	ldrh	r2, [r7, #4]
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	80bb      	strh	r3, [r7, #4]
 800dab6:	e023      	b.n	800db00 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	895a      	ldrh	r2, [r3, #10]
 800dabc:	88bb      	ldrh	r3, [r7, #4]
 800dabe:	1ad3      	subs	r3, r2, r3
 800dac0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dac2:	8b3a      	ldrh	r2, [r7, #24]
 800dac4:	88fb      	ldrh	r3, [r7, #6]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d901      	bls.n	800dace <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800daca:	88fb      	ldrh	r3, [r7, #6]
 800dacc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800dace:	8b7b      	ldrh	r3, [r7, #26]
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	18d0      	adds	r0, r2, r3
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	685a      	ldr	r2, [r3, #4]
 800dad8:	88bb      	ldrh	r3, [r7, #4]
 800dada:	4413      	add	r3, r2
 800dadc:	8b3a      	ldrh	r2, [r7, #24]
 800dade:	4619      	mov	r1, r3
 800dae0:	f008 fddb 	bl	801669a <memcpy>
      copied_total += buf_copy_len;
 800dae4:	8afa      	ldrh	r2, [r7, #22]
 800dae6:	8b3b      	ldrh	r3, [r7, #24]
 800dae8:	4413      	add	r3, r2
 800daea:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800daec:	8b7a      	ldrh	r2, [r7, #26]
 800daee:	8b3b      	ldrh	r3, [r7, #24]
 800daf0:	4413      	add	r3, r2
 800daf2:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800daf4:	88fa      	ldrh	r2, [r7, #6]
 800daf6:	8b3b      	ldrh	r3, [r7, #24]
 800daf8:	1ad3      	subs	r3, r2, r3
 800dafa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dafc:	2300      	movs	r3, #0
 800dafe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800db00:	69fb      	ldr	r3, [r7, #28]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	61fb      	str	r3, [r7, #28]
 800db06:	88fb      	ldrh	r3, [r7, #6]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d002      	beq.n	800db12 <pbuf_copy_partial+0xda>
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d1c4      	bne.n	800da9c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800db12:	8afb      	ldrh	r3, [r7, #22]
}
 800db14:	4618      	mov	r0, r3
 800db16:	3720      	adds	r7, #32
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	080187d4 	.word	0x080187d4
 800db20:	08018c04 	.word	0x08018c04
 800db24:	08018820 	.word	0x08018820
 800db28:	08018c24 	.word	0x08018c24

0800db2c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800db2c:	b480      	push	{r7}
 800db2e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800db30:	bf00      	nop
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr
	...

0800db3c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800db40:	f001 f888 	bl	800ec54 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800db44:	4b07      	ldr	r3, [pc, #28]	; (800db64 <tcp_tmr+0x28>)
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	3301      	adds	r3, #1
 800db4a:	b2da      	uxtb	r2, r3
 800db4c:	4b05      	ldr	r3, [pc, #20]	; (800db64 <tcp_tmr+0x28>)
 800db4e:	701a      	strb	r2, [r3, #0]
 800db50:	4b04      	ldr	r3, [pc, #16]	; (800db64 <tcp_tmr+0x28>)
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	f003 0301 	and.w	r3, r3, #1
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d001      	beq.n	800db60 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800db5c:	f000 fdb4 	bl	800e6c8 <tcp_slowtmr>
  }
}
 800db60:	bf00      	nop
 800db62:	bd80      	pop	{r7, pc}
 800db64:	20004141 	.word	0x20004141

0800db68 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	60fb      	str	r3, [r7, #12]
 800db76:	e00a      	b.n	800db8e <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db7c:	683a      	ldr	r2, [r7, #0]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d102      	bne.n	800db88 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2200      	movs	r2, #0
 800db86:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	60fb      	str	r3, [r7, #12]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d1f1      	bne.n	800db78 <tcp_remove_listener+0x10>
      }
   }
}
 800db94:	bf00      	nop
 800db96:	3714      	adds	r7, #20
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr

0800dba0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d105      	bne.n	800dbba <tcp_listen_closed+0x1a>
 800dbae:	4b13      	ldr	r3, [pc, #76]	; (800dbfc <tcp_listen_closed+0x5c>)
 800dbb0:	22c0      	movs	r2, #192	; 0xc0
 800dbb2:	4913      	ldr	r1, [pc, #76]	; (800dc00 <tcp_listen_closed+0x60>)
 800dbb4:	4813      	ldr	r0, [pc, #76]	; (800dc04 <tcp_listen_closed+0x64>)
 800dbb6:	f008 fd83 	bl	80166c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	7d1b      	ldrb	r3, [r3, #20]
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d005      	beq.n	800dbce <tcp_listen_closed+0x2e>
 800dbc2:	4b0e      	ldr	r3, [pc, #56]	; (800dbfc <tcp_listen_closed+0x5c>)
 800dbc4:	22c1      	movs	r2, #193	; 0xc1
 800dbc6:	4910      	ldr	r1, [pc, #64]	; (800dc08 <tcp_listen_closed+0x68>)
 800dbc8:	480e      	ldr	r0, [pc, #56]	; (800dc04 <tcp_listen_closed+0x64>)
 800dbca:	f008 fd79 	bl	80166c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dbce:	2301      	movs	r3, #1
 800dbd0:	60fb      	str	r3, [r7, #12]
 800dbd2:	e00b      	b.n	800dbec <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800dbd4:	4a0d      	ldr	r2, [pc, #52]	; (800dc0c <tcp_listen_closed+0x6c>)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	6879      	ldr	r1, [r7, #4]
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7ff ffc1 	bl	800db68 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	60fb      	str	r3, [r7, #12]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2b03      	cmp	r3, #3
 800dbf0:	d9f0      	bls.n	800dbd4 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	08018d58 	.word	0x08018d58
 800dc00:	08018d88 	.word	0x08018d88
 800dc04:	08018d94 	.word	0x08018d94
 800dc08:	08018dbc 	.word	0x08018dbc
 800dc0c:	0801a268 	.word	0x0801a268

0800dc10 <tcp_backlog_delayed>:
 *
 * @param pcb the connection pcb which is not fully accepted yet
 */
void
tcp_backlog_delayed(struct tcp_pcb* pcb)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d105      	bne.n	800dc2a <tcp_backlog_delayed+0x1a>
 800dc1e:	4b16      	ldr	r3, [pc, #88]	; (800dc78 <tcp_backlog_delayed+0x68>)
 800dc20:	22d7      	movs	r2, #215	; 0xd7
 800dc22:	4916      	ldr	r1, [pc, #88]	; (800dc7c <tcp_backlog_delayed+0x6c>)
 800dc24:	4816      	ldr	r0, [pc, #88]	; (800dc80 <tcp_backlog_delayed+0x70>)
 800dc26:	f008 fd4b 	bl	80166c0 <iprintf>
  if ((pcb->flags & TF_BACKLOGPEND) == 0) {
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	8b5b      	ldrh	r3, [r3, #26]
 800dc2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d11b      	bne.n	800dc6e <tcp_backlog_delayed+0x5e>
    if (pcb->listener != NULL) {
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d017      	beq.n	800dc6e <tcp_backlog_delayed+0x5e>
      pcb->listener->accepts_pending++;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc42:	7f5a      	ldrb	r2, [r3, #29]
 800dc44:	3201      	adds	r2, #1
 800dc46:	b2d2      	uxtb	r2, r2
 800dc48:	775a      	strb	r2, [r3, #29]
      LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc4e:	7f5b      	ldrb	r3, [r3, #29]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d105      	bne.n	800dc60 <tcp_backlog_delayed+0x50>
 800dc54:	4b08      	ldr	r3, [pc, #32]	; (800dc78 <tcp_backlog_delayed+0x68>)
 800dc56:	22db      	movs	r2, #219	; 0xdb
 800dc58:	490a      	ldr	r1, [pc, #40]	; (800dc84 <tcp_backlog_delayed+0x74>)
 800dc5a:	4809      	ldr	r0, [pc, #36]	; (800dc80 <tcp_backlog_delayed+0x70>)
 800dc5c:	f008 fd30 	bl	80166c0 <iprintf>
      pcb->flags |= TF_BACKLOGPEND;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	8b5b      	ldrh	r3, [r3, #26]
 800dc64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dc68:	b29a      	uxth	r2, r3
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800dc6e:	bf00      	nop
 800dc70:	3708      	adds	r7, #8
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	08018d58 	.word	0x08018d58
 800dc7c:	08018d88 	.word	0x08018d88
 800dc80:	08018d94 	.word	0x08018d94
 800dc84:	08018dd4 	.word	0x08018dd4

0800dc88 <tcp_backlog_accepted>:
 *
 * @param pcb the connection pcb which is now fully accepted (or closed/aborted)
 */
void
tcp_backlog_accepted(struct tcp_pcb* pcb)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d105      	bne.n	800dca2 <tcp_backlog_accepted+0x1a>
 800dc96:	4b16      	ldr	r3, [pc, #88]	; (800dcf0 <tcp_backlog_accepted+0x68>)
 800dc98:	22ed      	movs	r2, #237	; 0xed
 800dc9a:	4916      	ldr	r1, [pc, #88]	; (800dcf4 <tcp_backlog_accepted+0x6c>)
 800dc9c:	4816      	ldr	r0, [pc, #88]	; (800dcf8 <tcp_backlog_accepted+0x70>)
 800dc9e:	f008 fd0f 	bl	80166c0 <iprintf>
  if ((pcb->flags & TF_BACKLOGPEND) != 0) {
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	8b5b      	ldrh	r3, [r3, #26]
 800dca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d01b      	beq.n	800dce6 <tcp_backlog_accepted+0x5e>
    if (pcb->listener != NULL) {
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d017      	beq.n	800dce6 <tcp_backlog_accepted+0x5e>
      LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcba:	7f5b      	ldrb	r3, [r3, #29]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d105      	bne.n	800dccc <tcp_backlog_accepted+0x44>
 800dcc0:	4b0b      	ldr	r3, [pc, #44]	; (800dcf0 <tcp_backlog_accepted+0x68>)
 800dcc2:	22f0      	movs	r2, #240	; 0xf0
 800dcc4:	490d      	ldr	r1, [pc, #52]	; (800dcfc <tcp_backlog_accepted+0x74>)
 800dcc6:	480c      	ldr	r0, [pc, #48]	; (800dcf8 <tcp_backlog_accepted+0x70>)
 800dcc8:	f008 fcfa 	bl	80166c0 <iprintf>
      pcb->listener->accepts_pending--;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcd0:	7f5a      	ldrb	r2, [r3, #29]
 800dcd2:	3a01      	subs	r2, #1
 800dcd4:	b2d2      	uxtb	r2, r2
 800dcd6:	775a      	strb	r2, [r3, #29]
      pcb->flags &= ~TF_BACKLOGPEND;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	8b5b      	ldrh	r3, [r3, #26]
 800dcdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800dce6:	bf00      	nop
 800dce8:	3708      	adds	r7, #8
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	08018d58 	.word	0x08018d58
 800dcf4:	08018d88 	.word	0x08018d88
 800dcf8:	08018d94 	.word	0x08018d94
 800dcfc:	08018dd4 	.word	0x08018dd4

0800dd00 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800dd00:	b5b0      	push	{r4, r5, r7, lr}
 800dd02:	b086      	sub	sp, #24
 800dd04:	af02      	add	r7, sp, #8
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	460b      	mov	r3, r1
 800dd0a:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dd0c:	78fb      	ldrb	r3, [r7, #3]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d075      	beq.n	800ddfe <tcp_close_shutdown+0xfe>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	7d1b      	ldrb	r3, [r3, #20]
 800dd16:	2b04      	cmp	r3, #4
 800dd18:	d003      	beq.n	800dd22 <tcp_close_shutdown+0x22>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	7d1b      	ldrb	r3, [r3, #20]
 800dd1e:	2b07      	cmp	r3, #7
 800dd20:	d16d      	bne.n	800ddfe <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d104      	bne.n	800dd34 <tcp_close_shutdown+0x34>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd2e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dd32:	d064      	beq.n	800ddfe <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	8b5b      	ldrh	r3, [r3, #26]
 800dd38:	f003 0310 	and.w	r3, r3, #16
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d106      	bne.n	800dd4e <tcp_close_shutdown+0x4e>
 800dd40:	4b59      	ldr	r3, [pc, #356]	; (800dea8 <tcp_close_shutdown+0x1a8>)
 800dd42:	f240 120f 	movw	r2, #271	; 0x10f
 800dd46:	4959      	ldr	r1, [pc, #356]	; (800deac <tcp_close_shutdown+0x1ac>)
 800dd48:	4859      	ldr	r0, [pc, #356]	; (800deb0 <tcp_close_shutdown+0x1b0>)
 800dd4a:	f008 fcb9 	bl	80166c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800dd56:	687c      	ldr	r4, [r7, #4]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	1d1d      	adds	r5, r3, #4
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	8adb      	ldrh	r3, [r3, #22]
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	8b12      	ldrh	r2, [r2, #24]
 800dd64:	9201      	str	r2, [sp, #4]
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	462b      	mov	r3, r5
 800dd6a:	4622      	mov	r2, r4
 800dd6c:	f004 ff9e 	bl	8012cac <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f001 faaf 	bl	800f2d4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dd76:	4b4f      	ldr	r3, [pc, #316]	; (800deb4 <tcp_close_shutdown+0x1b4>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d105      	bne.n	800dd8c <tcp_close_shutdown+0x8c>
 800dd80:	4b4c      	ldr	r3, [pc, #304]	; (800deb4 <tcp_close_shutdown+0x1b4>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	4a4b      	ldr	r2, [pc, #300]	; (800deb4 <tcp_close_shutdown+0x1b4>)
 800dd88:	6013      	str	r3, [r2, #0]
 800dd8a:	e013      	b.n	800ddb4 <tcp_close_shutdown+0xb4>
 800dd8c:	4b49      	ldr	r3, [pc, #292]	; (800deb4 <tcp_close_shutdown+0x1b4>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	60fb      	str	r3, [r7, #12]
 800dd92:	e00c      	b.n	800ddae <tcp_close_shutdown+0xae>
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d104      	bne.n	800dda8 <tcp_close_shutdown+0xa8>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	68da      	ldr	r2, [r3, #12]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	60da      	str	r2, [r3, #12]
 800dda6:	e005      	b.n	800ddb4 <tcp_close_shutdown+0xb4>
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	60fb      	str	r3, [r7, #12]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d1ef      	bne.n	800dd94 <tcp_close_shutdown+0x94>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	60da      	str	r2, [r3, #12]
 800ddba:	4b3f      	ldr	r3, [pc, #252]	; (800deb8 <tcp_close_shutdown+0x1b8>)
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	7d1b      	ldrb	r3, [r3, #20]
 800ddc4:	2b04      	cmp	r3, #4
 800ddc6:	d10c      	bne.n	800dde2 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	220a      	movs	r2, #10
 800ddcc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ddce:	4b3b      	ldr	r3, [pc, #236]	; (800debc <tcp_close_shutdown+0x1bc>)
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	60da      	str	r2, [r3, #12]
 800ddd6:	4a39      	ldr	r2, [pc, #228]	; (800debc <tcp_close_shutdown+0x1bc>)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6013      	str	r3, [r2, #0]
 800dddc:	f005 f9b6 	bl	801314c <tcp_timer_needed>
 800dde0:	e00b      	b.n	800ddfa <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800dde2:	4b37      	ldr	r3, [pc, #220]	; (800dec0 <tcp_close_shutdown+0x1c0>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d102      	bne.n	800ddf2 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800ddec:	f003 fdf6 	bl	80119dc <tcp_trigger_input_pcb_close>
 800ddf0:	e003      	b.n	800ddfa <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800ddf2:	6879      	ldr	r1, [r7, #4]
 800ddf4:	2001      	movs	r0, #1
 800ddf6:	f7fe fe3f 	bl	800ca78 <memp_free>
        }
      }
      return ERR_OK;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	e050      	b.n	800dea0 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	7d1b      	ldrb	r3, [r3, #20]
 800de02:	2b01      	cmp	r3, #1
 800de04:	d02e      	beq.n	800de64 <tcp_close_shutdown+0x164>
 800de06:	2b02      	cmp	r3, #2
 800de08:	d038      	beq.n	800de7c <tcp_close_shutdown+0x17c>
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d142      	bne.n	800de94 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	8adb      	ldrh	r3, [r3, #22]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d021      	beq.n	800de5a <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800de16:	4b2b      	ldr	r3, [pc, #172]	; (800dec4 <tcp_close_shutdown+0x1c4>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d105      	bne.n	800de2c <tcp_close_shutdown+0x12c>
 800de20:	4b28      	ldr	r3, [pc, #160]	; (800dec4 <tcp_close_shutdown+0x1c4>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	4a27      	ldr	r2, [pc, #156]	; (800dec4 <tcp_close_shutdown+0x1c4>)
 800de28:	6013      	str	r3, [r2, #0]
 800de2a:	e013      	b.n	800de54 <tcp_close_shutdown+0x154>
 800de2c:	4b25      	ldr	r3, [pc, #148]	; (800dec4 <tcp_close_shutdown+0x1c4>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	60bb      	str	r3, [r7, #8]
 800de32:	e00c      	b.n	800de4e <tcp_close_shutdown+0x14e>
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d104      	bne.n	800de48 <tcp_close_shutdown+0x148>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	68da      	ldr	r2, [r3, #12]
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	60da      	str	r2, [r3, #12]
 800de46:	e005      	b.n	800de54 <tcp_close_shutdown+0x154>
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	60bb      	str	r3, [r7, #8]
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d1ef      	bne.n	800de34 <tcp_close_shutdown+0x134>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800de5a:	6879      	ldr	r1, [r7, #4]
 800de5c:	2001      	movs	r0, #1
 800de5e:	f7fe fe0b 	bl	800ca78 <memp_free>
    break;
 800de62:	e01c      	b.n	800de9e <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7ff fe9b 	bl	800dba0 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800de6a:	6879      	ldr	r1, [r7, #4]
 800de6c:	4816      	ldr	r0, [pc, #88]	; (800dec8 <tcp_close_shutdown+0x1c8>)
 800de6e:	f001 fa75 	bl	800f35c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800de72:	6879      	ldr	r1, [r7, #4]
 800de74:	2002      	movs	r0, #2
 800de76:	f7fe fdff 	bl	800ca78 <memp_free>
    break;
 800de7a:	e010      	b.n	800de9e <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800de7c:	6879      	ldr	r1, [r7, #4]
 800de7e:	480d      	ldr	r0, [pc, #52]	; (800deb4 <tcp_close_shutdown+0x1b4>)
 800de80:	f001 fa6c 	bl	800f35c <tcp_pcb_remove>
 800de84:	4b0c      	ldr	r3, [pc, #48]	; (800deb8 <tcp_close_shutdown+0x1b8>)
 800de86:	2201      	movs	r2, #1
 800de88:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800de8a:	6879      	ldr	r1, [r7, #4]
 800de8c:	2001      	movs	r0, #1
 800de8e:	f7fe fdf3 	bl	800ca78 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800de92:	e004      	b.n	800de9e <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 f819 	bl	800decc <tcp_close_shutdown_fin>
 800de9a:	4603      	mov	r3, r0
 800de9c:	e000      	b.n	800dea0 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3710      	adds	r7, #16
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bdb0      	pop	{r4, r5, r7, pc}
 800dea8:	08018d58 	.word	0x08018d58
 800deac:	08018dec 	.word	0x08018dec
 800deb0:	08018d94 	.word	0x08018d94
 800deb4:	2000dc54 	.word	0x2000dc54
 800deb8:	2000dc50 	.word	0x2000dc50
 800debc:	2000dc64 	.word	0x2000dc64
 800dec0:	2000dc68 	.word	0x2000dc68
 800dec4:	2000dc60 	.word	0x2000dc60
 800dec8:	2000dc5c 	.word	0x2000dc5c

0800decc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d106      	bne.n	800dee8 <tcp_close_shutdown_fin+0x1c>
 800deda:	4b2e      	ldr	r3, [pc, #184]	; (800df94 <tcp_close_shutdown_fin+0xc8>)
 800dedc:	f240 124d 	movw	r2, #333	; 0x14d
 800dee0:	492d      	ldr	r1, [pc, #180]	; (800df98 <tcp_close_shutdown_fin+0xcc>)
 800dee2:	482e      	ldr	r0, [pc, #184]	; (800df9c <tcp_close_shutdown_fin+0xd0>)
 800dee4:	f008 fbec 	bl	80166c0 <iprintf>

  switch (pcb->state) {
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	7d1b      	ldrb	r3, [r3, #20]
 800deec:	2b04      	cmp	r3, #4
 800deee:	d013      	beq.n	800df18 <tcp_close_shutdown_fin+0x4c>
 800def0:	2b07      	cmp	r3, #7
 800def2:	d01e      	beq.n	800df32 <tcp_close_shutdown_fin+0x66>
 800def4:	2b03      	cmp	r3, #3
 800def6:	d129      	bne.n	800df4c <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f003 fdfb 	bl	8011af4 <tcp_send_fin>
 800defe:	4603      	mov	r3, r0
 800df00:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800df02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d122      	bne.n	800df50 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f7ff febc 	bl	800dc88 <tcp_backlog_accepted>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2205      	movs	r2, #5
 800df14:	751a      	strb	r2, [r3, #20]
    }
    break;
 800df16:	e01b      	b.n	800df50 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f003 fdeb 	bl	8011af4 <tcp_send_fin>
 800df1e:	4603      	mov	r3, r0
 800df20:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800df22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d114      	bne.n	800df54 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2205      	movs	r2, #5
 800df2e:	751a      	strb	r2, [r3, #20]
    }
    break;
 800df30:	e010      	b.n	800df54 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f003 fdde 	bl	8011af4 <tcp_send_fin>
 800df38:	4603      	mov	r3, r0
 800df3a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800df3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d109      	bne.n	800df58 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2209      	movs	r2, #9
 800df48:	751a      	strb	r2, [r3, #20]
    }
    break;
 800df4a:	e005      	b.n	800df58 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800df4c:	2300      	movs	r3, #0
 800df4e:	e01c      	b.n	800df8a <tcp_close_shutdown_fin+0xbe>
    break;
 800df50:	bf00      	nop
 800df52:	e002      	b.n	800df5a <tcp_close_shutdown_fin+0x8e>
    break;
 800df54:	bf00      	nop
 800df56:	e000      	b.n	800df5a <tcp_close_shutdown_fin+0x8e>
    break;
 800df58:	bf00      	nop
  }

  if (err == ERR_OK) {
 800df5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d103      	bne.n	800df6a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f004 fc18 	bl	8012798 <tcp_output>
 800df68:	e00d      	b.n	800df86 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800df6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df72:	d108      	bne.n	800df86 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	8b5b      	ldrh	r3, [r3, #26]
 800df78:	f043 0308 	orr.w	r3, r3, #8
 800df7c:	b29a      	uxth	r2, r3
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800df82:	2300      	movs	r3, #0
 800df84:	e001      	b.n	800df8a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800df86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
 800df92:	bf00      	nop
 800df94:	08018d58 	.word	0x08018d58
 800df98:	08018d88 	.word	0x08018d88
 800df9c:	08018d94 	.word	0x08018d94

0800dfa0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	7d1b      	ldrb	r3, [r3, #20]
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d006      	beq.n	800dfbe <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	8b5b      	ldrh	r3, [r3, #26]
 800dfb4:	f043 0310 	orr.w	r3, r3, #16
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dfbe:	2101      	movs	r1, #1
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f7ff fe9d 	bl	800dd00 <tcp_close_shutdown>
 800dfc6:	4603      	mov	r3, r0
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	7d1b      	ldrb	r3, [r3, #20]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d102      	bne.n	800dfea <tcp_shutdown+0x1a>
    return ERR_CONN;
 800dfe4:	f06f 030a 	mvn.w	r3, #10
 800dfe8:	e035      	b.n	800e056 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d01b      	beq.n	800e028 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	8b5b      	ldrh	r3, [r3, #26]
 800dff4:	f043 0310 	orr.w	r3, r3, #16
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d005      	beq.n	800e010 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e004:	2101      	movs	r1, #1
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f7ff fe7a 	bl	800dd00 <tcp_close_shutdown>
 800e00c:	4603      	mov	r3, r0
 800e00e:	e022      	b.n	800e056 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e014:	2b00      	cmp	r3, #0
 800e016:	d007      	beq.n	800e028 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7ff faff 	bl	800d620 <pbuf_free>
      pcb->refused_data = NULL;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d012      	beq.n	800e054 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	7d1b      	ldrb	r3, [r3, #20]
 800e032:	2b03      	cmp	r3, #3
 800e034:	db0b      	blt.n	800e04e <tcp_shutdown+0x7e>
 800e036:	2b04      	cmp	r3, #4
 800e038:	dd01      	ble.n	800e03e <tcp_shutdown+0x6e>
 800e03a:	2b07      	cmp	r3, #7
 800e03c:	d107      	bne.n	800e04e <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	b2db      	uxtb	r3, r3
 800e042:	4619      	mov	r1, r3
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f7ff fe5b 	bl	800dd00 <tcp_close_shutdown>
 800e04a:	4603      	mov	r3, r0
 800e04c:	e003      	b.n	800e056 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800e04e:	f06f 030a 	mvn.w	r3, #10
 800e052:	e000      	b.n	800e056 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800e054:	2300      	movs	r3, #0
}
 800e056:	4618      	mov	r0, r3
 800e058:	3710      	adds	r7, #16
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
	...

0800e060 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b08c      	sub	sp, #48	; 0x30
 800e064:	af02      	add	r7, sp, #8
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	7d1b      	ldrb	r3, [r3, #20]
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d106      	bne.n	800e080 <tcp_abandon+0x20>
 800e072:	4b4e      	ldr	r3, [pc, #312]	; (800e1ac <tcp_abandon+0x14c>)
 800e074:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e078:	494d      	ldr	r1, [pc, #308]	; (800e1b0 <tcp_abandon+0x150>)
 800e07a:	484e      	ldr	r0, [pc, #312]	; (800e1b4 <tcp_abandon+0x154>)
 800e07c:	f008 fb20 	bl	80166c0 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	7d1b      	ldrb	r3, [r3, #20]
 800e084:	2b0a      	cmp	r3, #10
 800e086:	d108      	bne.n	800e09a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e088:	6879      	ldr	r1, [r7, #4]
 800e08a:	484b      	ldr	r0, [pc, #300]	; (800e1b8 <tcp_abandon+0x158>)
 800e08c:	f001 f966 	bl	800f35c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800e090:	6879      	ldr	r1, [r7, #4]
 800e092:	2001      	movs	r0, #1
 800e094:	f7fe fcf0 	bl	800ca78 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800e098:	e084      	b.n	800e1a4 <tcp_abandon+0x144>
    int send_rst = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ac:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0b4:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	691b      	ldr	r3, [r3, #16]
 800e0ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	7d1b      	ldrb	r3, [r3, #20]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d126      	bne.n	800e112 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	8adb      	ldrh	r3, [r3, #22]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d02e      	beq.n	800e12a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e0cc:	4b3b      	ldr	r3, [pc, #236]	; (800e1bc <tcp_abandon+0x15c>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d105      	bne.n	800e0e2 <tcp_abandon+0x82>
 800e0d6:	4b39      	ldr	r3, [pc, #228]	; (800e1bc <tcp_abandon+0x15c>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	4a37      	ldr	r2, [pc, #220]	; (800e1bc <tcp_abandon+0x15c>)
 800e0de:	6013      	str	r3, [r2, #0]
 800e0e0:	e013      	b.n	800e10a <tcp_abandon+0xaa>
 800e0e2:	4b36      	ldr	r3, [pc, #216]	; (800e1bc <tcp_abandon+0x15c>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	61fb      	str	r3, [r7, #28]
 800e0e8:	e00c      	b.n	800e104 <tcp_abandon+0xa4>
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d104      	bne.n	800e0fe <tcp_abandon+0x9e>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	68da      	ldr	r2, [r3, #12]
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	60da      	str	r2, [r3, #12]
 800e0fc:	e005      	b.n	800e10a <tcp_abandon+0xaa>
 800e0fe:	69fb      	ldr	r3, [r7, #28]
 800e100:	68db      	ldr	r3, [r3, #12]
 800e102:	61fb      	str	r3, [r7, #28]
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d1ef      	bne.n	800e0ea <tcp_abandon+0x8a>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2200      	movs	r2, #0
 800e10e:	60da      	str	r2, [r3, #12]
 800e110:	e00b      	b.n	800e12a <tcp_abandon+0xca>
      send_rst = reset;
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	8adb      	ldrh	r3, [r3, #22]
 800e11a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e11c:	6879      	ldr	r1, [r7, #4]
 800e11e:	4828      	ldr	r0, [pc, #160]	; (800e1c0 <tcp_abandon+0x160>)
 800e120:	f001 f91c 	bl	800f35c <tcp_pcb_remove>
 800e124:	4b27      	ldr	r3, [pc, #156]	; (800e1c4 <tcp_abandon+0x164>)
 800e126:	2201      	movs	r2, #1
 800e128:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d004      	beq.n	800e13c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e136:	4618      	mov	r0, r3
 800e138:	f000 fe59 	bl	800edee <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e140:	2b00      	cmp	r3, #0
 800e142:	d004      	beq.n	800e14e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e148:	4618      	mov	r0, r3
 800e14a:	f000 fe50 	bl	800edee <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e152:	2b00      	cmp	r3, #0
 800e154:	d004      	beq.n	800e160 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e15a:	4618      	mov	r0, r3
 800e15c:	f000 fe47 	bl	800edee <tcp_segs_free>
    tcp_backlog_accepted(pcb);
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f7ff fd91 	bl	800dc88 <tcp_backlog_accepted>
    if (send_rst) {
 800e166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d00c      	beq.n	800e186 <tcp_abandon+0x126>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	1d19      	adds	r1, r3, #4
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	8b1b      	ldrh	r3, [r3, #24]
 800e176:	9301      	str	r3, [sp, #4]
 800e178:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e17a:	9300      	str	r3, [sp, #0]
 800e17c:	460b      	mov	r3, r1
 800e17e:	6979      	ldr	r1, [r7, #20]
 800e180:	69b8      	ldr	r0, [r7, #24]
 800e182:	f004 fd93 	bl	8012cac <tcp_rst>
    last_state = pcb->state;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	7d1b      	ldrb	r3, [r3, #20]
 800e18a:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800e18c:	6879      	ldr	r1, [r7, #4]
 800e18e:	2001      	movs	r0, #1
 800e190:	f7fe fc72 	bl	800ca78 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d004      	beq.n	800e1a4 <tcp_abandon+0x144>
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	f06f 010c 	mvn.w	r1, #12
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	4798      	blx	r3
}
 800e1a4:	bf00      	nop
 800e1a6:	3728      	adds	r7, #40	; 0x28
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	08018d58 	.word	0x08018d58
 800e1b0:	08018e08 	.word	0x08018e08
 800e1b4:	08018d94 	.word	0x08018d94
 800e1b8:	2000dc64 	.word	0x2000dc64
 800e1bc:	2000dc60 	.word	0x2000dc60
 800e1c0:	2000dc54 	.word	0x2000dc54
 800e1c4:	2000dc50 	.word	0x2000dc50

0800e1c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e1d0:	2101      	movs	r1, #1
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f7ff ff44 	bl	800e060 <tcp_abandon>
}
 800e1d8:	bf00      	nop
 800e1da:	3708      	adds	r7, #8
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b088      	sub	sp, #32
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	60f8      	str	r0, [r7, #12]
 800e1e8:	60b9      	str	r1, [r7, #8]
 800e1ea:	4613      	mov	r3, r2
 800e1ec:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e1ee:	2304      	movs	r3, #4
 800e1f0:	61bb      	str	r3, [r7, #24]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d101      	bne.n	800e1fc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e1f8:	4b46      	ldr	r3, [pc, #280]	; (800e314 <tcp_bind+0x134>)
 800e1fa:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d002      	beq.n	800e208 <tcp_bind+0x28>
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d102      	bne.n	800e20e <tcp_bind+0x2e>
    return ERR_VAL;
 800e208:	f06f 0305 	mvn.w	r3, #5
 800e20c:	e07e      	b.n	800e30c <tcp_bind+0x12c>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	7d1b      	ldrb	r3, [r3, #20]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d009      	beq.n	800e22a <tcp_bind+0x4a>
 800e216:	4b40      	ldr	r3, [pc, #256]	; (800e318 <tcp_bind+0x138>)
 800e218:	f44f 7211 	mov.w	r2, #580	; 0x244
 800e21c:	493f      	ldr	r1, [pc, #252]	; (800e31c <tcp_bind+0x13c>)
 800e21e:	4840      	ldr	r0, [pc, #256]	; (800e320 <tcp_bind+0x140>)
 800e220:	f008 fa4e 	bl	80166c0 <iprintf>
 800e224:	f06f 0305 	mvn.w	r3, #5
 800e228:	e070      	b.n	800e30c <tcp_bind+0x12c>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	7a1b      	ldrb	r3, [r3, #8]
 800e22e:	f003 0304 	and.w	r3, r3, #4
 800e232:	2b00      	cmp	r3, #0
 800e234:	d001      	beq.n	800e23a <tcp_bind+0x5a>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
 800e236:	2303      	movs	r3, #3
 800e238:	61bb      	str	r3, [r7, #24]
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800e23a:	88fb      	ldrh	r3, [r7, #6]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d109      	bne.n	800e254 <tcp_bind+0x74>
    port = tcp_new_port();
 800e240:	f000 f9fe 	bl	800e640 <tcp_new_port>
 800e244:	4603      	mov	r3, r0
 800e246:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e248:	88fb      	ldrh	r3, [r7, #6]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d141      	bne.n	800e2d2 <tcp_bind+0xf2>
      return ERR_BUF;
 800e24e:	f06f 0301 	mvn.w	r3, #1
 800e252:	e05b      	b.n	800e30c <tcp_bind+0x12c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e254:	2300      	movs	r3, #0
 800e256:	61fb      	str	r3, [r7, #28]
 800e258:	e037      	b.n	800e2ca <tcp_bind+0xea>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e25a:	4a32      	ldr	r2, [pc, #200]	; (800e324 <tcp_bind+0x144>)
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	617b      	str	r3, [r7, #20]
 800e266:	e02a      	b.n	800e2be <tcp_bind+0xde>
        if (cpcb->local_port == port) {
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	8adb      	ldrh	r3, [r3, #22]
 800e26c:	88fa      	ldrh	r2, [r7, #6]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d122      	bne.n	800e2b8 <tcp_bind+0xd8>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	7a1b      	ldrb	r3, [r3, #8]
 800e276:	f003 0304 	and.w	r3, r3, #4
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d005      	beq.n	800e28a <tcp_bind+0xaa>
              !ip_get_option(cpcb, SOF_REUSEADDR))
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	7a1b      	ldrb	r3, [r3, #8]
 800e282:	f003 0304 	and.w	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 800e286:	2b00      	cmp	r3, #0
 800e288:	d116      	bne.n	800e2b8 <tcp_bind+0xd8>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e28a:	697b      	ldr	r3, [r7, #20]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d010      	beq.n	800e2b2 <tcp_bind+0xd2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d00c      	beq.n	800e2b2 <tcp_bind+0xd2>
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d009      	beq.n	800e2b2 <tcp_bind+0xd2>
                ip_addr_isany(ipaddr) ||
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d005      	beq.n	800e2b2 <tcp_bind+0xd2>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d102      	bne.n	800e2b8 <tcp_bind+0xd8>
              return ERR_USE;
 800e2b2:	f06f 0307 	mvn.w	r3, #7
 800e2b6:	e029      	b.n	800e30c <tcp_bind+0x12c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d1d1      	bne.n	800e268 <tcp_bind+0x88>
    for (i = 0; i < max_pcb_list; i++) {
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	61fb      	str	r3, [r7, #28]
 800e2ca:	69fa      	ldr	r2, [r7, #28]
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	dbc3      	blt.n	800e25a <tcp_bind+0x7a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d00c      	beq.n	800e2f2 <tcp_bind+0x112>
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d008      	beq.n	800e2f2 <tcp_bind+0x112>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d002      	beq.n	800e2ec <tcp_bind+0x10c>
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	e000      	b.n	800e2ee <tcp_bind+0x10e>
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	68fa      	ldr	r2, [r7, #12]
 800e2f0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	88fa      	ldrh	r2, [r7, #6]
 800e2f6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e2f8:	4b0b      	ldr	r3, [pc, #44]	; (800e328 <tcp_bind+0x148>)
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	60da      	str	r2, [r3, #12]
 800e300:	4a09      	ldr	r2, [pc, #36]	; (800e328 <tcp_bind+0x148>)
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	6013      	str	r3, [r2, #0]
 800e306:	f004 ff21 	bl	801314c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e30a:	2300      	movs	r3, #0
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3720      	adds	r7, #32
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	0801a290 	.word	0x0801a290
 800e318:	08018d58 	.word	0x08018d58
 800e31c:	08018e3c 	.word	0x08018e3c
 800e320:	08018d94 	.word	0x08018d94
 800e324:	0801a268 	.word	0x0801a268
 800e328:	2000dc60 	.word	0x2000dc60

0800e32c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	4613      	mov	r3, r2
 800e338:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800e33a:	68b8      	ldr	r0, [r7, #8]
 800e33c:	f7ff ff44 	bl	800e1c8 <tcp_abort>

  return ERR_ABRT;
 800e340:	f06f 030c 	mvn.w	r3, #12
}
 800e344:	4618      	mov	r0, r3
 800e346:	3710      	adds	r7, #16
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b088      	sub	sp, #32
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	460b      	mov	r3, r1
 800e356:	607a      	str	r2, [r7, #4]
 800e358:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e35a:	2300      	movs	r3, #0
 800e35c:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	7d1b      	ldrb	r3, [r3, #20]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d009      	beq.n	800e37a <tcp_listen_with_backlog_and_err+0x2e>
 800e366:	4b5b      	ldr	r3, [pc, #364]	; (800e4d4 <tcp_listen_with_backlog_and_err+0x188>)
 800e368:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800e36c:	495a      	ldr	r1, [pc, #360]	; (800e4d8 <tcp_listen_with_backlog_and_err+0x18c>)
 800e36e:	485b      	ldr	r0, [pc, #364]	; (800e4dc <tcp_listen_with_backlog_and_err+0x190>)
 800e370:	f008 f9a6 	bl	80166c0 <iprintf>
 800e374:	23f1      	movs	r3, #241	; 0xf1
 800e376:	76fb      	strb	r3, [r7, #27]
 800e378:	e0a0      	b.n	800e4bc <tcp_listen_with_backlog_and_err+0x170>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	7d1b      	ldrb	r3, [r3, #20]
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d104      	bne.n	800e38c <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e386:	23f7      	movs	r3, #247	; 0xf7
 800e388:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e38a:	e097      	b.n	800e4bc <tcp_listen_with_backlog_and_err+0x170>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	7a1b      	ldrb	r3, [r3, #8]
 800e390:	f003 0304 	and.w	r3, r3, #4
 800e394:	2b00      	cmp	r3, #0
 800e396:	d01a      	beq.n	800e3ce <tcp_listen_with_backlog_and_err+0x82>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e398:	4b51      	ldr	r3, [pc, #324]	; (800e4e0 <tcp_listen_with_backlog_and_err+0x194>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	61fb      	str	r3, [r7, #28]
 800e39e:	e013      	b.n	800e3c8 <tcp_listen_with_backlog_and_err+0x7c>
      if ((lpcb->local_port == pcb->local_port) &&
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	8ada      	ldrh	r2, [r3, #22]
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	8adb      	ldrh	r3, [r3, #22]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d10a      	bne.n	800e3c2 <tcp_listen_with_backlog_and_err+0x76>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
      if ((lpcb->local_port == pcb->local_port) &&
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d104      	bne.n	800e3c2 <tcp_listen_with_backlog_and_err+0x76>
        /* this address/port is already used */
        lpcb = NULL;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	61fb      	str	r3, [r7, #28]
        res = ERR_USE;
 800e3bc:	23f8      	movs	r3, #248	; 0xf8
 800e3be:	76fb      	strb	r3, [r7, #27]
        goto done;
 800e3c0:	e07c      	b.n	800e4bc <tcp_listen_with_backlog_and_err+0x170>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	61fb      	str	r3, [r7, #28]
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d1e8      	bne.n	800e3a0 <tcp_listen_with_backlog_and_err+0x54>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e3ce:	2002      	movs	r0, #2
 800e3d0:	f7fe fb00 	bl	800c9d4 <memp_malloc>
 800e3d4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d102      	bne.n	800e3e2 <tcp_listen_with_backlog_and_err+0x96>
    res = ERR_MEM;
 800e3dc:	23ff      	movs	r3, #255	; 0xff
 800e3de:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e3e0:	e06c      	b.n	800e4bc <tcp_listen_with_backlog_and_err+0x170>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	691a      	ldr	r2, [r3, #16]
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	8ada      	ldrh	r2, [r3, #22]
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e3f2:	69fb      	ldr	r3, [r7, #28]
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	7d5a      	ldrb	r2, [r3, #21]
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	7a1a      	ldrb	r2, [r3, #8]
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	7a9a      	ldrb	r2, [r3, #10]
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	7a5a      	ldrb	r2, [r3, #9]
 800e414:	69fb      	ldr	r3, [r7, #28]
 800e416:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	8adb      	ldrh	r3, [r3, #22]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d021      	beq.n	800e46c <tcp_listen_with_backlog_and_err+0x120>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e428:	4b2e      	ldr	r3, [pc, #184]	; (800e4e4 <tcp_listen_with_backlog_and_err+0x198>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	68fa      	ldr	r2, [r7, #12]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d105      	bne.n	800e43e <tcp_listen_with_backlog_and_err+0xf2>
 800e432:	4b2c      	ldr	r3, [pc, #176]	; (800e4e4 <tcp_listen_with_backlog_and_err+0x198>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	4a2a      	ldr	r2, [pc, #168]	; (800e4e4 <tcp_listen_with_backlog_and_err+0x198>)
 800e43a:	6013      	str	r3, [r2, #0]
 800e43c:	e013      	b.n	800e466 <tcp_listen_with_backlog_and_err+0x11a>
 800e43e:	4b29      	ldr	r3, [pc, #164]	; (800e4e4 <tcp_listen_with_backlog_and_err+0x198>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	617b      	str	r3, [r7, #20]
 800e444:	e00c      	b.n	800e460 <tcp_listen_with_backlog_and_err+0x114>
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	68fa      	ldr	r2, [r7, #12]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d104      	bne.n	800e45a <tcp_listen_with_backlog_and_err+0x10e>
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	68da      	ldr	r2, [r3, #12]
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	60da      	str	r2, [r3, #12]
 800e458:	e005      	b.n	800e466 <tcp_listen_with_backlog_and_err+0x11a>
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	617b      	str	r3, [r7, #20]
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d1ef      	bne.n	800e446 <tcp_listen_with_backlog_and_err+0xfa>
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2200      	movs	r2, #0
 800e46a:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800e46c:	68f9      	ldr	r1, [r7, #12]
 800e46e:	2001      	movs	r0, #1
 800e470:	f7fe fb02 	bl	800ca78 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	4a1c      	ldr	r2, [pc, #112]	; (800e4e8 <tcp_listen_with_backlog_and_err+0x19c>)
 800e478:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	2200      	movs	r2, #0
 800e47e:	775a      	strb	r2, [r3, #29]
  tcp_backlog_set(lpcb, backlog);
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	7d1b      	ldrb	r3, [r3, #20]
 800e484:	2b01      	cmp	r3, #1
 800e486:	d006      	beq.n	800e496 <tcp_listen_with_backlog_and_err+0x14a>
 800e488:	4b12      	ldr	r3, [pc, #72]	; (800e4d4 <tcp_listen_with_backlog_and_err+0x188>)
 800e48a:	f240 22e5 	movw	r2, #741	; 0x2e5
 800e48e:	4917      	ldr	r1, [pc, #92]	; (800e4ec <tcp_listen_with_backlog_and_err+0x1a0>)
 800e490:	4812      	ldr	r0, [pc, #72]	; (800e4dc <tcp_listen_with_backlog_and_err+0x190>)
 800e492:	f008 f915 	bl	80166c0 <iprintf>
 800e496:	7afb      	ldrb	r3, [r7, #11]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d001      	beq.n	800e4a0 <tcp_listen_with_backlog_and_err+0x154>
 800e49c:	7afa      	ldrb	r2, [r7, #11]
 800e49e:	e000      	b.n	800e4a2 <tcp_listen_with_backlog_and_err+0x156>
 800e4a0:	2201      	movs	r2, #1
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	771a      	strb	r2, [r3, #28]
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e4a6:	4b0e      	ldr	r3, [pc, #56]	; (800e4e0 <tcp_listen_with_backlog_and_err+0x194>)
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	69fb      	ldr	r3, [r7, #28]
 800e4ac:	60da      	str	r2, [r3, #12]
 800e4ae:	4a0c      	ldr	r2, [pc, #48]	; (800e4e0 <tcp_listen_with_backlog_and_err+0x194>)
 800e4b0:	69fb      	ldr	r3, [r7, #28]
 800e4b2:	6013      	str	r3, [r2, #0]
 800e4b4:	f004 fe4a 	bl	801314c <tcp_timer_needed>
  res = ERR_OK;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d002      	beq.n	800e4c8 <tcp_listen_with_backlog_and_err+0x17c>
    *err = res;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	7efa      	ldrb	r2, [r7, #27]
 800e4c6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e4c8:	69fb      	ldr	r3, [r7, #28]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3720      	adds	r7, #32
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	08018d58 	.word	0x08018d58
 800e4d8:	08018e64 	.word	0x08018e64
 800e4dc:	08018d94 	.word	0x08018d94
 800e4e0:	2000dc5c 	.word	0x2000dc5c
 800e4e4:	2000dc60 	.word	0x2000dc60
 800e4e8:	0800e32d 	.word	0x0800e32d
 800e4ec:	08018e88 	.word	0x08018e88

0800e4f0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e500:	4413      	add	r3, r2
 800e502:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e50c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e510:	bf28      	it	cs
 800e512:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e516:	b292      	uxth	r2, r2
 800e518:	4413      	add	r3, r2
 800e51a:	68fa      	ldr	r2, [r7, #12]
 800e51c:	1ad3      	subs	r3, r2, r3
 800e51e:	2b00      	cmp	r3, #0
 800e520:	db08      	blt.n	800e534 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e52e:	68fa      	ldr	r2, [r7, #12]
 800e530:	1ad3      	subs	r3, r2, r3
 800e532:	e020      	b.n	800e576 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e53c:	1ad3      	subs	r3, r2, r3
 800e53e:	2b00      	cmp	r3, #0
 800e540:	dd03      	ble.n	800e54a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2200      	movs	r2, #0
 800e546:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e548:	e014      	b.n	800e574 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e552:	1ad3      	subs	r3, r2, r3
 800e554:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e55c:	d306      	bcc.n	800e56c <tcp_update_rcv_ann_wnd+0x7c>
 800e55e:	4b08      	ldr	r3, [pc, #32]	; (800e580 <tcp_update_rcv_ann_wnd+0x90>)
 800e560:	f44f 7242 	mov.w	r2, #776	; 0x308
 800e564:	4907      	ldr	r1, [pc, #28]	; (800e584 <tcp_update_rcv_ann_wnd+0x94>)
 800e566:	4808      	ldr	r0, [pc, #32]	; (800e588 <tcp_update_rcv_ann_wnd+0x98>)
 800e568:	f008 f8aa 	bl	80166c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	b29a      	uxth	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e574:	2300      	movs	r3, #0
  }
}
 800e576:	4618      	mov	r0, r3
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	08018d58 	.word	0x08018d58
 800e584:	08018eb8 	.word	0x08018eb8
 800e588:	08018d94 	.word	0x08018d94

0800e58c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	460b      	mov	r3, r1
 800e596:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	7d1b      	ldrb	r3, [r3, #20]
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d106      	bne.n	800e5ae <tcp_recved+0x22>
 800e5a0:	4b23      	ldr	r3, [pc, #140]	; (800e630 <tcp_recved+0xa4>)
 800e5a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e5a6:	4923      	ldr	r1, [pc, #140]	; (800e634 <tcp_recved+0xa8>)
 800e5a8:	4823      	ldr	r0, [pc, #140]	; (800e638 <tcp_recved+0xac>)
 800e5aa:	f008 f889 	bl	80166c0 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e5b2:	887b      	ldrh	r3, [r7, #2]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	b29a      	uxth	r2, r3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5c0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e5c4:	d904      	bls.n	800e5d0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e5cc:	851a      	strh	r2, [r3, #40]	; 0x28
 800e5ce:	e017      	b.n	800e600 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d113      	bne.n	800e600 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	7d1b      	ldrb	r3, [r3, #20]
 800e5dc:	2b07      	cmp	r3, #7
 800e5de:	d003      	beq.n	800e5e8 <tcp_recved+0x5c>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	7d1b      	ldrb	r3, [r3, #20]
 800e5e4:	2b09      	cmp	r3, #9
 800e5e6:	d104      	bne.n	800e5f2 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e5ee:	851a      	strh	r2, [r3, #40]	; 0x28
 800e5f0:	e006      	b.n	800e600 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800e5f2:	4b0f      	ldr	r3, [pc, #60]	; (800e630 <tcp_recved+0xa4>)
 800e5f4:	f240 322d 	movw	r2, #813	; 0x32d
 800e5f8:	4910      	ldr	r1, [pc, #64]	; (800e63c <tcp_recved+0xb0>)
 800e5fa:	480f      	ldr	r0, [pc, #60]	; (800e638 <tcp_recved+0xac>)
 800e5fc:	f008 f860 	bl	80166c0 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7ff ff75 	bl	800e4f0 <tcp_update_rcv_ann_wnd>
 800e606:	4603      	mov	r3, r0
 800e608:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e610:	db09      	blt.n	800e626 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	8b5b      	ldrh	r3, [r3, #26]
 800e616:	f043 0302 	orr.w	r3, r3, #2
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f004 f8b9 	bl	8012798 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e626:	bf00      	nop
 800e628:	3710      	adds	r7, #16
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	08018d58 	.word	0x08018d58
 800e634:	08018ed4 	.word	0x08018ed4
 800e638:	08018d94 	.word	0x08018d94
 800e63c:	08018efc 	.word	0x08018efc

0800e640 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e640:	b480      	push	{r7}
 800e642:	b083      	sub	sp, #12
 800e644:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e646:	2300      	movs	r3, #0
 800e648:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800e64a:	4b1d      	ldr	r3, [pc, #116]	; (800e6c0 <tcp_new_port+0x80>)
 800e64c:	881b      	ldrh	r3, [r3, #0]
 800e64e:	1c5a      	adds	r2, r3, #1
 800e650:	b291      	uxth	r1, r2
 800e652:	4a1b      	ldr	r2, [pc, #108]	; (800e6c0 <tcp_new_port+0x80>)
 800e654:	8011      	strh	r1, [r2, #0]
 800e656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d103      	bne.n	800e666 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e65e:	4b18      	ldr	r3, [pc, #96]	; (800e6c0 <tcp_new_port+0x80>)
 800e660:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e664:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e666:	2300      	movs	r3, #0
 800e668:	71fb      	strb	r3, [r7, #7]
 800e66a:	e01e      	b.n	800e6aa <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e66c:	79fb      	ldrb	r3, [r7, #7]
 800e66e:	4a15      	ldr	r2, [pc, #84]	; (800e6c4 <tcp_new_port+0x84>)
 800e670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	603b      	str	r3, [r7, #0]
 800e678:	e011      	b.n	800e69e <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	8ada      	ldrh	r2, [r3, #22]
 800e67e:	4b10      	ldr	r3, [pc, #64]	; (800e6c0 <tcp_new_port+0x80>)
 800e680:	881b      	ldrh	r3, [r3, #0]
 800e682:	429a      	cmp	r2, r3
 800e684:	d108      	bne.n	800e698 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e686:	88bb      	ldrh	r3, [r7, #4]
 800e688:	3301      	adds	r3, #1
 800e68a:	80bb      	strh	r3, [r7, #4]
 800e68c:	88bb      	ldrh	r3, [r7, #4]
 800e68e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e692:	d3da      	bcc.n	800e64a <tcp_new_port+0xa>
          return 0;
 800e694:	2300      	movs	r3, #0
 800e696:	e00d      	b.n	800e6b4 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	603b      	str	r3, [r7, #0]
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1ea      	bne.n	800e67a <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e6a4:	79fb      	ldrb	r3, [r7, #7]
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	71fb      	strb	r3, [r7, #7]
 800e6aa:	79fb      	ldrb	r3, [r7, #7]
 800e6ac:	2b03      	cmp	r3, #3
 800e6ae:	d9dd      	bls.n	800e66c <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e6b0:	4b03      	ldr	r3, [pc, #12]	; (800e6c0 <tcp_new_port+0x80>)
 800e6b2:	881b      	ldrh	r3, [r3, #0]
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	370c      	adds	r7, #12
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr
 800e6c0:	20000010 	.word	0x20000010
 800e6c4:	0801a268 	.word	0x0801a268

0800e6c8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e6c8:	b5b0      	push	{r4, r5, r7, lr}
 800e6ca:	b08c      	sub	sp, #48	; 0x30
 800e6cc:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800e6d2:	4b9a      	ldr	r3, [pc, #616]	; (800e93c <tcp_slowtmr+0x274>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	4a98      	ldr	r2, [pc, #608]	; (800e93c <tcp_slowtmr+0x274>)
 800e6da:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e6dc:	4b98      	ldr	r3, [pc, #608]	; (800e940 <tcp_slowtmr+0x278>)
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	4b96      	ldr	r3, [pc, #600]	; (800e940 <tcp_slowtmr+0x278>)
 800e6e6:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800e6ec:	4b95      	ldr	r3, [pc, #596]	; (800e944 <tcp_slowtmr+0x27c>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e6f2:	e22f      	b.n	800eb54 <tcp_slowtmr+0x48c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f6:	7d1b      	ldrb	r3, [r3, #20]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d106      	bne.n	800e70a <tcp_slowtmr+0x42>
 800e6fc:	4b92      	ldr	r3, [pc, #584]	; (800e948 <tcp_slowtmr+0x280>)
 800e6fe:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800e702:	4992      	ldr	r1, [pc, #584]	; (800e94c <tcp_slowtmr+0x284>)
 800e704:	4892      	ldr	r0, [pc, #584]	; (800e950 <tcp_slowtmr+0x288>)
 800e706:	f007 ffdb 	bl	80166c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70c:	7d1b      	ldrb	r3, [r3, #20]
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d106      	bne.n	800e720 <tcp_slowtmr+0x58>
 800e712:	4b8d      	ldr	r3, [pc, #564]	; (800e948 <tcp_slowtmr+0x280>)
 800e714:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e718:	498e      	ldr	r1, [pc, #568]	; (800e954 <tcp_slowtmr+0x28c>)
 800e71a:	488d      	ldr	r0, [pc, #564]	; (800e950 <tcp_slowtmr+0x288>)
 800e71c:	f007 ffd0 	bl	80166c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e722:	7d1b      	ldrb	r3, [r3, #20]
 800e724:	2b0a      	cmp	r3, #10
 800e726:	d106      	bne.n	800e736 <tcp_slowtmr+0x6e>
 800e728:	4b87      	ldr	r3, [pc, #540]	; (800e948 <tcp_slowtmr+0x280>)
 800e72a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800e72e:	498a      	ldr	r1, [pc, #552]	; (800e958 <tcp_slowtmr+0x290>)
 800e730:	4887      	ldr	r0, [pc, #540]	; (800e950 <tcp_slowtmr+0x288>)
 800e732:	f007 ffc5 	bl	80166c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e738:	7f9a      	ldrb	r2, [r3, #30]
 800e73a:	4b81      	ldr	r3, [pc, #516]	; (800e940 <tcp_slowtmr+0x278>)
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d103      	bne.n	800e74a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800e742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e744:	68db      	ldr	r3, [r3, #12]
 800e746:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800e748:	e204      	b.n	800eb54 <tcp_slowtmr+0x48c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e74a:	4b7d      	ldr	r3, [pc, #500]	; (800e940 <tcp_slowtmr+0x278>)
 800e74c:	781a      	ldrb	r2, [r3, #0]
 800e74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e750:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e752:	2300      	movs	r3, #0
 800e754:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800e756:	2300      	movs	r3, #0
 800e758:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75c:	7d1b      	ldrb	r3, [r3, #20]
 800e75e:	2b02      	cmp	r3, #2
 800e760:	d108      	bne.n	800e774 <tcp_slowtmr+0xac>
 800e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e764:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e768:	2b05      	cmp	r3, #5
 800e76a:	d903      	bls.n	800e774 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800e76c:	7ffb      	ldrb	r3, [r7, #31]
 800e76e:	3301      	adds	r3, #1
 800e770:	77fb      	strb	r3, [r7, #31]
 800e772:	e0a2      	b.n	800e8ba <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800e774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e77a:	2b0b      	cmp	r3, #11
 800e77c:	d903      	bls.n	800e786 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e77e:	7ffb      	ldrb	r3, [r7, #31]
 800e780:	3301      	adds	r3, #1
 800e782:	77fb      	strb	r3, [r7, #31]
 800e784:	e099      	b.n	800e8ba <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d032      	beq.n	800e7f6 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800e790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e792:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e796:	3b01      	subs	r3, #1
 800e798:	4a70      	ldr	r2, [pc, #448]	; (800e95c <tcp_slowtmr+0x294>)
 800e79a:	5cd3      	ldrb	r3, [r2, r3]
 800e79c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800e79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e7a4:	7cfa      	ldrb	r2, [r7, #19]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d907      	bls.n	800e7ba <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	b2da      	uxtb	r2, r3
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7bc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800e7c0:	7cfa      	ldrb	r2, [r7, #19]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d879      	bhi.n	800e8ba <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800e7c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7c8:	f004 fc00 	bl	8012fcc <tcp_zero_window_probe>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d173      	bne.n	800e8ba <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800e7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7dc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e7e0:	2b06      	cmp	r3, #6
 800e7e2:	d86a      	bhi.n	800e8ba <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	b2da      	uxtb	r2, r3
 800e7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800e7f4:	e061      	b.n	800e8ba <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800e7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	db08      	blt.n	800e812 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800e800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e802:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e806:	b29b      	uxth	r3, r3
 800e808:	3301      	adds	r3, #1
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	b21a      	sxth	r2, r3
 800e80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e810:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800e812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e816:	2b00      	cmp	r3, #0
 800e818:	d04f      	beq.n	800e8ba <tcp_slowtmr+0x1f2>
 800e81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e822:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e826:	429a      	cmp	r2, r3
 800e828:	db47      	blt.n	800e8ba <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800e82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82c:	7d1b      	ldrb	r3, [r3, #20]
 800e82e:	2b02      	cmp	r3, #2
 800e830:	d018      	beq.n	800e864 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800e832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e838:	2b0c      	cmp	r3, #12
 800e83a:	bf28      	it	cs
 800e83c:	230c      	movcs	r3, #12
 800e83e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e842:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e846:	10db      	asrs	r3, r3, #3
 800e848:	b21b      	sxth	r3, r3
 800e84a:	461a      	mov	r2, r3
 800e84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e852:	4413      	add	r3, r2
 800e854:	7dfa      	ldrb	r2, [r7, #23]
 800e856:	4942      	ldr	r1, [pc, #264]	; (800e960 <tcp_slowtmr+0x298>)
 800e858:	5c8a      	ldrb	r2, [r1, r2]
 800e85a:	4093      	lsls	r3, r2
 800e85c:	b21a      	sxth	r2, r3
 800e85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e860:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800e864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e866:	2200      	movs	r2, #0
 800e868:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e872:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e876:	4293      	cmp	r3, r2
 800e878:	bf28      	it	cs
 800e87a:	4613      	movcs	r3, r2
 800e87c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800e87e:	8abb      	ldrh	r3, [r7, #20]
 800e880:	085b      	lsrs	r3, r3, #1
 800e882:	b29a      	uxth	r2, r3
 800e884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e886:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e894:	005b      	lsls	r3, r3, #1
 800e896:	b29b      	uxth	r3, r3
 800e898:	429a      	cmp	r2, r3
 800e89a:	d206      	bcs.n	800e8aa <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800e89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8a0:	005b      	lsls	r3, r3, #1
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800e8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ac:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800e8b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8b6:	f004 fa6f 	bl	8012d98 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8bc:	7d1b      	ldrb	r3, [r3, #20]
 800e8be:	2b06      	cmp	r3, #6
 800e8c0:	d10f      	bne.n	800e8e2 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c4:	8b5b      	ldrh	r3, [r3, #26]
 800e8c6:	f003 0310 	and.w	r3, r3, #16
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d009      	beq.n	800e8e2 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8ce:	4b1b      	ldr	r3, [pc, #108]	; (800e93c <tcp_slowtmr+0x274>)
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d4:	6a1b      	ldr	r3, [r3, #32]
 800e8d6:	1ad3      	subs	r3, r2, r3
 800e8d8:	2b28      	cmp	r3, #40	; 0x28
 800e8da:	d902      	bls.n	800e8e2 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e8dc:	7ffb      	ldrb	r3, [r7, #31]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e4:	7a1b      	ldrb	r3, [r3, #8]
 800e8e6:	f003 0308 	and.w	r3, r3, #8
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d065      	beq.n	800e9ba <tcp_slowtmr+0x2f2>
       ((pcb->state == ESTABLISHED) ||
 800e8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f0:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e8f2:	2b04      	cmp	r3, #4
 800e8f4:	d003      	beq.n	800e8fe <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800e8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f8:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800e8fa:	2b07      	cmp	r3, #7
 800e8fc:	d15d      	bne.n	800e9ba <tcp_slowtmr+0x2f2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8fe:	4b0f      	ldr	r3, [pc, #60]	; (800e93c <tcp_slowtmr+0x274>)
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e904:	6a1b      	ldr	r3, [r3, #32]
 800e906:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800e908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800e90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e910:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e916:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800e91a:	fb00 f303 	mul.w	r3, r0, r3
 800e91e:	440b      	add	r3, r1
 800e920:	4910      	ldr	r1, [pc, #64]	; (800e964 <tcp_slowtmr+0x29c>)
 800e922:	fba1 1303 	umull	r1, r3, r1, r3
 800e926:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e928:	429a      	cmp	r2, r3
 800e92a:	d91d      	bls.n	800e968 <tcp_slowtmr+0x2a0>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e92c:	7ffb      	ldrb	r3, [r7, #31]
 800e92e:	3301      	adds	r3, #1
 800e930:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800e932:	7fbb      	ldrb	r3, [r7, #30]
 800e934:	3301      	adds	r3, #1
 800e936:	77bb      	strb	r3, [r7, #30]
 800e938:	e03f      	b.n	800e9ba <tcp_slowtmr+0x2f2>
 800e93a:	bf00      	nop
 800e93c:	2000dc58 	.word	0x2000dc58
 800e940:	20004142 	.word	0x20004142
 800e944:	2000dc54 	.word	0x2000dc54
 800e948:	08018d58 	.word	0x08018d58
 800e94c:	08018f50 	.word	0x08018f50
 800e950:	08018d94 	.word	0x08018d94
 800e954:	08018f7c 	.word	0x08018f7c
 800e958:	08018fa8 	.word	0x08018fa8
 800e95c:	0801a260 	.word	0x0801a260
 800e960:	0801a250 	.word	0x0801a250
 800e964:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e968:	4b98      	ldr	r3, [pc, #608]	; (800ebcc <tcp_slowtmr+0x504>)
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96e:	6a1b      	ldr	r3, [r3, #32]
 800e970:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e974:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800e978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97a:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e97e:	4618      	mov	r0, r3
 800e980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e986:	fb03 f300 	mul.w	r3, r3, r0
 800e98a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800e98c:	4990      	ldr	r1, [pc, #576]	; (800ebd0 <tcp_slowtmr+0x508>)
 800e98e:	fba1 1303 	umull	r1, r3, r1, r3
 800e992:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e994:	429a      	cmp	r2, r3
 800e996:	d910      	bls.n	800e9ba <tcp_slowtmr+0x2f2>
      {
        err = tcp_keepalive(pcb);
 800e998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e99a:	f004 fada 	bl	8012f52 <tcp_keepalive>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800e9a2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d107      	bne.n	800e9ba <tcp_slowtmr+0x2f2>
          pcb->keep_cnt_sent++;
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ac:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	b2da      	uxtb	r2, r3
 800e9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b6:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d016      	beq.n	800e9f0 <tcp_slowtmr+0x328>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800e9c2:	4b82      	ldr	r3, [pc, #520]	; (800ebcc <tcp_slowtmr+0x504>)
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c8:	6a1b      	ldr	r3, [r3, #32]
 800e9ca:	1ad2      	subs	r2, r2, r3
 800e9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	005b      	lsls	r3, r3, #1
 800e9d8:	440b      	add	r3, r1
 800e9da:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d307      	bcc.n	800e9f0 <tcp_slowtmr+0x328>
      tcp_segs_free(pcb->ooseq);
 800e9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f000 fa02 	bl	800edee <tcp_segs_free>
      pcb->ooseq = NULL;
 800e9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f2:	7d1b      	ldrb	r3, [r3, #20]
 800e9f4:	2b03      	cmp	r3, #3
 800e9f6:	d109      	bne.n	800ea0c <tcp_slowtmr+0x344>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e9f8:	4b74      	ldr	r3, [pc, #464]	; (800ebcc <tcp_slowtmr+0x504>)
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fe:	6a1b      	ldr	r3, [r3, #32]
 800ea00:	1ad3      	subs	r3, r2, r3
 800ea02:	2b28      	cmp	r3, #40	; 0x28
 800ea04:	d902      	bls.n	800ea0c <tcp_slowtmr+0x344>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ea06:	7ffb      	ldrb	r3, [r7, #31]
 800ea08:	3301      	adds	r3, #1
 800ea0a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ea0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0e:	7d1b      	ldrb	r3, [r3, #20]
 800ea10:	2b09      	cmp	r3, #9
 800ea12:	d109      	bne.n	800ea28 <tcp_slowtmr+0x360>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ea14:	4b6d      	ldr	r3, [pc, #436]	; (800ebcc <tcp_slowtmr+0x504>)
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1a:	6a1b      	ldr	r3, [r3, #32]
 800ea1c:	1ad3      	subs	r3, r2, r3
 800ea1e:	2bf0      	cmp	r3, #240	; 0xf0
 800ea20:	d902      	bls.n	800ea28 <tcp_slowtmr+0x360>
        ++pcb_remove;
 800ea22:	7ffb      	ldrb	r3, [r7, #31]
 800ea24:	3301      	adds	r3, #1
 800ea26:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ea28:	7ffb      	ldrb	r3, [r7, #31]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d05d      	beq.n	800eaea <tcp_slowtmr+0x422>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ea2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea34:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ea36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea38:	f000 fc4c 	bl	800f2d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ea3c:	6a3b      	ldr	r3, [r7, #32]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d010      	beq.n	800ea64 <tcp_slowtmr+0x39c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ea42:	4b64      	ldr	r3, [pc, #400]	; (800ebd4 <tcp_slowtmr+0x50c>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d106      	bne.n	800ea5a <tcp_slowtmr+0x392>
 800ea4c:	4b62      	ldr	r3, [pc, #392]	; (800ebd8 <tcp_slowtmr+0x510>)
 800ea4e:	f240 4289 	movw	r2, #1161	; 0x489
 800ea52:	4962      	ldr	r1, [pc, #392]	; (800ebdc <tcp_slowtmr+0x514>)
 800ea54:	4862      	ldr	r0, [pc, #392]	; (800ebe0 <tcp_slowtmr+0x518>)
 800ea56:	f007 fe33 	bl	80166c0 <iprintf>
        prev->next = pcb->next;
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5c:	68da      	ldr	r2, [r3, #12]
 800ea5e:	6a3b      	ldr	r3, [r7, #32]
 800ea60:	60da      	str	r2, [r3, #12]
 800ea62:	e00f      	b.n	800ea84 <tcp_slowtmr+0x3bc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ea64:	4b5b      	ldr	r3, [pc, #364]	; (800ebd4 <tcp_slowtmr+0x50c>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d006      	beq.n	800ea7c <tcp_slowtmr+0x3b4>
 800ea6e:	4b5a      	ldr	r3, [pc, #360]	; (800ebd8 <tcp_slowtmr+0x510>)
 800ea70:	f240 428d 	movw	r2, #1165	; 0x48d
 800ea74:	495b      	ldr	r1, [pc, #364]	; (800ebe4 <tcp_slowtmr+0x51c>)
 800ea76:	485a      	ldr	r0, [pc, #360]	; (800ebe0 <tcp_slowtmr+0x518>)
 800ea78:	f007 fe22 	bl	80166c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ea7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7e:	68db      	ldr	r3, [r3, #12]
 800ea80:	4a54      	ldr	r2, [pc, #336]	; (800ebd4 <tcp_slowtmr+0x50c>)
 800ea82:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ea84:	7fbb      	ldrb	r3, [r7, #30]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d010      	beq.n	800eaac <tcp_slowtmr+0x3e4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ea8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ea92:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800ea94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea96:	1d1d      	adds	r5, r3, #4
 800ea98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9a:	8adb      	ldrh	r3, [r3, #22]
 800ea9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea9e:	8b12      	ldrh	r2, [r2, #24]
 800eaa0:	9201      	str	r2, [sp, #4]
 800eaa2:	9300      	str	r3, [sp, #0]
 800eaa4:	462b      	mov	r3, r5
 800eaa6:	4622      	mov	r2, r4
 800eaa8:	f004 f900 	bl	8012cac <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800eaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaae:	691b      	ldr	r3, [r3, #16]
 800eab0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800eab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab4:	7d1b      	ldrb	r3, [r3, #20]
 800eab6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800eab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaba:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800eabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800eac2:	6839      	ldr	r1, [r7, #0]
 800eac4:	2001      	movs	r0, #1
 800eac6:	f7fd ffd7 	bl	800ca78 <memp_free>

      tcp_active_pcbs_changed = 0;
 800eaca:	4b47      	ldr	r3, [pc, #284]	; (800ebe8 <tcp_slowtmr+0x520>)
 800eacc:	2200      	movs	r2, #0
 800eace:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d004      	beq.n	800eae0 <tcp_slowtmr+0x418>
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f06f 010c 	mvn.w	r1, #12
 800eadc:	68b8      	ldr	r0, [r7, #8]
 800eade:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800eae0:	4b41      	ldr	r3, [pc, #260]	; (800ebe8 <tcp_slowtmr+0x520>)
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d035      	beq.n	800eb54 <tcp_slowtmr+0x48c>
        goto tcp_slowtmr_start;
 800eae8:	e5fe      	b.n	800e6e8 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800eaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaec:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800eaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800eaf4:	6a3b      	ldr	r3, [r7, #32]
 800eaf6:	7f1b      	ldrb	r3, [r3, #28]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	b2da      	uxtb	r2, r3
 800eafc:	6a3b      	ldr	r3, [r7, #32]
 800eafe:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800eb00:	6a3b      	ldr	r3, [r7, #32]
 800eb02:	7f1a      	ldrb	r2, [r3, #28]
 800eb04:	6a3b      	ldr	r3, [r7, #32]
 800eb06:	7f5b      	ldrb	r3, [r3, #29]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d323      	bcc.n	800eb54 <tcp_slowtmr+0x48c>
        prev->polltmr = 0;
 800eb0c:	6a3b      	ldr	r3, [r7, #32]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800eb12:	4b35      	ldr	r3, [pc, #212]	; (800ebe8 <tcp_slowtmr+0x520>)
 800eb14:	2200      	movs	r2, #0
 800eb16:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800eb18:	6a3b      	ldr	r3, [r7, #32]
 800eb1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d00a      	beq.n	800eb38 <tcp_slowtmr+0x470>
 800eb22:	6a3b      	ldr	r3, [r7, #32]
 800eb24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb28:	6a3a      	ldr	r2, [r7, #32]
 800eb2a:	6912      	ldr	r2, [r2, #16]
 800eb2c:	6a39      	ldr	r1, [r7, #32]
 800eb2e:	4610      	mov	r0, r2
 800eb30:	4798      	blx	r3
 800eb32:	4603      	mov	r3, r0
 800eb34:	777b      	strb	r3, [r7, #29]
 800eb36:	e001      	b.n	800eb3c <tcp_slowtmr+0x474>
 800eb38:	2300      	movs	r3, #0
 800eb3a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800eb3c:	4b2a      	ldr	r3, [pc, #168]	; (800ebe8 <tcp_slowtmr+0x520>)
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d000      	beq.n	800eb46 <tcp_slowtmr+0x47e>
          goto tcp_slowtmr_start;
 800eb44:	e5d0      	b.n	800e6e8 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800eb46:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d102      	bne.n	800eb54 <tcp_slowtmr+0x48c>
          tcp_output(prev);
 800eb4e:	6a38      	ldr	r0, [r7, #32]
 800eb50:	f003 fe22 	bl	8012798 <tcp_output>
  while (pcb != NULL) {
 800eb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	f47f adcc 	bne.w	800e6f4 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800eb60:	4b22      	ldr	r3, [pc, #136]	; (800ebec <tcp_slowtmr+0x524>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800eb66:	e066      	b.n	800ec36 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800eb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6a:	7d1b      	ldrb	r3, [r3, #20]
 800eb6c:	2b0a      	cmp	r3, #10
 800eb6e:	d006      	beq.n	800eb7e <tcp_slowtmr+0x4b6>
 800eb70:	4b19      	ldr	r3, [pc, #100]	; (800ebd8 <tcp_slowtmr+0x510>)
 800eb72:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800eb76:	491e      	ldr	r1, [pc, #120]	; (800ebf0 <tcp_slowtmr+0x528>)
 800eb78:	4819      	ldr	r0, [pc, #100]	; (800ebe0 <tcp_slowtmr+0x518>)
 800eb7a:	f007 fda1 	bl	80166c0 <iprintf>
    pcb_remove = 0;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eb82:	4b12      	ldr	r3, [pc, #72]	; (800ebcc <tcp_slowtmr+0x504>)
 800eb84:	681a      	ldr	r2, [r3, #0]
 800eb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb88:	6a1b      	ldr	r3, [r3, #32]
 800eb8a:	1ad3      	subs	r3, r2, r3
 800eb8c:	2bf0      	cmp	r3, #240	; 0xf0
 800eb8e:	d902      	bls.n	800eb96 <tcp_slowtmr+0x4ce>
      ++pcb_remove;
 800eb90:	7ffb      	ldrb	r3, [r7, #31]
 800eb92:	3301      	adds	r3, #1
 800eb94:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eb96:	7ffb      	ldrb	r3, [r7, #31]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d047      	beq.n	800ec2c <tcp_slowtmr+0x564>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800eb9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb9e:	f000 fb99 	bl	800f2d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800eba2:	6a3b      	ldr	r3, [r7, #32]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d027      	beq.n	800ebf8 <tcp_slowtmr+0x530>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800eba8:	4b10      	ldr	r3, [pc, #64]	; (800ebec <tcp_slowtmr+0x524>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d106      	bne.n	800ebc0 <tcp_slowtmr+0x4f8>
 800ebb2:	4b09      	ldr	r3, [pc, #36]	; (800ebd8 <tcp_slowtmr+0x510>)
 800ebb4:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800ebb8:	490e      	ldr	r1, [pc, #56]	; (800ebf4 <tcp_slowtmr+0x52c>)
 800ebba:	4809      	ldr	r0, [pc, #36]	; (800ebe0 <tcp_slowtmr+0x518>)
 800ebbc:	f007 fd80 	bl	80166c0 <iprintf>
        prev->next = pcb->next;
 800ebc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc2:	68da      	ldr	r2, [r3, #12]
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	60da      	str	r2, [r3, #12]
 800ebc8:	e026      	b.n	800ec18 <tcp_slowtmr+0x550>
 800ebca:	bf00      	nop
 800ebcc:	2000dc58 	.word	0x2000dc58
 800ebd0:	10624dd3 	.word	0x10624dd3
 800ebd4:	2000dc54 	.word	0x2000dc54
 800ebd8:	08018d58 	.word	0x08018d58
 800ebdc:	08018fd8 	.word	0x08018fd8
 800ebe0:	08018d94 	.word	0x08018d94
 800ebe4:	08019004 	.word	0x08019004
 800ebe8:	2000dc50 	.word	0x2000dc50
 800ebec:	2000dc64 	.word	0x2000dc64
 800ebf0:	08019030 	.word	0x08019030
 800ebf4:	08019060 	.word	0x08019060
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ebf8:	4b12      	ldr	r3, [pc, #72]	; (800ec44 <tcp_slowtmr+0x57c>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d006      	beq.n	800ec10 <tcp_slowtmr+0x548>
 800ec02:	4b11      	ldr	r3, [pc, #68]	; (800ec48 <tcp_slowtmr+0x580>)
 800ec04:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800ec08:	4910      	ldr	r1, [pc, #64]	; (800ec4c <tcp_slowtmr+0x584>)
 800ec0a:	4811      	ldr	r0, [pc, #68]	; (800ec50 <tcp_slowtmr+0x588>)
 800ec0c:	f007 fd58 	bl	80166c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ec10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	4a0b      	ldr	r2, [pc, #44]	; (800ec44 <tcp_slowtmr+0x57c>)
 800ec16:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ec18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1e:	68db      	ldr	r3, [r3, #12]
 800ec20:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800ec22:	69b9      	ldr	r1, [r7, #24]
 800ec24:	2001      	movs	r0, #1
 800ec26:	f7fd ff27 	bl	800ca78 <memp_free>
 800ec2a:	e004      	b.n	800ec36 <tcp_slowtmr+0x56e>
    } else {
      prev = pcb;
 800ec2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800ec30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800ec36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d195      	bne.n	800eb68 <tcp_slowtmr+0x4a0>
    }
  }
}
 800ec3c:	bf00      	nop
 800ec3e:	3728      	adds	r7, #40	; 0x28
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bdb0      	pop	{r4, r5, r7, pc}
 800ec44:	2000dc64 	.word	0x2000dc64
 800ec48:	08018d58 	.word	0x08018d58
 800ec4c:	08019088 	.word	0x08019088
 800ec50:	08018d94 	.word	0x08018d94

0800ec54 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ec5a:	4b2d      	ldr	r3, [pc, #180]	; (800ed10 <tcp_fasttmr+0xbc>)
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	b2da      	uxtb	r2, r3
 800ec62:	4b2b      	ldr	r3, [pc, #172]	; (800ed10 <tcp_fasttmr+0xbc>)
 800ec64:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ec66:	4b2b      	ldr	r3, [pc, #172]	; (800ed14 <tcp_fasttmr+0xc0>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ec6c:	e048      	b.n	800ed00 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	7f9a      	ldrb	r2, [r3, #30]
 800ec72:	4b27      	ldr	r3, [pc, #156]	; (800ed10 <tcp_fasttmr+0xbc>)
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d03f      	beq.n	800ecfa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ec7a:	4b25      	ldr	r3, [pc, #148]	; (800ed10 <tcp_fasttmr+0xbc>)
 800ec7c:	781a      	ldrb	r2, [r3, #0]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	8b5b      	ldrh	r3, [r3, #26]
 800ec86:	f003 0301 	and.w	r3, r3, #1
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d010      	beq.n	800ecb0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	8b5b      	ldrh	r3, [r3, #26]
 800ec92:	f043 0302 	orr.w	r3, r3, #2
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f003 fd7b 	bl	8012798 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	8b5b      	ldrh	r3, [r3, #26]
 800eca6:	f023 0303 	bic.w	r3, r3, #3
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	8b5b      	ldrh	r3, [r3, #26]
 800ecb4:	f003 0308 	and.w	r3, r3, #8
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d009      	beq.n	800ecd0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	8b5b      	ldrh	r3, [r3, #26]
 800ecc0:	f023 0308 	bic.w	r3, r3, #8
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f7ff f8fe 	bl	800decc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d00a      	beq.n	800ecf4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ecde:	4b0e      	ldr	r3, [pc, #56]	; (800ed18 <tcp_fasttmr+0xc4>)
 800ece0:	2200      	movs	r2, #0
 800ece2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f000 f819 	bl	800ed1c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ecea:	4b0b      	ldr	r3, [pc, #44]	; (800ed18 <tcp_fasttmr+0xc4>)
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d000      	beq.n	800ecf4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ecf2:	e7b8      	b.n	800ec66 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	607b      	str	r3, [r7, #4]
 800ecf8:	e002      	b.n	800ed00 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	68db      	ldr	r3, [r3, #12]
 800ecfe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d1b3      	bne.n	800ec6e <tcp_fasttmr+0x1a>
    }
  }
}
 800ed06:	bf00      	nop
 800ed08:	3708      	adds	r7, #8
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	20004142 	.word	0x20004142
 800ed14:	2000dc54 	.word	0x2000dc54
 800ed18:	2000dc50 	.word	0x2000dc50

0800ed1c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ed1c:	b590      	push	{r4, r7, lr}
 800ed1e:	b085      	sub	sp, #20
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed28:	7b5b      	ldrb	r3, [r3, #13]
 800ed2a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed30:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2200      	movs	r2, #0
 800ed36:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00b      	beq.n	800ed5a <tcp_process_refused_data+0x3e>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6918      	ldr	r0, [r3, #16]
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	68ba      	ldr	r2, [r7, #8]
 800ed50:	6879      	ldr	r1, [r7, #4]
 800ed52:	47a0      	blx	r4
 800ed54:	4603      	mov	r3, r0
 800ed56:	73fb      	strb	r3, [r7, #15]
 800ed58:	e007      	b.n	800ed6a <tcp_process_refused_data+0x4e>
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	68ba      	ldr	r2, [r7, #8]
 800ed5e:	6879      	ldr	r1, [r7, #4]
 800ed60:	2000      	movs	r0, #0
 800ed62:	f000 f88c 	bl	800ee7e <tcp_recv_null>
 800ed66:	4603      	mov	r3, r0
 800ed68:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ed6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d12a      	bne.n	800edc8 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800ed72:	7bbb      	ldrb	r3, [r7, #14]
 800ed74:	f003 0320 	and.w	r3, r3, #32
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d033      	beq.n	800ede4 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed80:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ed84:	d005      	beq.n	800ed92 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	b29a      	uxth	r2, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d00b      	beq.n	800edb4 <tcp_process_refused_data+0x98>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6918      	ldr	r0, [r3, #16]
 800eda6:	2300      	movs	r3, #0
 800eda8:	2200      	movs	r2, #0
 800edaa:	6879      	ldr	r1, [r7, #4]
 800edac:	47a0      	blx	r4
 800edae:	4603      	mov	r3, r0
 800edb0:	73fb      	strb	r3, [r7, #15]
 800edb2:	e001      	b.n	800edb8 <tcp_process_refused_data+0x9c>
 800edb4:	2300      	movs	r3, #0
 800edb6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800edb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edbc:	f113 0f0d 	cmn.w	r3, #13
 800edc0:	d110      	bne.n	800ede4 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800edc2:	f06f 030c 	mvn.w	r3, #12
 800edc6:	e00e      	b.n	800ede6 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800edc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edcc:	f113 0f0d 	cmn.w	r3, #13
 800edd0:	d102      	bne.n	800edd8 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800edd2:	f06f 030c 	mvn.w	r3, #12
 800edd6:	e006      	b.n	800ede6 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	68ba      	ldr	r2, [r7, #8]
 800eddc:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800edde:	f06f 0304 	mvn.w	r3, #4
 800ede2:	e000      	b.n	800ede6 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800ede4:	2300      	movs	r3, #0
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3714      	adds	r7, #20
 800edea:	46bd      	mov	sp, r7
 800edec:	bd90      	pop	{r4, r7, pc}

0800edee <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b084      	sub	sp, #16
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800edf6:	e007      	b.n	800ee08 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f000 f809 	bl	800ee16 <tcp_seg_free>
    seg = next;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d1f4      	bne.n	800edf8 <tcp_segs_free+0xa>
  }
}
 800ee0e:	bf00      	nop
 800ee10:	3710      	adds	r7, #16
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b082      	sub	sp, #8
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d00c      	beq.n	800ee3e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d004      	beq.n	800ee36 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7fe fbf5 	bl	800d620 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ee36:	6879      	ldr	r1, [r7, #4]
 800ee38:	2003      	movs	r0, #3
 800ee3a:	f7fd fe1d 	bl	800ca78 <memp_free>
  }
}
 800ee3e:	bf00      	nop
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ee46:	b580      	push	{r7, lr}
 800ee48:	b084      	sub	sp, #16
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ee4e:	2003      	movs	r0, #3
 800ee50:	f7fd fdc0 	bl	800c9d4 <memp_malloc>
 800ee54:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d101      	bne.n	800ee60 <tcp_seg_copy+0x1a>
    return NULL;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	e00a      	b.n	800ee76 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ee60:	2210      	movs	r2, #16
 800ee62:	6879      	ldr	r1, [r7, #4]
 800ee64:	68f8      	ldr	r0, [r7, #12]
 800ee66:	f007 fc18 	bl	801669a <memcpy>
  pbuf_ref(cseg->p);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fe fc88 	bl	800d784 <pbuf_ref>
  return cseg;
 800ee74:	68fb      	ldr	r3, [r7, #12]
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3710      	adds	r7, #16
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}

0800ee7e <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ee7e:	b580      	push	{r7, lr}
 800ee80:	b084      	sub	sp, #16
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	60f8      	str	r0, [r7, #12]
 800ee86:	60b9      	str	r1, [r7, #8]
 800ee88:	607a      	str	r2, [r7, #4]
 800ee8a:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d009      	beq.n	800eea6 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	891b      	ldrh	r3, [r3, #8]
 800ee96:	4619      	mov	r1, r3
 800ee98:	68b8      	ldr	r0, [r7, #8]
 800ee9a:	f7ff fb77 	bl	800e58c <tcp_recved>
    pbuf_free(p);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f7fe fbbe 	bl	800d620 <pbuf_free>
 800eea4:	e008      	b.n	800eeb8 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800eea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d104      	bne.n	800eeb8 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800eeae:	68b8      	ldr	r0, [r7, #8]
 800eeb0:	f7ff f876 	bl	800dfa0 <tcp_close>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	e000      	b.n	800eeba <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800eeb8:	2300      	movs	r3, #0
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3710      	adds	r7, #16
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
	...

0800eec4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b086      	sub	sp, #24
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	4603      	mov	r3, r0
 800eecc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800eece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	db01      	blt.n	800eeda <tcp_kill_prio+0x16>
 800eed6:	79fb      	ldrb	r3, [r7, #7]
 800eed8:	e000      	b.n	800eedc <tcp_kill_prio+0x18>
 800eeda:	237f      	movs	r3, #127	; 0x7f
 800eedc:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eee2:	2300      	movs	r3, #0
 800eee4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eee6:	4b16      	ldr	r3, [pc, #88]	; (800ef40 <tcp_kill_prio+0x7c>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	617b      	str	r3, [r7, #20]
 800eeec:	e01a      	b.n	800ef24 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	7d5b      	ldrb	r3, [r3, #21]
 800eef2:	7afa      	ldrb	r2, [r7, #11]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d312      	bcc.n	800ef1e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eef8:	4b12      	ldr	r3, [pc, #72]	; (800ef44 <tcp_kill_prio+0x80>)
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	6a1b      	ldr	r3, [r3, #32]
 800ef00:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800ef02:	68fa      	ldr	r2, [r7, #12]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d80a      	bhi.n	800ef1e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800ef08:	4b0e      	ldr	r3, [pc, #56]	; (800ef44 <tcp_kill_prio+0x80>)
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	6a1b      	ldr	r3, [r3, #32]
 800ef10:	1ad3      	subs	r3, r2, r3
 800ef12:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	7d5b      	ldrb	r3, [r3, #21]
 800ef1c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	68db      	ldr	r3, [r3, #12]
 800ef22:	617b      	str	r3, [r7, #20]
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1e1      	bne.n	800eeee <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d002      	beq.n	800ef36 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ef30:	6938      	ldr	r0, [r7, #16]
 800ef32:	f7ff f949 	bl	800e1c8 <tcp_abort>
  }
}
 800ef36:	bf00      	nop
 800ef38:	3718      	adds	r7, #24
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	2000dc54 	.word	0x2000dc54
 800ef44:	2000dc58 	.word	0x2000dc58

0800ef48 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b086      	sub	sp, #24
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	4603      	mov	r3, r0
 800ef50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ef52:	79fb      	ldrb	r3, [r7, #7]
 800ef54:	2b08      	cmp	r3, #8
 800ef56:	d009      	beq.n	800ef6c <tcp_kill_state+0x24>
 800ef58:	79fb      	ldrb	r3, [r7, #7]
 800ef5a:	2b09      	cmp	r3, #9
 800ef5c:	d006      	beq.n	800ef6c <tcp_kill_state+0x24>
 800ef5e:	4b1a      	ldr	r3, [pc, #104]	; (800efc8 <tcp_kill_state+0x80>)
 800ef60:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ef64:	4919      	ldr	r1, [pc, #100]	; (800efcc <tcp_kill_state+0x84>)
 800ef66:	481a      	ldr	r0, [pc, #104]	; (800efd0 <tcp_kill_state+0x88>)
 800ef68:	f007 fbaa 	bl	80166c0 <iprintf>

  inactivity = 0;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ef70:	2300      	movs	r3, #0
 800ef72:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef74:	4b17      	ldr	r3, [pc, #92]	; (800efd4 <tcp_kill_state+0x8c>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	617b      	str	r3, [r7, #20]
 800ef7a:	e017      	b.n	800efac <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	7d1b      	ldrb	r3, [r3, #20]
 800ef80:	79fa      	ldrb	r2, [r7, #7]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d10f      	bne.n	800efa6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ef86:	4b14      	ldr	r3, [pc, #80]	; (800efd8 <tcp_kill_state+0x90>)
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	6a1b      	ldr	r3, [r3, #32]
 800ef8e:	1ad3      	subs	r3, r2, r3
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d807      	bhi.n	800efa6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ef96:	4b10      	ldr	r3, [pc, #64]	; (800efd8 <tcp_kill_state+0x90>)
 800ef98:	681a      	ldr	r2, [r3, #0]
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	6a1b      	ldr	r3, [r3, #32]
 800ef9e:	1ad3      	subs	r3, r2, r3
 800efa0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	617b      	str	r3, [r7, #20]
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d1e4      	bne.n	800ef7c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d003      	beq.n	800efc0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800efb8:	2100      	movs	r1, #0
 800efba:	6938      	ldr	r0, [r7, #16]
 800efbc:	f7ff f850 	bl	800e060 <tcp_abandon>
  }
}
 800efc0:	bf00      	nop
 800efc2:	3718      	adds	r7, #24
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	08018d58 	.word	0x08018d58
 800efcc:	080190b0 	.word	0x080190b0
 800efd0:	08018d94 	.word	0x08018d94
 800efd4:	2000dc54 	.word	0x2000dc54
 800efd8:	2000dc58 	.word	0x2000dc58

0800efdc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b084      	sub	sp, #16
 800efe0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800efe2:	2300      	movs	r3, #0
 800efe4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800efe6:	2300      	movs	r3, #0
 800efe8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800efea:	4b12      	ldr	r3, [pc, #72]	; (800f034 <tcp_kill_timewait+0x58>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	60fb      	str	r3, [r7, #12]
 800eff0:	e012      	b.n	800f018 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eff2:	4b11      	ldr	r3, [pc, #68]	; (800f038 <tcp_kill_timewait+0x5c>)
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	6a1b      	ldr	r3, [r3, #32]
 800effa:	1ad3      	subs	r3, r2, r3
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	429a      	cmp	r2, r3
 800f000:	d807      	bhi.n	800f012 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f002:	4b0d      	ldr	r3, [pc, #52]	; (800f038 <tcp_kill_timewait+0x5c>)
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	6a1b      	ldr	r3, [r3, #32]
 800f00a:	1ad3      	subs	r3, r2, r3
 800f00c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	60fb      	str	r3, [r7, #12]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d1e9      	bne.n	800eff2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d002      	beq.n	800f02a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f024:	68b8      	ldr	r0, [r7, #8]
 800f026:	f7ff f8cf 	bl	800e1c8 <tcp_abort>
  }
}
 800f02a:	bf00      	nop
 800f02c:	3710      	adds	r7, #16
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	2000dc64 	.word	0x2000dc64
 800f038:	2000dc58 	.word	0x2000dc58

0800f03c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	4603      	mov	r3, r0
 800f044:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f046:	2001      	movs	r0, #1
 800f048:	f7fd fcc4 	bl	800c9d4 <memp_malloc>
 800f04c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d124      	bne.n	800f09e <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f054:	f7ff ffc2 	bl	800efdc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f058:	2001      	movs	r0, #1
 800f05a:	f7fd fcbb 	bl	800c9d4 <memp_malloc>
 800f05e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d11b      	bne.n	800f09e <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f066:	2009      	movs	r0, #9
 800f068:	f7ff ff6e 	bl	800ef48 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f06c:	2001      	movs	r0, #1
 800f06e:	f7fd fcb1 	bl	800c9d4 <memp_malloc>
 800f072:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d111      	bne.n	800f09e <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f07a:	2008      	movs	r0, #8
 800f07c:	f7ff ff64 	bl	800ef48 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f080:	2001      	movs	r0, #1
 800f082:	f7fd fca7 	bl	800c9d4 <memp_malloc>
 800f086:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d107      	bne.n	800f09e <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f08e:	79fb      	ldrb	r3, [r7, #7]
 800f090:	4618      	mov	r0, r3
 800f092:	f7ff ff17 	bl	800eec4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f096:	2001      	movs	r0, #1
 800f098:	f7fd fc9c 	bl	800c9d4 <memp_malloc>
 800f09c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d047      	beq.n	800f134 <tcp_alloc+0xf8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f0a4:	22a0      	movs	r2, #160	; 0xa0
 800f0a6:	2100      	movs	r1, #0
 800f0a8:	68f8      	ldr	r0, [r7, #12]
 800f0aa:	f007 fb01 	bl	80166b0 <memset>
    pcb->prio = prio;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	79fa      	ldrb	r2, [r7, #7]
 800f0b2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f0ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f0c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	22ff      	movs	r2, #255	; 0xff
 800f0d2:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f0da:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2206      	movs	r2, #6
 800f0e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2206      	movs	r2, #6
 800f0e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0f0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f0fa:	4b11      	ldr	r3, [pc, #68]	; (800f140 <tcp_alloc+0x104>)
 800f0fc:	681a      	ldr	r2, [r3, #0]
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f102:	4b10      	ldr	r3, [pc, #64]	; (800f144 <tcp_alloc+0x108>)
 800f104:	781a      	ldrb	r2, [r3, #0]
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f110:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	4a0c      	ldr	r2, [pc, #48]	; (800f148 <tcp_alloc+0x10c>)
 800f118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	4a0b      	ldr	r2, [pc, #44]	; (800f14c <tcp_alloc+0x110>)
 800f120:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	4a0a      	ldr	r2, [pc, #40]	; (800f150 <tcp_alloc+0x114>)
 800f128:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2209      	movs	r2, #9
 800f130:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f134:	68fb      	ldr	r3, [r7, #12]
}
 800f136:	4618      	mov	r0, r3
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	2000dc58 	.word	0x2000dc58
 800f144:	20004142 	.word	0x20004142
 800f148:	0800ee7f 	.word	0x0800ee7f
 800f14c:	006ddd00 	.word	0x006ddd00
 800f150:	000124f8 	.word	0x000124f8

0800f154 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	4603      	mov	r3, r0
 800f15c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f15e:	2040      	movs	r0, #64	; 0x40
 800f160:	f7ff ff6c 	bl	800f03c <tcp_alloc>
 800f164:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f166:	68fb      	ldr	r3, [r7, #12]
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d002      	beq.n	800f186 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	683a      	ldr	r2, [r7, #0]
 800f184:	611a      	str	r2, [r3, #16]
  }
}
 800f186:	bf00      	nop
 800f188:	370c      	adds	r7, #12
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr
	...

0800f194 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d00e      	beq.n	800f1c2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	7d1b      	ldrb	r3, [r3, #20]
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d106      	bne.n	800f1ba <tcp_recv+0x26>
 800f1ac:	4b07      	ldr	r3, [pc, #28]	; (800f1cc <tcp_recv+0x38>)
 800f1ae:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800f1b2:	4907      	ldr	r1, [pc, #28]	; (800f1d0 <tcp_recv+0x3c>)
 800f1b4:	4807      	ldr	r0, [pc, #28]	; (800f1d4 <tcp_recv+0x40>)
 800f1b6:	f007 fa83 	bl	80166c0 <iprintf>
    pcb->recv = recv;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	683a      	ldr	r2, [r7, #0]
 800f1be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f1c2:	bf00      	nop
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	08018d58 	.word	0x08018d58
 800f1d0:	080190c0 	.word	0x080190c0
 800f1d4:	08018d94 	.word	0x08018d94

0800f1d8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d00d      	beq.n	800f204 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	7d1b      	ldrb	r3, [r3, #20]
 800f1ec:	2b01      	cmp	r3, #1
 800f1ee:	d106      	bne.n	800f1fe <tcp_sent+0x26>
 800f1f0:	4b06      	ldr	r3, [pc, #24]	; (800f20c <tcp_sent+0x34>)
 800f1f2:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800f1f6:	4906      	ldr	r1, [pc, #24]	; (800f210 <tcp_sent+0x38>)
 800f1f8:	4806      	ldr	r0, [pc, #24]	; (800f214 <tcp_sent+0x3c>)
 800f1fa:	f007 fa61 	bl	80166c0 <iprintf>
    pcb->sent = sent;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	683a      	ldr	r2, [r7, #0]
 800f202:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800f204:	bf00      	nop
 800f206:	3708      	adds	r7, #8
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	08018d58 	.word	0x08018d58
 800f210:	080190e8 	.word	0x080190e8
 800f214:	08018d94 	.word	0x08018d94

0800f218 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00e      	beq.n	800f246 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	7d1b      	ldrb	r3, [r3, #20]
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	d106      	bne.n	800f23e <tcp_err+0x26>
 800f230:	4b07      	ldr	r3, [pc, #28]	; (800f250 <tcp_err+0x38>)
 800f232:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800f236:	4907      	ldr	r1, [pc, #28]	; (800f254 <tcp_err+0x3c>)
 800f238:	4807      	ldr	r0, [pc, #28]	; (800f258 <tcp_err+0x40>)
 800f23a:	f007 fa41 	bl	80166c0 <iprintf>
    pcb->errf = err;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	683a      	ldr	r2, [r7, #0]
 800f242:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800f246:	bf00      	nop
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	08018d58 	.word	0x08018d58
 800f254:	08019110 	.word	0x08019110
 800f258:	08018d94 	.word	0x08018d94

0800f25c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b085      	sub	sp, #20
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d008      	beq.n	800f27e <tcp_accept+0x22>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	7d1b      	ldrb	r3, [r3, #20]
 800f270:	2b01      	cmp	r3, #1
 800f272:	d104      	bne.n	800f27e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	683a      	ldr	r2, [r7, #0]
 800f27c:	619a      	str	r2, [r3, #24]
  }
}
 800f27e:	bf00      	nop
 800f280:	3714      	adds	r7, #20
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr
	...

0800f28c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	4613      	mov	r3, r2
 800f298:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	7d1b      	ldrb	r3, [r3, #20]
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d106      	bne.n	800f2b0 <tcp_poll+0x24>
 800f2a2:	4b09      	ldr	r3, [pc, #36]	; (800f2c8 <tcp_poll+0x3c>)
 800f2a4:	f240 7203 	movw	r2, #1795	; 0x703
 800f2a8:	4908      	ldr	r1, [pc, #32]	; (800f2cc <tcp_poll+0x40>)
 800f2aa:	4809      	ldr	r0, [pc, #36]	; (800f2d0 <tcp_poll+0x44>)
 800f2ac:	f007 fa08 	bl	80166c0 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	68ba      	ldr	r2, [r7, #8]
 800f2b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	79fa      	ldrb	r2, [r7, #7]
 800f2bc:	775a      	strb	r2, [r3, #29]
}
 800f2be:	bf00      	nop
 800f2c0:	3710      	adds	r7, #16
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	08018d58 	.word	0x08018d58
 800f2cc:	08019138 	.word	0x08019138
 800f2d0:	08018d94 	.word	0x08018d94

0800f2d4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	7d1b      	ldrb	r3, [r3, #20]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d037      	beq.n	800f354 <tcp_pcb_purge+0x80>
     pcb->state != TIME_WAIT &&
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f2e8:	2b0a      	cmp	r3, #10
 800f2ea:	d033      	beq.n	800f354 <tcp_pcb_purge+0x80>
     pcb->state != LISTEN) {
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d02f      	beq.n	800f354 <tcp_pcb_purge+0x80>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7fe fcc7 	bl	800dc88 <tcp_backlog_accepted>

    if (pcb->refused_data != NULL) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d007      	beq.n	800f312 <tcp_pcb_purge+0x3e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f306:	4618      	mov	r0, r3
 800f308:	f7fe f98a 	bl	800d620 <pbuf_free>
      pcb->refused_data = NULL;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2200      	movs	r2, #0
 800f310:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f316:	4618      	mov	r0, r3
 800f318:	f7ff fd69 	bl	800edee <tcp_segs_free>
    pcb->ooseq = NULL;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f328:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f32e:	4618      	mov	r0, r3
 800f330:	f7ff fd5d 	bl	800edee <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff fd58 	bl	800edee <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2200      	movs	r2, #0
 800f342:	669a      	str	r2, [r3, #104]	; 0x68
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2200      	movs	r2, #0
 800f350:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800f354:	bf00      	nop
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b084      	sub	sp, #16
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	683a      	ldr	r2, [r7, #0]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d105      	bne.n	800f37c <tcp_pcb_remove+0x20>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	68da      	ldr	r2, [r3, #12]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	601a      	str	r2, [r3, #0]
 800f37a:	e013      	b.n	800f3a4 <tcp_pcb_remove+0x48>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	60fb      	str	r3, [r7, #12]
 800f382:	e00c      	b.n	800f39e <tcp_pcb_remove+0x42>
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	683a      	ldr	r2, [r7, #0]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d104      	bne.n	800f398 <tcp_pcb_remove+0x3c>
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	68da      	ldr	r2, [r3, #12]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	60da      	str	r2, [r3, #12]
 800f396:	e005      	b.n	800f3a4 <tcp_pcb_remove+0x48>
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	60fb      	str	r3, [r7, #12]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d1ef      	bne.n	800f384 <tcp_pcb_remove+0x28>
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f3aa:	6838      	ldr	r0, [r7, #0]
 800f3ac:	f7ff ff92 	bl	800f2d4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	7d1b      	ldrb	r3, [r3, #20]
 800f3b4:	2b0a      	cmp	r3, #10
 800f3b6:	d013      	beq.n	800f3e0 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d00f      	beq.n	800f3e0 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	8b5b      	ldrh	r3, [r3, #26]
 800f3c4:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d009      	beq.n	800f3e0 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	8b5b      	ldrh	r3, [r3, #26]
 800f3d0:	f043 0302 	orr.w	r3, r3, #2
 800f3d4:	b29a      	uxth	r2, r3
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f3da:	6838      	ldr	r0, [r7, #0]
 800f3dc:	f003 f9dc 	bl	8012798 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	7d1b      	ldrb	r3, [r3, #20]
 800f3e4:	2b01      	cmp	r3, #1
 800f3e6:	d020      	beq.n	800f42a <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d006      	beq.n	800f3fe <tcp_pcb_remove+0xa2>
 800f3f0:	4b13      	ldr	r3, [pc, #76]	; (800f440 <tcp_pcb_remove+0xe4>)
 800f3f2:	f240 7253 	movw	r2, #1875	; 0x753
 800f3f6:	4913      	ldr	r1, [pc, #76]	; (800f444 <tcp_pcb_remove+0xe8>)
 800f3f8:	4813      	ldr	r0, [pc, #76]	; (800f448 <tcp_pcb_remove+0xec>)
 800f3fa:	f007 f961 	bl	80166c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f402:	2b00      	cmp	r3, #0
 800f404:	d006      	beq.n	800f414 <tcp_pcb_remove+0xb8>
 800f406:	4b0e      	ldr	r3, [pc, #56]	; (800f440 <tcp_pcb_remove+0xe4>)
 800f408:	f240 7254 	movw	r2, #1876	; 0x754
 800f40c:	490f      	ldr	r1, [pc, #60]	; (800f44c <tcp_pcb_remove+0xf0>)
 800f40e:	480e      	ldr	r0, [pc, #56]	; (800f448 <tcp_pcb_remove+0xec>)
 800f410:	f007 f956 	bl	80166c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d006      	beq.n	800f42a <tcp_pcb_remove+0xce>
 800f41c:	4b08      	ldr	r3, [pc, #32]	; (800f440 <tcp_pcb_remove+0xe4>)
 800f41e:	f240 7256 	movw	r2, #1878	; 0x756
 800f422:	490b      	ldr	r1, [pc, #44]	; (800f450 <tcp_pcb_remove+0xf4>)
 800f424:	4808      	ldr	r0, [pc, #32]	; (800f448 <tcp_pcb_remove+0xec>)
 800f426:	f007 f94b 	bl	80166c0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	2200      	movs	r2, #0
 800f42e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	2200      	movs	r2, #0
 800f434:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f436:	bf00      	nop
 800f438:	3710      	adds	r7, #16
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	08018d58 	.word	0x08018d58
 800f444:	08019158 	.word	0x08019158
 800f448:	08018d94 	.word	0x08018d94
 800f44c:	08019170 	.word	0x08019170
 800f450:	0801918c 	.word	0x0801918c

0800f454 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f454:	b480      	push	{r7}
 800f456:	b083      	sub	sp, #12
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f45c:	4b07      	ldr	r3, [pc, #28]	; (800f47c <tcp_next_iss+0x28>)
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	4b07      	ldr	r3, [pc, #28]	; (800f480 <tcp_next_iss+0x2c>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	4413      	add	r3, r2
 800f466:	4a05      	ldr	r2, [pc, #20]	; (800f47c <tcp_next_iss+0x28>)
 800f468:	6013      	str	r3, [r2, #0]
  return iss;
 800f46a:	4b04      	ldr	r3, [pc, #16]	; (800f47c <tcp_next_iss+0x28>)
 800f46c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f46e:	4618      	mov	r0, r3
 800f470:	370c      	adds	r7, #12
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	20000014 	.word	0x20000014
 800f480:	2000dc58 	.word	0x2000dc58

0800f484 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	4603      	mov	r3, r0
 800f48c:	6039      	str	r1, [r7, #0]
 800f48e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800f490:	6838      	ldr	r0, [r7, #0]
 800f492:	f005 fcb7 	bl	8014e04 <ip4_route>
 800f496:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d101      	bne.n	800f4a2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800f49e:	88fb      	ldrh	r3, [r7, #6]
 800f4a0:	e010      	b.n	800f4c4 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4a6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f4a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d008      	beq.n	800f4c2 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800f4b0:	897b      	ldrh	r3, [r7, #10]
 800f4b2:	3b28      	subs	r3, #40	; 0x28
 800f4b4:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f4b6:	893a      	ldrh	r2, [r7, #8]
 800f4b8:	88fb      	ldrh	r3, [r7, #6]
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	bf28      	it	cs
 800f4be:	4613      	movcs	r3, r2
 800f4c0:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800f4c2:	88fb      	ldrh	r3, [r7, #6]
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3710      	adds	r7, #16
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f4da:	e011      	b.n	800f500 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d108      	bne.n	800f4fa <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	68db      	ldr	r3, [r3, #12]
 800f4ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f4ee:	68f8      	ldr	r0, [r7, #12]
 800f4f0:	f7fe fe6a 	bl	800e1c8 <tcp_abort>
      pcb = next;
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	60fb      	str	r3, [r7, #12]
 800f4f8:	e002      	b.n	800f500 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	68db      	ldr	r3, [r3, #12]
 800f4fe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d1ea      	bne.n	800f4dc <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800f506:	bf00      	nop
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
	...

0800f510 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b084      	sub	sp, #16
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d02c      	beq.n	800f57a <tcp_netif_ip_addr_changed+0x6a>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d028      	beq.n	800f57a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f528:	4b16      	ldr	r3, [pc, #88]	; (800f584 <tcp_netif_ip_addr_changed+0x74>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	4619      	mov	r1, r3
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7ff ffcc 	bl	800f4cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f534:	4b14      	ldr	r3, [pc, #80]	; (800f588 <tcp_netif_ip_addr_changed+0x78>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	4619      	mov	r1, r3
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f7ff ffc6 	bl	800f4cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d019      	beq.n	800f57a <tcp_netif_ip_addr_changed+0x6a>
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d015      	beq.n	800f57a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f54e:	4b0f      	ldr	r3, [pc, #60]	; (800f58c <tcp_netif_ip_addr_changed+0x7c>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	60fb      	str	r3, [r7, #12]
 800f554:	e00e      	b.n	800f574 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	429a      	cmp	r2, r3
 800f566:	d103      	bne.n	800f570 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	60fb      	str	r3, [r7, #12]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d1ed      	bne.n	800f556 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f57a:	bf00      	nop
 800f57c:	3710      	adds	r7, #16
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	2000dc54 	.word	0x2000dc54
 800f588:	2000dc60 	.word	0x2000dc60
 800f58c:	2000dc5c 	.word	0x2000dc5c

0800f590 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f590:	b590      	push	{r4, r7, lr}
 800f592:	b08d      	sub	sp, #52	; 0x34
 800f594:	af02      	add	r7, sp, #8
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
 800f59a:	2300      	movs	r3, #0
 800f59c:	61bb      	str	r3, [r7, #24]
  struct tcp_pcb_listen *lpcb_any = NULL;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	617b      	str	r3, [r7, #20]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	685b      	ldr	r3, [r3, #4]
 800f5a6:	4a82      	ldr	r2, [pc, #520]	; (800f7b0 <tcp_input+0x220>)
 800f5a8:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	895b      	ldrh	r3, [r3, #10]
 800f5ae:	2b13      	cmp	r3, #19
 800f5b0:	f240 83a2 	bls.w	800fcf8 <tcp_input+0x768>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f5b4:	4b7f      	ldr	r3, [pc, #508]	; (800f7b4 <tcp_input+0x224>)
 800f5b6:	695a      	ldr	r2, [r3, #20]
 800f5b8:	4b7e      	ldr	r3, [pc, #504]	; (800f7b4 <tcp_input+0x224>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4619      	mov	r1, r3
 800f5be:	4610      	mov	r0, r2
 800f5c0:	f005 fe9a 	bl	80152f8 <ip4_addr_isbroadcast_u32>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f040 8398 	bne.w	800fcfc <tcp_input+0x76c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f5cc:	4b79      	ldr	r3, [pc, #484]	; (800f7b4 <tcp_input+0x224>)
 800f5ce:	695b      	ldr	r3, [r3, #20]
 800f5d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f5d4:	2be0      	cmp	r3, #224	; 0xe0
 800f5d6:	f000 8391 	beq.w	800fcfc <tcp_input+0x76c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800f5da:	4b75      	ldr	r3, [pc, #468]	; (800f7b0 <tcp_input+0x220>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	899b      	ldrh	r3, [r3, #12]
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fc fe08 	bl	800c1f8 <lwip_htons>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	0b1b      	lsrs	r3, r3, #12
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f5f4:	7cbb      	ldrb	r3, [r7, #18]
 800f5f6:	2b13      	cmp	r3, #19
 800f5f8:	f240 8380 	bls.w	800fcfc <tcp_input+0x76c>
 800f5fc:	7cbb      	ldrb	r3, [r7, #18]
 800f5fe:	b29a      	uxth	r2, r3
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	891b      	ldrh	r3, [r3, #8]
 800f604:	429a      	cmp	r2, r3
 800f606:	f200 8379 	bhi.w	800fcfc <tcp_input+0x76c>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800f60a:	7cbb      	ldrb	r3, [r7, #18]
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	3b14      	subs	r3, #20
 800f610:	b29a      	uxth	r2, r3
 800f612:	4b69      	ldr	r3, [pc, #420]	; (800f7b8 <tcp_input+0x228>)
 800f614:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f616:	4b69      	ldr	r3, [pc, #420]	; (800f7bc <tcp_input+0x22c>)
 800f618:	2200      	movs	r2, #0
 800f61a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	895a      	ldrh	r2, [r3, #10]
 800f620:	7cbb      	ldrb	r3, [r7, #18]
 800f622:	b29b      	uxth	r3, r3
 800f624:	429a      	cmp	r2, r3
 800f626:	d30d      	bcc.n	800f644 <tcp_input+0xb4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f628:	4b63      	ldr	r3, [pc, #396]	; (800f7b8 <tcp_input+0x228>)
 800f62a:	881a      	ldrh	r2, [r3, #0]
 800f62c:	4b64      	ldr	r3, [pc, #400]	; (800f7c0 <tcp_input+0x230>)
 800f62e:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800f630:	7cbb      	ldrb	r3, [r7, #18]
 800f632:	b29b      	uxth	r3, r3
 800f634:	425b      	negs	r3, r3
 800f636:	b29b      	uxth	r3, r3
 800f638:	b21b      	sxth	r3, r3
 800f63a:	4619      	mov	r1, r3
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7fd ffcb 	bl	800d5d8 <pbuf_header>
 800f642:	e055      	b.n	800f6f0 <tcp_input+0x160>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d105      	bne.n	800f658 <tcp_input+0xc8>
 800f64c:	4b5d      	ldr	r3, [pc, #372]	; (800f7c4 <tcp_input+0x234>)
 800f64e:	22b2      	movs	r2, #178	; 0xb2
 800f650:	495d      	ldr	r1, [pc, #372]	; (800f7c8 <tcp_input+0x238>)
 800f652:	485e      	ldr	r0, [pc, #376]	; (800f7cc <tcp_input+0x23c>)
 800f654:	f007 f834 	bl	80166c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800f658:	f06f 0113 	mvn.w	r1, #19
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f7fd ffbb 	bl	800d5d8 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	895a      	ldrh	r2, [r3, #10]
 800f666:	4b56      	ldr	r3, [pc, #344]	; (800f7c0 <tcp_input+0x230>)
 800f668:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800f66a:	4b53      	ldr	r3, [pc, #332]	; (800f7b8 <tcp_input+0x228>)
 800f66c:	881a      	ldrh	r2, [r3, #0]
 800f66e:	4b54      	ldr	r3, [pc, #336]	; (800f7c0 <tcp_input+0x230>)
 800f670:	881b      	ldrh	r3, [r3, #0]
 800f672:	1ad3      	subs	r3, r2, r3
 800f674:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800f676:	4b52      	ldr	r3, [pc, #328]	; (800f7c0 <tcp_input+0x230>)
 800f678:	881b      	ldrh	r3, [r3, #0]
 800f67a:	425b      	negs	r3, r3
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	b21b      	sxth	r3, r3
 800f680:	4619      	mov	r1, r3
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f7fd ffa8 	bl	800d5d8 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	895b      	ldrh	r3, [r3, #10]
 800f68e:	8a3a      	ldrh	r2, [r7, #16]
 800f690:	429a      	cmp	r2, r3
 800f692:	f200 8335 	bhi.w	800fd00 <tcp_input+0x770>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	4a47      	ldr	r2, [pc, #284]	; (800f7bc <tcp_input+0x22c>)
 800f69e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681a      	ldr	r2, [r3, #0]
 800f6a4:	8a3b      	ldrh	r3, [r7, #16]
 800f6a6:	425b      	negs	r3, r3
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	b21b      	sxth	r3, r3
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	4610      	mov	r0, r2
 800f6b0:	f7fd ff92 	bl	800d5d8 <pbuf_header>
    p->tot_len -= opt2len;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	891a      	ldrh	r2, [r3, #8]
 800f6b8:	8a3b      	ldrh	r3, [r7, #16]
 800f6ba:	1ad3      	subs	r3, r2, r3
 800f6bc:	b29a      	uxth	r2, r3
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	895b      	ldrh	r3, [r3, #10]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d005      	beq.n	800f6d6 <tcp_input+0x146>
 800f6ca:	4b3e      	ldr	r3, [pc, #248]	; (800f7c4 <tcp_input+0x234>)
 800f6cc:	22cf      	movs	r2, #207	; 0xcf
 800f6ce:	4940      	ldr	r1, [pc, #256]	; (800f7d0 <tcp_input+0x240>)
 800f6d0:	483e      	ldr	r0, [pc, #248]	; (800f7cc <tcp_input+0x23c>)
 800f6d2:	f006 fff5 	bl	80166c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	891a      	ldrh	r2, [r3, #8]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	891b      	ldrh	r3, [r3, #8]
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d005      	beq.n	800f6f0 <tcp_input+0x160>
 800f6e4:	4b37      	ldr	r3, [pc, #220]	; (800f7c4 <tcp_input+0x234>)
 800f6e6:	22d0      	movs	r2, #208	; 0xd0
 800f6e8:	493a      	ldr	r1, [pc, #232]	; (800f7d4 <tcp_input+0x244>)
 800f6ea:	4838      	ldr	r0, [pc, #224]	; (800f7cc <tcp_input+0x23c>)
 800f6ec:	f006 ffe8 	bl	80166c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f6f0:	4b2f      	ldr	r3, [pc, #188]	; (800f7b0 <tcp_input+0x220>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	881b      	ldrh	r3, [r3, #0]
 800f6f6:	b29a      	uxth	r2, r3
 800f6f8:	4b2d      	ldr	r3, [pc, #180]	; (800f7b0 <tcp_input+0x220>)
 800f6fa:	681c      	ldr	r4, [r3, #0]
 800f6fc:	4610      	mov	r0, r2
 800f6fe:	f7fc fd7b 	bl	800c1f8 <lwip_htons>
 800f702:	4603      	mov	r3, r0
 800f704:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f706:	4b2a      	ldr	r3, [pc, #168]	; (800f7b0 <tcp_input+0x220>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	885b      	ldrh	r3, [r3, #2]
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	4b28      	ldr	r3, [pc, #160]	; (800f7b0 <tcp_input+0x220>)
 800f710:	681c      	ldr	r4, [r3, #0]
 800f712:	4610      	mov	r0, r2
 800f714:	f7fc fd70 	bl	800c1f8 <lwip_htons>
 800f718:	4603      	mov	r3, r0
 800f71a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f71c:	4b24      	ldr	r3, [pc, #144]	; (800f7b0 <tcp_input+0x220>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	685a      	ldr	r2, [r3, #4]
 800f722:	4b23      	ldr	r3, [pc, #140]	; (800f7b0 <tcp_input+0x220>)
 800f724:	681c      	ldr	r4, [r3, #0]
 800f726:	4610      	mov	r0, r2
 800f728:	f7fc fd74 	bl	800c214 <lwip_htonl>
 800f72c:	4603      	mov	r3, r0
 800f72e:	6063      	str	r3, [r4, #4]
 800f730:	6863      	ldr	r3, [r4, #4]
 800f732:	4a29      	ldr	r2, [pc, #164]	; (800f7d8 <tcp_input+0x248>)
 800f734:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f736:	4b1e      	ldr	r3, [pc, #120]	; (800f7b0 <tcp_input+0x220>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	689a      	ldr	r2, [r3, #8]
 800f73c:	4b1c      	ldr	r3, [pc, #112]	; (800f7b0 <tcp_input+0x220>)
 800f73e:	681c      	ldr	r4, [r3, #0]
 800f740:	4610      	mov	r0, r2
 800f742:	f7fc fd67 	bl	800c214 <lwip_htonl>
 800f746:	4603      	mov	r3, r0
 800f748:	60a3      	str	r3, [r4, #8]
 800f74a:	68a3      	ldr	r3, [r4, #8]
 800f74c:	4a23      	ldr	r2, [pc, #140]	; (800f7dc <tcp_input+0x24c>)
 800f74e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f750:	4b17      	ldr	r3, [pc, #92]	; (800f7b0 <tcp_input+0x220>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	89db      	ldrh	r3, [r3, #14]
 800f756:	b29a      	uxth	r2, r3
 800f758:	4b15      	ldr	r3, [pc, #84]	; (800f7b0 <tcp_input+0x220>)
 800f75a:	681c      	ldr	r4, [r3, #0]
 800f75c:	4610      	mov	r0, r2
 800f75e:	f7fc fd4b 	bl	800c1f8 <lwip_htons>
 800f762:	4603      	mov	r3, r0
 800f764:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f766:	4b12      	ldr	r3, [pc, #72]	; (800f7b0 <tcp_input+0x220>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	899b      	ldrh	r3, [r3, #12]
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fc fd42 	bl	800c1f8 <lwip_htons>
 800f774:	4603      	mov	r3, r0
 800f776:	b2db      	uxtb	r3, r3
 800f778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f77c:	b2da      	uxtb	r2, r3
 800f77e:	4b18      	ldr	r3, [pc, #96]	; (800f7e0 <tcp_input+0x250>)
 800f780:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	891a      	ldrh	r2, [r3, #8]
 800f786:	4b16      	ldr	r3, [pc, #88]	; (800f7e0 <tcp_input+0x250>)
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	f003 0303 	and.w	r3, r3, #3
 800f78e:	2b00      	cmp	r3, #0
 800f790:	bf14      	ite	ne
 800f792:	2301      	movne	r3, #1
 800f794:	2300      	moveq	r3, #0
 800f796:	b2db      	uxtb	r3, r3
 800f798:	b29b      	uxth	r3, r3
 800f79a:	4413      	add	r3, r2
 800f79c:	b29a      	uxth	r2, r3
 800f79e:	4b11      	ldr	r3, [pc, #68]	; (800f7e4 <tcp_input+0x254>)
 800f7a0:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	623b      	str	r3, [r7, #32]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7a6:	4b10      	ldr	r3, [pc, #64]	; (800f7e8 <tcp_input+0x258>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	627b      	str	r3, [r7, #36]	; 0x24
 800f7ac:	e082      	b.n	800f8b4 <tcp_input+0x324>
 800f7ae:	bf00      	nop
 800f7b0:	20004154 	.word	0x20004154
 800f7b4:	200074ec 	.word	0x200074ec
 800f7b8:	20004158 	.word	0x20004158
 800f7bc:	2000415c 	.word	0x2000415c
 800f7c0:	2000415a 	.word	0x2000415a
 800f7c4:	080191a4 	.word	0x080191a4
 800f7c8:	080191d8 	.word	0x080191d8
 800f7cc:	080191e8 	.word	0x080191e8
 800f7d0:	08019210 	.word	0x08019210
 800f7d4:	0801921c 	.word	0x0801921c
 800f7d8:	20004164 	.word	0x20004164
 800f7dc:	20004168 	.word	0x20004168
 800f7e0:	20004170 	.word	0x20004170
 800f7e4:	2000416e 	.word	0x2000416e
 800f7e8:	2000dc54 	.word	0x2000dc54
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ee:	7d1b      	ldrb	r3, [r3, #20]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d105      	bne.n	800f800 <tcp_input+0x270>
 800f7f4:	4b73      	ldr	r3, [pc, #460]	; (800f9c4 <tcp_input+0x434>)
 800f7f6:	22e2      	movs	r2, #226	; 0xe2
 800f7f8:	4973      	ldr	r1, [pc, #460]	; (800f9c8 <tcp_input+0x438>)
 800f7fa:	4874      	ldr	r0, [pc, #464]	; (800f9cc <tcp_input+0x43c>)
 800f7fc:	f006 ff60 	bl	80166c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f802:	7d1b      	ldrb	r3, [r3, #20]
 800f804:	2b0a      	cmp	r3, #10
 800f806:	d105      	bne.n	800f814 <tcp_input+0x284>
 800f808:	4b6e      	ldr	r3, [pc, #440]	; (800f9c4 <tcp_input+0x434>)
 800f80a:	22e3      	movs	r2, #227	; 0xe3
 800f80c:	4970      	ldr	r1, [pc, #448]	; (800f9d0 <tcp_input+0x440>)
 800f80e:	486f      	ldr	r0, [pc, #444]	; (800f9cc <tcp_input+0x43c>)
 800f810:	f006 ff56 	bl	80166c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f816:	7d1b      	ldrb	r3, [r3, #20]
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d105      	bne.n	800f828 <tcp_input+0x298>
 800f81c:	4b69      	ldr	r3, [pc, #420]	; (800f9c4 <tcp_input+0x434>)
 800f81e:	22e4      	movs	r2, #228	; 0xe4
 800f820:	496c      	ldr	r1, [pc, #432]	; (800f9d4 <tcp_input+0x444>)
 800f822:	486a      	ldr	r0, [pc, #424]	; (800f9cc <tcp_input+0x43c>)
 800f824:	f006 ff4c 	bl	80166c0 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800f828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f82a:	8b1a      	ldrh	r2, [r3, #24]
 800f82c:	4b6a      	ldr	r3, [pc, #424]	; (800f9d8 <tcp_input+0x448>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	881b      	ldrh	r3, [r3, #0]
 800f832:	b29b      	uxth	r3, r3
 800f834:	429a      	cmp	r2, r3
 800f836:	d138      	bne.n	800f8aa <tcp_input+0x31a>
        pcb->local_port == tcphdr->dest &&
 800f838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83a:	8ada      	ldrh	r2, [r3, #22]
 800f83c:	4b66      	ldr	r3, [pc, #408]	; (800f9d8 <tcp_input+0x448>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	885b      	ldrh	r3, [r3, #2]
 800f842:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f844:	429a      	cmp	r2, r3
 800f846:	d130      	bne.n	800f8aa <tcp_input+0x31a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84a:	685a      	ldr	r2, [r3, #4]
 800f84c:	4b63      	ldr	r3, [pc, #396]	; (800f9dc <tcp_input+0x44c>)
 800f84e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f850:	429a      	cmp	r2, r3
 800f852:	d12a      	bne.n	800f8aa <tcp_input+0x31a>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	4b60      	ldr	r3, [pc, #384]	; (800f9dc <tcp_input+0x44c>)
 800f85a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d124      	bne.n	800f8aa <tcp_input+0x31a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f866:	429a      	cmp	r2, r3
 800f868:	d105      	bne.n	800f876 <tcp_input+0x2e6>
 800f86a:	4b56      	ldr	r3, [pc, #344]	; (800f9c4 <tcp_input+0x434>)
 800f86c:	22ec      	movs	r2, #236	; 0xec
 800f86e:	495c      	ldr	r1, [pc, #368]	; (800f9e0 <tcp_input+0x450>)
 800f870:	4856      	ldr	r0, [pc, #344]	; (800f9cc <tcp_input+0x43c>)
 800f872:	f006 ff25 	bl	80166c0 <iprintf>
      if (prev != NULL) {
 800f876:	6a3b      	ldr	r3, [r7, #32]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d00a      	beq.n	800f892 <tcp_input+0x302>
        prev->next = pcb->next;
 800f87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87e:	68da      	ldr	r2, [r3, #12]
 800f880:	6a3b      	ldr	r3, [r7, #32]
 800f882:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f884:	4b57      	ldr	r3, [pc, #348]	; (800f9e4 <tcp_input+0x454>)
 800f886:	681a      	ldr	r2, [r3, #0]
 800f888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f88c:	4a55      	ldr	r2, [pc, #340]	; (800f9e4 <tcp_input+0x454>)
 800f88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f890:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f898:	429a      	cmp	r2, r3
 800f89a:	d10f      	bne.n	800f8bc <tcp_input+0x32c>
 800f89c:	4b49      	ldr	r3, [pc, #292]	; (800f9c4 <tcp_input+0x434>)
 800f89e:	22f4      	movs	r2, #244	; 0xf4
 800f8a0:	4951      	ldr	r1, [pc, #324]	; (800f9e8 <tcp_input+0x458>)
 800f8a2:	484a      	ldr	r0, [pc, #296]	; (800f9cc <tcp_input+0x43c>)
 800f8a4:	f006 ff0c 	bl	80166c0 <iprintf>
      break;
 800f8a8:	e008      	b.n	800f8bc <tcp_input+0x32c>
    }
    prev = pcb;
 800f8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ac:	623b      	str	r3, [r7, #32]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	627b      	str	r3, [r7, #36]	; 0x24
 800f8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d198      	bne.n	800f7ec <tcp_input+0x25c>
 800f8ba:	e000      	b.n	800f8be <tcp_input+0x32e>
      break;
 800f8bc:	bf00      	nop
  }

  if (pcb == NULL) {
 800f8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f040 8099 	bne.w	800f9f8 <tcp_input+0x468>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8c6:	4b49      	ldr	r3, [pc, #292]	; (800f9ec <tcp_input+0x45c>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	627b      	str	r3, [r7, #36]	; 0x24
 800f8cc:	e02f      	b.n	800f92e <tcp_input+0x39e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d0:	7d1b      	ldrb	r3, [r3, #20]
 800f8d2:	2b0a      	cmp	r3, #10
 800f8d4:	d005      	beq.n	800f8e2 <tcp_input+0x352>
 800f8d6:	4b3b      	ldr	r3, [pc, #236]	; (800f9c4 <tcp_input+0x434>)
 800f8d8:	22fe      	movs	r2, #254	; 0xfe
 800f8da:	4945      	ldr	r1, [pc, #276]	; (800f9f0 <tcp_input+0x460>)
 800f8dc:	483b      	ldr	r0, [pc, #236]	; (800f9cc <tcp_input+0x43c>)
 800f8de:	f006 feef 	bl	80166c0 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800f8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e4:	8b1a      	ldrh	r2, [r3, #24]
 800f8e6:	4b3c      	ldr	r3, [pc, #240]	; (800f9d8 <tcp_input+0x448>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	881b      	ldrh	r3, [r3, #0]
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d11a      	bne.n	800f928 <tcp_input+0x398>
          pcb->local_port == tcphdr->dest &&
 800f8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f4:	8ada      	ldrh	r2, [r3, #22]
 800f8f6:	4b38      	ldr	r3, [pc, #224]	; (800f9d8 <tcp_input+0x448>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	885b      	ldrh	r3, [r3, #2]
 800f8fc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d112      	bne.n	800f928 <tcp_input+0x398>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f904:	685a      	ldr	r2, [r3, #4]
 800f906:	4b35      	ldr	r3, [pc, #212]	; (800f9dc <tcp_input+0x44c>)
 800f908:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d10c      	bne.n	800f928 <tcp_input+0x398>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	4b32      	ldr	r3, [pc, #200]	; (800f9dc <tcp_input+0x44c>)
 800f914:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f916:	429a      	cmp	r2, r3
 800f918:	d106      	bne.n	800f928 <tcp_input+0x398>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800f91a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f91c:	f000 fb30 	bl	800ff80 <tcp_timewait_input>
        pbuf_free(p);
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f7fd fe7d 	bl	800d620 <pbuf_free>
        return;
 800f926:	e1f1      	b.n	800fd0c <tcp_input+0x77c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	627b      	str	r3, [r7, #36]	; 0x24
 800f92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f930:	2b00      	cmp	r3, #0
 800f932:	d1cc      	bne.n	800f8ce <tcp_input+0x33e>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f934:	2300      	movs	r3, #0
 800f936:	623b      	str	r3, [r7, #32]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f938:	4b2e      	ldr	r3, [pc, #184]	; (800f9f4 <tcp_input+0x464>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	61fb      	str	r3, [r7, #28]
 800f93e:	e01d      	b.n	800f97c <tcp_input+0x3ec>
      if (lpcb->local_port == tcphdr->dest) {
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	8ada      	ldrh	r2, [r3, #22]
 800f944:	4b24      	ldr	r3, [pc, #144]	; (800f9d8 <tcp_input+0x448>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	885b      	ldrh	r3, [r3, #2]
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d110      	bne.n	800f972 <tcp_input+0x3e2>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f950:	69fb      	ldr	r3, [r7, #28]
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	4b21      	ldr	r3, [pc, #132]	; (800f9dc <tcp_input+0x44c>)
 800f956:	695b      	ldr	r3, [r3, #20]
 800f958:	429a      	cmp	r2, r3
 800f95a:	d013      	beq.n	800f984 <tcp_input+0x3f4>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f95c:	69fb      	ldr	r3, [r7, #28]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d003      	beq.n	800f96a <tcp_input+0x3da>
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d103      	bne.n	800f972 <tcp_input+0x3e2>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
 800f96a:	69fb      	ldr	r3, [r7, #28]
 800f96c:	617b      	str	r3, [r7, #20]
            lpcb_prev = prev;
 800f96e:	6a3b      	ldr	r3, [r7, #32]
 800f970:	61bb      	str	r3, [r7, #24]
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f972:	69fb      	ldr	r3, [r7, #28]
 800f974:	623b      	str	r3, [r7, #32]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f976:	69fb      	ldr	r3, [r7, #28]
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	61fb      	str	r3, [r7, #28]
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d1de      	bne.n	800f940 <tcp_input+0x3b0>
 800f982:	e000      	b.n	800f986 <tcp_input+0x3f6>
            break;
 800f984:	bf00      	nop
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
 800f986:	69fb      	ldr	r3, [r7, #28]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d103      	bne.n	800f994 <tcp_input+0x404>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	61fb      	str	r3, [r7, #28]
      prev = lpcb_prev;
 800f990:	69bb      	ldr	r3, [r7, #24]
 800f992:	623b      	str	r3, [r7, #32]
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f994:	69fb      	ldr	r3, [r7, #28]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d02e      	beq.n	800f9f8 <tcp_input+0x468>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f99a:	6a3b      	ldr	r3, [r7, #32]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d00a      	beq.n	800f9b6 <tcp_input+0x426>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f9a0:	69fb      	ldr	r3, [r7, #28]
 800f9a2:	68da      	ldr	r2, [r3, #12]
 800f9a4:	6a3b      	ldr	r3, [r7, #32]
 800f9a6:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f9a8:	4b12      	ldr	r3, [pc, #72]	; (800f9f4 <tcp_input+0x464>)
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f9b0:	4a10      	ldr	r2, [pc, #64]	; (800f9f4 <tcp_input+0x464>)
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800f9b6:	69f8      	ldr	r0, [r7, #28]
 800f9b8:	f000 f9ea 	bl	800fd90 <tcp_listen_input>
      pbuf_free(p);
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f7fd fe2f 	bl	800d620 <pbuf_free>
      return;
 800f9c2:	e1a3      	b.n	800fd0c <tcp_input+0x77c>
 800f9c4:	080191a4 	.word	0x080191a4
 800f9c8:	0801923c 	.word	0x0801923c
 800f9cc:	080191e8 	.word	0x080191e8
 800f9d0:	08019264 	.word	0x08019264
 800f9d4:	08019290 	.word	0x08019290
 800f9d8:	20004154 	.word	0x20004154
 800f9dc:	200074ec 	.word	0x200074ec
 800f9e0:	080192b8 	.word	0x080192b8
 800f9e4:	2000dc54 	.word	0x2000dc54
 800f9e8:	080192e4 	.word	0x080192e4
 800f9ec:	2000dc64 	.word	0x2000dc64
 800f9f0:	08019310 	.word	0x08019310
 800f9f4:	2000dc5c 	.word	0x2000dc5c
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800f9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	f000 8156 	beq.w	800fcac <tcp_input+0x71c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fa00:	4b9e      	ldr	r3, [pc, #632]	; (800fc7c <tcp_input+0x6ec>)
 800fa02:	2200      	movs	r2, #0
 800fa04:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	891a      	ldrh	r2, [r3, #8]
 800fa0a:	4b9c      	ldr	r3, [pc, #624]	; (800fc7c <tcp_input+0x6ec>)
 800fa0c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fa0e:	4a9b      	ldr	r2, [pc, #620]	; (800fc7c <tcp_input+0x6ec>)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fa14:	4b9a      	ldr	r3, [pc, #616]	; (800fc80 <tcp_input+0x6f0>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a98      	ldr	r2, [pc, #608]	; (800fc7c <tcp_input+0x6ec>)
 800fa1a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fa1c:	4b99      	ldr	r3, [pc, #612]	; (800fc84 <tcp_input+0x6f4>)
 800fa1e:	2200      	movs	r2, #0
 800fa20:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fa22:	4b99      	ldr	r3, [pc, #612]	; (800fc88 <tcp_input+0x6f8>)
 800fa24:	2200      	movs	r2, #0
 800fa26:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fa28:	4b98      	ldr	r3, [pc, #608]	; (800fc8c <tcp_input+0x6fc>)
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fa2e:	4b98      	ldr	r3, [pc, #608]	; (800fc90 <tcp_input+0x700>)
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	f003 0308 	and.w	r3, r3, #8
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d006      	beq.n	800fa48 <tcp_input+0x4b8>
      p->flags |= PBUF_FLAG_PUSH;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	7b5b      	ldrb	r3, [r3, #13]
 800fa3e:	f043 0301 	orr.w	r3, r3, #1
 800fa42:	b2da      	uxtb	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d017      	beq.n	800fa80 <tcp_input+0x4f0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa52:	f7ff f963 	bl	800ed1c <tcp_process_refused_data>
 800fa56:	4603      	mov	r3, r0
 800fa58:	f113 0f0d 	cmn.w	r3, #13
 800fa5c:	d007      	beq.n	800fa6e <tcp_input+0x4de>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d00c      	beq.n	800fa80 <tcp_input+0x4f0>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa66:	4b8b      	ldr	r3, [pc, #556]	; (800fc94 <tcp_input+0x704>)
 800fa68:	881b      	ldrh	r3, [r3, #0]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d008      	beq.n	800fa80 <tcp_input+0x4f0>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	f040 80e2 	bne.w	800fc3c <tcp_input+0x6ac>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fa78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa7a:	f002 fe31 	bl	80126e0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fa7e:	e0dd      	b.n	800fc3c <tcp_input+0x6ac>
      }
    }
    tcp_input_pcb = pcb;
 800fa80:	4a85      	ldr	r2, [pc, #532]	; (800fc98 <tcp_input+0x708>)
 800fa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa84:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fa86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa88:	f000 fae2 	bl	8010050 <tcp_process>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fa90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa94:	f113 0f0d 	cmn.w	r3, #13
 800fa98:	f000 80d2 	beq.w	800fc40 <tcp_input+0x6b0>
      if (recv_flags & TF_RESET) {
 800fa9c:	4b7a      	ldr	r3, [pc, #488]	; (800fc88 <tcp_input+0x6f8>)
 800fa9e:	781b      	ldrb	r3, [r3, #0]
 800faa0:	f003 0308 	and.w	r3, r3, #8
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d016      	beq.n	800fad6 <tcp_input+0x546>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800faa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d008      	beq.n	800fac4 <tcp_input+0x534>
 800fab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faba:	6912      	ldr	r2, [r2, #16]
 800fabc:	f06f 010d 	mvn.w	r1, #13
 800fac0:	4610      	mov	r0, r2
 800fac2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fac6:	4875      	ldr	r0, [pc, #468]	; (800fc9c <tcp_input+0x70c>)
 800fac8:	f7ff fc48 	bl	800f35c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800facc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800face:	2001      	movs	r0, #1
 800fad0:	f7fc ffd2 	bl	800ca78 <memp_free>
 800fad4:	e0bf      	b.n	800fc56 <tcp_input+0x6c6>
      } else {
        err = ERR_OK;
 800fad6:	2300      	movs	r3, #0
 800fad8:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fada:	4b6c      	ldr	r3, [pc, #432]	; (800fc8c <tcp_input+0x6fc>)
 800fadc:	881b      	ldrh	r3, [r3, #0]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d01b      	beq.n	800fb1a <tcp_input+0x58a>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fae2:	4b6a      	ldr	r3, [pc, #424]	; (800fc8c <tcp_input+0x6fc>)
 800fae4:	881b      	ldrh	r3, [r3, #0]
 800fae6:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faec:	2b00      	cmp	r3, #0
 800faee:	d009      	beq.n	800fb04 <tcp_input+0x574>
 800faf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faf6:	6910      	ldr	r0, [r2, #16]
 800faf8:	89fa      	ldrh	r2, [r7, #14]
 800fafa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fafc:	4798      	blx	r3
 800fafe:	4603      	mov	r3, r0
 800fb00:	74fb      	strb	r3, [r7, #19]
 800fb02:	e001      	b.n	800fb08 <tcp_input+0x578>
 800fb04:	2300      	movs	r3, #0
 800fb06:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fb08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb0c:	f113 0f0d 	cmn.w	r3, #13
 800fb10:	f000 8098 	beq.w	800fc44 <tcp_input+0x6b4>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fb14:	4b5d      	ldr	r3, [pc, #372]	; (800fc8c <tcp_input+0x6fc>)
 800fb16:	2200      	movs	r2, #0
 800fb18:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fb1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb1c:	f000 f906 	bl	800fd2c <tcp_input_delayed_close>
 800fb20:	4603      	mov	r3, r0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	f040 8090 	bne.w	800fc48 <tcp_input+0x6b8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fb28:	4b56      	ldr	r3, [pc, #344]	; (800fc84 <tcp_input+0x6f4>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d041      	beq.n	800fbb4 <tcp_input+0x624>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d006      	beq.n	800fb46 <tcp_input+0x5b6>
 800fb38:	4b59      	ldr	r3, [pc, #356]	; (800fca0 <tcp_input+0x710>)
 800fb3a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800fb3e:	4959      	ldr	r1, [pc, #356]	; (800fca4 <tcp_input+0x714>)
 800fb40:	4859      	ldr	r0, [pc, #356]	; (800fca8 <tcp_input+0x718>)
 800fb42:	f006 fdbd 	bl	80166c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb48:	8b5b      	ldrh	r3, [r3, #26]
 800fb4a:	f003 0310 	and.w	r3, r3, #16
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d008      	beq.n	800fb64 <tcp_input+0x5d4>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fb52:	4b4c      	ldr	r3, [pc, #304]	; (800fc84 <tcp_input+0x6f4>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7fd fd62 	bl	800d620 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fb5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb5e:	f7fe fb33 	bl	800e1c8 <tcp_abort>
            goto aborted;
 800fb62:	e078      	b.n	800fc56 <tcp_input+0x6c6>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d00c      	beq.n	800fb88 <tcp_input+0x5f8>
 800fb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb70:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800fb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb76:	6918      	ldr	r0, [r3, #16]
 800fb78:	4b42      	ldr	r3, [pc, #264]	; (800fc84 <tcp_input+0x6f4>)
 800fb7a:	681a      	ldr	r2, [r3, #0]
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb80:	47a0      	blx	r4
 800fb82:	4603      	mov	r3, r0
 800fb84:	74fb      	strb	r3, [r7, #19]
 800fb86:	e008      	b.n	800fb9a <tcp_input+0x60a>
 800fb88:	4b3e      	ldr	r3, [pc, #248]	; (800fc84 <tcp_input+0x6f4>)
 800fb8a:	681a      	ldr	r2, [r3, #0]
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb90:	2000      	movs	r0, #0
 800fb92:	f7ff f974 	bl	800ee7e <tcp_recv_null>
 800fb96:	4603      	mov	r3, r0
 800fb98:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fb9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb9e:	f113 0f0d 	cmn.w	r3, #13
 800fba2:	d053      	beq.n	800fc4c <tcp_input+0x6bc>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fba4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d003      	beq.n	800fbb4 <tcp_input+0x624>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fbac:	4b35      	ldr	r3, [pc, #212]	; (800fc84 <tcp_input+0x6f4>)
 800fbae:	681a      	ldr	r2, [r3, #0]
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb2:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fbb4:	4b34      	ldr	r3, [pc, #208]	; (800fc88 <tcp_input+0x6f8>)
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	f003 0320 	and.w	r3, r3, #32
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d030      	beq.n	800fc22 <tcp_input+0x692>
          if (pcb->refused_data != NULL) {
 800fbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d009      	beq.n	800fbdc <tcp_input+0x64c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbcc:	7b5a      	ldrb	r2, [r3, #13]
 800fbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbd2:	f042 0220 	orr.w	r2, r2, #32
 800fbd6:	b2d2      	uxtb	r2, r2
 800fbd8:	735a      	strb	r2, [r3, #13]
 800fbda:	e022      	b.n	800fc22 <tcp_input+0x692>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbe0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fbe4:	d005      	beq.n	800fbf2 <tcp_input+0x662>
              pcb->rcv_wnd++;
 800fbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbea:	3301      	adds	r3, #1
 800fbec:	b29a      	uxth	r2, r3
 800fbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf0:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d00b      	beq.n	800fc14 <tcp_input+0x684>
 800fbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfe:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800fc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc04:	6918      	ldr	r0, [r3, #16]
 800fc06:	2300      	movs	r3, #0
 800fc08:	2200      	movs	r2, #0
 800fc0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc0c:	47a0      	blx	r4
 800fc0e:	4603      	mov	r3, r0
 800fc10:	74fb      	strb	r3, [r7, #19]
 800fc12:	e001      	b.n	800fc18 <tcp_input+0x688>
 800fc14:	2300      	movs	r3, #0
 800fc16:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fc18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc1c:	f113 0f0d 	cmn.w	r3, #13
 800fc20:	d016      	beq.n	800fc50 <tcp_input+0x6c0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fc22:	4b1d      	ldr	r3, [pc, #116]	; (800fc98 <tcp_input+0x708>)
 800fc24:	2200      	movs	r2, #0
 800fc26:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fc28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc2a:	f000 f87f 	bl	800fd2c <tcp_input_delayed_close>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d10f      	bne.n	800fc54 <tcp_input+0x6c4>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fc34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc36:	f002 fdaf 	bl	8012798 <tcp_output>
 800fc3a:	e00c      	b.n	800fc56 <tcp_input+0x6c6>
        goto aborted;
 800fc3c:	bf00      	nop
 800fc3e:	e00a      	b.n	800fc56 <tcp_input+0x6c6>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fc40:	bf00      	nop
 800fc42:	e008      	b.n	800fc56 <tcp_input+0x6c6>
              goto aborted;
 800fc44:	bf00      	nop
 800fc46:	e006      	b.n	800fc56 <tcp_input+0x6c6>
          goto aborted;
 800fc48:	bf00      	nop
 800fc4a:	e004      	b.n	800fc56 <tcp_input+0x6c6>
            goto aborted;
 800fc4c:	bf00      	nop
 800fc4e:	e002      	b.n	800fc56 <tcp_input+0x6c6>
              goto aborted;
 800fc50:	bf00      	nop
 800fc52:	e000      	b.n	800fc56 <tcp_input+0x6c6>
          goto aborted;
 800fc54:	bf00      	nop
    tcp_input_pcb = NULL;
 800fc56:	4b10      	ldr	r3, [pc, #64]	; (800fc98 <tcp_input+0x708>)
 800fc58:	2200      	movs	r2, #0
 800fc5a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fc5c:	4b09      	ldr	r3, [pc, #36]	; (800fc84 <tcp_input+0x6f4>)
 800fc5e:	2200      	movs	r2, #0
 800fc60:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800fc62:	4b06      	ldr	r3, [pc, #24]	; (800fc7c <tcp_input+0x6ec>)
 800fc64:	685b      	ldr	r3, [r3, #4]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d04f      	beq.n	800fd0a <tcp_input+0x77a>
    {
      pbuf_free(inseg.p);
 800fc6a:	4b04      	ldr	r3, [pc, #16]	; (800fc7c <tcp_input+0x6ec>)
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fd fcd6 	bl	800d620 <pbuf_free>
      inseg.p = NULL;
 800fc74:	4b01      	ldr	r3, [pc, #4]	; (800fc7c <tcp_input+0x6ec>)
 800fc76:	2200      	movs	r2, #0
 800fc78:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fc7a:	e046      	b.n	800fd0a <tcp_input+0x77a>
 800fc7c:	20004144 	.word	0x20004144
 800fc80:	20004154 	.word	0x20004154
 800fc84:	20004174 	.word	0x20004174
 800fc88:	20004171 	.word	0x20004171
 800fc8c:	2000416c 	.word	0x2000416c
 800fc90:	20004170 	.word	0x20004170
 800fc94:	2000416e 	.word	0x2000416e
 800fc98:	2000dc68 	.word	0x2000dc68
 800fc9c:	2000dc54 	.word	0x2000dc54
 800fca0:	080191a4 	.word	0x080191a4
 800fca4:	08019340 	.word	0x08019340
 800fca8:	080191e8 	.word	0x080191e8
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fcac:	4b19      	ldr	r3, [pc, #100]	; (800fd14 <tcp_input+0x784>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	899b      	ldrh	r3, [r3, #12]
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7fc fa9f 	bl	800c1f8 <lwip_htons>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	f003 0304 	and.w	r3, r3, #4
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d115      	bne.n	800fcf0 <tcp_input+0x760>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcc4:	4b14      	ldr	r3, [pc, #80]	; (800fd18 <tcp_input+0x788>)
 800fcc6:	6818      	ldr	r0, [r3, #0]
 800fcc8:	4b14      	ldr	r3, [pc, #80]	; (800fd1c <tcp_input+0x78c>)
 800fcca:	881b      	ldrh	r3, [r3, #0]
 800fccc:	461a      	mov	r2, r3
 800fcce:	4b14      	ldr	r3, [pc, #80]	; (800fd20 <tcp_input+0x790>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcd4:	4b0f      	ldr	r3, [pc, #60]	; (800fd14 <tcp_input+0x784>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcd8:	885b      	ldrh	r3, [r3, #2]
 800fcda:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcdc:	4a0d      	ldr	r2, [pc, #52]	; (800fd14 <tcp_input+0x784>)
 800fcde:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fce0:	8812      	ldrh	r2, [r2, #0]
 800fce2:	b292      	uxth	r2, r2
 800fce4:	9201      	str	r2, [sp, #4]
 800fce6:	9300      	str	r3, [sp, #0]
 800fce8:	4b0e      	ldr	r3, [pc, #56]	; (800fd24 <tcp_input+0x794>)
 800fcea:	4a0f      	ldr	r2, [pc, #60]	; (800fd28 <tcp_input+0x798>)
 800fcec:	f002 ffde 	bl	8012cac <tcp_rst>
    pbuf_free(p);
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7fd fc95 	bl	800d620 <pbuf_free>
  return;
 800fcf6:	e008      	b.n	800fd0a <tcp_input+0x77a>
    goto dropped;
 800fcf8:	bf00      	nop
 800fcfa:	e002      	b.n	800fd02 <tcp_input+0x772>
dropped:
 800fcfc:	bf00      	nop
 800fcfe:	e000      	b.n	800fd02 <tcp_input+0x772>
      goto dropped;
 800fd00:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f7fd fc8c 	bl	800d620 <pbuf_free>
 800fd08:	e000      	b.n	800fd0c <tcp_input+0x77c>
  return;
 800fd0a:	bf00      	nop
}
 800fd0c:	372c      	adds	r7, #44	; 0x2c
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd90      	pop	{r4, r7, pc}
 800fd12:	bf00      	nop
 800fd14:	20004154 	.word	0x20004154
 800fd18:	20004168 	.word	0x20004168
 800fd1c:	2000416e 	.word	0x2000416e
 800fd20:	20004164 	.word	0x20004164
 800fd24:	200074fc 	.word	0x200074fc
 800fd28:	20007500 	.word	0x20007500

0800fd2c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800fd34:	4b14      	ldr	r3, [pc, #80]	; (800fd88 <tcp_input_delayed_close+0x5c>)
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	f003 0310 	and.w	r3, r3, #16
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d01d      	beq.n	800fd7c <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	8b5b      	ldrh	r3, [r3, #26]
 800fd44:	f003 0310 	and.w	r3, r3, #16
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d10d      	bne.n	800fd68 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d008      	beq.n	800fd68 <tcp_input_delayed_close+0x3c>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	6912      	ldr	r2, [r2, #16]
 800fd60:	f06f 010e 	mvn.w	r1, #14
 800fd64:	4610      	mov	r0, r2
 800fd66:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fd68:	6879      	ldr	r1, [r7, #4]
 800fd6a:	4808      	ldr	r0, [pc, #32]	; (800fd8c <tcp_input_delayed_close+0x60>)
 800fd6c:	f7ff faf6 	bl	800f35c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800fd70:	6879      	ldr	r1, [r7, #4]
 800fd72:	2001      	movs	r0, #1
 800fd74:	f7fc fe80 	bl	800ca78 <memp_free>
    return 1;
 800fd78:	2301      	movs	r3, #1
 800fd7a:	e000      	b.n	800fd7e <tcp_input_delayed_close+0x52>
  }
  return 0;
 800fd7c:	2300      	movs	r3, #0
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3708      	adds	r7, #8
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	20004171 	.word	0x20004171
 800fd8c:	2000dc54 	.word	0x2000dc54

0800fd90 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b088      	sub	sp, #32
 800fd94:	af02      	add	r7, sp, #8
 800fd96:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fd98:	4b6f      	ldr	r3, [pc, #444]	; (800ff58 <tcp_listen_input+0x1c8>)
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	f003 0304 	and.w	r3, r3, #4
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	f040 80d0 	bne.w	800ff46 <tcp_listen_input+0x1b6>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fda6:	4b6c      	ldr	r3, [pc, #432]	; (800ff58 <tcp_listen_input+0x1c8>)
 800fda8:	781b      	ldrb	r3, [r3, #0]
 800fdaa:	f003 0310 	and.w	r3, r3, #16
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d016      	beq.n	800fde0 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdb2:	4b6a      	ldr	r3, [pc, #424]	; (800ff5c <tcp_listen_input+0x1cc>)
 800fdb4:	6818      	ldr	r0, [r3, #0]
 800fdb6:	4b6a      	ldr	r3, [pc, #424]	; (800ff60 <tcp_listen_input+0x1d0>)
 800fdb8:	881b      	ldrh	r3, [r3, #0]
 800fdba:	461a      	mov	r2, r3
 800fdbc:	4b69      	ldr	r3, [pc, #420]	; (800ff64 <tcp_listen_input+0x1d4>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdc2:	4b69      	ldr	r3, [pc, #420]	; (800ff68 <tcp_listen_input+0x1d8>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdc6:	885b      	ldrh	r3, [r3, #2]
 800fdc8:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdca:	4a67      	ldr	r2, [pc, #412]	; (800ff68 <tcp_listen_input+0x1d8>)
 800fdcc:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdce:	8812      	ldrh	r2, [r2, #0]
 800fdd0:	b292      	uxth	r2, r2
 800fdd2:	9201      	str	r2, [sp, #4]
 800fdd4:	9300      	str	r3, [sp, #0]
 800fdd6:	4b65      	ldr	r3, [pc, #404]	; (800ff6c <tcp_listen_input+0x1dc>)
 800fdd8:	4a65      	ldr	r2, [pc, #404]	; (800ff70 <tcp_listen_input+0x1e0>)
 800fdda:	f002 ff67 	bl	8012cac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fdde:	e0b4      	b.n	800ff4a <tcp_listen_input+0x1ba>
  } else if (flags & TCP_SYN) {
 800fde0:	4b5d      	ldr	r3, [pc, #372]	; (800ff58 <tcp_listen_input+0x1c8>)
 800fde2:	781b      	ldrb	r3, [r3, #0]
 800fde4:	f003 0302 	and.w	r3, r3, #2
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	f000 80ae 	beq.w	800ff4a <tcp_listen_input+0x1ba>
    if (pcb->accepts_pending >= pcb->backlog) {
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	7f5a      	ldrb	r2, [r3, #29]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	7f1b      	ldrb	r3, [r3, #28]
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	f080 80a9 	bcs.w	800ff4e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	7d5b      	ldrb	r3, [r3, #21]
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7ff f91b 	bl	800f03c <tcp_alloc>
 800fe06:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d111      	bne.n	800fe32 <tcp_listen_input+0xa2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	699b      	ldr	r3, [r3, #24]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d00a      	beq.n	800fe2c <tcp_listen_input+0x9c>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	699b      	ldr	r3, [r3, #24]
 800fe1a:	687a      	ldr	r2, [r7, #4]
 800fe1c:	6910      	ldr	r0, [r2, #16]
 800fe1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe22:	2100      	movs	r1, #0
 800fe24:	4798      	blx	r3
 800fe26:	4603      	mov	r3, r0
 800fe28:	73bb      	strb	r3, [r7, #14]
      return;
 800fe2a:	e091      	b.n	800ff50 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe2c:	23f0      	movs	r3, #240	; 0xf0
 800fe2e:	73bb      	strb	r3, [r7, #14]
      return;
 800fe30:	e08e      	b.n	800ff50 <tcp_listen_input+0x1c0>
    pcb->accepts_pending++;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	7f5b      	ldrb	r3, [r3, #29]
 800fe36:	3301      	adds	r3, #1
 800fe38:	b2da      	uxtb	r2, r3
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	775a      	strb	r2, [r3, #29]
    npcb->flags |= TF_BACKLOGPEND;
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	8b5b      	ldrh	r3, [r3, #26]
 800fe42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fe46:	b29a      	uxth	r2, r3
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	835a      	strh	r2, [r3, #26]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fe4c:	4b49      	ldr	r3, [pc, #292]	; (800ff74 <tcp_listen_input+0x1e4>)
 800fe4e:	695a      	ldr	r2, [r3, #20]
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fe54:	4b47      	ldr	r3, [pc, #284]	; (800ff74 <tcp_listen_input+0x1e4>)
 800fe56:	691a      	ldr	r2, [r3, #16]
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	8ada      	ldrh	r2, [r3, #22]
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fe64:	4b40      	ldr	r3, [pc, #256]	; (800ff68 <tcp_listen_input+0x1d8>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	881b      	ldrh	r3, [r3, #0]
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	2203      	movs	r2, #3
 800fe74:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fe76:	4b3b      	ldr	r3, [pc, #236]	; (800ff64 <tcp_listen_input+0x1d4>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	1c5a      	adds	r2, r3, #1
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fe88:	6978      	ldr	r0, [r7, #20]
 800fe8a:	f7ff fae3 	bl	800f454 <tcp_next_iss>
 800fe8e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	693a      	ldr	r2, [r7, #16]
 800fe94:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	693a      	ldr	r2, [r7, #16]
 800fe9a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	693a      	ldr	r2, [r7, #16]
 800fea0:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	693a      	ldr	r2, [r7, #16]
 800fea6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fea8:	4b2e      	ldr	r3, [pc, #184]	; (800ff64 <tcp_listen_input+0x1d4>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	1e5a      	subs	r2, r3, #1
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	691a      	ldr	r2, [r3, #16]
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	7a1b      	ldrb	r3, [r3, #8]
 800fec4:	f003 030c 	and.w	r3, r3, #12
 800fec8:	b2da      	uxtb	r2, r3
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fece:	4b2a      	ldr	r3, [pc, #168]	; (800ff78 <tcp_listen_input+0x1e8>)
 800fed0:	681a      	ldr	r2, [r3, #0]
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	60da      	str	r2, [r3, #12]
 800fed6:	4a28      	ldr	r2, [pc, #160]	; (800ff78 <tcp_listen_input+0x1e8>)
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	6013      	str	r3, [r2, #0]
 800fedc:	f003 f936 	bl	801314c <tcp_timer_needed>
 800fee0:	4b26      	ldr	r3, [pc, #152]	; (800ff7c <tcp_listen_input+0x1ec>)
 800fee2:	2201      	movs	r2, #1
 800fee4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fee6:	6978      	ldr	r0, [r7, #20]
 800fee8:	f001 fd14 	bl	8011914 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800feec:	4b1e      	ldr	r3, [pc, #120]	; (800ff68 <tcp_listen_input+0x1d8>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	89db      	ldrh	r3, [r3, #14]
 800fef2:	b29a      	uxth	r2, r3
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	4619      	mov	r1, r3
 800ff10:	4610      	mov	r0, r2
 800ff12:	f7ff fab7 	bl	800f484 <tcp_eff_send_mss_impl>
 800ff16:	4603      	mov	r3, r0
 800ff18:	461a      	mov	r2, r3
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ff1e:	2112      	movs	r1, #18
 800ff20:	6978      	ldr	r0, [r7, #20]
 800ff22:	f002 fae1 	bl	80124e8 <tcp_enqueue_flags>
 800ff26:	4603      	mov	r3, r0
 800ff28:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ff2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d004      	beq.n	800ff3c <tcp_listen_input+0x1ac>
      tcp_abandon(npcb, 0);
 800ff32:	2100      	movs	r1, #0
 800ff34:	6978      	ldr	r0, [r7, #20]
 800ff36:	f7fe f893 	bl	800e060 <tcp_abandon>
      return;
 800ff3a:	e009      	b.n	800ff50 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ff3c:	6978      	ldr	r0, [r7, #20]
 800ff3e:	f002 fc2b 	bl	8012798 <tcp_output>
  return;
 800ff42:	bf00      	nop
 800ff44:	e001      	b.n	800ff4a <tcp_listen_input+0x1ba>
    return;
 800ff46:	bf00      	nop
 800ff48:	e002      	b.n	800ff50 <tcp_listen_input+0x1c0>
  return;
 800ff4a:	bf00      	nop
 800ff4c:	e000      	b.n	800ff50 <tcp_listen_input+0x1c0>
      return;
 800ff4e:	bf00      	nop
}
 800ff50:	3718      	adds	r7, #24
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	20004170 	.word	0x20004170
 800ff5c:	20004168 	.word	0x20004168
 800ff60:	2000416e 	.word	0x2000416e
 800ff64:	20004164 	.word	0x20004164
 800ff68:	20004154 	.word	0x20004154
 800ff6c:	200074fc 	.word	0x200074fc
 800ff70:	20007500 	.word	0x20007500
 800ff74:	200074ec 	.word	0x200074ec
 800ff78:	2000dc54 	.word	0x2000dc54
 800ff7c:	2000dc50 	.word	0x2000dc50

0800ff80 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b084      	sub	sp, #16
 800ff84:	af02      	add	r7, sp, #8
 800ff86:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ff88:	4b29      	ldr	r3, [pc, #164]	; (8010030 <tcp_timewait_input+0xb0>)
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	f003 0304 	and.w	r3, r3, #4
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d147      	bne.n	8010024 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ff94:	4b26      	ldr	r3, [pc, #152]	; (8010030 <tcp_timewait_input+0xb0>)
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	f003 0302 	and.w	r3, r3, #2
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d027      	beq.n	800fff0 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ffa0:	4b24      	ldr	r3, [pc, #144]	; (8010034 <tcp_timewait_input+0xb4>)
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa8:	1ad3      	subs	r3, r2, r3
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	db2a      	blt.n	8010004 <tcp_timewait_input+0x84>
 800ffae:	4b21      	ldr	r3, [pc, #132]	; (8010034 <tcp_timewait_input+0xb4>)
 800ffb0:	681a      	ldr	r2, [r3, #0]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb6:	6879      	ldr	r1, [r7, #4]
 800ffb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffba:	440b      	add	r3, r1
 800ffbc:	1ad3      	subs	r3, r2, r3
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	dc20      	bgt.n	8010004 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffc2:	4b1d      	ldr	r3, [pc, #116]	; (8010038 <tcp_timewait_input+0xb8>)
 800ffc4:	6818      	ldr	r0, [r3, #0]
 800ffc6:	4b1d      	ldr	r3, [pc, #116]	; (801003c <tcp_timewait_input+0xbc>)
 800ffc8:	881b      	ldrh	r3, [r3, #0]
 800ffca:	461a      	mov	r2, r3
 800ffcc:	4b19      	ldr	r3, [pc, #100]	; (8010034 <tcp_timewait_input+0xb4>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ffd2:	4b1b      	ldr	r3, [pc, #108]	; (8010040 <tcp_timewait_input+0xc0>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffd6:	885b      	ldrh	r3, [r3, #2]
 800ffd8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ffda:	4a19      	ldr	r2, [pc, #100]	; (8010040 <tcp_timewait_input+0xc0>)
 800ffdc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffde:	8812      	ldrh	r2, [r2, #0]
 800ffe0:	b292      	uxth	r2, r2
 800ffe2:	9201      	str	r2, [sp, #4]
 800ffe4:	9300      	str	r3, [sp, #0]
 800ffe6:	4b17      	ldr	r3, [pc, #92]	; (8010044 <tcp_timewait_input+0xc4>)
 800ffe8:	4a17      	ldr	r2, [pc, #92]	; (8010048 <tcp_timewait_input+0xc8>)
 800ffea:	f002 fe5f 	bl	8012cac <tcp_rst>
      return;
 800ffee:	e01c      	b.n	801002a <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800fff0:	4b0f      	ldr	r3, [pc, #60]	; (8010030 <tcp_timewait_input+0xb0>)
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	f003 0301 	and.w	r3, r3, #1
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d003      	beq.n	8010004 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fffc:	4b13      	ldr	r3, [pc, #76]	; (801004c <tcp_timewait_input+0xcc>)
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010004:	4b0d      	ldr	r3, [pc, #52]	; (801003c <tcp_timewait_input+0xbc>)
 8010006:	881b      	ldrh	r3, [r3, #0]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d00d      	beq.n	8010028 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	8b5b      	ldrh	r3, [r3, #26]
 8010010:	f043 0302 	orr.w	r3, r3, #2
 8010014:	b29a      	uxth	r2, r3
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f002 fbbc 	bl	8012798 <tcp_output>
  }
  return;
 8010020:	bf00      	nop
 8010022:	e001      	b.n	8010028 <tcp_timewait_input+0xa8>
    return;
 8010024:	bf00      	nop
 8010026:	e000      	b.n	801002a <tcp_timewait_input+0xaa>
  return;
 8010028:	bf00      	nop
}
 801002a:	3708      	adds	r7, #8
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}
 8010030:	20004170 	.word	0x20004170
 8010034:	20004164 	.word	0x20004164
 8010038:	20004168 	.word	0x20004168
 801003c:	2000416e 	.word	0x2000416e
 8010040:	20004154 	.word	0x20004154
 8010044:	200074fc 	.word	0x200074fc
 8010048:	20007500 	.word	0x20007500
 801004c:	2000dc58 	.word	0x2000dc58

08010050 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b08a      	sub	sp, #40	; 0x28
 8010054:	af02      	add	r7, sp, #8
 8010056:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010058:	2300      	movs	r3, #0
 801005a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801005c:	2300      	movs	r3, #0
 801005e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010060:	4ba4      	ldr	r3, [pc, #656]	; (80102f4 <tcp_process+0x2a4>)
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	f003 0304 	and.w	r3, r3, #4
 8010068:	2b00      	cmp	r3, #0
 801006a:	d04e      	beq.n	801010a <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	7d1b      	ldrb	r3, [r3, #20]
 8010070:	2b02      	cmp	r3, #2
 8010072:	d108      	bne.n	8010086 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010078:	4b9f      	ldr	r3, [pc, #636]	; (80102f8 <tcp_process+0x2a8>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	429a      	cmp	r2, r3
 801007e:	d123      	bne.n	80100c8 <tcp_process+0x78>
        acceptable = 1;
 8010080:	2301      	movs	r3, #1
 8010082:	76fb      	strb	r3, [r7, #27]
 8010084:	e020      	b.n	80100c8 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801008a:	4b9c      	ldr	r3, [pc, #624]	; (80102fc <tcp_process+0x2ac>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	429a      	cmp	r2, r3
 8010090:	d102      	bne.n	8010098 <tcp_process+0x48>
        acceptable = 1;
 8010092:	2301      	movs	r3, #1
 8010094:	76fb      	strb	r3, [r7, #27]
 8010096:	e017      	b.n	80100c8 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010098:	4b98      	ldr	r3, [pc, #608]	; (80102fc <tcp_process+0x2ac>)
 801009a:	681a      	ldr	r2, [r3, #0]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a0:	1ad3      	subs	r3, r2, r3
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	db10      	blt.n	80100c8 <tcp_process+0x78>
 80100a6:	4b95      	ldr	r3, [pc, #596]	; (80102fc <tcp_process+0x2ac>)
 80100a8:	681a      	ldr	r2, [r3, #0]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ae:	6879      	ldr	r1, [r7, #4]
 80100b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100b2:	440b      	add	r3, r1
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	dc06      	bgt.n	80100c8 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	8b5b      	ldrh	r3, [r3, #26]
 80100be:	f043 0302 	orr.w	r3, r3, #2
 80100c2:	b29a      	uxth	r2, r3
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80100c8:	7efb      	ldrb	r3, [r7, #27]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d01b      	beq.n	8010106 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	7d1b      	ldrb	r3, [r3, #20]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d106      	bne.n	80100e4 <tcp_process+0x94>
 80100d6:	4b8a      	ldr	r3, [pc, #552]	; (8010300 <tcp_process+0x2b0>)
 80100d8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80100dc:	4989      	ldr	r1, [pc, #548]	; (8010304 <tcp_process+0x2b4>)
 80100de:	488a      	ldr	r0, [pc, #552]	; (8010308 <tcp_process+0x2b8>)
 80100e0:	f006 faee 	bl	80166c0 <iprintf>
      recv_flags |= TF_RESET;
 80100e4:	4b89      	ldr	r3, [pc, #548]	; (801030c <tcp_process+0x2bc>)
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	f043 0308 	orr.w	r3, r3, #8
 80100ec:	b2da      	uxtb	r2, r3
 80100ee:	4b87      	ldr	r3, [pc, #540]	; (801030c <tcp_process+0x2bc>)
 80100f0:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	8b5b      	ldrh	r3, [r3, #26]
 80100f6:	f023 0301 	bic.w	r3, r3, #1
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010100:	f06f 030d 	mvn.w	r3, #13
 8010104:	e34c      	b.n	80107a0 <tcp_process+0x750>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010106:	2300      	movs	r3, #0
 8010108:	e34a      	b.n	80107a0 <tcp_process+0x750>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801010a:	4b7a      	ldr	r3, [pc, #488]	; (80102f4 <tcp_process+0x2a4>)
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	f003 0302 	and.w	r3, r3, #2
 8010112:	2b00      	cmp	r3, #0
 8010114:	d010      	beq.n	8010138 <tcp_process+0xe8>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	7d1b      	ldrb	r3, [r3, #20]
 801011a:	2b02      	cmp	r3, #2
 801011c:	d00c      	beq.n	8010138 <tcp_process+0xe8>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	7d1b      	ldrb	r3, [r3, #20]
 8010122:	2b03      	cmp	r3, #3
 8010124:	d008      	beq.n	8010138 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	8b5b      	ldrh	r3, [r3, #26]
 801012a:	f043 0302 	orr.w	r3, r3, #2
 801012e:	b29a      	uxth	r2, r3
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010134:	2300      	movs	r3, #0
 8010136:	e333      	b.n	80107a0 <tcp_process+0x750>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	8b5b      	ldrh	r3, [r3, #26]
 801013c:	f003 0310 	and.w	r3, r3, #16
 8010140:	2b00      	cmp	r3, #0
 8010142:	d103      	bne.n	801014c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010144:	4b72      	ldr	r3, [pc, #456]	; (8010310 <tcp_process+0x2c0>)
 8010146:	681a      	ldr	r2, [r3, #0]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2200      	movs	r2, #0
 8010150:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

  tcp_parseopt(pcb);
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f001 fbdd 	bl	8011914 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	7d1b      	ldrb	r3, [r3, #20]
 801015e:	3b02      	subs	r3, #2
 8010160:	2b07      	cmp	r3, #7
 8010162:	f200 830d 	bhi.w	8010780 <tcp_process+0x730>
 8010166:	a201      	add	r2, pc, #4	; (adr r2, 801016c <tcp_process+0x11c>)
 8010168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801016c:	0801018d 	.word	0x0801018d
 8010170:	08010385 	.word	0x08010385
 8010174:	080104e3 	.word	0x080104e3
 8010178:	0801050d 	.word	0x0801050d
 801017c:	0801062f 	.word	0x0801062f
 8010180:	080104e3 	.word	0x080104e3
 8010184:	080106bb 	.word	0x080106bb
 8010188:	0801074b 	.word	0x0801074b
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801018c:	4b59      	ldr	r3, [pc, #356]	; (80102f4 <tcp_process+0x2a4>)
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	f003 0310 	and.w	r3, r3, #16
 8010194:	2b00      	cmp	r3, #0
 8010196:	f000 80cb 	beq.w	8010330 <tcp_process+0x2e0>
 801019a:	4b56      	ldr	r3, [pc, #344]	; (80102f4 <tcp_process+0x2a4>)
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	f003 0302 	and.w	r3, r3, #2
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f000 80c4 	beq.w	8010330 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ac:	1c5a      	adds	r2, r3, #1
 80101ae:	4b52      	ldr	r3, [pc, #328]	; (80102f8 <tcp_process+0x2a8>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	f040 80bc 	bne.w	8010330 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 80101b8:	4b50      	ldr	r3, [pc, #320]	; (80102fc <tcp_process+0x2ac>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	1c5a      	adds	r2, r3, #1
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 80101ca:	4b4b      	ldr	r3, [pc, #300]	; (80102f8 <tcp_process+0x2a8>)
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80101d2:	4b50      	ldr	r3, [pc, #320]	; (8010314 <tcp_process+0x2c4>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	89db      	ldrh	r3, [r3, #14]
 80101d8:	b29a      	uxth	r2, r3
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80101ec:	4b43      	ldr	r3, [pc, #268]	; (80102fc <tcp_process+0x2ac>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	1e5a      	subs	r2, r3, #1
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2204      	movs	r2, #4
 80101fa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	3304      	adds	r3, #4
 8010204:	4619      	mov	r1, r3
 8010206:	4610      	mov	r0, r2
 8010208:	f7ff f93c 	bl	800f484 <tcp_eff_send_mss_impl>
 801020c:	4603      	mov	r3, r0
 801020e:	461a      	mov	r2, r3
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010218:	005b      	lsls	r3, r3, #1
 801021a:	f241 121c 	movw	r2, #4380	; 0x111c
 801021e:	429a      	cmp	r2, r3
 8010220:	bf38      	it	cc
 8010222:	461a      	movcc	r2, r3
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010228:	009b      	lsls	r3, r3, #2
 801022a:	4293      	cmp	r3, r2
 801022c:	bf28      	it	cs
 801022e:	4613      	movcs	r3, r2
 8010230:	b29a      	uxth	r2, r3
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801023e:	2b00      	cmp	r3, #0
 8010240:	d106      	bne.n	8010250 <tcp_process+0x200>
 8010242:	4b2f      	ldr	r3, [pc, #188]	; (8010300 <tcp_process+0x2b0>)
 8010244:	f240 321a 	movw	r2, #794	; 0x31a
 8010248:	4933      	ldr	r1, [pc, #204]	; (8010318 <tcp_process+0x2c8>)
 801024a:	482f      	ldr	r0, [pc, #188]	; (8010308 <tcp_process+0x2b8>)
 801024c:	f006 fa38 	bl	80166c0 <iprintf>
      --pcb->snd_queuelen;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010256:	3b01      	subs	r3, #1
 8010258:	b29a      	uxth	r2, r3
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010264:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8010266:	69fb      	ldr	r3, [r7, #28]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d111      	bne.n	8010290 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010270:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d106      	bne.n	8010286 <tcp_process+0x236>
 8010278:	4b21      	ldr	r3, [pc, #132]	; (8010300 <tcp_process+0x2b0>)
 801027a:	f240 3222 	movw	r2, #802	; 0x322
 801027e:	4927      	ldr	r1, [pc, #156]	; (801031c <tcp_process+0x2cc>)
 8010280:	4821      	ldr	r0, [pc, #132]	; (8010308 <tcp_process+0x2b8>)
 8010282:	f006 fa1d 	bl	80166c0 <iprintf>
        pcb->unsent = rseg->next;
 8010286:	69fb      	ldr	r3, [r7, #28]
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	669a      	str	r2, [r3, #104]	; 0x68
 801028e:	e003      	b.n	8010298 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8010298:	69f8      	ldr	r0, [r7, #28]
 801029a:	f7fe fdbc 	bl	800ee16 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d104      	bne.n	80102b0 <tcp_process+0x260>
        pcb->rtime = -1;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102ac:	861a      	strh	r2, [r3, #48]	; 0x30
 80102ae:	e006      	b.n	80102be <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2200      	movs	r2, #0
 80102b4:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2200      	movs	r2, #0
 80102ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d00a      	beq.n	80102de <tcp_process+0x28e>
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102ce:	687a      	ldr	r2, [r7, #4]
 80102d0:	6910      	ldr	r0, [r2, #16]
 80102d2:	2200      	movs	r2, #0
 80102d4:	6879      	ldr	r1, [r7, #4]
 80102d6:	4798      	blx	r3
 80102d8:	4603      	mov	r3, r0
 80102da:	76bb      	strb	r3, [r7, #26]
 80102dc:	e001      	b.n	80102e2 <tcp_process+0x292>
 80102de:	2300      	movs	r3, #0
 80102e0:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80102e2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80102e6:	f113 0f0d 	cmn.w	r3, #13
 80102ea:	d119      	bne.n	8010320 <tcp_process+0x2d0>
        return ERR_ABRT;
 80102ec:	f06f 030c 	mvn.w	r3, #12
 80102f0:	e256      	b.n	80107a0 <tcp_process+0x750>
 80102f2:	bf00      	nop
 80102f4:	20004170 	.word	0x20004170
 80102f8:	20004168 	.word	0x20004168
 80102fc:	20004164 	.word	0x20004164
 8010300:	080191a4 	.word	0x080191a4
 8010304:	0801935c 	.word	0x0801935c
 8010308:	080191e8 	.word	0x080191e8
 801030c:	20004171 	.word	0x20004171
 8010310:	2000dc58 	.word	0x2000dc58
 8010314:	20004154 	.word	0x20004154
 8010318:	0801937c 	.word	0x0801937c
 801031c:	08019394 	.word	0x08019394
      }
      tcp_ack_now(pcb);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	8b5b      	ldrh	r3, [r3, #26]
 8010324:	f043 0302 	orr.w	r3, r3, #2
 8010328:	b29a      	uxth	r2, r3
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	835a      	strh	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 801032e:	e229      	b.n	8010784 <tcp_process+0x734>
    else if (flags & TCP_ACK) {
 8010330:	4b94      	ldr	r3, [pc, #592]	; (8010584 <tcp_process+0x534>)
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	f003 0310 	and.w	r3, r3, #16
 8010338:	2b00      	cmp	r3, #0
 801033a:	f000 8223 	beq.w	8010784 <tcp_process+0x734>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801033e:	4b92      	ldr	r3, [pc, #584]	; (8010588 <tcp_process+0x538>)
 8010340:	6818      	ldr	r0, [r3, #0]
 8010342:	4b92      	ldr	r3, [pc, #584]	; (801058c <tcp_process+0x53c>)
 8010344:	881b      	ldrh	r3, [r3, #0]
 8010346:	461a      	mov	r2, r3
 8010348:	4b91      	ldr	r3, [pc, #580]	; (8010590 <tcp_process+0x540>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801034e:	4b91      	ldr	r3, [pc, #580]	; (8010594 <tcp_process+0x544>)
 8010350:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8010352:	885b      	ldrh	r3, [r3, #2]
 8010354:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010356:	4a8f      	ldr	r2, [pc, #572]	; (8010594 <tcp_process+0x544>)
 8010358:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801035a:	8812      	ldrh	r2, [r2, #0]
 801035c:	b292      	uxth	r2, r2
 801035e:	9201      	str	r2, [sp, #4]
 8010360:	9300      	str	r3, [sp, #0]
 8010362:	4b8d      	ldr	r3, [pc, #564]	; (8010598 <tcp_process+0x548>)
 8010364:	4a8d      	ldr	r2, [pc, #564]	; (801059c <tcp_process+0x54c>)
 8010366:	f002 fca1 	bl	8012cac <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010370:	2b05      	cmp	r3, #5
 8010372:	f200 8207 	bhi.w	8010784 <tcp_process+0x734>
        pcb->rtime = 0;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2200      	movs	r2, #0
 801037a:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f002 fd0b 	bl	8012d98 <tcp_rexmit_rto>
    break;
 8010382:	e1ff      	b.n	8010784 <tcp_process+0x734>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8010384:	4b7f      	ldr	r3, [pc, #508]	; (8010584 <tcp_process+0x534>)
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	f003 0310 	and.w	r3, r3, #16
 801038c:	2b00      	cmp	r3, #0
 801038e:	f000 8094 	beq.w	80104ba <tcp_process+0x46a>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8010392:	4b7d      	ldr	r3, [pc, #500]	; (8010588 <tcp_process+0x538>)
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801039a:	1ad3      	subs	r3, r2, r3
 801039c:	3b01      	subs	r3, #1
 801039e:	2b00      	cmp	r3, #0
 80103a0:	db74      	blt.n	801048c <tcp_process+0x43c>
 80103a2:	4b79      	ldr	r3, [pc, #484]	; (8010588 <tcp_process+0x538>)
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103aa:	1ad3      	subs	r3, r2, r3
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	dc6d      	bgt.n	801048c <tcp_process+0x43c>
        pcb->state = ESTABLISHED;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2204      	movs	r2, #4
 80103b4:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d00b      	beq.n	80103d6 <tcp_process+0x386>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103c2:	699b      	ldr	r3, [r3, #24]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d106      	bne.n	80103d6 <tcp_process+0x386>
 80103c8:	4b75      	ldr	r3, [pc, #468]	; (80105a0 <tcp_process+0x550>)
 80103ca:	f240 3251 	movw	r2, #849	; 0x351
 80103ce:	4975      	ldr	r1, [pc, #468]	; (80105a4 <tcp_process+0x554>)
 80103d0:	4875      	ldr	r0, [pc, #468]	; (80105a8 <tcp_process+0x558>)
 80103d2:	f006 f975 	bl	80166c0 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d102      	bne.n	80103e4 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80103de:	23fa      	movs	r3, #250	; 0xfa
 80103e0:	76bb      	strb	r3, [r7, #26]
 80103e2:	e014      	b.n	801040e <tcp_process+0x3be>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7fd fc4f 	bl	800dc88 <tcp_backlog_accepted>
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103ee:	699b      	ldr	r3, [r3, #24]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d00a      	beq.n	801040a <tcp_process+0x3ba>
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103f8:	699b      	ldr	r3, [r3, #24]
 80103fa:	687a      	ldr	r2, [r7, #4]
 80103fc:	6910      	ldr	r0, [r2, #16]
 80103fe:	2200      	movs	r2, #0
 8010400:	6879      	ldr	r1, [r7, #4]
 8010402:	4798      	blx	r3
 8010404:	4603      	mov	r3, r0
 8010406:	76bb      	strb	r3, [r7, #26]
 8010408:	e001      	b.n	801040e <tcp_process+0x3be>
 801040a:	23f0      	movs	r3, #240	; 0xf0
 801040c:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 801040e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d00a      	beq.n	801042c <tcp_process+0x3dc>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8010416:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801041a:	f113 0f0d 	cmn.w	r3, #13
 801041e:	d002      	beq.n	8010426 <tcp_process+0x3d6>
            tcp_abort(pcb);
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f7fd fed1 	bl	800e1c8 <tcp_abort>
          }
          return ERR_ABRT;
 8010426:	f06f 030c 	mvn.w	r3, #12
 801042a:	e1b9      	b.n	80107a0 <tcp_process+0x750>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f000 fa3d 	bl	80108ac <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8010432:	4b5e      	ldr	r3, [pc, #376]	; (80105ac <tcp_process+0x55c>)
 8010434:	881b      	ldrh	r3, [r3, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d005      	beq.n	8010446 <tcp_process+0x3f6>
          recv_acked--;
 801043a:	4b5c      	ldr	r3, [pc, #368]	; (80105ac <tcp_process+0x55c>)
 801043c:	881b      	ldrh	r3, [r3, #0]
 801043e:	3b01      	subs	r3, #1
 8010440:	b29a      	uxth	r2, r3
 8010442:	4b5a      	ldr	r3, [pc, #360]	; (80105ac <tcp_process+0x55c>)
 8010444:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801044a:	005b      	lsls	r3, r3, #1
 801044c:	f241 121c 	movw	r2, #4380	; 0x111c
 8010450:	429a      	cmp	r2, r3
 8010452:	bf38      	it	cc
 8010454:	461a      	movcc	r2, r3
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	4293      	cmp	r3, r2
 801045e:	bf28      	it	cs
 8010460:	4613      	movcs	r3, r2
 8010462:	b29a      	uxth	r2, r3
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 801046a:	4b51      	ldr	r3, [pc, #324]	; (80105b0 <tcp_process+0x560>)
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	f003 0320 	and.w	r3, r3, #32
 8010472:	2b00      	cmp	r3, #0
 8010474:	d034      	beq.n	80104e0 <tcp_process+0x490>
          tcp_ack_now(pcb);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	8b5b      	ldrh	r3, [r3, #26]
 801047a:	f043 0302 	orr.w	r3, r3, #2
 801047e:	b29a      	uxth	r2, r3
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2207      	movs	r2, #7
 8010488:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 801048a:	e029      	b.n	80104e0 <tcp_process+0x490>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801048c:	4b3e      	ldr	r3, [pc, #248]	; (8010588 <tcp_process+0x538>)
 801048e:	6818      	ldr	r0, [r3, #0]
 8010490:	4b3e      	ldr	r3, [pc, #248]	; (801058c <tcp_process+0x53c>)
 8010492:	881b      	ldrh	r3, [r3, #0]
 8010494:	461a      	mov	r2, r3
 8010496:	4b3e      	ldr	r3, [pc, #248]	; (8010590 <tcp_process+0x540>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801049c:	4b3d      	ldr	r3, [pc, #244]	; (8010594 <tcp_process+0x544>)
 801049e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80104a0:	885b      	ldrh	r3, [r3, #2]
 80104a2:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104a4:	4a3b      	ldr	r2, [pc, #236]	; (8010594 <tcp_process+0x544>)
 80104a6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80104a8:	8812      	ldrh	r2, [r2, #0]
 80104aa:	b292      	uxth	r2, r2
 80104ac:	9201      	str	r2, [sp, #4]
 80104ae:	9300      	str	r3, [sp, #0]
 80104b0:	4b39      	ldr	r3, [pc, #228]	; (8010598 <tcp_process+0x548>)
 80104b2:	4a3a      	ldr	r2, [pc, #232]	; (801059c <tcp_process+0x54c>)
 80104b4:	f002 fbfa 	bl	8012cac <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80104b8:	e166      	b.n	8010788 <tcp_process+0x738>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80104ba:	4b32      	ldr	r3, [pc, #200]	; (8010584 <tcp_process+0x534>)
 80104bc:	781b      	ldrb	r3, [r3, #0]
 80104be:	f003 0302 	and.w	r3, r3, #2
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	f000 8160 	beq.w	8010788 <tcp_process+0x738>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104cc:	1e5a      	subs	r2, r3, #1
 80104ce:	4b30      	ldr	r3, [pc, #192]	; (8010590 <tcp_process+0x540>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	f040 8158 	bne.w	8010788 <tcp_process+0x738>
      tcp_rexmit(pcb);
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f002 fc93 	bl	8012e04 <tcp_rexmit>
    break;
 80104de:	e153      	b.n	8010788 <tcp_process+0x738>
 80104e0:	e152      	b.n	8010788 <tcp_process+0x738>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 f9e2 	bl	80108ac <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80104e8:	4b31      	ldr	r3, [pc, #196]	; (80105b0 <tcp_process+0x560>)
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	f003 0320 	and.w	r3, r3, #32
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	f000 814b 	beq.w	801078c <tcp_process+0x73c>
      tcp_ack_now(pcb);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	8b5b      	ldrh	r3, [r3, #26]
 80104fa:	f043 0302 	orr.w	r3, r3, #2
 80104fe:	b29a      	uxth	r2, r3
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	835a      	strh	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2207      	movs	r2, #7
 8010508:	751a      	strb	r2, [r3, #20]
    }
    break;
 801050a:	e13f      	b.n	801078c <tcp_process+0x73c>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f000 f9cd 	bl	80108ac <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8010512:	4b27      	ldr	r3, [pc, #156]	; (80105b0 <tcp_process+0x560>)
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	f003 0320 	and.w	r3, r3, #32
 801051a:	2b00      	cmp	r3, #0
 801051c:	d070      	beq.n	8010600 <tcp_process+0x5b0>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801051e:	4b19      	ldr	r3, [pc, #100]	; (8010584 <tcp_process+0x534>)
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	f003 0310 	and.w	r3, r3, #16
 8010526:	2b00      	cmp	r3, #0
 8010528:	d05f      	beq.n	80105ea <tcp_process+0x59a>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801052e:	4b16      	ldr	r3, [pc, #88]	; (8010588 <tcp_process+0x538>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	429a      	cmp	r2, r3
 8010534:	d159      	bne.n	80105ea <tcp_process+0x59a>
          pcb->unsent == NULL) {
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801053a:	2b00      	cmp	r3, #0
 801053c:	d155      	bne.n	80105ea <tcp_process+0x59a>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	8b5b      	ldrh	r3, [r3, #26]
 8010542:	f043 0302 	orr.w	r3, r3, #2
 8010546:	b29a      	uxth	r2, r3
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f7fe fec1 	bl	800f2d4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010552:	4b18      	ldr	r3, [pc, #96]	; (80105b4 <tcp_process+0x564>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	687a      	ldr	r2, [r7, #4]
 8010558:	429a      	cmp	r2, r3
 801055a:	d105      	bne.n	8010568 <tcp_process+0x518>
 801055c:	4b15      	ldr	r3, [pc, #84]	; (80105b4 <tcp_process+0x564>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	68db      	ldr	r3, [r3, #12]
 8010562:	4a14      	ldr	r2, [pc, #80]	; (80105b4 <tcp_process+0x564>)
 8010564:	6013      	str	r3, [r2, #0]
 8010566:	e02d      	b.n	80105c4 <tcp_process+0x574>
 8010568:	4b12      	ldr	r3, [pc, #72]	; (80105b4 <tcp_process+0x564>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	617b      	str	r3, [r7, #20]
 801056e:	e026      	b.n	80105be <tcp_process+0x56e>
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	68db      	ldr	r3, [r3, #12]
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	429a      	cmp	r2, r3
 8010578:	d11e      	bne.n	80105b8 <tcp_process+0x568>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	68da      	ldr	r2, [r3, #12]
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	60da      	str	r2, [r3, #12]
 8010582:	e01f      	b.n	80105c4 <tcp_process+0x574>
 8010584:	20004170 	.word	0x20004170
 8010588:	20004168 	.word	0x20004168
 801058c:	2000416e 	.word	0x2000416e
 8010590:	20004164 	.word	0x20004164
 8010594:	20004154 	.word	0x20004154
 8010598:	200074fc 	.word	0x200074fc
 801059c:	20007500 	.word	0x20007500
 80105a0:	080191a4 	.word	0x080191a4
 80105a4:	080193a8 	.word	0x080193a8
 80105a8:	080191e8 	.word	0x080191e8
 80105ac:	2000416c 	.word	0x2000416c
 80105b0:	20004171 	.word	0x20004171
 80105b4:	2000dc54 	.word	0x2000dc54
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	68db      	ldr	r3, [r3, #12]
 80105bc:	617b      	str	r3, [r7, #20]
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d1d5      	bne.n	8010570 <tcp_process+0x520>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	60da      	str	r2, [r3, #12]
 80105ca:	4b77      	ldr	r3, [pc, #476]	; (80107a8 <tcp_process+0x758>)
 80105cc:	2201      	movs	r2, #1
 80105ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	220a      	movs	r2, #10
 80105d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80105d6:	4b75      	ldr	r3, [pc, #468]	; (80107ac <tcp_process+0x75c>)
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	60da      	str	r2, [r3, #12]
 80105de:	4a73      	ldr	r2, [pc, #460]	; (80107ac <tcp_process+0x75c>)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6013      	str	r3, [r2, #0]
 80105e4:	f002 fdb2 	bl	801314c <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 80105e8:	e0d2      	b.n	8010790 <tcp_process+0x740>
        tcp_ack_now(pcb);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	8b5b      	ldrh	r3, [r3, #26]
 80105ee:	f043 0302 	orr.w	r3, r3, #2
 80105f2:	b29a      	uxth	r2, r3
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSING;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2208      	movs	r2, #8
 80105fc:	751a      	strb	r2, [r3, #20]
    break;
 80105fe:	e0c7      	b.n	8010790 <tcp_process+0x740>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010600:	4b6b      	ldr	r3, [pc, #428]	; (80107b0 <tcp_process+0x760>)
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	f003 0310 	and.w	r3, r3, #16
 8010608:	2b00      	cmp	r3, #0
 801060a:	f000 80c1 	beq.w	8010790 <tcp_process+0x740>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010612:	4b68      	ldr	r3, [pc, #416]	; (80107b4 <tcp_process+0x764>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	429a      	cmp	r2, r3
 8010618:	f040 80ba 	bne.w	8010790 <tcp_process+0x740>
               pcb->unsent == NULL) {
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010620:	2b00      	cmp	r3, #0
 8010622:	f040 80b5 	bne.w	8010790 <tcp_process+0x740>
      pcb->state = FIN_WAIT_2;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2206      	movs	r2, #6
 801062a:	751a      	strb	r2, [r3, #20]
    break;
 801062c:	e0b0      	b.n	8010790 <tcp_process+0x740>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f000 f93c 	bl	80108ac <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8010634:	4b60      	ldr	r3, [pc, #384]	; (80107b8 <tcp_process+0x768>)
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	f003 0320 	and.w	r3, r3, #32
 801063c:	2b00      	cmp	r3, #0
 801063e:	f000 80a9 	beq.w	8010794 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	8b5b      	ldrh	r3, [r3, #26]
 8010646:	f043 0302 	orr.w	r3, r3, #2
 801064a:	b29a      	uxth	r2, r3
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	835a      	strh	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f7fe fe3f 	bl	800f2d4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010656:	4b59      	ldr	r3, [pc, #356]	; (80107bc <tcp_process+0x76c>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	687a      	ldr	r2, [r7, #4]
 801065c:	429a      	cmp	r2, r3
 801065e:	d105      	bne.n	801066c <tcp_process+0x61c>
 8010660:	4b56      	ldr	r3, [pc, #344]	; (80107bc <tcp_process+0x76c>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	4a55      	ldr	r2, [pc, #340]	; (80107bc <tcp_process+0x76c>)
 8010668:	6013      	str	r3, [r2, #0]
 801066a:	e013      	b.n	8010694 <tcp_process+0x644>
 801066c:	4b53      	ldr	r3, [pc, #332]	; (80107bc <tcp_process+0x76c>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	613b      	str	r3, [r7, #16]
 8010672:	e00c      	b.n	801068e <tcp_process+0x63e>
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	687a      	ldr	r2, [r7, #4]
 801067a:	429a      	cmp	r2, r3
 801067c:	d104      	bne.n	8010688 <tcp_process+0x638>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	68da      	ldr	r2, [r3, #12]
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	60da      	str	r2, [r3, #12]
 8010686:	e005      	b.n	8010694 <tcp_process+0x644>
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	68db      	ldr	r3, [r3, #12]
 801068c:	613b      	str	r3, [r7, #16]
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d1ef      	bne.n	8010674 <tcp_process+0x624>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2200      	movs	r2, #0
 8010698:	60da      	str	r2, [r3, #12]
 801069a:	4b43      	ldr	r3, [pc, #268]	; (80107a8 <tcp_process+0x758>)
 801069c:	2201      	movs	r2, #1
 801069e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	220a      	movs	r2, #10
 80106a4:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80106a6:	4b41      	ldr	r3, [pc, #260]	; (80107ac <tcp_process+0x75c>)
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	60da      	str	r2, [r3, #12]
 80106ae:	4a3f      	ldr	r2, [pc, #252]	; (80107ac <tcp_process+0x75c>)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6013      	str	r3, [r2, #0]
 80106b4:	f002 fd4a 	bl	801314c <tcp_timer_needed>
    }
    break;
 80106b8:	e06c      	b.n	8010794 <tcp_process+0x744>
  case CLOSING:
    tcp_receive(pcb);
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f000 f8f6 	bl	80108ac <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80106c0:	4b3b      	ldr	r3, [pc, #236]	; (80107b0 <tcp_process+0x760>)
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	f003 0310 	and.w	r3, r3, #16
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d065      	beq.n	8010798 <tcp_process+0x748>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80106d0:	4b38      	ldr	r3, [pc, #224]	; (80107b4 <tcp_process+0x764>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d15f      	bne.n	8010798 <tcp_process+0x748>
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d15b      	bne.n	8010798 <tcp_process+0x748>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f7fe fdf7 	bl	800f2d4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80106e6:	4b35      	ldr	r3, [pc, #212]	; (80107bc <tcp_process+0x76c>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	687a      	ldr	r2, [r7, #4]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d105      	bne.n	80106fc <tcp_process+0x6ac>
 80106f0:	4b32      	ldr	r3, [pc, #200]	; (80107bc <tcp_process+0x76c>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	68db      	ldr	r3, [r3, #12]
 80106f6:	4a31      	ldr	r2, [pc, #196]	; (80107bc <tcp_process+0x76c>)
 80106f8:	6013      	str	r3, [r2, #0]
 80106fa:	e013      	b.n	8010724 <tcp_process+0x6d4>
 80106fc:	4b2f      	ldr	r3, [pc, #188]	; (80107bc <tcp_process+0x76c>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	60fb      	str	r3, [r7, #12]
 8010702:	e00c      	b.n	801071e <tcp_process+0x6ce>
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	68db      	ldr	r3, [r3, #12]
 8010708:	687a      	ldr	r2, [r7, #4]
 801070a:	429a      	cmp	r2, r3
 801070c:	d104      	bne.n	8010718 <tcp_process+0x6c8>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	68da      	ldr	r2, [r3, #12]
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	60da      	str	r2, [r3, #12]
 8010716:	e005      	b.n	8010724 <tcp_process+0x6d4>
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	60fb      	str	r3, [r7, #12]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d1ef      	bne.n	8010704 <tcp_process+0x6b4>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2200      	movs	r2, #0
 8010728:	60da      	str	r2, [r3, #12]
 801072a:	4b1f      	ldr	r3, [pc, #124]	; (80107a8 <tcp_process+0x758>)
 801072c:	2201      	movs	r2, #1
 801072e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	220a      	movs	r2, #10
 8010734:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8010736:	4b1d      	ldr	r3, [pc, #116]	; (80107ac <tcp_process+0x75c>)
 8010738:	681a      	ldr	r2, [r3, #0]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	60da      	str	r2, [r3, #12]
 801073e:	4a1b      	ldr	r2, [pc, #108]	; (80107ac <tcp_process+0x75c>)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6013      	str	r3, [r2, #0]
 8010744:	f002 fd02 	bl	801314c <tcp_timer_needed>
    }
    break;
 8010748:	e026      	b.n	8010798 <tcp_process+0x748>
  case LAST_ACK:
    tcp_receive(pcb);
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 f8ae 	bl	80108ac <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010750:	4b17      	ldr	r3, [pc, #92]	; (80107b0 <tcp_process+0x760>)
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	f003 0310 	and.w	r3, r3, #16
 8010758:	2b00      	cmp	r3, #0
 801075a:	d01f      	beq.n	801079c <tcp_process+0x74c>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010760:	4b14      	ldr	r3, [pc, #80]	; (80107b4 <tcp_process+0x764>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	429a      	cmp	r2, r3
 8010766:	d119      	bne.n	801079c <tcp_process+0x74c>
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801076c:	2b00      	cmp	r3, #0
 801076e:	d115      	bne.n	801079c <tcp_process+0x74c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8010770:	4b11      	ldr	r3, [pc, #68]	; (80107b8 <tcp_process+0x768>)
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	f043 0310 	orr.w	r3, r3, #16
 8010778:	b2da      	uxtb	r2, r3
 801077a:	4b0f      	ldr	r3, [pc, #60]	; (80107b8 <tcp_process+0x768>)
 801077c:	701a      	strb	r2, [r3, #0]
    }
    break;
 801077e:	e00d      	b.n	801079c <tcp_process+0x74c>
  default:
    break;
 8010780:	bf00      	nop
 8010782:	e00c      	b.n	801079e <tcp_process+0x74e>
    break;
 8010784:	bf00      	nop
 8010786:	e00a      	b.n	801079e <tcp_process+0x74e>
    break;
 8010788:	bf00      	nop
 801078a:	e008      	b.n	801079e <tcp_process+0x74e>
    break;
 801078c:	bf00      	nop
 801078e:	e006      	b.n	801079e <tcp_process+0x74e>
    break;
 8010790:	bf00      	nop
 8010792:	e004      	b.n	801079e <tcp_process+0x74e>
    break;
 8010794:	bf00      	nop
 8010796:	e002      	b.n	801079e <tcp_process+0x74e>
    break;
 8010798:	bf00      	nop
 801079a:	e000      	b.n	801079e <tcp_process+0x74e>
    break;
 801079c:	bf00      	nop
  }
  return ERR_OK;
 801079e:	2300      	movs	r3, #0
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3720      	adds	r7, #32
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	2000dc50 	.word	0x2000dc50
 80107ac:	2000dc64 	.word	0x2000dc64
 80107b0:	20004170 	.word	0x20004170
 80107b4:	20004168 	.word	0x20004168
 80107b8:	20004171 	.word	0x20004171
 80107bc:	2000dc54 	.word	0x2000dc54

080107c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80107c0:	b590      	push	{r4, r7, lr}
 80107c2:	b085      	sub	sp, #20
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	68db      	ldr	r3, [r3, #12]
 80107ce:	899b      	ldrh	r3, [r3, #12]
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7fb fd10 	bl	800c1f8 <lwip_htons>
 80107d8:	4603      	mov	r3, r0
 80107da:	f003 0301 	and.w	r3, r3, #1
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d027      	beq.n	8010832 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80107e2:	6838      	ldr	r0, [r7, #0]
 80107e4:	f7fe fb03 	bl	800edee <tcp_segs_free>
    next = NULL;
 80107e8:	2300      	movs	r3, #0
 80107ea:	603b      	str	r3, [r7, #0]
 80107ec:	e055      	b.n	801089a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	68db      	ldr	r3, [r3, #12]
 80107f2:	899b      	ldrh	r3, [r3, #12]
 80107f4:	b29b      	uxth	r3, r3
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7fb fcfe 	bl	800c1f8 <lwip_htons>
 80107fc:	4603      	mov	r3, r0
 80107fe:	f003 0301 	and.w	r3, r3, #1
 8010802:	2b00      	cmp	r3, #0
 8010804:	d00d      	beq.n	8010822 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	68db      	ldr	r3, [r3, #12]
 801080a:	899b      	ldrh	r3, [r3, #12]
 801080c:	b29c      	uxth	r4, r3
 801080e:	2001      	movs	r0, #1
 8010810:	f7fb fcf2 	bl	800c1f8 <lwip_htons>
 8010814:	4603      	mov	r3, r0
 8010816:	461a      	mov	r2, r3
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	68db      	ldr	r3, [r3, #12]
 801081c:	4322      	orrs	r2, r4
 801081e:	b292      	uxth	r2, r2
 8010820:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801082c:	68f8      	ldr	r0, [r7, #12]
 801082e:	f7fe faf2 	bl	800ee16 <tcp_seg_free>
    while (next &&
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d00e      	beq.n	8010856 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	891b      	ldrh	r3, [r3, #8]
 801083c:	461a      	mov	r2, r3
 801083e:	4b1a      	ldr	r3, [pc, #104]	; (80108a8 <tcp_oos_insert_segment+0xe8>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	441a      	add	r2, r3
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	68db      	ldr	r3, [r3, #12]
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	6839      	ldr	r1, [r7, #0]
 801084c:	8909      	ldrh	r1, [r1, #8]
 801084e:	440b      	add	r3, r1
 8010850:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010852:	2b00      	cmp	r3, #0
 8010854:	dacb      	bge.n	80107ee <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d01e      	beq.n	801089a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	891b      	ldrh	r3, [r3, #8]
 8010860:	461a      	mov	r2, r3
 8010862:	4b11      	ldr	r3, [pc, #68]	; (80108a8 <tcp_oos_insert_segment+0xe8>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	441a      	add	r2, r3
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	68db      	ldr	r3, [r3, #12]
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010870:	2b00      	cmp	r3, #0
 8010872:	dd12      	ble.n	801089a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	68db      	ldr	r3, [r3, #12]
 8010878:	685b      	ldr	r3, [r3, #4]
 801087a:	b29a      	uxth	r2, r3
 801087c:	4b0a      	ldr	r3, [pc, #40]	; (80108a8 <tcp_oos_insert_segment+0xe8>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	b29b      	uxth	r3, r3
 8010882:	1ad3      	subs	r3, r2, r3
 8010884:	b29a      	uxth	r2, r3
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	685a      	ldr	r2, [r3, #4]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	891b      	ldrh	r3, [r3, #8]
 8010892:	4619      	mov	r1, r3
 8010894:	4610      	mov	r0, r2
 8010896:	f7fc fd4f 	bl	800d338 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	683a      	ldr	r2, [r7, #0]
 801089e:	601a      	str	r2, [r3, #0]
}
 80108a0:	bf00      	nop
 80108a2:	3714      	adds	r7, #20
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd90      	pop	{r4, r7, pc}
 80108a8:	20004164 	.word	0x20004164

080108ac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80108ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108ae:	b08d      	sub	sp, #52	; 0x34
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 80108b4:	2300      	movs	r3, #0
 80108b6:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	7d1b      	ldrb	r3, [r3, #20]
 80108bc:	2b03      	cmp	r3, #3
 80108be:	d806      	bhi.n	80108ce <tcp_receive+0x22>
 80108c0:	4ba6      	ldr	r3, [pc, #664]	; (8010b5c <tcp_receive+0x2b0>)
 80108c2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80108c6:	49a6      	ldr	r1, [pc, #664]	; (8010b60 <tcp_receive+0x2b4>)
 80108c8:	48a6      	ldr	r0, [pc, #664]	; (8010b64 <tcp_receive+0x2b8>)
 80108ca:	f005 fef9 	bl	80166c0 <iprintf>

  if (flags & TCP_ACK) {
 80108ce:	4ba6      	ldr	r3, [pc, #664]	; (8010b68 <tcp_receive+0x2bc>)
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	f003 0310 	and.w	r3, r3, #16
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	f000 82bf 	beq.w	8010e5a <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80108e2:	461a      	mov	r2, r3
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108e8:	4413      	add	r3, r2
 80108ea:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108f0:	4b9e      	ldr	r3, [pc, #632]	; (8010b6c <tcp_receive+0x2c0>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	1ad3      	subs	r3, r2, r3
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	db1b      	blt.n	8010932 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108fe:	4b9b      	ldr	r3, [pc, #620]	; (8010b6c <tcp_receive+0x2c0>)
 8010900:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010902:	429a      	cmp	r2, r3
 8010904:	d106      	bne.n	8010914 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801090a:	4b99      	ldr	r3, [pc, #612]	; (8010b70 <tcp_receive+0x2c4>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	2b00      	cmp	r3, #0
 8010912:	db0e      	blt.n	8010932 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010918:	4b95      	ldr	r3, [pc, #596]	; (8010b70 <tcp_receive+0x2c4>)
 801091a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801091c:	429a      	cmp	r2, r3
 801091e:	d141      	bne.n	80109a4 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010920:	4b94      	ldr	r3, [pc, #592]	; (8010b74 <tcp_receive+0x2c8>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	89db      	ldrh	r3, [r3, #14]
 8010926:	b29a      	uxth	r2, r3
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801092e:	429a      	cmp	r2, r3
 8010930:	d938      	bls.n	80109a4 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010932:	4b90      	ldr	r3, [pc, #576]	; (8010b74 <tcp_receive+0x2c8>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	89db      	ldrh	r3, [r3, #14]
 8010938:	b29a      	uxth	r2, r3
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801094c:	429a      	cmp	r2, r3
 801094e:	d205      	bcs.n	801095c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 801095c:	4b83      	ldr	r3, [pc, #524]	; (8010b6c <tcp_receive+0x2c0>)
 801095e:	681a      	ldr	r2, [r3, #0]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8010964:	4b82      	ldr	r3, [pc, #520]	; (8010b70 <tcp_receive+0x2c4>)
 8010966:	681a      	ldr	r2, [r3, #0]
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010972:	2b00      	cmp	r3, #0
 8010974:	d10d      	bne.n	8010992 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801097c:	2b00      	cmp	r3, #0
 801097e:	d111      	bne.n	80109a4 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2200      	movs	r2, #0
 8010984:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
          pcb->persist_backoff = 1;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2201      	movs	r2, #1
 801098c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8010990:	e008      	b.n	80109a4 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010998:	2b00      	cmp	r3, #0
 801099a:	d003      	beq.n	80109a4 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2200      	movs	r2, #0
 80109a0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80109a4:	4b72      	ldr	r3, [pc, #456]	; (8010b70 <tcp_receive+0x2c4>)
 80109a6:	681a      	ldr	r2, [r3, #0]
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109ac:	1ad3      	subs	r3, r2, r3
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	dc53      	bgt.n	8010a5a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 80109b2:	4b71      	ldr	r3, [pc, #452]	; (8010b78 <tcp_receive+0x2cc>)
 80109b4:	881b      	ldrh	r3, [r3, #0]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d146      	bne.n	8010a48 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80109c4:	4413      	add	r3, r2
 80109c6:	697a      	ldr	r2, [r7, #20]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d13d      	bne.n	8010a48 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	db38      	blt.n	8010a48 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109da:	4b65      	ldr	r3, [pc, #404]	; (8010b70 <tcp_receive+0x2c4>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	429a      	cmp	r2, r3
 80109e0:	d132      	bne.n	8010a48 <tcp_receive+0x19c>
              found_dupack = 1;
 80109e2:	2301      	movs	r3, #1
 80109e4:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80109ec:	2bff      	cmp	r3, #255	; 0xff
 80109ee:	d007      	beq.n	8010a00 <tcp_receive+0x154>
                ++pcb->dupacks;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80109f6:	3301      	adds	r3, #1
 80109f8:	b2da      	uxtb	r2, r3
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a06:	2b03      	cmp	r3, #3
 8010a08:	d916      	bls.n	8010a38 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a14:	4413      	add	r3, r2
 8010a16:	b29a      	uxth	r2, r3
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d912      	bls.n	8010a48 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a2c:	4413      	add	r3, r2
 8010a2e:	b29a      	uxth	r2, r3
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010a36:	e007      	b.n	8010a48 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a3e:	2b03      	cmp	r3, #3
 8010a40:	d102      	bne.n	8010a48 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f002 fa2e 	bl	8012ea4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010a48:	69fb      	ldr	r3, [r7, #28]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	f040 8169 	bne.w	8010d22 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2200      	movs	r2, #0
 8010a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010a58:	e163      	b.n	8010d22 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8010a5a:	4b45      	ldr	r3, [pc, #276]	; (8010b70 <tcp_receive+0x2c4>)
 8010a5c:	681a      	ldr	r2, [r3, #0]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a62:	1ad3      	subs	r3, r2, r3
 8010a64:	3b01      	subs	r3, #1
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	f2c0 8107 	blt.w	8010c7a <tcp_receive+0x3ce>
 8010a6c:	4b40      	ldr	r3, [pc, #256]	; (8010b70 <tcp_receive+0x2c4>)
 8010a6e:	681a      	ldr	r2, [r3, #0]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a74:	1ad3      	subs	r3, r2, r3
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	f300 80ff 	bgt.w	8010c7a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	8b5b      	ldrh	r3, [r3, #26]
 8010a80:	f003 0304 	and.w	r3, r3, #4
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d00c      	beq.n	8010aa2 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	8b5b      	ldrh	r3, [r3, #26]
 8010a8c:	f023 0304 	bic.w	r3, r3, #4
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ab0:	10db      	asrs	r3, r3, #3
 8010ab2:	b21b      	sxth	r3, r3
 8010ab4:	b29a      	uxth	r2, r3
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	4413      	add	r3, r2
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	b21a      	sxth	r2, r3
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2200      	movs	r2, #0
 8010ace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010ad2:	4b27      	ldr	r3, [pc, #156]	; (8010b70 <tcp_receive+0x2c4>)
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	7d1b      	ldrb	r3, [r3, #20]
 8010ade:	2b03      	cmp	r3, #3
 8010ae0:	f240 8094 	bls.w	8010c0c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d216      	bcs.n	8010b22 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010afe:	4413      	add	r3, r2
 8010b00:	b29a      	uxth	r2, r3
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d97f      	bls.n	8010c0c <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b16:	4413      	add	r3, r2
 8010b18:	b29a      	uxth	r2, r3
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010b20:	e074      	b.n	8010c0c <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b32:	fb03 f301 	mul.w	r3, r3, r1
 8010b36:	6879      	ldr	r1, [r7, #4]
 8010b38:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8010b3c:	fb93 f3f1 	sdiv	r3, r3, r1
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	4413      	add	r3, r2
 8010b44:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b4c:	8a7a      	ldrh	r2, [r7, #18]
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d95c      	bls.n	8010c0c <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	8a7a      	ldrh	r2, [r7, #18]
 8010b56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8010b5a:	e057      	b.n	8010c0c <tcp_receive+0x360>
 8010b5c:	080191a4 	.word	0x080191a4
 8010b60:	080193c8 	.word	0x080193c8
 8010b64:	080191e8 	.word	0x080191e8
 8010b68:	20004170 	.word	0x20004170
 8010b6c:	20004164 	.word	0x20004164
 8010b70:	20004168 	.word	0x20004168
 8010b74:	20004154 	.word	0x20004154
 8010b78:	2000416e 	.word	0x2000416e
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b80:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8010b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fc fddc 	bl	800d754 <pbuf_clen>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	429c      	cmp	r4, r3
 8010ba0:	d206      	bcs.n	8010bb0 <tcp_receive+0x304>
 8010ba2:	4b70      	ldr	r3, [pc, #448]	; (8010d64 <tcp_receive+0x4b8>)
 8010ba4:	f240 429e 	movw	r2, #1182	; 0x49e
 8010ba8:	496f      	ldr	r1, [pc, #444]	; (8010d68 <tcp_receive+0x4bc>)
 8010baa:	4870      	ldr	r0, [pc, #448]	; (8010d6c <tcp_receive+0x4c0>)
 8010bac:	f005 fd88 	bl	80166c0 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8010bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7fc fdcd 	bl	800d754 <pbuf_clen>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	461a      	mov	r2, r3
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010bc4:	1a9b      	subs	r3, r3, r2
 8010bc6:	b29a      	uxth	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8010bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd0:	891a      	ldrh	r2, [r3, #8]
 8010bd2:	4b67      	ldr	r3, [pc, #412]	; (8010d70 <tcp_receive+0x4c4>)
 8010bd4:	881b      	ldrh	r3, [r3, #0]
 8010bd6:	4413      	add	r3, r2
 8010bd8:	b29a      	uxth	r2, r3
 8010bda:	4b65      	ldr	r3, [pc, #404]	; (8010d70 <tcp_receive+0x4c4>)
 8010bdc:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8010bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010be0:	f7fe f919 	bl	800ee16 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00e      	beq.n	8010c0c <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d10a      	bne.n	8010c0c <tcp_receive+0x360>
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d106      	bne.n	8010c0c <tcp_receive+0x360>
 8010bfe:	4b59      	ldr	r3, [pc, #356]	; (8010d64 <tcp_receive+0x4b8>)
 8010c00:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8010c04:	495b      	ldr	r1, [pc, #364]	; (8010d74 <tcp_receive+0x4c8>)
 8010c06:	4859      	ldr	r0, [pc, #356]	; (8010d6c <tcp_receive+0x4c0>)
 8010c08:	f005 fd5a 	bl	80166c0 <iprintf>
      while (pcb->unacked != NULL &&
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d022      	beq.n	8010c5a <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c18:	68db      	ldr	r3, [r3, #12]
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7fb faf9 	bl	800c214 <lwip_htonl>
 8010c22:	4604      	mov	r4, r0
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c28:	891b      	ldrh	r3, [r3, #8]
 8010c2a:	461d      	mov	r5, r3
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c30:	68db      	ldr	r3, [r3, #12]
 8010c32:	899b      	ldrh	r3, [r3, #12]
 8010c34:	b29b      	uxth	r3, r3
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7fb fade 	bl	800c1f8 <lwip_htons>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	f003 0303 	and.w	r3, r3, #3
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d001      	beq.n	8010c4a <tcp_receive+0x39e>
 8010c46:	2301      	movs	r3, #1
 8010c48:	e000      	b.n	8010c4c <tcp_receive+0x3a0>
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	442b      	add	r3, r5
 8010c4e:	18e2      	adds	r2, r4, r3
 8010c50:	4b49      	ldr	r3, [pc, #292]	; (8010d78 <tcp_receive+0x4cc>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	dd90      	ble.n	8010b7c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d104      	bne.n	8010c6c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c68:	861a      	strh	r2, [r3, #48]	; 0x30
 8010c6a:	e002      	b.n	8010c72 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2200      	movs	r2, #0
 8010c76:	771a      	strb	r2, [r3, #28]
 8010c78:	e002      	b.n	8010c80 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f001 fd30 	bl	80126e0 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8010c80:	e04f      	b.n	8010d22 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c8c:	681a      	ldr	r2, [r3, #0]
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d103      	bne.n	8010ca2 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8010ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7fc fd51 	bl	800d754 <pbuf_clen>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	429c      	cmp	r4, r3
 8010cb6:	d206      	bcs.n	8010cc6 <tcp_receive+0x41a>
 8010cb8:	4b2a      	ldr	r3, [pc, #168]	; (8010d64 <tcp_receive+0x4b8>)
 8010cba:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010cbe:	492a      	ldr	r1, [pc, #168]	; (8010d68 <tcp_receive+0x4bc>)
 8010cc0:	482a      	ldr	r0, [pc, #168]	; (8010d6c <tcp_receive+0x4c0>)
 8010cc2:	f005 fcfd 	bl	80166c0 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8010cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7fc fd42 	bl	800d754 <pbuf_clen>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	461a      	mov	r2, r3
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010cda:	1a9b      	subs	r3, r3, r2
 8010cdc:	b29a      	uxth	r2, r3
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8010ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce6:	891a      	ldrh	r2, [r3, #8]
 8010ce8:	4b21      	ldr	r3, [pc, #132]	; (8010d70 <tcp_receive+0x4c4>)
 8010cea:	881b      	ldrh	r3, [r3, #0]
 8010cec:	4413      	add	r3, r2
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	4b1f      	ldr	r3, [pc, #124]	; (8010d70 <tcp_receive+0x4c4>)
 8010cf2:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8010cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010cf6:	f7fe f88e 	bl	800ee16 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d00e      	beq.n	8010d22 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d10a      	bne.n	8010d22 <tcp_receive+0x476>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d106      	bne.n	8010d22 <tcp_receive+0x476>
 8010d14:	4b13      	ldr	r3, [pc, #76]	; (8010d64 <tcp_receive+0x4b8>)
 8010d16:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8010d1a:	4916      	ldr	r1, [pc, #88]	; (8010d74 <tcp_receive+0x4c8>)
 8010d1c:	4813      	ldr	r0, [pc, #76]	; (8010d6c <tcp_receive+0x4c0>)
 8010d1e:	f005 fccf 	bl	80166c0 <iprintf>
    while (pcb->unsent != NULL &&
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d036      	beq.n	8010d98 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010d2a:	4b13      	ldr	r3, [pc, #76]	; (8010d78 <tcp_receive+0x4cc>)
 8010d2c:	681c      	ldr	r4, [r3, #0]
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7fb fa6c 	bl	800c214 <lwip_htonl>
 8010d3c:	4605      	mov	r5, r0
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d42:	891b      	ldrh	r3, [r3, #8]
 8010d44:	461e      	mov	r6, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d4a:	68db      	ldr	r3, [r3, #12]
 8010d4c:	899b      	ldrh	r3, [r3, #12]
 8010d4e:	b29b      	uxth	r3, r3
 8010d50:	4618      	mov	r0, r3
 8010d52:	f7fb fa51 	bl	800c1f8 <lwip_htons>
 8010d56:	4603      	mov	r3, r0
 8010d58:	f003 0303 	and.w	r3, r3, #3
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d00d      	beq.n	8010d7c <tcp_receive+0x4d0>
 8010d60:	2301      	movs	r3, #1
 8010d62:	e00c      	b.n	8010d7e <tcp_receive+0x4d2>
 8010d64:	080191a4 	.word	0x080191a4
 8010d68:	080193e4 	.word	0x080193e4
 8010d6c:	080191e8 	.word	0x080191e8
 8010d70:	2000416c 	.word	0x2000416c
 8010d74:	0801940c 	.word	0x0801940c
 8010d78:	20004168 	.word	0x20004168
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	4433      	add	r3, r6
 8010d80:	442b      	add	r3, r5
 8010d82:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	db07      	blt.n	8010d98 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010d88:	4b8d      	ldr	r3, [pc, #564]	; (8010fc0 <tcp_receive+0x714>)
 8010d8a:	681a      	ldr	r2, [r3, #0]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d90:	1ad3      	subs	r3, r2, r3
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	f77f af75 	ble.w	8010c82 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d9e:	4b89      	ldr	r3, [pc, #548]	; (8010fc4 <tcp_receive+0x718>)
 8010da0:	881b      	ldrh	r3, [r3, #0]
 8010da2:	4413      	add	r3, r2
 8010da4:	b29a      	uxth	r2, r3
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d052      	beq.n	8010e5a <tcp_receive+0x5ae>
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010db8:	4b81      	ldr	r3, [pc, #516]	; (8010fc0 <tcp_receive+0x714>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	1ad3      	subs	r3, r2, r3
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	da4b      	bge.n	8010e5a <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010dc2:	4b81      	ldr	r3, [pc, #516]	; (8010fc8 <tcp_receive+0x71c>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	b29a      	uxth	r2, r3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	1ad3      	subs	r3, r2, r3
 8010dd0:	b29b      	uxth	r3, r3
 8010dd2:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8010dd4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ddc:	10db      	asrs	r3, r3, #3
 8010dde:	b21b      	sxth	r3, r3
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	1ad3      	subs	r3, r2, r3
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010dee:	b29a      	uxth	r2, r3
 8010df0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010df2:	4413      	add	r3, r2
 8010df4:	b29b      	uxth	r3, r3
 8010df6:	b21a      	sxth	r2, r3
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010dfc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	da03      	bge.n	8010e0c <tcp_receive+0x560>
        m = -m;
 8010e04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e06:	425b      	negs	r3, r3
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8010e0c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e14:	109b      	asrs	r3, r3, #2
 8010e16:	b21b      	sxth	r3, r3
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	1ad3      	subs	r3, r2, r3
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e26:	b29a      	uxth	r2, r3
 8010e28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e2a:	4413      	add	r3, r2
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	b21a      	sxth	r2, r3
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e3a:	10db      	asrs	r3, r3, #3
 8010e3c:	b21b      	sxth	r3, r3
 8010e3e:	b29a      	uxth	r2, r3
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	4413      	add	r3, r2
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	b21a      	sxth	r2, r3
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2200      	movs	r2, #0
 8010e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010e5a:	4b5c      	ldr	r3, [pc, #368]	; (8010fcc <tcp_receive+0x720>)
 8010e5c:	881b      	ldrh	r3, [r3, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f000 84f1 	beq.w	8011846 <tcp_receive+0xf9a>
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	7d1b      	ldrb	r3, [r3, #20]
 8010e68:	2b06      	cmp	r3, #6
 8010e6a:	f200 84ec 	bhi.w	8011846 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e72:	4b57      	ldr	r3, [pc, #348]	; (8010fd0 <tcp_receive+0x724>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	1ad3      	subs	r3, r2, r3
 8010e78:	3b01      	subs	r3, #1
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f2c0 80b8 	blt.w	8010ff0 <tcp_receive+0x744>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e84:	4b51      	ldr	r3, [pc, #324]	; (8010fcc <tcp_receive+0x720>)
 8010e86:	881b      	ldrh	r3, [r3, #0]
 8010e88:	4619      	mov	r1, r3
 8010e8a:	4b51      	ldr	r3, [pc, #324]	; (8010fd0 <tcp_receive+0x724>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	440b      	add	r3, r1
 8010e90:	1ad3      	subs	r3, r2, r3
 8010e92:	3301      	adds	r3, #1
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	f300 80ab 	bgt.w	8010ff0 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010e9a:	4b4e      	ldr	r3, [pc, #312]	; (8010fd4 <tcp_receive+0x728>)
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ea4:	4b4a      	ldr	r3, [pc, #296]	; (8010fd0 <tcp_receive+0x724>)
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	1ad3      	subs	r3, r2, r3
 8010eaa:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010eac:	4b49      	ldr	r3, [pc, #292]	; (8010fd4 <tcp_receive+0x728>)
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d106      	bne.n	8010ec2 <tcp_receive+0x616>
 8010eb4:	4b48      	ldr	r3, [pc, #288]	; (8010fd8 <tcp_receive+0x72c>)
 8010eb6:	f240 523c 	movw	r2, #1340	; 0x53c
 8010eba:	4948      	ldr	r1, [pc, #288]	; (8010fdc <tcp_receive+0x730>)
 8010ebc:	4848      	ldr	r0, [pc, #288]	; (8010fe0 <tcp_receive+0x734>)
 8010ebe:	f005 fbff 	bl	80166c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8010ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	dd06      	ble.n	8010eda <tcp_receive+0x62e>
 8010ecc:	4b42      	ldr	r3, [pc, #264]	; (8010fd8 <tcp_receive+0x72c>)
 8010ece:	f240 523d 	movw	r2, #1341	; 0x53d
 8010ed2:	4944      	ldr	r1, [pc, #272]	; (8010fe4 <tcp_receive+0x738>)
 8010ed4:	4842      	ldr	r0, [pc, #264]	; (8010fe0 <tcp_receive+0x734>)
 8010ed6:	f005 fbf3 	bl	80166c0 <iprintf>
      if (inseg.p->len < off) {
 8010eda:	4b3e      	ldr	r3, [pc, #248]	; (8010fd4 <tcp_receive+0x728>)
 8010edc:	685b      	ldr	r3, [r3, #4]
 8010ede:	895b      	ldrh	r3, [r3, #10]
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee4:	4293      	cmp	r3, r2
 8010ee6:	dd3e      	ble.n	8010f66 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010ee8:	4b3a      	ldr	r3, [pc, #232]	; (8010fd4 <tcp_receive+0x728>)
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	891b      	ldrh	r3, [r3, #8]
 8010eee:	461a      	mov	r2, r3
 8010ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	dd06      	ble.n	8010f04 <tcp_receive+0x658>
 8010ef6:	4b38      	ldr	r3, [pc, #224]	; (8010fd8 <tcp_receive+0x72c>)
 8010ef8:	f240 523f 	movw	r2, #1343	; 0x53f
 8010efc:	493a      	ldr	r1, [pc, #232]	; (8010fe8 <tcp_receive+0x73c>)
 8010efe:	4838      	ldr	r0, [pc, #224]	; (8010fe0 <tcp_receive+0x734>)
 8010f00:	f005 fbde 	bl	80166c0 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010f04:	4b33      	ldr	r3, [pc, #204]	; (8010fd4 <tcp_receive+0x728>)
 8010f06:	685b      	ldr	r3, [r3, #4]
 8010f08:	891a      	ldrh	r2, [r3, #8]
 8010f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	1ad3      	subs	r3, r2, r3
 8010f10:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8010f12:	e00e      	b.n	8010f32 <tcp_receive+0x686>
          off -= p->len;
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	895b      	ldrh	r3, [r3, #10]
 8010f18:	461a      	mov	r2, r3
 8010f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1c:	1a9b      	subs	r3, r3, r2
 8010f1e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8010f20:	69bb      	ldr	r3, [r7, #24]
 8010f22:	8a3a      	ldrh	r2, [r7, #16]
 8010f24:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8010f26:	69bb      	ldr	r3, [r7, #24]
 8010f28:	2200      	movs	r2, #0
 8010f2a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8010f2c:	69bb      	ldr	r3, [r7, #24]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8010f32:	69bb      	ldr	r3, [r7, #24]
 8010f34:	895b      	ldrh	r3, [r3, #10]
 8010f36:	461a      	mov	r2, r3
 8010f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	dcea      	bgt.n	8010f14 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8010f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	425b      	negs	r3, r3
 8010f44:	b29b      	uxth	r3, r3
 8010f46:	b21b      	sxth	r3, r3
 8010f48:	4619      	mov	r1, r3
 8010f4a:	69b8      	ldr	r0, [r7, #24]
 8010f4c:	f7fc fb44 	bl	800d5d8 <pbuf_header>
 8010f50:	4603      	mov	r3, r0
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d01c      	beq.n	8010f90 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010f56:	4b20      	ldr	r3, [pc, #128]	; (8010fd8 <tcp_receive+0x72c>)
 8010f58:	f240 524c 	movw	r2, #1356	; 0x54c
 8010f5c:	4923      	ldr	r1, [pc, #140]	; (8010fec <tcp_receive+0x740>)
 8010f5e:	4820      	ldr	r0, [pc, #128]	; (8010fe0 <tcp_receive+0x734>)
 8010f60:	f005 fbae 	bl	80166c0 <iprintf>
 8010f64:	e014      	b.n	8010f90 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8010f66:	4b1b      	ldr	r3, [pc, #108]	; (8010fd4 <tcp_receive+0x728>)
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f6c:	b292      	uxth	r2, r2
 8010f6e:	4252      	negs	r2, r2
 8010f70:	b292      	uxth	r2, r2
 8010f72:	b212      	sxth	r2, r2
 8010f74:	4611      	mov	r1, r2
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7fc fb2e 	bl	800d5d8 <pbuf_header>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d006      	beq.n	8010f90 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010f82:	4b15      	ldr	r3, [pc, #84]	; (8010fd8 <tcp_receive+0x72c>)
 8010f84:	f240 5251 	movw	r2, #1361	; 0x551
 8010f88:	4918      	ldr	r1, [pc, #96]	; (8010fec <tcp_receive+0x740>)
 8010f8a:	4815      	ldr	r0, [pc, #84]	; (8010fe0 <tcp_receive+0x734>)
 8010f8c:	f005 fb98 	bl	80166c0 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8010f90:	4b10      	ldr	r3, [pc, #64]	; (8010fd4 <tcp_receive+0x728>)
 8010f92:	891a      	ldrh	r2, [r3, #8]
 8010f94:	4b0e      	ldr	r3, [pc, #56]	; (8010fd0 <tcp_receive+0x724>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	b299      	uxth	r1, r3
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	1acb      	subs	r3, r1, r3
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	4413      	add	r3, r2
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	4b0a      	ldr	r3, [pc, #40]	; (8010fd4 <tcp_receive+0x728>)
 8010faa:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fb0:	4a07      	ldr	r2, [pc, #28]	; (8010fd0 <tcp_receive+0x724>)
 8010fb2:	6013      	str	r3, [r2, #0]
 8010fb4:	4b07      	ldr	r3, [pc, #28]	; (8010fd4 <tcp_receive+0x728>)
 8010fb6:	68db      	ldr	r3, [r3, #12]
 8010fb8:	4a05      	ldr	r2, [pc, #20]	; (8010fd0 <tcp_receive+0x724>)
 8010fba:	6812      	ldr	r2, [r2, #0]
 8010fbc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010fbe:	e025      	b.n	801100c <tcp_receive+0x760>
 8010fc0:	20004168 	.word	0x20004168
 8010fc4:	2000416c 	.word	0x2000416c
 8010fc8:	2000dc58 	.word	0x2000dc58
 8010fcc:	2000416e 	.word	0x2000416e
 8010fd0:	20004164 	.word	0x20004164
 8010fd4:	20004144 	.word	0x20004144
 8010fd8:	080191a4 	.word	0x080191a4
 8010fdc:	0801942c 	.word	0x0801942c
 8010fe0:	080191e8 	.word	0x080191e8
 8010fe4:	0801943c 	.word	0x0801943c
 8010fe8:	0801944c 	.word	0x0801944c
 8010fec:	0801945c 	.word	0x0801945c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010ff0:	4b87      	ldr	r3, [pc, #540]	; (8011210 <tcp_receive+0x964>)
 8010ff2:	681a      	ldr	r2, [r3, #0]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ff8:	1ad3      	subs	r3, r2, r3
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	da06      	bge.n	801100c <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	8b5b      	ldrh	r3, [r3, #26]
 8011002:	f043 0302 	orr.w	r3, r3, #2
 8011006:	b29a      	uxth	r2, r3
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801100c:	4b80      	ldr	r3, [pc, #512]	; (8011210 <tcp_receive+0x964>)
 801100e:	681a      	ldr	r2, [r3, #0]
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011014:	1ad3      	subs	r3, r2, r3
 8011016:	2b00      	cmp	r3, #0
 8011018:	f2c0 8410 	blt.w	801183c <tcp_receive+0xf90>
 801101c:	4b7c      	ldr	r3, [pc, #496]	; (8011210 <tcp_receive+0x964>)
 801101e:	681a      	ldr	r2, [r3, #0]
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011024:	6879      	ldr	r1, [r7, #4]
 8011026:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011028:	440b      	add	r3, r1
 801102a:	1ad3      	subs	r3, r2, r3
 801102c:	3301      	adds	r3, #1
 801102e:	2b00      	cmp	r3, #0
 8011030:	f300 8404 	bgt.w	801183c <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011038:	4b75      	ldr	r3, [pc, #468]	; (8011210 <tcp_receive+0x964>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	429a      	cmp	r2, r3
 801103e:	f040 8287 	bne.w	8011550 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011042:	4b74      	ldr	r3, [pc, #464]	; (8011214 <tcp_receive+0x968>)
 8011044:	891c      	ldrh	r4, [r3, #8]
 8011046:	4b73      	ldr	r3, [pc, #460]	; (8011214 <tcp_receive+0x968>)
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	899b      	ldrh	r3, [r3, #12]
 801104c:	b29b      	uxth	r3, r3
 801104e:	4618      	mov	r0, r3
 8011050:	f7fb f8d2 	bl	800c1f8 <lwip_htons>
 8011054:	4603      	mov	r3, r0
 8011056:	f003 0303 	and.w	r3, r3, #3
 801105a:	2b00      	cmp	r3, #0
 801105c:	d001      	beq.n	8011062 <tcp_receive+0x7b6>
 801105e:	2301      	movs	r3, #1
 8011060:	e000      	b.n	8011064 <tcp_receive+0x7b8>
 8011062:	2300      	movs	r3, #0
 8011064:	4423      	add	r3, r4
 8011066:	b29a      	uxth	r2, r3
 8011068:	4b6b      	ldr	r3, [pc, #428]	; (8011218 <tcp_receive+0x96c>)
 801106a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011070:	4b69      	ldr	r3, [pc, #420]	; (8011218 <tcp_receive+0x96c>)
 8011072:	881b      	ldrh	r3, [r3, #0]
 8011074:	429a      	cmp	r2, r3
 8011076:	d26e      	bcs.n	8011156 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011078:	4b66      	ldr	r3, [pc, #408]	; (8011214 <tcp_receive+0x968>)
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	899b      	ldrh	r3, [r3, #12]
 801107e:	b29b      	uxth	r3, r3
 8011080:	4618      	mov	r0, r3
 8011082:	f7fb f8b9 	bl	800c1f8 <lwip_htons>
 8011086:	4603      	mov	r3, r0
 8011088:	f003 0301 	and.w	r3, r3, #1
 801108c:	2b00      	cmp	r3, #0
 801108e:	d01b      	beq.n	80110c8 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011090:	4b60      	ldr	r3, [pc, #384]	; (8011214 <tcp_receive+0x968>)
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	899b      	ldrh	r3, [r3, #12]
 8011096:	b29b      	uxth	r3, r3
 8011098:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801109c:	b29c      	uxth	r4, r3
 801109e:	4b5d      	ldr	r3, [pc, #372]	; (8011214 <tcp_receive+0x968>)
 80110a0:	68db      	ldr	r3, [r3, #12]
 80110a2:	899b      	ldrh	r3, [r3, #12]
 80110a4:	b29b      	uxth	r3, r3
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fb f8a6 	bl	800c1f8 <lwip_htons>
 80110ac:	4603      	mov	r3, r0
 80110ae:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7fb f89f 	bl	800c1f8 <lwip_htons>
 80110ba:	4603      	mov	r3, r0
 80110bc:	461a      	mov	r2, r3
 80110be:	4b55      	ldr	r3, [pc, #340]	; (8011214 <tcp_receive+0x968>)
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	4322      	orrs	r2, r4
 80110c4:	b292      	uxth	r2, r2
 80110c6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80110cc:	4b51      	ldr	r3, [pc, #324]	; (8011214 <tcp_receive+0x968>)
 80110ce:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80110d0:	4b50      	ldr	r3, [pc, #320]	; (8011214 <tcp_receive+0x968>)
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	899b      	ldrh	r3, [r3, #12]
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	4618      	mov	r0, r3
 80110da:	f7fb f88d 	bl	800c1f8 <lwip_htons>
 80110de:	4603      	mov	r3, r0
 80110e0:	f003 0302 	and.w	r3, r3, #2
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d005      	beq.n	80110f4 <tcp_receive+0x848>
            inseg.len -= 1;
 80110e8:	4b4a      	ldr	r3, [pc, #296]	; (8011214 <tcp_receive+0x968>)
 80110ea:	891b      	ldrh	r3, [r3, #8]
 80110ec:	3b01      	subs	r3, #1
 80110ee:	b29a      	uxth	r2, r3
 80110f0:	4b48      	ldr	r3, [pc, #288]	; (8011214 <tcp_receive+0x968>)
 80110f2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80110f4:	4b47      	ldr	r3, [pc, #284]	; (8011214 <tcp_receive+0x968>)
 80110f6:	685a      	ldr	r2, [r3, #4]
 80110f8:	4b46      	ldr	r3, [pc, #280]	; (8011214 <tcp_receive+0x968>)
 80110fa:	891b      	ldrh	r3, [r3, #8]
 80110fc:	4619      	mov	r1, r3
 80110fe:	4610      	mov	r0, r2
 8011100:	f7fc f91a 	bl	800d338 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011104:	4b43      	ldr	r3, [pc, #268]	; (8011214 <tcp_receive+0x968>)
 8011106:	891c      	ldrh	r4, [r3, #8]
 8011108:	4b42      	ldr	r3, [pc, #264]	; (8011214 <tcp_receive+0x968>)
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	899b      	ldrh	r3, [r3, #12]
 801110e:	b29b      	uxth	r3, r3
 8011110:	4618      	mov	r0, r3
 8011112:	f7fb f871 	bl	800c1f8 <lwip_htons>
 8011116:	4603      	mov	r3, r0
 8011118:	f003 0303 	and.w	r3, r3, #3
 801111c:	2b00      	cmp	r3, #0
 801111e:	d001      	beq.n	8011124 <tcp_receive+0x878>
 8011120:	2301      	movs	r3, #1
 8011122:	e000      	b.n	8011126 <tcp_receive+0x87a>
 8011124:	2300      	movs	r3, #0
 8011126:	4423      	add	r3, r4
 8011128:	b29a      	uxth	r2, r3
 801112a:	4b3b      	ldr	r3, [pc, #236]	; (8011218 <tcp_receive+0x96c>)
 801112c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801112e:	4b3a      	ldr	r3, [pc, #232]	; (8011218 <tcp_receive+0x96c>)
 8011130:	881b      	ldrh	r3, [r3, #0]
 8011132:	461a      	mov	r2, r3
 8011134:	4b36      	ldr	r3, [pc, #216]	; (8011210 <tcp_receive+0x964>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	441a      	add	r2, r3
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801113e:	6879      	ldr	r1, [r7, #4]
 8011140:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011142:	440b      	add	r3, r1
 8011144:	429a      	cmp	r2, r3
 8011146:	d006      	beq.n	8011156 <tcp_receive+0x8aa>
 8011148:	4b34      	ldr	r3, [pc, #208]	; (801121c <tcp_receive+0x970>)
 801114a:	f240 527f 	movw	r2, #1407	; 0x57f
 801114e:	4934      	ldr	r1, [pc, #208]	; (8011220 <tcp_receive+0x974>)
 8011150:	4834      	ldr	r0, [pc, #208]	; (8011224 <tcp_receive+0x978>)
 8011152:	f005 fab5 	bl	80166c0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801115a:	2b00      	cmp	r3, #0
 801115c:	f000 80e1 	beq.w	8011322 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011160:	4b2c      	ldr	r3, [pc, #176]	; (8011214 <tcp_receive+0x968>)
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	899b      	ldrh	r3, [r3, #12]
 8011166:	b29b      	uxth	r3, r3
 8011168:	4618      	mov	r0, r3
 801116a:	f7fb f845 	bl	800c1f8 <lwip_htons>
 801116e:	4603      	mov	r3, r0
 8011170:	f003 0301 	and.w	r3, r3, #1
 8011174:	2b00      	cmp	r3, #0
 8011176:	d010      	beq.n	801119a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011178:	e00a      	b.n	8011190 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801117e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011184:	681a      	ldr	r2, [r3, #0]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 801118a:	68b8      	ldr	r0, [r7, #8]
 801118c:	f7fd fe43 	bl	800ee16 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011194:	2b00      	cmp	r3, #0
 8011196:	d1f0      	bne.n	801117a <tcp_receive+0x8ce>
 8011198:	e0c3      	b.n	8011322 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801119e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80111a0:	e04f      	b.n	8011242 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80111a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a4:	68db      	ldr	r3, [r3, #12]
 80111a6:	899b      	ldrh	r3, [r3, #12]
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fb f824 	bl	800c1f8 <lwip_htons>
 80111b0:	4603      	mov	r3, r0
 80111b2:	f003 0301 	and.w	r3, r3, #1
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d03b      	beq.n	8011232 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80111ba:	4b16      	ldr	r3, [pc, #88]	; (8011214 <tcp_receive+0x968>)
 80111bc:	68db      	ldr	r3, [r3, #12]
 80111be:	899b      	ldrh	r3, [r3, #12]
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7fb f818 	bl	800c1f8 <lwip_htons>
 80111c8:	4603      	mov	r3, r0
 80111ca:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d12f      	bne.n	8011232 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80111d2:	4b10      	ldr	r3, [pc, #64]	; (8011214 <tcp_receive+0x968>)
 80111d4:	68db      	ldr	r3, [r3, #12]
 80111d6:	899b      	ldrh	r3, [r3, #12]
 80111d8:	b29c      	uxth	r4, r3
 80111da:	2001      	movs	r0, #1
 80111dc:	f7fb f80c 	bl	800c1f8 <lwip_htons>
 80111e0:	4603      	mov	r3, r0
 80111e2:	461a      	mov	r2, r3
 80111e4:	4b0b      	ldr	r3, [pc, #44]	; (8011214 <tcp_receive+0x968>)
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	4322      	orrs	r2, r4
 80111ea:	b292      	uxth	r2, r2
 80111ec:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80111ee:	4b09      	ldr	r3, [pc, #36]	; (8011214 <tcp_receive+0x968>)
 80111f0:	891c      	ldrh	r4, [r3, #8]
 80111f2:	4b08      	ldr	r3, [pc, #32]	; (8011214 <tcp_receive+0x968>)
 80111f4:	68db      	ldr	r3, [r3, #12]
 80111f6:	899b      	ldrh	r3, [r3, #12]
 80111f8:	b29b      	uxth	r3, r3
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7fa fffc 	bl	800c1f8 <lwip_htons>
 8011200:	4603      	mov	r3, r0
 8011202:	f003 0303 	and.w	r3, r3, #3
 8011206:	2b00      	cmp	r3, #0
 8011208:	d00e      	beq.n	8011228 <tcp_receive+0x97c>
 801120a:	2301      	movs	r3, #1
 801120c:	e00d      	b.n	801122a <tcp_receive+0x97e>
 801120e:	bf00      	nop
 8011210:	20004164 	.word	0x20004164
 8011214:	20004144 	.word	0x20004144
 8011218:	2000416e 	.word	0x2000416e
 801121c:	080191a4 	.word	0x080191a4
 8011220:	08019470 	.word	0x08019470
 8011224:	080191e8 	.word	0x080191e8
 8011228:	2300      	movs	r3, #0
 801122a:	4423      	add	r3, r4
 801122c:	b29a      	uxth	r2, r3
 801122e:	4b95      	ldr	r3, [pc, #596]	; (8011484 <tcp_receive+0xbd8>)
 8011230:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8011232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011234:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8011236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 801123c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801123e:	f7fd fdea 	bl	800ee16 <tcp_seg_free>
            while (next &&
 8011242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011244:	2b00      	cmp	r3, #0
 8011246:	d00e      	beq.n	8011266 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011248:	4b8e      	ldr	r3, [pc, #568]	; (8011484 <tcp_receive+0xbd8>)
 801124a:	881b      	ldrh	r3, [r3, #0]
 801124c:	461a      	mov	r2, r3
 801124e:	4b8e      	ldr	r3, [pc, #568]	; (8011488 <tcp_receive+0xbdc>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	441a      	add	r2, r3
 8011254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	685b      	ldr	r3, [r3, #4]
 801125a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801125c:	8909      	ldrh	r1, [r1, #8]
 801125e:	440b      	add	r3, r1
 8011260:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011262:	2b00      	cmp	r3, #0
 8011264:	da9d      	bge.n	80111a2 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011268:	2b00      	cmp	r3, #0
 801126a:	d057      	beq.n	801131c <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 801126c:	4b85      	ldr	r3, [pc, #532]	; (8011484 <tcp_receive+0xbd8>)
 801126e:	881b      	ldrh	r3, [r3, #0]
 8011270:	461a      	mov	r2, r3
 8011272:	4b85      	ldr	r3, [pc, #532]	; (8011488 <tcp_receive+0xbdc>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	441a      	add	r2, r3
 8011278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	685b      	ldr	r3, [r3, #4]
 801127e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011280:	2b00      	cmp	r3, #0
 8011282:	dd4b      	ble.n	801131c <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	685b      	ldr	r3, [r3, #4]
 801128a:	b29a      	uxth	r2, r3
 801128c:	4b7e      	ldr	r3, [pc, #504]	; (8011488 <tcp_receive+0xbdc>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	b29b      	uxth	r3, r3
 8011292:	1ad3      	subs	r3, r2, r3
 8011294:	b29a      	uxth	r2, r3
 8011296:	4b7d      	ldr	r3, [pc, #500]	; (801148c <tcp_receive+0xbe0>)
 8011298:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801129a:	4b7c      	ldr	r3, [pc, #496]	; (801148c <tcp_receive+0xbe0>)
 801129c:	68db      	ldr	r3, [r3, #12]
 801129e:	899b      	ldrh	r3, [r3, #12]
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7fa ffa8 	bl	800c1f8 <lwip_htons>
 80112a8:	4603      	mov	r3, r0
 80112aa:	f003 0302 	and.w	r3, r3, #2
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d005      	beq.n	80112be <tcp_receive+0xa12>
                inseg.len -= 1;
 80112b2:	4b76      	ldr	r3, [pc, #472]	; (801148c <tcp_receive+0xbe0>)
 80112b4:	891b      	ldrh	r3, [r3, #8]
 80112b6:	3b01      	subs	r3, #1
 80112b8:	b29a      	uxth	r2, r3
 80112ba:	4b74      	ldr	r3, [pc, #464]	; (801148c <tcp_receive+0xbe0>)
 80112bc:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80112be:	4b73      	ldr	r3, [pc, #460]	; (801148c <tcp_receive+0xbe0>)
 80112c0:	685a      	ldr	r2, [r3, #4]
 80112c2:	4b72      	ldr	r3, [pc, #456]	; (801148c <tcp_receive+0xbe0>)
 80112c4:	891b      	ldrh	r3, [r3, #8]
 80112c6:	4619      	mov	r1, r3
 80112c8:	4610      	mov	r0, r2
 80112ca:	f7fc f835 	bl	800d338 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80112ce:	4b6f      	ldr	r3, [pc, #444]	; (801148c <tcp_receive+0xbe0>)
 80112d0:	891c      	ldrh	r4, [r3, #8]
 80112d2:	4b6e      	ldr	r3, [pc, #440]	; (801148c <tcp_receive+0xbe0>)
 80112d4:	68db      	ldr	r3, [r3, #12]
 80112d6:	899b      	ldrh	r3, [r3, #12]
 80112d8:	b29b      	uxth	r3, r3
 80112da:	4618      	mov	r0, r3
 80112dc:	f7fa ff8c 	bl	800c1f8 <lwip_htons>
 80112e0:	4603      	mov	r3, r0
 80112e2:	f003 0303 	and.w	r3, r3, #3
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d001      	beq.n	80112ee <tcp_receive+0xa42>
 80112ea:	2301      	movs	r3, #1
 80112ec:	e000      	b.n	80112f0 <tcp_receive+0xa44>
 80112ee:	2300      	movs	r3, #0
 80112f0:	4423      	add	r3, r4
 80112f2:	b29a      	uxth	r2, r3
 80112f4:	4b63      	ldr	r3, [pc, #396]	; (8011484 <tcp_receive+0xbd8>)
 80112f6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80112f8:	4b62      	ldr	r3, [pc, #392]	; (8011484 <tcp_receive+0xbd8>)
 80112fa:	881b      	ldrh	r3, [r3, #0]
 80112fc:	461a      	mov	r2, r3
 80112fe:	4b62      	ldr	r3, [pc, #392]	; (8011488 <tcp_receive+0xbdc>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	441a      	add	r2, r3
 8011304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	429a      	cmp	r2, r3
 801130c:	d006      	beq.n	801131c <tcp_receive+0xa70>
 801130e:	4b60      	ldr	r3, [pc, #384]	; (8011490 <tcp_receive+0xbe4>)
 8011310:	f240 52af 	movw	r2, #1455	; 0x5af
 8011314:	495f      	ldr	r1, [pc, #380]	; (8011494 <tcp_receive+0xbe8>)
 8011316:	4860      	ldr	r0, [pc, #384]	; (8011498 <tcp_receive+0xbec>)
 8011318:	f005 f9d2 	bl	80166c0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011320:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011322:	4b58      	ldr	r3, [pc, #352]	; (8011484 <tcp_receive+0xbd8>)
 8011324:	881b      	ldrh	r3, [r3, #0]
 8011326:	461a      	mov	r2, r3
 8011328:	4b57      	ldr	r3, [pc, #348]	; (8011488 <tcp_receive+0xbdc>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	441a      	add	r2, r3
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011336:	4b53      	ldr	r3, [pc, #332]	; (8011484 <tcp_receive+0xbd8>)
 8011338:	881b      	ldrh	r3, [r3, #0]
 801133a:	429a      	cmp	r2, r3
 801133c:	d206      	bcs.n	801134c <tcp_receive+0xaa0>
 801133e:	4b54      	ldr	r3, [pc, #336]	; (8011490 <tcp_receive+0xbe4>)
 8011340:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011344:	4955      	ldr	r1, [pc, #340]	; (801149c <tcp_receive+0xbf0>)
 8011346:	4854      	ldr	r0, [pc, #336]	; (8011498 <tcp_receive+0xbec>)
 8011348:	f005 f9ba 	bl	80166c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011350:	4b4c      	ldr	r3, [pc, #304]	; (8011484 <tcp_receive+0xbd8>)
 8011352:	881b      	ldrh	r3, [r3, #0]
 8011354:	1ad3      	subs	r3, r2, r3
 8011356:	b29a      	uxth	r2, r3
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f7fd f8c7 	bl	800e4f0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011362:	4b4a      	ldr	r3, [pc, #296]	; (801148c <tcp_receive+0xbe0>)
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	891b      	ldrh	r3, [r3, #8]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d006      	beq.n	801137a <tcp_receive+0xace>
          recv_data = inseg.p;
 801136c:	4b47      	ldr	r3, [pc, #284]	; (801148c <tcp_receive+0xbe0>)
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	4a4b      	ldr	r2, [pc, #300]	; (80114a0 <tcp_receive+0xbf4>)
 8011372:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011374:	4b45      	ldr	r3, [pc, #276]	; (801148c <tcp_receive+0xbe0>)
 8011376:	2200      	movs	r2, #0
 8011378:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801137a:	4b44      	ldr	r3, [pc, #272]	; (801148c <tcp_receive+0xbe0>)
 801137c:	68db      	ldr	r3, [r3, #12]
 801137e:	899b      	ldrh	r3, [r3, #12]
 8011380:	b29b      	uxth	r3, r3
 8011382:	4618      	mov	r0, r3
 8011384:	f7fa ff38 	bl	800c1f8 <lwip_htons>
 8011388:	4603      	mov	r3, r0
 801138a:	f003 0301 	and.w	r3, r3, #1
 801138e:	2b00      	cmp	r3, #0
 8011390:	f000 80b4 	beq.w	80114fc <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011394:	4b43      	ldr	r3, [pc, #268]	; (80114a4 <tcp_receive+0xbf8>)
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	f043 0320 	orr.w	r3, r3, #32
 801139c:	b2da      	uxtb	r2, r3
 801139e:	4b41      	ldr	r3, [pc, #260]	; (80114a4 <tcp_receive+0xbf8>)
 80113a0:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80113a2:	e0ab      	b.n	80114fc <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113a8:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	4a35      	ldr	r2, [pc, #212]	; (8011488 <tcp_receive+0xbdc>)
 80113b4:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	891b      	ldrh	r3, [r3, #8]
 80113ba:	461c      	mov	r4, r3
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	899b      	ldrh	r3, [r3, #12]
 80113c2:	b29b      	uxth	r3, r3
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7fa ff17 	bl	800c1f8 <lwip_htons>
 80113ca:	4603      	mov	r3, r0
 80113cc:	f003 0303 	and.w	r3, r3, #3
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d001      	beq.n	80113d8 <tcp_receive+0xb2c>
 80113d4:	2301      	movs	r3, #1
 80113d6:	e000      	b.n	80113da <tcp_receive+0xb2e>
 80113d8:	2300      	movs	r3, #0
 80113da:	191a      	adds	r2, r3, r4
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113e0:	441a      	add	r2, r3
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113ea:	461c      	mov	r4, r3
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	891b      	ldrh	r3, [r3, #8]
 80113f0:	461d      	mov	r5, r3
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	68db      	ldr	r3, [r3, #12]
 80113f6:	899b      	ldrh	r3, [r3, #12]
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7fa fefc 	bl	800c1f8 <lwip_htons>
 8011400:	4603      	mov	r3, r0
 8011402:	f003 0303 	and.w	r3, r3, #3
 8011406:	2b00      	cmp	r3, #0
 8011408:	d001      	beq.n	801140e <tcp_receive+0xb62>
 801140a:	2301      	movs	r3, #1
 801140c:	e000      	b.n	8011410 <tcp_receive+0xb64>
 801140e:	2300      	movs	r3, #0
 8011410:	442b      	add	r3, r5
 8011412:	429c      	cmp	r4, r3
 8011414:	d206      	bcs.n	8011424 <tcp_receive+0xb78>
 8011416:	4b1e      	ldr	r3, [pc, #120]	; (8011490 <tcp_receive+0xbe4>)
 8011418:	f240 52de 	movw	r2, #1502	; 0x5de
 801141c:	4922      	ldr	r1, [pc, #136]	; (80114a8 <tcp_receive+0xbfc>)
 801141e:	481e      	ldr	r0, [pc, #120]	; (8011498 <tcp_receive+0xbec>)
 8011420:	f005 f94e 	bl	80166c0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	891b      	ldrh	r3, [r3, #8]
 8011428:	461c      	mov	r4, r3
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	68db      	ldr	r3, [r3, #12]
 801142e:	899b      	ldrh	r3, [r3, #12]
 8011430:	b29b      	uxth	r3, r3
 8011432:	4618      	mov	r0, r3
 8011434:	f7fa fee0 	bl	800c1f8 <lwip_htons>
 8011438:	4603      	mov	r3, r0
 801143a:	f003 0303 	and.w	r3, r3, #3
 801143e:	2b00      	cmp	r3, #0
 8011440:	d001      	beq.n	8011446 <tcp_receive+0xb9a>
 8011442:	2301      	movs	r3, #1
 8011444:	e000      	b.n	8011448 <tcp_receive+0xb9c>
 8011446:	2300      	movs	r3, #0
 8011448:	1919      	adds	r1, r3, r4
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801144e:	b28b      	uxth	r3, r1
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	b29a      	uxth	r2, r3
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f7fd f849 	bl	800e4f0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	891b      	ldrh	r3, [r3, #8]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d028      	beq.n	80114ba <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011468:	4b0d      	ldr	r3, [pc, #52]	; (80114a0 <tcp_receive+0xbf4>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d01d      	beq.n	80114ac <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8011470:	4b0b      	ldr	r3, [pc, #44]	; (80114a0 <tcp_receive+0xbf4>)
 8011472:	681a      	ldr	r2, [r3, #0]
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	685b      	ldr	r3, [r3, #4]
 8011478:	4619      	mov	r1, r3
 801147a:	4610      	mov	r0, r2
 801147c:	f7fc f9aa 	bl	800d7d4 <pbuf_cat>
 8011480:	e018      	b.n	80114b4 <tcp_receive+0xc08>
 8011482:	bf00      	nop
 8011484:	2000416e 	.word	0x2000416e
 8011488:	20004164 	.word	0x20004164
 801148c:	20004144 	.word	0x20004144
 8011490:	080191a4 	.word	0x080191a4
 8011494:	080194a8 	.word	0x080194a8
 8011498:	080191e8 	.word	0x080191e8
 801149c:	080194e4 	.word	0x080194e4
 80114a0:	20004174 	.word	0x20004174
 80114a4:	20004171 	.word	0x20004171
 80114a8:	08019504 	.word	0x08019504
            } else {
              recv_data = cseg->p;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	4a71      	ldr	r2, [pc, #452]	; (8011678 <tcp_receive+0xdcc>)
 80114b2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	2200      	movs	r2, #0
 80114b8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	899b      	ldrh	r3, [r3, #12]
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7fa fe98 	bl	800c1f8 <lwip_htons>
 80114c8:	4603      	mov	r3, r0
 80114ca:	f003 0301 	and.w	r3, r3, #1
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d00d      	beq.n	80114ee <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80114d2:	4b6a      	ldr	r3, [pc, #424]	; (801167c <tcp_receive+0xdd0>)
 80114d4:	781b      	ldrb	r3, [r3, #0]
 80114d6:	f043 0320 	orr.w	r3, r3, #32
 80114da:	b2da      	uxtb	r2, r3
 80114dc:	4b67      	ldr	r3, [pc, #412]	; (801167c <tcp_receive+0xdd0>)
 80114de:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	7d1b      	ldrb	r3, [r3, #20]
 80114e4:	2b04      	cmp	r3, #4
 80114e6:	d102      	bne.n	80114ee <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2207      	movs	r2, #7
 80114ec:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	681a      	ldr	r2, [r3, #0]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80114f6:	68f8      	ldr	r0, [r7, #12]
 80114f8:	f7fd fc8d 	bl	800ee16 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011500:	2b00      	cmp	r3, #0
 8011502:	d008      	beq.n	8011516 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	685a      	ldr	r2, [r3, #4]
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011510:	429a      	cmp	r2, r3
 8011512:	f43f af47 	beq.w	80113a4 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	8b5b      	ldrh	r3, [r3, #26]
 801151a:	f003 0301 	and.w	r3, r3, #1
 801151e:	2b00      	cmp	r3, #0
 8011520:	d00e      	beq.n	8011540 <tcp_receive+0xc94>
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	8b5b      	ldrh	r3, [r3, #26]
 8011526:	f023 0301 	bic.w	r3, r3, #1
 801152a:	b29a      	uxth	r2, r3
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	835a      	strh	r2, [r3, #26]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	8b5b      	ldrh	r3, [r3, #26]
 8011534:	f043 0302 	orr.w	r3, r3, #2
 8011538:	b29a      	uxth	r2, r3
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801153e:	e181      	b.n	8011844 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	8b5b      	ldrh	r3, [r3, #26]
 8011544:	f043 0301 	orr.w	r3, r3, #1
 8011548:	b29a      	uxth	r2, r3
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801154e:	e179      	b.n	8011844 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f001 f8c5 	bl	80126e0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801155a:	2b00      	cmp	r3, #0
 801155c:	d106      	bne.n	801156c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801155e:	4848      	ldr	r0, [pc, #288]	; (8011680 <tcp_receive+0xdd4>)
 8011560:	f7fd fc71 	bl	800ee46 <tcp_seg_copy>
 8011564:	4602      	mov	r2, r0
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 801156a:	e16b      	b.n	8011844 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 801156c:	2300      	movs	r3, #0
 801156e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011576:	e150      	b.n	801181a <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8011578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	685a      	ldr	r2, [r3, #4]
 801157e:	4b41      	ldr	r3, [pc, #260]	; (8011684 <tcp_receive+0xdd8>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	429a      	cmp	r2, r3
 8011584:	d11d      	bne.n	80115c2 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011586:	4b3e      	ldr	r3, [pc, #248]	; (8011680 <tcp_receive+0xdd4>)
 8011588:	891a      	ldrh	r2, [r3, #8]
 801158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801158c:	891b      	ldrh	r3, [r3, #8]
 801158e:	429a      	cmp	r2, r3
 8011590:	f240 8148 	bls.w	8011824 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8011594:	483a      	ldr	r0, [pc, #232]	; (8011680 <tcp_receive+0xdd4>)
 8011596:	f7fd fc56 	bl	800ee46 <tcp_seg_copy>
 801159a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	f000 8142 	beq.w	8011828 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 80115a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d003      	beq.n	80115b2 <tcp_receive+0xd06>
                    prev->next = cseg;
 80115aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ac:	68fa      	ldr	r2, [r7, #12]
 80115ae:	601a      	str	r2, [r3, #0]
 80115b0:	e002      	b.n	80115b8 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	68fa      	ldr	r2, [r7, #12]
 80115b6:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80115b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80115ba:	68f8      	ldr	r0, [r7, #12]
 80115bc:	f7ff f900 	bl	80107c0 <tcp_oos_insert_segment>
                }
                break;
 80115c0:	e132      	b.n	8011828 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80115c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d117      	bne.n	80115f8 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80115c8:	4b2e      	ldr	r3, [pc, #184]	; (8011684 <tcp_receive+0xdd8>)
 80115ca:	681a      	ldr	r2, [r3, #0]
 80115cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	1ad3      	subs	r3, r2, r3
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	da57      	bge.n	8011688 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80115d8:	4829      	ldr	r0, [pc, #164]	; (8011680 <tcp_receive+0xdd4>)
 80115da:	f7fd fc34 	bl	800ee46 <tcp_seg_copy>
 80115de:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	f000 8122 	beq.w	801182c <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	68fa      	ldr	r2, [r7, #12]
 80115ec:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80115ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80115f0:	68f8      	ldr	r0, [r7, #12]
 80115f2:	f7ff f8e5 	bl	80107c0 <tcp_oos_insert_segment>
                  }
                  break;
 80115f6:	e119      	b.n	801182c <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80115f8:	4b22      	ldr	r3, [pc, #136]	; (8011684 <tcp_receive+0xdd8>)
 80115fa:	681a      	ldr	r2, [r3, #0]
 80115fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	1ad3      	subs	r3, r2, r3
 8011604:	3b01      	subs	r3, #1
 8011606:	2b00      	cmp	r3, #0
 8011608:	db3e      	blt.n	8011688 <tcp_receive+0xddc>
 801160a:	4b1e      	ldr	r3, [pc, #120]	; (8011684 <tcp_receive+0xdd8>)
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	1ad3      	subs	r3, r2, r3
 8011616:	3301      	adds	r3, #1
 8011618:	2b00      	cmp	r3, #0
 801161a:	dc35      	bgt.n	8011688 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 801161c:	4818      	ldr	r0, [pc, #96]	; (8011680 <tcp_receive+0xdd4>)
 801161e:	f7fd fc12 	bl	800ee46 <tcp_seg_copy>
 8011622:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	2b00      	cmp	r3, #0
 8011628:	f000 8102 	beq.w	8011830 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011634:	8912      	ldrh	r2, [r2, #8]
 8011636:	441a      	add	r2, r3
 8011638:	4b12      	ldr	r3, [pc, #72]	; (8011684 <tcp_receive+0xdd8>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	1ad3      	subs	r3, r2, r3
 801163e:	2b00      	cmp	r3, #0
 8011640:	dd12      	ble.n	8011668 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011642:	4b10      	ldr	r3, [pc, #64]	; (8011684 <tcp_receive+0xdd8>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	b29a      	uxth	r2, r3
 8011648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	b29b      	uxth	r3, r3
 8011650:	1ad3      	subs	r3, r2, r3
 8011652:	b29a      	uxth	r2, r3
 8011654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011656:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801165a:	685a      	ldr	r2, [r3, #4]
 801165c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801165e:	891b      	ldrh	r3, [r3, #8]
 8011660:	4619      	mov	r1, r3
 8011662:	4610      	mov	r0, r2
 8011664:	f7fb fe68 	bl	800d338 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801166a:	68fa      	ldr	r2, [r7, #12]
 801166c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801166e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011670:	68f8      	ldr	r0, [r7, #12]
 8011672:	f7ff f8a5 	bl	80107c0 <tcp_oos_insert_segment>
                  }
                  break;
 8011676:	e0db      	b.n	8011830 <tcp_receive+0xf84>
 8011678:	20004174 	.word	0x20004174
 801167c:	20004171 	.word	0x20004171
 8011680:	20004144 	.word	0x20004144
 8011684:	20004164 	.word	0x20004164
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	2b00      	cmp	r3, #0
 801168e:	f040 80bf 	bne.w	8011810 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011692:	4b7c      	ldr	r3, [pc, #496]	; (8011884 <tcp_receive+0xfd8>)
 8011694:	681a      	ldr	r2, [r3, #0]
 8011696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011698:	68db      	ldr	r3, [r3, #12]
 801169a:	685b      	ldr	r3, [r3, #4]
 801169c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801169e:	2b00      	cmp	r3, #0
 80116a0:	f340 80b6 	ble.w	8011810 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80116a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a6:	68db      	ldr	r3, [r3, #12]
 80116a8:	899b      	ldrh	r3, [r3, #12]
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7fa fda3 	bl	800c1f8 <lwip_htons>
 80116b2:	4603      	mov	r3, r0
 80116b4:	f003 0301 	and.w	r3, r3, #1
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	f040 80bb 	bne.w	8011834 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80116be:	4872      	ldr	r0, [pc, #456]	; (8011888 <tcp_receive+0xfdc>)
 80116c0:	f7fd fbc1 	bl	800ee46 <tcp_seg_copy>
 80116c4:	4602      	mov	r2, r0
 80116c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c8:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80116ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	f000 80b2 	beq.w	8011838 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80116d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d6:	68db      	ldr	r3, [r3, #12]
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116dc:	8912      	ldrh	r2, [r2, #8]
 80116de:	441a      	add	r2, r3
 80116e0:	4b68      	ldr	r3, [pc, #416]	; (8011884 <tcp_receive+0xfd8>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	1ad3      	subs	r3, r2, r3
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	dd12      	ble.n	8011710 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80116ea:	4b66      	ldr	r3, [pc, #408]	; (8011884 <tcp_receive+0xfd8>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	b29a      	uxth	r2, r3
 80116f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	1ad3      	subs	r3, r2, r3
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116fe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011702:	685a      	ldr	r2, [r3, #4]
 8011704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011706:	891b      	ldrh	r3, [r3, #8]
 8011708:	4619      	mov	r1, r3
 801170a:	4610      	mov	r0, r2
 801170c:	f7fb fe14 	bl	800d338 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011710:	4b5e      	ldr	r3, [pc, #376]	; (801188c <tcp_receive+0xfe0>)
 8011712:	881b      	ldrh	r3, [r3, #0]
 8011714:	461a      	mov	r2, r3
 8011716:	4b5b      	ldr	r3, [pc, #364]	; (8011884 <tcp_receive+0xfd8>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	441a      	add	r2, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011720:	6879      	ldr	r1, [r7, #4]
 8011722:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011724:	440b      	add	r3, r1
 8011726:	1ad3      	subs	r3, r2, r3
 8011728:	2b00      	cmp	r3, #0
 801172a:	f340 8085 	ble.w	8011838 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	68db      	ldr	r3, [r3, #12]
 8011734:	899b      	ldrh	r3, [r3, #12]
 8011736:	b29b      	uxth	r3, r3
 8011738:	4618      	mov	r0, r3
 801173a:	f7fa fd5d 	bl	800c1f8 <lwip_htons>
 801173e:	4603      	mov	r3, r0
 8011740:	f003 0301 	and.w	r3, r3, #1
 8011744:	2b00      	cmp	r3, #0
 8011746:	d01e      	beq.n	8011786 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	68db      	ldr	r3, [r3, #12]
 801174e:	899b      	ldrh	r3, [r3, #12]
 8011750:	b29b      	uxth	r3, r3
 8011752:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011756:	b29c      	uxth	r4, r3
 8011758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	899b      	ldrh	r3, [r3, #12]
 8011760:	b29b      	uxth	r3, r3
 8011762:	4618      	mov	r0, r3
 8011764:	f7fa fd48 	bl	800c1f8 <lwip_htons>
 8011768:	4603      	mov	r3, r0
 801176a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801176e:	b29b      	uxth	r3, r3
 8011770:	4618      	mov	r0, r3
 8011772:	f7fa fd41 	bl	800c1f8 <lwip_htons>
 8011776:	4603      	mov	r3, r0
 8011778:	461a      	mov	r2, r3
 801177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	68db      	ldr	r3, [r3, #12]
 8011780:	4322      	orrs	r2, r4
 8011782:	b292      	uxth	r2, r2
 8011784:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801178a:	b29a      	uxth	r2, r3
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011790:	4413      	add	r3, r2
 8011792:	b299      	uxth	r1, r3
 8011794:	4b3b      	ldr	r3, [pc, #236]	; (8011884 <tcp_receive+0xfd8>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	b29a      	uxth	r2, r3
 801179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	1a8a      	subs	r2, r1, r2
 80117a0:	b292      	uxth	r2, r2
 80117a2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80117a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	685a      	ldr	r2, [r3, #4]
 80117aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	891b      	ldrh	r3, [r3, #8]
 80117b0:	4619      	mov	r1, r3
 80117b2:	4610      	mov	r0, r2
 80117b4:	f7fb fdc0 	bl	800d338 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80117b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	891c      	ldrh	r4, [r3, #8]
 80117be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	68db      	ldr	r3, [r3, #12]
 80117c4:	899b      	ldrh	r3, [r3, #12]
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7fa fd15 	bl	800c1f8 <lwip_htons>
 80117ce:	4603      	mov	r3, r0
 80117d0:	f003 0303 	and.w	r3, r3, #3
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d001      	beq.n	80117dc <tcp_receive+0xf30>
 80117d8:	2301      	movs	r3, #1
 80117da:	e000      	b.n	80117de <tcp_receive+0xf32>
 80117dc:	2300      	movs	r3, #0
 80117de:	4423      	add	r3, r4
 80117e0:	b29a      	uxth	r2, r3
 80117e2:	4b2a      	ldr	r3, [pc, #168]	; (801188c <tcp_receive+0xfe0>)
 80117e4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80117e6:	4b29      	ldr	r3, [pc, #164]	; (801188c <tcp_receive+0xfe0>)
 80117e8:	881b      	ldrh	r3, [r3, #0]
 80117ea:	461a      	mov	r2, r3
 80117ec:	4b25      	ldr	r3, [pc, #148]	; (8011884 <tcp_receive+0xfd8>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	441a      	add	r2, r3
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117f6:	6879      	ldr	r1, [r7, #4]
 80117f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80117fa:	440b      	add	r3, r1
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d01b      	beq.n	8011838 <tcp_receive+0xf8c>
 8011800:	4b23      	ldr	r3, [pc, #140]	; (8011890 <tcp_receive+0xfe4>)
 8011802:	f240 627b 	movw	r2, #1659	; 0x67b
 8011806:	4923      	ldr	r1, [pc, #140]	; (8011894 <tcp_receive+0xfe8>)
 8011808:	4823      	ldr	r0, [pc, #140]	; (8011898 <tcp_receive+0xfec>)
 801180a:	f004 ff59 	bl	80166c0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801180e:	e013      	b.n	8011838 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8011810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011812:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	62fb      	str	r3, [r7, #44]	; 0x2c
 801181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801181c:	2b00      	cmp	r3, #0
 801181e:	f47f aeab 	bne.w	8011578 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8011822:	e00f      	b.n	8011844 <tcp_receive+0xf98>
                break;
 8011824:	bf00      	nop
 8011826:	e00d      	b.n	8011844 <tcp_receive+0xf98>
                break;
 8011828:	bf00      	nop
 801182a:	e00b      	b.n	8011844 <tcp_receive+0xf98>
                  break;
 801182c:	bf00      	nop
 801182e:	e009      	b.n	8011844 <tcp_receive+0xf98>
                  break;
 8011830:	bf00      	nop
 8011832:	e007      	b.n	8011844 <tcp_receive+0xf98>
                  break;
 8011834:	bf00      	nop
 8011836:	e005      	b.n	8011844 <tcp_receive+0xf98>
                break;
 8011838:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 801183a:	e003      	b.n	8011844 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f000 ff4f 	bl	80126e0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011842:	e01a      	b.n	801187a <tcp_receive+0xfce>
 8011844:	e019      	b.n	801187a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011846:	4b0f      	ldr	r3, [pc, #60]	; (8011884 <tcp_receive+0xfd8>)
 8011848:	681a      	ldr	r2, [r3, #0]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801184e:	1ad3      	subs	r3, r2, r3
 8011850:	2b00      	cmp	r3, #0
 8011852:	db0a      	blt.n	801186a <tcp_receive+0xfbe>
 8011854:	4b0b      	ldr	r3, [pc, #44]	; (8011884 <tcp_receive+0xfd8>)
 8011856:	681a      	ldr	r2, [r3, #0]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801185c:	6879      	ldr	r1, [r7, #4]
 801185e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011860:	440b      	add	r3, r1
 8011862:	1ad3      	subs	r3, r2, r3
 8011864:	3301      	adds	r3, #1
 8011866:	2b00      	cmp	r3, #0
 8011868:	dd07      	ble.n	801187a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	8b5b      	ldrh	r3, [r3, #26]
 801186e:	f043 0302 	orr.w	r3, r3, #2
 8011872:	b29a      	uxth	r2, r3
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011878:	e7ff      	b.n	801187a <tcp_receive+0xfce>
 801187a:	bf00      	nop
 801187c:	3734      	adds	r7, #52	; 0x34
 801187e:	46bd      	mov	sp, r7
 8011880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011882:	bf00      	nop
 8011884:	20004164 	.word	0x20004164
 8011888:	20004144 	.word	0x20004144
 801188c:	2000416e 	.word	0x2000416e
 8011890:	080191a4 	.word	0x080191a4
 8011894:	08019470 	.word	0x08019470
 8011898:	080191e8 	.word	0x080191e8

0801189c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801189c:	b480      	push	{r7}
 801189e:	b083      	sub	sp, #12
 80118a0:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80118a2:	4b18      	ldr	r3, [pc, #96]	; (8011904 <tcp_getoptbyte+0x68>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d005      	beq.n	80118b6 <tcp_getoptbyte+0x1a>
 80118aa:	4b17      	ldr	r3, [pc, #92]	; (8011908 <tcp_getoptbyte+0x6c>)
 80118ac:	881a      	ldrh	r2, [r3, #0]
 80118ae:	4b17      	ldr	r3, [pc, #92]	; (801190c <tcp_getoptbyte+0x70>)
 80118b0:	881b      	ldrh	r3, [r3, #0]
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d20e      	bcs.n	80118d4 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80118b6:	4b16      	ldr	r3, [pc, #88]	; (8011910 <tcp_getoptbyte+0x74>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	3314      	adds	r3, #20
 80118bc:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80118be:	4b12      	ldr	r3, [pc, #72]	; (8011908 <tcp_getoptbyte+0x6c>)
 80118c0:	881b      	ldrh	r3, [r3, #0]
 80118c2:	1c5a      	adds	r2, r3, #1
 80118c4:	b291      	uxth	r1, r2
 80118c6:	4a10      	ldr	r2, [pc, #64]	; (8011908 <tcp_getoptbyte+0x6c>)
 80118c8:	8011      	strh	r1, [r2, #0]
 80118ca:	461a      	mov	r2, r3
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	4413      	add	r3, r2
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	e010      	b.n	80118f6 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80118d4:	4b0c      	ldr	r3, [pc, #48]	; (8011908 <tcp_getoptbyte+0x6c>)
 80118d6:	881b      	ldrh	r3, [r3, #0]
 80118d8:	1c5a      	adds	r2, r3, #1
 80118da:	b291      	uxth	r1, r2
 80118dc:	4a0a      	ldr	r2, [pc, #40]	; (8011908 <tcp_getoptbyte+0x6c>)
 80118de:	8011      	strh	r1, [r2, #0]
 80118e0:	b2da      	uxtb	r2, r3
 80118e2:	4b0a      	ldr	r3, [pc, #40]	; (801190c <tcp_getoptbyte+0x70>)
 80118e4:	881b      	ldrh	r3, [r3, #0]
 80118e6:	b2db      	uxtb	r3, r3
 80118e8:	1ad3      	subs	r3, r2, r3
 80118ea:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80118ec:	4b05      	ldr	r3, [pc, #20]	; (8011904 <tcp_getoptbyte+0x68>)
 80118ee:	681a      	ldr	r2, [r3, #0]
 80118f0:	79fb      	ldrb	r3, [r7, #7]
 80118f2:	4413      	add	r3, r2
 80118f4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	370c      	adds	r7, #12
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr
 8011902:	bf00      	nop
 8011904:	2000415c 	.word	0x2000415c
 8011908:	20004160 	.word	0x20004160
 801190c:	2000415a 	.word	0x2000415a
 8011910:	20004154 	.word	0x20004154

08011914 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801191c:	4b2d      	ldr	r3, [pc, #180]	; (80119d4 <tcp_parseopt+0xc0>)
 801191e:	881b      	ldrh	r3, [r3, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d053      	beq.n	80119cc <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011924:	4b2c      	ldr	r3, [pc, #176]	; (80119d8 <tcp_parseopt+0xc4>)
 8011926:	2200      	movs	r2, #0
 8011928:	801a      	strh	r2, [r3, #0]
 801192a:	e043      	b.n	80119b4 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 801192c:	f7ff ffb6 	bl	801189c <tcp_getoptbyte>
 8011930:	4603      	mov	r3, r0
 8011932:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011934:	7bfb      	ldrb	r3, [r7, #15]
 8011936:	2b01      	cmp	r3, #1
 8011938:	d03c      	beq.n	80119b4 <tcp_parseopt+0xa0>
 801193a:	2b02      	cmp	r3, #2
 801193c:	d002      	beq.n	8011944 <tcp_parseopt+0x30>
 801193e:	2b00      	cmp	r3, #0
 8011940:	d03f      	beq.n	80119c2 <tcp_parseopt+0xae>
 8011942:	e026      	b.n	8011992 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011944:	f7ff ffaa 	bl	801189c <tcp_getoptbyte>
 8011948:	4603      	mov	r3, r0
 801194a:	2b04      	cmp	r3, #4
 801194c:	d13b      	bne.n	80119c6 <tcp_parseopt+0xb2>
 801194e:	4b22      	ldr	r3, [pc, #136]	; (80119d8 <tcp_parseopt+0xc4>)
 8011950:	881b      	ldrh	r3, [r3, #0]
 8011952:	3302      	adds	r3, #2
 8011954:	4a1f      	ldr	r2, [pc, #124]	; (80119d4 <tcp_parseopt+0xc0>)
 8011956:	8812      	ldrh	r2, [r2, #0]
 8011958:	4293      	cmp	r3, r2
 801195a:	dc34      	bgt.n	80119c6 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 801195c:	f7ff ff9e 	bl	801189c <tcp_getoptbyte>
 8011960:	4603      	mov	r3, r0
 8011962:	b29b      	uxth	r3, r3
 8011964:	021b      	lsls	r3, r3, #8
 8011966:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8011968:	f7ff ff98 	bl	801189c <tcp_getoptbyte>
 801196c:	4603      	mov	r3, r0
 801196e:	b29a      	uxth	r2, r3
 8011970:	89bb      	ldrh	r3, [r7, #12]
 8011972:	4313      	orrs	r3, r2
 8011974:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011976:	89bb      	ldrh	r3, [r7, #12]
 8011978:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801197c:	d804      	bhi.n	8011988 <tcp_parseopt+0x74>
 801197e:	89bb      	ldrh	r3, [r7, #12]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d001      	beq.n	8011988 <tcp_parseopt+0x74>
 8011984:	89ba      	ldrh	r2, [r7, #12]
 8011986:	e001      	b.n	801198c <tcp_parseopt+0x78>
 8011988:	f44f 7206 	mov.w	r2, #536	; 0x218
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8011990:	e010      	b.n	80119b4 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8011992:	f7ff ff83 	bl	801189c <tcp_getoptbyte>
 8011996:	4603      	mov	r3, r0
 8011998:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801199a:	7afb      	ldrb	r3, [r7, #11]
 801199c:	2b01      	cmp	r3, #1
 801199e:	d914      	bls.n	80119ca <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80119a0:	7afb      	ldrb	r3, [r7, #11]
 80119a2:	b29a      	uxth	r2, r3
 80119a4:	4b0c      	ldr	r3, [pc, #48]	; (80119d8 <tcp_parseopt+0xc4>)
 80119a6:	881b      	ldrh	r3, [r3, #0]
 80119a8:	4413      	add	r3, r2
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	3b02      	subs	r3, #2
 80119ae:	b29a      	uxth	r2, r3
 80119b0:	4b09      	ldr	r3, [pc, #36]	; (80119d8 <tcp_parseopt+0xc4>)
 80119b2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80119b4:	4b08      	ldr	r3, [pc, #32]	; (80119d8 <tcp_parseopt+0xc4>)
 80119b6:	881a      	ldrh	r2, [r3, #0]
 80119b8:	4b06      	ldr	r3, [pc, #24]	; (80119d4 <tcp_parseopt+0xc0>)
 80119ba:	881b      	ldrh	r3, [r3, #0]
 80119bc:	429a      	cmp	r2, r3
 80119be:	d3b5      	bcc.n	801192c <tcp_parseopt+0x18>
 80119c0:	e004      	b.n	80119cc <tcp_parseopt+0xb8>
        return;
 80119c2:	bf00      	nop
 80119c4:	e002      	b.n	80119cc <tcp_parseopt+0xb8>
          return;
 80119c6:	bf00      	nop
 80119c8:	e000      	b.n	80119cc <tcp_parseopt+0xb8>
          return;
 80119ca:	bf00      	nop
      }
    }
  }
}
 80119cc:	3710      	adds	r7, #16
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
 80119d2:	bf00      	nop
 80119d4:	20004158 	.word	0x20004158
 80119d8:	20004160 	.word	0x20004160

080119dc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80119dc:	b480      	push	{r7}
 80119de:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80119e0:	4b05      	ldr	r3, [pc, #20]	; (80119f8 <tcp_trigger_input_pcb_close+0x1c>)
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	f043 0310 	orr.w	r3, r3, #16
 80119e8:	b2da      	uxtb	r2, r3
 80119ea:	4b03      	ldr	r3, [pc, #12]	; (80119f8 <tcp_trigger_input_pcb_close+0x1c>)
 80119ec:	701a      	strb	r2, [r3, #0]
}
 80119ee:	bf00      	nop
 80119f0:	46bd      	mov	sp, r7
 80119f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f6:	4770      	bx	lr
 80119f8:	20004171 	.word	0x20004171

080119fc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b086      	sub	sp, #24
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	607b      	str	r3, [r7, #4]
 8011a06:	460b      	mov	r3, r1
 8011a08:	817b      	strh	r3, [r7, #10]
 8011a0a:	4613      	mov	r3, r2
 8011a0c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011a0e:	897a      	ldrh	r2, [r7, #10]
 8011a10:	893b      	ldrh	r3, [r7, #8]
 8011a12:	4413      	add	r3, r2
 8011a14:	b29b      	uxth	r3, r3
 8011a16:	3314      	adds	r3, #20
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	2001      	movs	r0, #1
 8011a20:	f7fb fa8c 	bl	800cf3c <pbuf_alloc>
 8011a24:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d057      	beq.n	8011adc <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	895b      	ldrh	r3, [r3, #10]
 8011a30:	461a      	mov	r2, r3
 8011a32:	897b      	ldrh	r3, [r7, #10]
 8011a34:	3314      	adds	r3, #20
 8011a36:	429a      	cmp	r2, r3
 8011a38:	da05      	bge.n	8011a46 <tcp_output_alloc_header+0x4a>
 8011a3a:	4b2b      	ldr	r3, [pc, #172]	; (8011ae8 <tcp_output_alloc_header+0xec>)
 8011a3c:	2273      	movs	r2, #115	; 0x73
 8011a3e:	492b      	ldr	r1, [pc, #172]	; (8011aec <tcp_output_alloc_header+0xf0>)
 8011a40:	482b      	ldr	r0, [pc, #172]	; (8011af0 <tcp_output_alloc_header+0xf4>)
 8011a42:	f004 fe3d 	bl	80166c0 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	8adb      	ldrh	r3, [r3, #22]
 8011a50:	4618      	mov	r0, r3
 8011a52:	f7fa fbd1 	bl	800c1f8 <lwip_htons>
 8011a56:	4603      	mov	r3, r0
 8011a58:	461a      	mov	r2, r3
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	8b1b      	ldrh	r3, [r3, #24]
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7fa fbc8 	bl	800c1f8 <lwip_htons>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	461a      	mov	r2, r3
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	687a      	ldr	r2, [r7, #4]
 8011a74:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7fa fbca 	bl	800c214 <lwip_htonl>
 8011a80:	4602      	mov	r2, r0
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8011a86:	897b      	ldrh	r3, [r7, #10]
 8011a88:	089b      	lsrs	r3, r3, #2
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	3305      	adds	r3, #5
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	031b      	lsls	r3, r3, #12
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	f043 0310 	orr.w	r3, r3, #16
 8011a98:	b29b      	uxth	r3, r3
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7fa fbac 	bl	800c1f8 <lwip_htons>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7fa fba3 	bl	800c1f8 <lwip_htons>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	2200      	movs	r2, #0
 8011abe:	741a      	strb	r2, [r3, #16]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	749a      	strb	r2, [r3, #18]
 8011aca:	2200      	movs	r2, #0
 8011acc:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ad2:	68fa      	ldr	r2, [r7, #12]
 8011ad4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011ad6:	441a      	add	r2, r3
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011adc:	697b      	ldr	r3, [r7, #20]
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3718      	adds	r7, #24
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}
 8011ae6:	bf00      	nop
 8011ae8:	0801952c 	.word	0x0801952c
 8011aec:	08019560 	.word	0x08019560
 8011af0:	08019590 	.word	0x08019590

08011af4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011af4:	b590      	push	{r4, r7, lr}
 8011af6:	b085      	sub	sp, #20
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d02d      	beq.n	8011b60 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b08:	60fb      	str	r3, [r7, #12]
 8011b0a:	e002      	b.n	8011b12 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d1f8      	bne.n	8011b0c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	68db      	ldr	r3, [r3, #12]
 8011b1e:	899b      	ldrh	r3, [r3, #12]
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	4618      	mov	r0, r3
 8011b24:	f7fa fb68 	bl	800c1f8 <lwip_htons>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	f003 0307 	and.w	r3, r3, #7
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d116      	bne.n	8011b60 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	68db      	ldr	r3, [r3, #12]
 8011b36:	899b      	ldrh	r3, [r3, #12]
 8011b38:	b29c      	uxth	r4, r3
 8011b3a:	2001      	movs	r0, #1
 8011b3c:	f7fa fb5c 	bl	800c1f8 <lwip_htons>
 8011b40:	4603      	mov	r3, r0
 8011b42:	461a      	mov	r2, r3
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	68db      	ldr	r3, [r3, #12]
 8011b48:	4322      	orrs	r2, r4
 8011b4a:	b292      	uxth	r2, r2
 8011b4c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	8b5b      	ldrh	r3, [r3, #26]
 8011b52:	f043 0320 	orr.w	r3, r3, #32
 8011b56:	b29a      	uxth	r2, r3
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	e004      	b.n	8011b6a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011b60:	2101      	movs	r1, #1
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f000 fcc0 	bl	80124e8 <tcp_enqueue_flags>
 8011b68:	4603      	mov	r3, r0
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3714      	adds	r7, #20
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd90      	pop	{r4, r7, pc}
	...

08011b74 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8011b74:	b590      	push	{r4, r7, lr}
 8011b76:	b087      	sub	sp, #28
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	603b      	str	r3, [r7, #0]
 8011b80:	4613      	mov	r3, r2
 8011b82:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011b84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011b88:	009b      	lsls	r3, r3, #2
 8011b8a:	b2db      	uxtb	r3, r3
 8011b8c:	f003 0304 	and.w	r3, r3, #4
 8011b90:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011b92:	2003      	movs	r0, #3
 8011b94:	f7fa ff1e 	bl	800c9d4 <memp_malloc>
 8011b98:	6138      	str	r0, [r7, #16]
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d104      	bne.n	8011baa <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011ba0:	68b8      	ldr	r0, [r7, #8]
 8011ba2:	f7fb fd3d 	bl	800d620 <pbuf_free>
    return NULL;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	e061      	b.n	8011c6e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011bb0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011bb8:	693b      	ldr	r3, [r7, #16]
 8011bba:	68ba      	ldr	r2, [r7, #8]
 8011bbc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011bbe:	68bb      	ldr	r3, [r7, #8]
 8011bc0:	891a      	ldrh	r2, [r3, #8]
 8011bc2:	7dfb      	ldrb	r3, [r7, #23]
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d205      	bcs.n	8011bd6 <tcp_create_segment+0x62>
 8011bca:	4b2b      	ldr	r3, [pc, #172]	; (8011c78 <tcp_create_segment+0x104>)
 8011bcc:	22ba      	movs	r2, #186	; 0xba
 8011bce:	492b      	ldr	r1, [pc, #172]	; (8011c7c <tcp_create_segment+0x108>)
 8011bd0:	482b      	ldr	r0, [pc, #172]	; (8011c80 <tcp_create_segment+0x10c>)
 8011bd2:	f004 fd75 	bl	80166c0 <iprintf>
  seg->len = p->tot_len - optlen;
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	891a      	ldrh	r2, [r3, #8]
 8011bda:	7dfb      	ldrb	r3, [r7, #23]
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	1ad3      	subs	r3, r2, r3
 8011be0:	b29a      	uxth	r2, r3
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8011be6:	2114      	movs	r1, #20
 8011be8:	68b8      	ldr	r0, [r7, #8]
 8011bea:	f7fb fcf5 	bl	800d5d8 <pbuf_header>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d004      	beq.n	8011bfe <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011bf4:	6938      	ldr	r0, [r7, #16]
 8011bf6:	f7fd f90e 	bl	800ee16 <tcp_seg_free>
    return NULL;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	e037      	b.n	8011c6e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	685a      	ldr	r2, [r3, #4]
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	8ada      	ldrh	r2, [r3, #22]
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	68dc      	ldr	r4, [r3, #12]
 8011c10:	4610      	mov	r0, r2
 8011c12:	f7fa faf1 	bl	800c1f8 <lwip_htons>
 8011c16:	4603      	mov	r3, r0
 8011c18:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	8b1a      	ldrh	r2, [r3, #24]
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	68dc      	ldr	r4, [r3, #12]
 8011c22:	4610      	mov	r0, r2
 8011c24:	f7fa fae8 	bl	800c1f8 <lwip_htons>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	68dc      	ldr	r4, [r3, #12]
 8011c30:	6838      	ldr	r0, [r7, #0]
 8011c32:	f7fa faef 	bl	800c214 <lwip_htonl>
 8011c36:	4603      	mov	r3, r0
 8011c38:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8011c3a:	7dfb      	ldrb	r3, [r7, #23]
 8011c3c:	089b      	lsrs	r3, r3, #2
 8011c3e:	b2db      	uxtb	r3, r3
 8011c40:	b29b      	uxth	r3, r3
 8011c42:	3305      	adds	r3, #5
 8011c44:	b29b      	uxth	r3, r3
 8011c46:	031b      	lsls	r3, r3, #12
 8011c48:	b29a      	uxth	r2, r3
 8011c4a:	79fb      	ldrb	r3, [r7, #7]
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	4313      	orrs	r3, r2
 8011c50:	b29a      	uxth	r2, r3
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	68dc      	ldr	r4, [r3, #12]
 8011c56:	4610      	mov	r0, r2
 8011c58:	f7fa face 	bl	800c1f8 <lwip_htons>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	68db      	ldr	r3, [r3, #12]
 8011c64:	2200      	movs	r2, #0
 8011c66:	749a      	strb	r2, [r3, #18]
 8011c68:	2200      	movs	r2, #0
 8011c6a:	74da      	strb	r2, [r3, #19]
  return seg;
 8011c6c:	693b      	ldr	r3, [r7, #16]
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	371c      	adds	r7, #28
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd90      	pop	{r4, r7, pc}
 8011c76:	bf00      	nop
 8011c78:	0801952c 	.word	0x0801952c
 8011c7c:	080195b8 	.word	0x080195b8
 8011c80:	08019590 	.word	0x08019590

08011c84 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b086      	sub	sp, #24
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	607b      	str	r3, [r7, #4]
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	73fb      	strb	r3, [r7, #15]
 8011c90:	460b      	mov	r3, r1
 8011c92:	81bb      	strh	r3, [r7, #12]
 8011c94:	4613      	mov	r3, r2
 8011c96:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011c98:	89bb      	ldrh	r3, [r7, #12]
 8011c9a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011c9c:	89ba      	ldrh	r2, [r7, #12]
 8011c9e:	897b      	ldrh	r3, [r7, #10]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d221      	bcs.n	8011ce8 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011ca4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011ca8:	f003 0302 	and.w	r3, r3, #2
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d111      	bne.n	8011cd4 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8011cb0:	6a3b      	ldr	r3, [r7, #32]
 8011cb2:	8b5b      	ldrh	r3, [r3, #26]
 8011cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d115      	bne.n	8011ce8 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8011cbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d007      	beq.n	8011cd4 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011cc4:	6a3b      	ldr	r3, [r7, #32]
 8011cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d103      	bne.n	8011cd4 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8011ccc:	6a3b      	ldr	r3, [r7, #32]
 8011cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d009      	beq.n	8011ce8 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011cd4:	89bb      	ldrh	r3, [r7, #12]
 8011cd6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011cda:	f023 0203 	bic.w	r2, r3, #3
 8011cde:	897b      	ldrh	r3, [r7, #10]
 8011ce0:	4293      	cmp	r3, r2
 8011ce2:	bf28      	it	cs
 8011ce4:	4613      	movcs	r3, r2
 8011ce6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011ce8:	8af9      	ldrh	r1, [r7, #22]
 8011cea:	7bfb      	ldrb	r3, [r7, #15]
 8011cec:	2200      	movs	r2, #0
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7fb f924 	bl	800cf3c <pbuf_alloc>
 8011cf4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d101      	bne.n	8011d00 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	e019      	b.n	8011d34 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d006      	beq.n	8011d16 <tcp_pbuf_prealloc+0x92>
 8011d08:	4b0c      	ldr	r3, [pc, #48]	; (8011d3c <tcp_pbuf_prealloc+0xb8>)
 8011d0a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8011d0e:	490c      	ldr	r1, [pc, #48]	; (8011d40 <tcp_pbuf_prealloc+0xbc>)
 8011d10:	480c      	ldr	r0, [pc, #48]	; (8011d44 <tcp_pbuf_prealloc+0xc0>)
 8011d12:	f004 fcd5 	bl	80166c0 <iprintf>
  *oversize = p->len - length;
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	895a      	ldrh	r2, [r3, #10]
 8011d1a:	89bb      	ldrh	r3, [r7, #12]
 8011d1c:	1ad3      	subs	r3, r2, r3
 8011d1e:	b29a      	uxth	r2, r3
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	89ba      	ldrh	r2, [r7, #12]
 8011d28:	811a      	strh	r2, [r3, #8]
 8011d2a:	693b      	ldr	r3, [r7, #16]
 8011d2c:	891a      	ldrh	r2, [r3, #8]
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	815a      	strh	r2, [r3, #10]
  return p;
 8011d32:	693b      	ldr	r3, [r7, #16]
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	3718      	adds	r7, #24
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}
 8011d3c:	0801952c 	.word	0x0801952c
 8011d40:	080195d0 	.word	0x080195d0
 8011d44:	08019590 	.word	0x08019590

08011d48 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	460b      	mov	r3, r1
 8011d52:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	7d1b      	ldrb	r3, [r3, #20]
 8011d58:	2b04      	cmp	r3, #4
 8011d5a:	d00e      	beq.n	8011d7a <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011d60:	2b07      	cmp	r3, #7
 8011d62:	d00a      	beq.n	8011d7a <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011d68:	2b02      	cmp	r3, #2
 8011d6a:	d006      	beq.n	8011d7a <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011d70:	2b03      	cmp	r3, #3
 8011d72:	d002      	beq.n	8011d7a <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011d74:	f06f 030a 	mvn.w	r3, #10
 8011d78:	e04f      	b.n	8011e1a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8011d7a:	887b      	ldrh	r3, [r7, #2]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d101      	bne.n	8011d84 <tcp_write_checks+0x3c>
    return ERR_OK;
 8011d80:	2300      	movs	r3, #0
 8011d82:	e04a      	b.n	8011e1a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d8a:	887a      	ldrh	r2, [r7, #2]
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d909      	bls.n	8011da4 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	8b5b      	ldrh	r3, [r3, #26]
 8011d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d98:	b29a      	uxth	r2, r3
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011da2:	e03a      	b.n	8011e1a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011daa:	2b08      	cmp	r3, #8
 8011dac:	d806      	bhi.n	8011dbc <tcp_write_checks+0x74>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011db4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011db8:	4293      	cmp	r3, r2
 8011dba:	d909      	bls.n	8011dd0 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	8b5b      	ldrh	r3, [r3, #26]
 8011dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dc4:	b29a      	uxth	r2, r3
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011dce:	e024      	b.n	8011e1a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d00f      	beq.n	8011dfa <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d11a      	bne.n	8011e18 <tcp_write_checks+0xd0>
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d116      	bne.n	8011e18 <tcp_write_checks+0xd0>
 8011dea:	4b0e      	ldr	r3, [pc, #56]	; (8011e24 <tcp_write_checks+0xdc>)
 8011dec:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8011df0:	490d      	ldr	r1, [pc, #52]	; (8011e28 <tcp_write_checks+0xe0>)
 8011df2:	480e      	ldr	r0, [pc, #56]	; (8011e2c <tcp_write_checks+0xe4>)
 8011df4:	f004 fc64 	bl	80166c0 <iprintf>
 8011df8:	e00e      	b.n	8011e18 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d103      	bne.n	8011e0a <tcp_write_checks+0xc2>
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d006      	beq.n	8011e18 <tcp_write_checks+0xd0>
 8011e0a:	4b06      	ldr	r3, [pc, #24]	; (8011e24 <tcp_write_checks+0xdc>)
 8011e0c:	f240 1259 	movw	r2, #345	; 0x159
 8011e10:	4907      	ldr	r1, [pc, #28]	; (8011e30 <tcp_write_checks+0xe8>)
 8011e12:	4806      	ldr	r0, [pc, #24]	; (8011e2c <tcp_write_checks+0xe4>)
 8011e14:	f004 fc54 	bl	80166c0 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011e18:	2300      	movs	r3, #0
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3708      	adds	r7, #8
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}
 8011e22:	bf00      	nop
 8011e24:	0801952c 	.word	0x0801952c
 8011e28:	080195e4 	.word	0x080195e4
 8011e2c:	08019590 	.word	0x08019590
 8011e30:	08019620 	.word	0x08019620

08011e34 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011e34:	b590      	push	{r4, r7, lr}
 8011e36:	b09b      	sub	sp, #108	; 0x6c
 8011e38:	af04      	add	r7, sp, #16
 8011e3a:	60f8      	str	r0, [r7, #12]
 8011e3c:	60b9      	str	r1, [r7, #8]
 8011e3e:	4611      	mov	r1, r2
 8011e40:	461a      	mov	r2, r3
 8011e42:	460b      	mov	r3, r1
 8011e44:	80fb      	strh	r3, [r7, #6]
 8011e46:	4613      	mov	r3, r2
 8011e48:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	653b      	str	r3, [r7, #80]	; 0x50
 8011e52:	2300      	movs	r3, #0
 8011e54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011e56:	2300      	movs	r3, #0
 8011e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011e5e:	2300      	movs	r3, #0
 8011e60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8011e64:	2300      	movs	r3, #0
 8011e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011e70:	2300      	movs	r3, #0
 8011e72:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011e74:	2300      	movs	r3, #0
 8011e76:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e82:	085b      	lsrs	r3, r3, #1
 8011e84:	b29a      	uxth	r2, r3
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e8a:	4293      	cmp	r3, r2
 8011e8c:	bf28      	it	cs
 8011e8e:	4613      	movcs	r3, r2
 8011e90:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d102      	bne.n	8011e9e <tcp_write+0x6a>
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e9c:	e000      	b.n	8011ea0 <tcp_write+0x6c>
 8011e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ea0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d109      	bne.n	8011ebc <tcp_write+0x88>
 8011ea8:	4b92      	ldr	r3, [pc, #584]	; (80120f4 <tcp_write+0x2c0>)
 8011eaa:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8011eae:	4992      	ldr	r1, [pc, #584]	; (80120f8 <tcp_write+0x2c4>)
 8011eb0:	4892      	ldr	r0, [pc, #584]	; (80120fc <tcp_write+0x2c8>)
 8011eb2:	f004 fc05 	bl	80166c0 <iprintf>
 8011eb6:	f06f 030f 	mvn.w	r3, #15
 8011eba:	e30a      	b.n	80124d2 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011ebc:	88fb      	ldrh	r3, [r7, #6]
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	68f8      	ldr	r0, [r7, #12]
 8011ec2:	f7ff ff41 	bl	8011d48 <tcp_write_checks>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011ecc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d002      	beq.n	8011eda <tcp_write+0xa6>
    return err;
 8011ed4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011ed8:	e2fb      	b.n	80124d2 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011ee0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	f000 80f5 	beq.w	80120d8 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8011ef4:	e002      	b.n	8011efc <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8011ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d1f8      	bne.n	8011ef6 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8011f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f06:	7a9b      	ldrb	r3, [r3, #10]
 8011f08:	009b      	lsls	r3, r3, #2
 8011f0a:	b29b      	uxth	r3, r3
 8011f0c:	f003 0304 	and.w	r3, r3, #4
 8011f10:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011f12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f16:	891b      	ldrh	r3, [r3, #8]
 8011f18:	4619      	mov	r1, r3
 8011f1a:	8c3b      	ldrh	r3, [r7, #32]
 8011f1c:	440b      	add	r3, r1
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	da06      	bge.n	8011f30 <tcp_write+0xfc>
 8011f22:	4b74      	ldr	r3, [pc, #464]	; (80120f4 <tcp_write+0x2c0>)
 8011f24:	f240 12c7 	movw	r2, #455	; 0x1c7
 8011f28:	4975      	ldr	r1, [pc, #468]	; (8012100 <tcp_write+0x2cc>)
 8011f2a:	4874      	ldr	r0, [pc, #464]	; (80120fc <tcp_write+0x2c8>)
 8011f2c:	f004 fbc8 	bl	80166c0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f32:	891a      	ldrh	r2, [r3, #8]
 8011f34:	8c3b      	ldrh	r3, [r7, #32]
 8011f36:	4413      	add	r3, r2
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f3c:	1ad3      	subs	r3, r2, r3
 8011f3e:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011f46:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011f48:	8a7b      	ldrh	r3, [r7, #18]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d027      	beq.n	8011f9e <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011f4e:	8a7b      	ldrh	r3, [r7, #18]
 8011f50:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011f52:	429a      	cmp	r2, r3
 8011f54:	d206      	bcs.n	8011f64 <tcp_write+0x130>
 8011f56:	4b67      	ldr	r3, [pc, #412]	; (80120f4 <tcp_write+0x2c0>)
 8011f58:	f240 12d9 	movw	r2, #473	; 0x1d9
 8011f5c:	4969      	ldr	r1, [pc, #420]	; (8012104 <tcp_write+0x2d0>)
 8011f5e:	4867      	ldr	r0, [pc, #412]	; (80120fc <tcp_write+0x2c8>)
 8011f60:	f004 fbae 	bl	80166c0 <iprintf>
      seg = last_unsent;
 8011f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f66:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011f68:	8a7b      	ldrh	r3, [r7, #18]
 8011f6a:	88fa      	ldrh	r2, [r7, #6]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d901      	bls.n	8011f74 <tcp_write+0x140>
 8011f70:	8a7b      	ldrh	r3, [r7, #18]
 8011f72:	e000      	b.n	8011f76 <tcp_write+0x142>
 8011f74:	88fb      	ldrh	r3, [r7, #6]
 8011f76:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011f78:	4293      	cmp	r3, r2
 8011f7a:	bfa8      	it	ge
 8011f7c:	4613      	movge	r3, r2
 8011f7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011f80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011f84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011f86:	4413      	add	r3, r2
 8011f88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011f8c:	8a7a      	ldrh	r2, [r7, #18]
 8011f8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011f90:	1ad3      	subs	r3, r2, r3
 8011f92:	b29b      	uxth	r3, r3
 8011f94:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011f96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011f98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011f9a:	1ad3      	subs	r3, r2, r3
 8011f9c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011f9e:	8a7b      	ldrh	r3, [r7, #18]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d00b      	beq.n	8011fbc <tcp_write+0x188>
 8011fa4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011fa8:	88fb      	ldrh	r3, [r7, #6]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d006      	beq.n	8011fbc <tcp_write+0x188>
 8011fae:	4b51      	ldr	r3, [pc, #324]	; (80120f4 <tcp_write+0x2c0>)
 8011fb0:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011fb4:	4954      	ldr	r1, [pc, #336]	; (8012108 <tcp_write+0x2d4>)
 8011fb6:	4851      	ldr	r0, [pc, #324]	; (80120fc <tcp_write+0x2c8>)
 8011fb8:	f004 fb82 	bl	80166c0 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011fbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011fc0:	88fb      	ldrh	r3, [r7, #6]
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	f080 8168 	bcs.w	8012298 <tcp_write+0x464>
 8011fc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	f000 8164 	beq.w	8012298 <tcp_write+0x464>
 8011fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fd2:	891b      	ldrh	r3, [r3, #8]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	f000 815f 	beq.w	8012298 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011fda:	88fa      	ldrh	r2, [r7, #6]
 8011fdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fe0:	1ad2      	subs	r2, r2, r3
 8011fe2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011fe4:	4293      	cmp	r3, r2
 8011fe6:	bfa8      	it	ge
 8011fe8:	4613      	movge	r3, r2
 8011fea:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fee:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011ff0:	797b      	ldrb	r3, [r7, #5]
 8011ff2:	f003 0301 	and.w	r3, r3, #1
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d027      	beq.n	801204a <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011ffa:	f107 0012 	add.w	r0, r7, #18
 8011ffe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012000:	8bf9      	ldrh	r1, [r7, #30]
 8012002:	2301      	movs	r3, #1
 8012004:	9302      	str	r3, [sp, #8]
 8012006:	797b      	ldrb	r3, [r7, #5]
 8012008:	9301      	str	r3, [sp, #4]
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	9300      	str	r3, [sp, #0]
 801200e:	4603      	mov	r3, r0
 8012010:	2004      	movs	r0, #4
 8012012:	f7ff fe37 	bl	8011c84 <tcp_pbuf_prealloc>
 8012016:	6578      	str	r0, [r7, #84]	; 0x54
 8012018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801201a:	2b00      	cmp	r3, #0
 801201c:	f000 8227 	beq.w	801246e <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012022:	6858      	ldr	r0, [r3, #4]
 8012024:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012028:	68ba      	ldr	r2, [r7, #8]
 801202a:	4413      	add	r3, r2
 801202c:	8bfa      	ldrh	r2, [r7, #30]
 801202e:	4619      	mov	r1, r3
 8012030:	f004 fb33 	bl	801669a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012034:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012036:	f7fb fb8d 	bl	800d754 <pbuf_clen>
 801203a:	4603      	mov	r3, r0
 801203c:	461a      	mov	r2, r3
 801203e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012042:	4413      	add	r3, r2
 8012044:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012048:	e03f      	b.n	80120ca <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801204a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	637b      	str	r3, [r7, #52]	; 0x34
 8012050:	e002      	b.n	8012058 <tcp_write+0x224>
 8012052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	637b      	str	r3, [r7, #52]	; 0x34
 8012058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d1f8      	bne.n	8012052 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012062:	7b1b      	ldrb	r3, [r3, #12]
 8012064:	2b01      	cmp	r3, #1
 8012066:	d115      	bne.n	8012094 <tcp_write+0x260>
 8012068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801206a:	685b      	ldr	r3, [r3, #4]
 801206c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801206e:	8952      	ldrh	r2, [r2, #10]
 8012070:	4413      	add	r3, r2
 8012072:	68ba      	ldr	r2, [r7, #8]
 8012074:	429a      	cmp	r2, r3
 8012076:	d10d      	bne.n	8012094 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012078:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801207c:	2b00      	cmp	r3, #0
 801207e:	d006      	beq.n	801208e <tcp_write+0x25a>
 8012080:	4b1c      	ldr	r3, [pc, #112]	; (80120f4 <tcp_write+0x2c0>)
 8012082:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8012086:	4921      	ldr	r1, [pc, #132]	; (801210c <tcp_write+0x2d8>)
 8012088:	481c      	ldr	r0, [pc, #112]	; (80120fc <tcp_write+0x2c8>)
 801208a:	f004 fb19 	bl	80166c0 <iprintf>
          extendlen = seglen;
 801208e:	8bfb      	ldrh	r3, [r7, #30]
 8012090:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012092:	e01a      	b.n	80120ca <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012094:	8bfb      	ldrh	r3, [r7, #30]
 8012096:	2201      	movs	r2, #1
 8012098:	4619      	mov	r1, r3
 801209a:	2004      	movs	r0, #4
 801209c:	f7fa ff4e 	bl	800cf3c <pbuf_alloc>
 80120a0:	6578      	str	r0, [r7, #84]	; 0x54
 80120a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	f000 81e4 	beq.w	8012472 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 80120aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120ae:	68ba      	ldr	r2, [r7, #8]
 80120b0:	441a      	add	r2, r3
 80120b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120b4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80120b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80120b8:	f7fb fb4c 	bl	800d754 <pbuf_clen>
 80120bc:	4603      	mov	r3, r0
 80120be:	461a      	mov	r2, r3
 80120c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80120c4:	4413      	add	r3, r2
 80120c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80120ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80120ce:	8bfb      	ldrh	r3, [r7, #30]
 80120d0:	4413      	add	r3, r2
 80120d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80120d6:	e0df      	b.n	8012298 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80120de:	2b00      	cmp	r3, #0
 80120e0:	f000 80da 	beq.w	8012298 <tcp_write+0x464>
 80120e4:	4b03      	ldr	r3, [pc, #12]	; (80120f4 <tcp_write+0x2c0>)
 80120e6:	f240 2225 	movw	r2, #549	; 0x225
 80120ea:	4909      	ldr	r1, [pc, #36]	; (8012110 <tcp_write+0x2dc>)
 80120ec:	4803      	ldr	r0, [pc, #12]	; (80120fc <tcp_write+0x2c8>)
 80120ee:	f004 fae7 	bl	80166c0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80120f2:	e0d1      	b.n	8012298 <tcp_write+0x464>
 80120f4:	0801952c 	.word	0x0801952c
 80120f8:	08019654 	.word	0x08019654
 80120fc:	08019590 	.word	0x08019590
 8012100:	08019688 	.word	0x08019688
 8012104:	080196a0 	.word	0x080196a0
 8012108:	080196c0 	.word	0x080196c0
 801210c:	080196e0 	.word	0x080196e0
 8012110:	0801970c 	.word	0x0801970c
    struct pbuf *p;
    u16_t left = len - pos;
 8012114:	88fa      	ldrh	r2, [r7, #6]
 8012116:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801211a:	1ad3      	subs	r3, r2, r3
 801211c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801211e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012122:	b29b      	uxth	r3, r3
 8012124:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012126:	1ad3      	subs	r3, r2, r3
 8012128:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801212a:	8b7a      	ldrh	r2, [r7, #26]
 801212c:	8bbb      	ldrh	r3, [r7, #28]
 801212e:	4293      	cmp	r3, r2
 8012130:	bf28      	it	cs
 8012132:	4613      	movcs	r3, r2
 8012134:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012136:	797b      	ldrb	r3, [r7, #5]
 8012138:	f003 0301 	and.w	r3, r3, #1
 801213c:	2b00      	cmp	r3, #0
 801213e:	d036      	beq.n	80121ae <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012144:	b29a      	uxth	r2, r3
 8012146:	8b3b      	ldrh	r3, [r7, #24]
 8012148:	4413      	add	r3, r2
 801214a:	b299      	uxth	r1, r3
 801214c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801214e:	2b00      	cmp	r3, #0
 8012150:	bf0c      	ite	eq
 8012152:	2301      	moveq	r3, #1
 8012154:	2300      	movne	r3, #0
 8012156:	b2db      	uxtb	r3, r3
 8012158:	f107 0012 	add.w	r0, r7, #18
 801215c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801215e:	9302      	str	r3, [sp, #8]
 8012160:	797b      	ldrb	r3, [r7, #5]
 8012162:	9301      	str	r3, [sp, #4]
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	9300      	str	r3, [sp, #0]
 8012168:	4603      	mov	r3, r0
 801216a:	2000      	movs	r0, #0
 801216c:	f7ff fd8a 	bl	8011c84 <tcp_pbuf_prealloc>
 8012170:	6338      	str	r0, [r7, #48]	; 0x30
 8012172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012174:	2b00      	cmp	r3, #0
 8012176:	f000 817e 	beq.w	8012476 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801217c:	895b      	ldrh	r3, [r3, #10]
 801217e:	8b3a      	ldrh	r2, [r7, #24]
 8012180:	429a      	cmp	r2, r3
 8012182:	d906      	bls.n	8012192 <tcp_write+0x35e>
 8012184:	4b8f      	ldr	r3, [pc, #572]	; (80123c4 <tcp_write+0x590>)
 8012186:	f240 2241 	movw	r2, #577	; 0x241
 801218a:	498f      	ldr	r1, [pc, #572]	; (80123c8 <tcp_write+0x594>)
 801218c:	488f      	ldr	r0, [pc, #572]	; (80123cc <tcp_write+0x598>)
 801218e:	f004 fa97 	bl	80166c0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8012192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012194:	685a      	ldr	r2, [r3, #4]
 8012196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801219a:	18d0      	adds	r0, r2, r3
 801219c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121a0:	68ba      	ldr	r2, [r7, #8]
 80121a2:	4413      	add	r3, r2
 80121a4:	8b3a      	ldrh	r2, [r7, #24]
 80121a6:	4619      	mov	r1, r3
 80121a8:	f004 fa77 	bl	801669a <memcpy>
 80121ac:	e02e      	b.n	801220c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80121ae:	8a7b      	ldrh	r3, [r7, #18]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d006      	beq.n	80121c2 <tcp_write+0x38e>
 80121b4:	4b83      	ldr	r3, [pc, #524]	; (80123c4 <tcp_write+0x590>)
 80121b6:	f240 224b 	movw	r2, #587	; 0x24b
 80121ba:	4985      	ldr	r1, [pc, #532]	; (80123d0 <tcp_write+0x59c>)
 80121bc:	4883      	ldr	r0, [pc, #524]	; (80123cc <tcp_write+0x598>)
 80121be:	f004 fa7f 	bl	80166c0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80121c2:	8b3b      	ldrh	r3, [r7, #24]
 80121c4:	2201      	movs	r2, #1
 80121c6:	4619      	mov	r1, r3
 80121c8:	2000      	movs	r0, #0
 80121ca:	f7fa feb7 	bl	800cf3c <pbuf_alloc>
 80121ce:	6178      	str	r0, [r7, #20]
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	f000 8151 	beq.w	801247a <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 80121d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121dc:	68ba      	ldr	r2, [r7, #8]
 80121de:	441a      	add	r2, r3
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80121e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121e8:	b29b      	uxth	r3, r3
 80121ea:	2200      	movs	r2, #0
 80121ec:	4619      	mov	r1, r3
 80121ee:	2000      	movs	r0, #0
 80121f0:	f7fa fea4 	bl	800cf3c <pbuf_alloc>
 80121f4:	6338      	str	r0, [r7, #48]	; 0x30
 80121f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d103      	bne.n	8012204 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80121fc:	6978      	ldr	r0, [r7, #20]
 80121fe:	f7fb fa0f 	bl	800d620 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012202:	e13d      	b.n	8012480 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012204:	6979      	ldr	r1, [r7, #20]
 8012206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012208:	f7fb fae4 	bl	800d7d4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801220c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801220e:	f7fb faa1 	bl	800d754 <pbuf_clen>
 8012212:	4603      	mov	r3, r0
 8012214:	461a      	mov	r2, r3
 8012216:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801221a:	4413      	add	r3, r2
 801221c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8012220:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012224:	2b09      	cmp	r3, #9
 8012226:	d805      	bhi.n	8012234 <tcp_write+0x400>
 8012228:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801222c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8012230:	4293      	cmp	r3, r2
 8012232:	d903      	bls.n	801223c <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012236:	f7fb f9f3 	bl	800d620 <pbuf_free>
      goto memerr;
 801223a:	e121      	b.n	8012480 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012240:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012244:	441a      	add	r2, r3
 8012246:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801224a:	9300      	str	r3, [sp, #0]
 801224c:	4613      	mov	r3, r2
 801224e:	2200      	movs	r2, #0
 8012250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012252:	68f8      	ldr	r0, [r7, #12]
 8012254:	f7ff fc8e 	bl	8011b74 <tcp_create_segment>
 8012258:	64f8      	str	r0, [r7, #76]	; 0x4c
 801225a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801225c:	2b00      	cmp	r3, #0
 801225e:	f000 810e 	beq.w	801247e <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012264:	2b00      	cmp	r3, #0
 8012266:	d102      	bne.n	801226e <tcp_write+0x43a>
      queue = seg;
 8012268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801226a:	647b      	str	r3, [r7, #68]	; 0x44
 801226c:	e00c      	b.n	8012288 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801226e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012270:	2b00      	cmp	r3, #0
 8012272:	d106      	bne.n	8012282 <tcp_write+0x44e>
 8012274:	4b53      	ldr	r3, [pc, #332]	; (80123c4 <tcp_write+0x590>)
 8012276:	f240 2285 	movw	r2, #645	; 0x285
 801227a:	4956      	ldr	r1, [pc, #344]	; (80123d4 <tcp_write+0x5a0>)
 801227c:	4853      	ldr	r0, [pc, #332]	; (80123cc <tcp_write+0x598>)
 801227e:	f004 fa1f 	bl	80166c0 <iprintf>
      prev_seg->next = seg;
 8012282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012286:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801228a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801228c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012290:	8b3b      	ldrh	r3, [r7, #24]
 8012292:	4413      	add	r3, r2
 8012294:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012298:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801229c:	88fb      	ldrh	r3, [r7, #6]
 801229e:	429a      	cmp	r2, r3
 80122a0:	f4ff af38 	bcc.w	8012114 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80122a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d02c      	beq.n	8012304 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80122aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122ac:	685b      	ldr	r3, [r3, #4]
 80122ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122b0:	e01e      	b.n	80122f0 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 80122b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122b4:	891a      	ldrh	r2, [r3, #8]
 80122b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80122b8:	4413      	add	r3, r2
 80122ba:	b29a      	uxth	r2, r3
 80122bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122be:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80122c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d110      	bne.n	80122ea <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80122c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122ce:	8952      	ldrh	r2, [r2, #10]
 80122d0:	4413      	add	r3, r2
 80122d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80122d4:	68b9      	ldr	r1, [r7, #8]
 80122d6:	4618      	mov	r0, r3
 80122d8:	f004 f9df 	bl	801669a <memcpy>
        p->len += oversize_used;
 80122dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122de:	895a      	ldrh	r2, [r3, #10]
 80122e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80122e2:	4413      	add	r3, r2
 80122e4:	b29a      	uxth	r2, r3
 80122e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e8:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80122ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d1dd      	bne.n	80122b2 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 80122f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122f8:	891a      	ldrh	r2, [r3, #8]
 80122fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80122fc:	4413      	add	r3, r2
 80122fe:	b29a      	uxth	r2, r3
 8012300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012302:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012304:	8a7a      	ldrh	r2, [r7, #18]
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801230c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801230e:	2b00      	cmp	r3, #0
 8012310:	d018      	beq.n	8012344 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012314:	2b00      	cmp	r3, #0
 8012316:	d106      	bne.n	8012326 <tcp_write+0x4f2>
 8012318:	4b2a      	ldr	r3, [pc, #168]	; (80123c4 <tcp_write+0x590>)
 801231a:	f240 22bb 	movw	r2, #699	; 0x2bb
 801231e:	492e      	ldr	r1, [pc, #184]	; (80123d8 <tcp_write+0x5a4>)
 8012320:	482a      	ldr	r0, [pc, #168]	; (80123cc <tcp_write+0x598>)
 8012322:	f004 f9cd 	bl	80166c0 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012328:	685b      	ldr	r3, [r3, #4]
 801232a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801232c:	4618      	mov	r0, r3
 801232e:	f7fb fa51 	bl	800d7d4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012334:	891a      	ldrh	r2, [r3, #8]
 8012336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012338:	891b      	ldrh	r3, [r3, #8]
 801233a:	4413      	add	r3, r2
 801233c:	b29a      	uxth	r2, r3
 801233e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012340:	811a      	strh	r2, [r3, #8]
 8012342:	e037      	b.n	80123b4 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8012344:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012346:	2b00      	cmp	r3, #0
 8012348:	d034      	beq.n	80123b4 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801234a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801234c:	2b00      	cmp	r3, #0
 801234e:	d003      	beq.n	8012358 <tcp_write+0x524>
 8012350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012352:	685b      	ldr	r3, [r3, #4]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d106      	bne.n	8012366 <tcp_write+0x532>
 8012358:	4b1a      	ldr	r3, [pc, #104]	; (80123c4 <tcp_write+0x590>)
 801235a:	f240 22c1 	movw	r2, #705	; 0x2c1
 801235e:	491f      	ldr	r1, [pc, #124]	; (80123dc <tcp_write+0x5a8>)
 8012360:	481a      	ldr	r0, [pc, #104]	; (80123cc <tcp_write+0x598>)
 8012362:	f004 f9ad 	bl	80166c0 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012368:	685b      	ldr	r3, [r3, #4]
 801236a:	62bb      	str	r3, [r7, #40]	; 0x28
 801236c:	e009      	b.n	8012382 <tcp_write+0x54e>
      p->tot_len += extendlen;
 801236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012370:	891a      	ldrh	r2, [r3, #8]
 8012372:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012374:	4413      	add	r3, r2
 8012376:	b29a      	uxth	r2, r3
 8012378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801237a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801237c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	62bb      	str	r3, [r7, #40]	; 0x28
 8012382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d1f1      	bne.n	801236e <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 801238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801238c:	891a      	ldrh	r2, [r3, #8]
 801238e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012390:	4413      	add	r3, r2
 8012392:	b29a      	uxth	r2, r3
 8012394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012396:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801239a:	895a      	ldrh	r2, [r3, #10]
 801239c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801239e:	4413      	add	r3, r2
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a4:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80123a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123a8:	891a      	ldrh	r2, [r3, #8]
 80123aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123ac:	4413      	add	r3, r2
 80123ae:	b29a      	uxth	r2, r3
 80123b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123b2:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80123b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d112      	bne.n	80123e0 <tcp_write+0x5ac>
    pcb->unsent = queue;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123be:	669a      	str	r2, [r3, #104]	; 0x68
 80123c0:	e011      	b.n	80123e6 <tcp_write+0x5b2>
 80123c2:	bf00      	nop
 80123c4:	0801952c 	.word	0x0801952c
 80123c8:	0801973c 	.word	0x0801973c
 80123cc:	08019590 	.word	0x08019590
 80123d0:	0801977c 	.word	0x0801977c
 80123d4:	0801978c 	.word	0x0801978c
 80123d8:	080197a0 	.word	0x080197a0
 80123dc:	080197d8 	.word	0x080197d8
  } else {
    last_unsent->next = queue;
 80123e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123e4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80123ea:	88fb      	ldrh	r3, [r7, #6]
 80123ec:	441a      	add	r2, r3
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80123f8:	88fb      	ldrh	r3, [r7, #6]
 80123fa:	1ad3      	subs	r3, r2, r3
 80123fc:	b29a      	uxth	r2, r3
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801240a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012414:	2b00      	cmp	r3, #0
 8012416:	d00e      	beq.n	8012436 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801241c:	2b00      	cmp	r3, #0
 801241e:	d10a      	bne.n	8012436 <tcp_write+0x602>
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012424:	2b00      	cmp	r3, #0
 8012426:	d106      	bne.n	8012436 <tcp_write+0x602>
 8012428:	4b2c      	ldr	r3, [pc, #176]	; (80124dc <tcp_write+0x6a8>)
 801242a:	f240 22ed 	movw	r2, #749	; 0x2ed
 801242e:	492c      	ldr	r1, [pc, #176]	; (80124e0 <tcp_write+0x6ac>)
 8012430:	482c      	ldr	r0, [pc, #176]	; (80124e4 <tcp_write+0x6b0>)
 8012432:	f004 f945 	bl	80166c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8012436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012438:	2b00      	cmp	r3, #0
 801243a:	d016      	beq.n	801246a <tcp_write+0x636>
 801243c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801243e:	68db      	ldr	r3, [r3, #12]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d012      	beq.n	801246a <tcp_write+0x636>
 8012444:	797b      	ldrb	r3, [r7, #5]
 8012446:	f003 0302 	and.w	r3, r3, #2
 801244a:	2b00      	cmp	r3, #0
 801244c:	d10d      	bne.n	801246a <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801244e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012450:	68db      	ldr	r3, [r3, #12]
 8012452:	899b      	ldrh	r3, [r3, #12]
 8012454:	b29c      	uxth	r4, r3
 8012456:	2008      	movs	r0, #8
 8012458:	f7f9 fece 	bl	800c1f8 <lwip_htons>
 801245c:	4603      	mov	r3, r0
 801245e:	461a      	mov	r2, r3
 8012460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012462:	68db      	ldr	r3, [r3, #12]
 8012464:	4322      	orrs	r2, r4
 8012466:	b292      	uxth	r2, r2
 8012468:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801246a:	2300      	movs	r3, #0
 801246c:	e031      	b.n	80124d2 <tcp_write+0x69e>
          goto memerr;
 801246e:	bf00      	nop
 8012470:	e006      	b.n	8012480 <tcp_write+0x64c>
            goto memerr;
 8012472:	bf00      	nop
 8012474:	e004      	b.n	8012480 <tcp_write+0x64c>
        goto memerr;
 8012476:	bf00      	nop
 8012478:	e002      	b.n	8012480 <tcp_write+0x64c>
        goto memerr;
 801247a:	bf00      	nop
 801247c:	e000      	b.n	8012480 <tcp_write+0x64c>
      goto memerr;
 801247e:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	8b5b      	ldrh	r3, [r3, #26]
 8012484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012488:	b29a      	uxth	r2, r3
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801248e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012490:	2b00      	cmp	r3, #0
 8012492:	d002      	beq.n	801249a <tcp_write+0x666>
    pbuf_free(concat_p);
 8012494:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012496:	f7fb f8c3 	bl	800d620 <pbuf_free>
  }
  if (queue != NULL) {
 801249a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801249c:	2b00      	cmp	r3, #0
 801249e:	d002      	beq.n	80124a6 <tcp_write+0x672>
    tcp_segs_free(queue);
 80124a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80124a2:	f7fc fca4 	bl	800edee <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d00e      	beq.n	80124ce <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d10a      	bne.n	80124ce <tcp_write+0x69a>
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d106      	bne.n	80124ce <tcp_write+0x69a>
 80124c0:	4b06      	ldr	r3, [pc, #24]	; (80124dc <tcp_write+0x6a8>)
 80124c2:	f240 3202 	movw	r2, #770	; 0x302
 80124c6:	4906      	ldr	r1, [pc, #24]	; (80124e0 <tcp_write+0x6ac>)
 80124c8:	4806      	ldr	r0, [pc, #24]	; (80124e4 <tcp_write+0x6b0>)
 80124ca:	f004 f8f9 	bl	80166c0 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80124ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	375c      	adds	r7, #92	; 0x5c
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd90      	pop	{r4, r7, pc}
 80124da:	bf00      	nop
 80124dc:	0801952c 	.word	0x0801952c
 80124e0:	08019810 	.word	0x08019810
 80124e4:	08019590 	.word	0x08019590

080124e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b08a      	sub	sp, #40	; 0x28
 80124ec:	af02      	add	r7, sp, #8
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	460b      	mov	r3, r1
 80124f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80124f4:	2300      	movs	r3, #0
 80124f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80124f8:	2300      	movs	r3, #0
 80124fa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80124fc:	78fb      	ldrb	r3, [r7, #3]
 80124fe:	f003 0303 	and.w	r3, r3, #3
 8012502:	2b00      	cmp	r3, #0
 8012504:	d106      	bne.n	8012514 <tcp_enqueue_flags+0x2c>
 8012506:	4b6f      	ldr	r3, [pc, #444]	; (80126c4 <tcp_enqueue_flags+0x1dc>)
 8012508:	f240 321b 	movw	r2, #795	; 0x31b
 801250c:	496e      	ldr	r1, [pc, #440]	; (80126c8 <tcp_enqueue_flags+0x1e0>)
 801250e:	486f      	ldr	r0, [pc, #444]	; (80126cc <tcp_enqueue_flags+0x1e4>)
 8012510:	f004 f8d6 	bl	80166c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801251a:	2b08      	cmp	r3, #8
 801251c:	d806      	bhi.n	801252c <tcp_enqueue_flags+0x44>
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012524:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8012528:	4293      	cmp	r3, r2
 801252a:	d90e      	bls.n	801254a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 801252c:	78fb      	ldrb	r3, [r7, #3]
 801252e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8012532:	2b00      	cmp	r3, #0
 8012534:	d109      	bne.n	801254a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	8b5b      	ldrh	r3, [r3, #26]
 801253a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801253e:	b29a      	uxth	r2, r3
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012548:	e0b7      	b.n	80126ba <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 801254a:	78fb      	ldrb	r3, [r7, #3]
 801254c:	f003 0302 	and.w	r3, r3, #2
 8012550:	2b00      	cmp	r3, #0
 8012552:	d001      	beq.n	8012558 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8012554:	2301      	movs	r3, #1
 8012556:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012558:	7ffb      	ldrb	r3, [r7, #31]
 801255a:	009b      	lsls	r3, r3, #2
 801255c:	b2db      	uxtb	r3, r3
 801255e:	f003 0304 	and.w	r3, r3, #4
 8012562:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012564:	7dfb      	ldrb	r3, [r7, #23]
 8012566:	b29b      	uxth	r3, r3
 8012568:	2200      	movs	r2, #0
 801256a:	4619      	mov	r1, r3
 801256c:	2000      	movs	r0, #0
 801256e:	f7fa fce5 	bl	800cf3c <pbuf_alloc>
 8012572:	6138      	str	r0, [r7, #16]
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d109      	bne.n	801258e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	8b5b      	ldrh	r3, [r3, #26]
 801257e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012582:	b29a      	uxth	r2, r3
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801258c:	e095      	b.n	80126ba <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801258e:	693b      	ldr	r3, [r7, #16]
 8012590:	895a      	ldrh	r2, [r3, #10]
 8012592:	7dfb      	ldrb	r3, [r7, #23]
 8012594:	b29b      	uxth	r3, r3
 8012596:	429a      	cmp	r2, r3
 8012598:	d206      	bcs.n	80125a8 <tcp_enqueue_flags+0xc0>
 801259a:	4b4a      	ldr	r3, [pc, #296]	; (80126c4 <tcp_enqueue_flags+0x1dc>)
 801259c:	f240 3241 	movw	r2, #833	; 0x341
 80125a0:	494b      	ldr	r1, [pc, #300]	; (80126d0 <tcp_enqueue_flags+0x1e8>)
 80125a2:	484a      	ldr	r0, [pc, #296]	; (80126cc <tcp_enqueue_flags+0x1e4>)
 80125a4:	f004 f88c 	bl	80166c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80125ac:	78fa      	ldrb	r2, [r7, #3]
 80125ae:	7ffb      	ldrb	r3, [r7, #31]
 80125b0:	9300      	str	r3, [sp, #0]
 80125b2:	460b      	mov	r3, r1
 80125b4:	6939      	ldr	r1, [r7, #16]
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f7ff fadc 	bl	8011b74 <tcp_create_segment>
 80125bc:	60f8      	str	r0, [r7, #12]
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d109      	bne.n	80125d8 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	8b5b      	ldrh	r3, [r3, #26]
 80125c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125cc:	b29a      	uxth	r2, r3
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80125d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125d6:	e070      	b.n	80126ba <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	68db      	ldr	r3, [r3, #12]
 80125dc:	f003 0303 	and.w	r3, r3, #3
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d006      	beq.n	80125f2 <tcp_enqueue_flags+0x10a>
 80125e4:	4b37      	ldr	r3, [pc, #220]	; (80126c4 <tcp_enqueue_flags+0x1dc>)
 80125e6:	f240 3249 	movw	r2, #841	; 0x349
 80125ea:	493a      	ldr	r1, [pc, #232]	; (80126d4 <tcp_enqueue_flags+0x1ec>)
 80125ec:	4837      	ldr	r0, [pc, #220]	; (80126cc <tcp_enqueue_flags+0x1e4>)
 80125ee:	f004 f867 	bl	80166c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	891b      	ldrh	r3, [r3, #8]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d006      	beq.n	8012608 <tcp_enqueue_flags+0x120>
 80125fa:	4b32      	ldr	r3, [pc, #200]	; (80126c4 <tcp_enqueue_flags+0x1dc>)
 80125fc:	f240 324a 	movw	r2, #842	; 0x34a
 8012600:	4935      	ldr	r1, [pc, #212]	; (80126d8 <tcp_enqueue_flags+0x1f0>)
 8012602:	4832      	ldr	r0, [pc, #200]	; (80126cc <tcp_enqueue_flags+0x1e4>)
 8012604:	f004 f85c 	bl	80166c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801260c:	2b00      	cmp	r3, #0
 801260e:	d103      	bne.n	8012618 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	68fa      	ldr	r2, [r7, #12]
 8012614:	669a      	str	r2, [r3, #104]	; 0x68
 8012616:	e00d      	b.n	8012634 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801261c:	61bb      	str	r3, [r7, #24]
 801261e:	e002      	b.n	8012626 <tcp_enqueue_flags+0x13e>
 8012620:	69bb      	ldr	r3, [r7, #24]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	61bb      	str	r3, [r7, #24]
 8012626:	69bb      	ldr	r3, [r7, #24]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d1f8      	bne.n	8012620 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801262e:	69bb      	ldr	r3, [r7, #24]
 8012630:	68fa      	ldr	r2, [r7, #12]
 8012632:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	2200      	movs	r2, #0
 8012638:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801263c:	78fb      	ldrb	r3, [r7, #3]
 801263e:	f003 0302 	and.w	r3, r3, #2
 8012642:	2b00      	cmp	r3, #0
 8012644:	d104      	bne.n	8012650 <tcp_enqueue_flags+0x168>
 8012646:	78fb      	ldrb	r3, [r7, #3]
 8012648:	f003 0301 	and.w	r3, r3, #1
 801264c:	2b00      	cmp	r3, #0
 801264e:	d004      	beq.n	801265a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012654:	1c5a      	adds	r2, r3, #1
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801265a:	78fb      	ldrb	r3, [r7, #3]
 801265c:	f003 0301 	and.w	r3, r3, #1
 8012660:	2b00      	cmp	r3, #0
 8012662:	d006      	beq.n	8012672 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	8b5b      	ldrh	r3, [r3, #26]
 8012668:	f043 0320 	orr.w	r3, r3, #32
 801266c:	b29a      	uxth	r2, r3
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	4618      	mov	r0, r3
 8012678:	f7fb f86c 	bl	800d754 <pbuf_clen>
 801267c:	4603      	mov	r3, r0
 801267e:	461a      	mov	r2, r3
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012686:	4413      	add	r3, r2
 8012688:	b29a      	uxth	r2, r3
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012696:	2b00      	cmp	r3, #0
 8012698:	d00e      	beq.n	80126b8 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d10a      	bne.n	80126b8 <tcp_enqueue_flags+0x1d0>
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d106      	bne.n	80126b8 <tcp_enqueue_flags+0x1d0>
 80126aa:	4b06      	ldr	r3, [pc, #24]	; (80126c4 <tcp_enqueue_flags+0x1dc>)
 80126ac:	f240 326d 	movw	r2, #877	; 0x36d
 80126b0:	490a      	ldr	r1, [pc, #40]	; (80126dc <tcp_enqueue_flags+0x1f4>)
 80126b2:	4806      	ldr	r0, [pc, #24]	; (80126cc <tcp_enqueue_flags+0x1e4>)
 80126b4:	f004 f804 	bl	80166c0 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80126b8:	2300      	movs	r3, #0
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	3720      	adds	r7, #32
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	0801952c 	.word	0x0801952c
 80126c8:	08019830 	.word	0x08019830
 80126cc:	08019590 	.word	0x08019590
 80126d0:	08019888 	.word	0x08019888
 80126d4:	080198c4 	.word	0x080198c4
 80126d8:	080198dc 	.word	0x080198dc
 80126dc:	08019908 	.word	0x08019908

080126e0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80126e0:	b590      	push	{r4, r7, lr}
 80126e2:	b08b      	sub	sp, #44	; 0x2c
 80126e4:	af04      	add	r7, sp, #16
 80126e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80126e8:	2300      	movs	r3, #0
 80126ea:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80126ec:	7dbb      	ldrb	r3, [r7, #22]
 80126ee:	b29c      	uxth	r4, r3
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126f4:	4618      	mov	r0, r3
 80126f6:	f7f9 fd8d 	bl	800c214 <lwip_htonl>
 80126fa:	4603      	mov	r3, r0
 80126fc:	2200      	movs	r2, #0
 80126fe:	4621      	mov	r1, r4
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f7ff f97b 	bl	80119fc <tcp_output_alloc_header>
 8012706:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d109      	bne.n	8012722 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	8b5b      	ldrh	r3, [r3, #26]
 8012712:	f043 0303 	orr.w	r3, r3, #3
 8012716:	b29a      	uxth	r2, r3
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801271c:	f06f 0301 	mvn.w	r3, #1
 8012720:	e036      	b.n	8012790 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	3304      	adds	r3, #4
 8012726:	4618      	mov	r0, r3
 8012728:	f002 fb6c 	bl	8014e04 <ip4_route>
 801272c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d102      	bne.n	801273a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8012734:	23fc      	movs	r3, #252	; 0xfc
 8012736:	75fb      	strb	r3, [r7, #23]
 8012738:	e012      	b.n	8012760 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801273a:	6879      	ldr	r1, [r7, #4]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	1d18      	adds	r0, r3, #4
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	7a9c      	ldrb	r4, [r3, #10]
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	7a5b      	ldrb	r3, [r3, #9]
 8012748:	68fa      	ldr	r2, [r7, #12]
 801274a:	9202      	str	r2, [sp, #8]
 801274c:	2206      	movs	r2, #6
 801274e:	9201      	str	r2, [sp, #4]
 8012750:	9300      	str	r3, [sp, #0]
 8012752:	4623      	mov	r3, r4
 8012754:	4602      	mov	r2, r0
 8012756:	6938      	ldr	r0, [r7, #16]
 8012758:	f002 fcfc 	bl	8015154 <ip4_output_if>
 801275c:	4603      	mov	r3, r0
 801275e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8012760:	6938      	ldr	r0, [r7, #16]
 8012762:	f7fa ff5d 	bl	800d620 <pbuf_free>

  if (err != ERR_OK) {
 8012766:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d007      	beq.n	801277e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	8b5b      	ldrh	r3, [r3, #26]
 8012772:	f043 0303 	orr.w	r3, r3, #3
 8012776:	b29a      	uxth	r2, r3
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	835a      	strh	r2, [r3, #26]
 801277c:	e006      	b.n	801278c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	8b5b      	ldrh	r3, [r3, #26]
 8012782:	f023 0303 	bic.w	r3, r3, #3
 8012786:	b29a      	uxth	r2, r3
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801278c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012790:	4618      	mov	r0, r3
 8012792:	371c      	adds	r7, #28
 8012794:	46bd      	mov	sp, r7
 8012796:	bd90      	pop	{r4, r7, pc}

08012798 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012798:	b5b0      	push	{r4, r5, r7, lr}
 801279a:	b08a      	sub	sp, #40	; 0x28
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	7d1b      	ldrb	r3, [r3, #20]
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d106      	bne.n	80127b6 <tcp_output+0x1e>
 80127a8:	4b9b      	ldr	r3, [pc, #620]	; (8012a18 <tcp_output+0x280>)
 80127aa:	f240 32ed 	movw	r2, #1005	; 0x3ed
 80127ae:	499b      	ldr	r1, [pc, #620]	; (8012a1c <tcp_output+0x284>)
 80127b0:	489b      	ldr	r0, [pc, #620]	; (8012a20 <tcp_output+0x288>)
 80127b2:	f003 ff85 	bl	80166c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80127b6:	4b9b      	ldr	r3, [pc, #620]	; (8012a24 <tcp_output+0x28c>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	687a      	ldr	r2, [r7, #4]
 80127bc:	429a      	cmp	r2, r3
 80127be:	d101      	bne.n	80127c4 <tcp_output+0x2c>
    return ERR_OK;
 80127c0:	2300      	movs	r3, #0
 80127c2:	e1cf      	b.n	8012b64 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80127d0:	429a      	cmp	r2, r3
 80127d2:	d203      	bcs.n	80127dc <tcp_output+0x44>
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80127da:	e002      	b.n	80127e2 <tcp_output+0x4a>
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80127e2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80127e8:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	8b5b      	ldrh	r3, [r3, #26]
 80127ee:	f003 0302 	and.w	r3, r3, #2
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d017      	beq.n	8012826 <tcp_output+0x8e>
 80127f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d00f      	beq.n	801281c <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80127fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127fe:	68db      	ldr	r3, [r3, #12]
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	4618      	mov	r0, r3
 8012804:	f7f9 fd06 	bl	800c214 <lwip_htonl>
 8012808:	4602      	mov	r2, r0
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801280e:	1ad3      	subs	r3, r2, r3
 8012810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012812:	8912      	ldrh	r2, [r2, #8]
 8012814:	4413      	add	r3, r2
     (seg == NULL ||
 8012816:	69ba      	ldr	r2, [r7, #24]
 8012818:	429a      	cmp	r2, r3
 801281a:	d204      	bcs.n	8012826 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 801281c:	6878      	ldr	r0, [r7, #4]
 801281e:	f7ff ff5f 	bl	80126e0 <tcp_send_empty_ack>
 8012822:	4603      	mov	r3, r0
 8012824:	e19e      	b.n	8012b64 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801282a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801282c:	6a3b      	ldr	r3, [r7, #32]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d007      	beq.n	8012842 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8012832:	e002      	b.n	801283a <tcp_output+0xa2>
 8012834:	6a3b      	ldr	r3, [r7, #32]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	623b      	str	r3, [r7, #32]
 801283a:	6a3b      	ldr	r3, [r7, #32]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d1f8      	bne.n	8012834 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	3304      	adds	r3, #4
 8012846:	4618      	mov	r0, r3
 8012848:	f002 fadc 	bl	8014e04 <ip4_route>
 801284c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d102      	bne.n	801285a <tcp_output+0xc2>
    return ERR_RTE;
 8012854:	f06f 0303 	mvn.w	r3, #3
 8012858:	e184      	b.n	8012b64 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d003      	beq.n	8012868 <tcp_output+0xd0>
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d111      	bne.n	801288c <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d002      	beq.n	8012874 <tcp_output+0xdc>
 801286e:	697b      	ldr	r3, [r7, #20]
 8012870:	3304      	adds	r3, #4
 8012872:	e000      	b.n	8012876 <tcp_output+0xde>
 8012874:	2300      	movs	r3, #0
 8012876:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012878:	693b      	ldr	r3, [r7, #16]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d102      	bne.n	8012884 <tcp_output+0xec>
      return ERR_RTE;
 801287e:	f06f 0303 	mvn.w	r3, #3
 8012882:	e16f      	b.n	8012b64 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	681a      	ldr	r2, [r3, #0]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 801288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288e:	2b00      	cmp	r3, #0
 8012890:	f000 813e 	beq.w	8012b10 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8012894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012896:	68db      	ldr	r3, [r3, #12]
 8012898:	685b      	ldr	r3, [r3, #4]
 801289a:	4618      	mov	r0, r3
 801289c:	f7f9 fcba 	bl	800c214 <lwip_htonl>
 80128a0:	4602      	mov	r2, r0
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128a6:	1ad3      	subs	r3, r2, r3
 80128a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128aa:	8912      	ldrh	r2, [r2, #8]
 80128ac:	4413      	add	r3, r2
  if (seg != NULL &&
 80128ae:	69ba      	ldr	r2, [r7, #24]
 80128b0:	429a      	cmp	r2, r3
 80128b2:	f080 812d 	bcs.w	8012b10 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80128b6:	69bb      	ldr	r3, [r7, #24]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	f000 8129 	beq.w	8012b10 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80128c4:	461a      	mov	r2, r3
 80128c6:	69bb      	ldr	r3, [r7, #24]
 80128c8:	4293      	cmp	r3, r2
 80128ca:	f040 8121 	bne.w	8012b10 <tcp_output+0x378>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	f040 811c 	bne.w	8012b10 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80128de:	2b00      	cmp	r3, #0
 80128e0:	f040 812b 	bne.w	8012b3a <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2200      	movs	r2, #0
 80128e8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
      pcb->persist_backoff = 1;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2201      	movs	r2, #1
 80128f0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    }
    goto output_done;
 80128f4:	e121      	b.n	8012b3a <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80128f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f8:	68db      	ldr	r3, [r3, #12]
 80128fa:	899b      	ldrh	r3, [r3, #12]
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	4618      	mov	r0, r3
 8012900:	f7f9 fc7a 	bl	800c1f8 <lwip_htons>
 8012904:	4603      	mov	r3, r0
 8012906:	f003 0304 	and.w	r3, r3, #4
 801290a:	2b00      	cmp	r3, #0
 801290c:	d006      	beq.n	801291c <tcp_output+0x184>
 801290e:	4b42      	ldr	r3, [pc, #264]	; (8012a18 <tcp_output+0x280>)
 8012910:	f240 4246 	movw	r2, #1094	; 0x446
 8012914:	4944      	ldr	r1, [pc, #272]	; (8012a28 <tcp_output+0x290>)
 8012916:	4842      	ldr	r0, [pc, #264]	; (8012a20 <tcp_output+0x288>)
 8012918:	f003 fed2 	bl	80166c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012920:	2b00      	cmp	r3, #0
 8012922:	d01f      	beq.n	8012964 <tcp_output+0x1cc>
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	8b5b      	ldrh	r3, [r3, #26]
 8012928:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801292c:	2b00      	cmp	r3, #0
 801292e:	d119      	bne.n	8012964 <tcp_output+0x1cc>
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012934:	2b00      	cmp	r3, #0
 8012936:	d00b      	beq.n	8012950 <tcp_output+0x1b8>
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d110      	bne.n	8012964 <tcp_output+0x1cc>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012946:	891a      	ldrh	r2, [r3, #8]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801294c:	429a      	cmp	r2, r3
 801294e:	d209      	bcs.n	8012964 <tcp_output+0x1cc>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012956:	2b00      	cmp	r3, #0
 8012958:	d004      	beq.n	8012964 <tcp_output+0x1cc>
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012960:	2b08      	cmp	r3, #8
 8012962:	d901      	bls.n	8012968 <tcp_output+0x1d0>
 8012964:	2301      	movs	r3, #1
 8012966:	e000      	b.n	801296a <tcp_output+0x1d2>
 8012968:	2300      	movs	r3, #0
 801296a:	2b00      	cmp	r3, #0
 801296c:	d106      	bne.n	801297c <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	8b5b      	ldrh	r3, [r3, #26]
 8012972:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012976:	2b00      	cmp	r3, #0
 8012978:	f000 80e1 	beq.w	8012b3e <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	7d1b      	ldrb	r3, [r3, #20]
 8012980:	2b02      	cmp	r3, #2
 8012982:	d00d      	beq.n	80129a0 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012986:	68db      	ldr	r3, [r3, #12]
 8012988:	899b      	ldrh	r3, [r3, #12]
 801298a:	b29c      	uxth	r4, r3
 801298c:	2010      	movs	r0, #16
 801298e:	f7f9 fc33 	bl	800c1f8 <lwip_htons>
 8012992:	4603      	mov	r3, r0
 8012994:	461a      	mov	r2, r3
 8012996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012998:	68db      	ldr	r3, [r3, #12]
 801299a:	4322      	orrs	r2, r4
 801299c:	b292      	uxth	r2, r2
 801299e:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 80129a0:	697a      	ldr	r2, [r7, #20]
 80129a2:	6879      	ldr	r1, [r7, #4]
 80129a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129a6:	f000 f8e1 	bl	8012b6c <tcp_output_segment>
 80129aa:	4603      	mov	r3, r0
 80129ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80129ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d009      	beq.n	80129ca <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	8b5b      	ldrh	r3, [r3, #26]
 80129ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129be:	b29a      	uxth	r2, r3
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	835a      	strh	r2, [r3, #26]
      return err;
 80129c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129c8:	e0cc      	b.n	8012b64 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 80129ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129cc:	681a      	ldr	r2, [r3, #0]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	7d1b      	ldrb	r3, [r3, #20]
 80129d6:	2b02      	cmp	r3, #2
 80129d8:	d006      	beq.n	80129e8 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	8b5b      	ldrh	r3, [r3, #26]
 80129de:	f023 0303 	bic.w	r3, r3, #3
 80129e2:	b29a      	uxth	r2, r3
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80129e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ea:	68db      	ldr	r3, [r3, #12]
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7f9 fc10 	bl	800c214 <lwip_htonl>
 80129f4:	4604      	mov	r4, r0
 80129f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f8:	891b      	ldrh	r3, [r3, #8]
 80129fa:	461d      	mov	r5, r3
 80129fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fe:	68db      	ldr	r3, [r3, #12]
 8012a00:	899b      	ldrh	r3, [r3, #12]
 8012a02:	b29b      	uxth	r3, r3
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7f9 fbf7 	bl	800c1f8 <lwip_htons>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	f003 0303 	and.w	r3, r3, #3
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d00b      	beq.n	8012a2c <tcp_output+0x294>
 8012a14:	2301      	movs	r3, #1
 8012a16:	e00a      	b.n	8012a2e <tcp_output+0x296>
 8012a18:	0801952c 	.word	0x0801952c
 8012a1c:	08019930 	.word	0x08019930
 8012a20:	08019590 	.word	0x08019590
 8012a24:	2000dc68 	.word	0x2000dc68
 8012a28:	08019958 	.word	0x08019958
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	442b      	add	r3, r5
 8012a30:	4423      	add	r3, r4
 8012a32:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	1ad3      	subs	r3, r2, r3
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	da02      	bge.n	8012a46 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	68ba      	ldr	r2, [r7, #8]
 8012a44:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a48:	891b      	ldrh	r3, [r3, #8]
 8012a4a:	461c      	mov	r4, r3
 8012a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4e:	68db      	ldr	r3, [r3, #12]
 8012a50:	899b      	ldrh	r3, [r3, #12]
 8012a52:	b29b      	uxth	r3, r3
 8012a54:	4618      	mov	r0, r3
 8012a56:	f7f9 fbcf 	bl	800c1f8 <lwip_htons>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	f003 0303 	and.w	r3, r3, #3
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d001      	beq.n	8012a68 <tcp_output+0x2d0>
 8012a64:	2301      	movs	r3, #1
 8012a66:	e000      	b.n	8012a6a <tcp_output+0x2d2>
 8012a68:	2300      	movs	r3, #0
 8012a6a:	4423      	add	r3, r4
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d049      	beq.n	8012b04 <tcp_output+0x36c>
      seg->next = NULL;
 8012a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a72:	2200      	movs	r2, #0
 8012a74:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d105      	bne.n	8012a8a <tcp_output+0x2f2>
        pcb->unacked = seg;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a82:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8012a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a86:	623b      	str	r3, [r7, #32]
 8012a88:	e03f      	b.n	8012b0a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8c:	68db      	ldr	r3, [r3, #12]
 8012a8e:	685b      	ldr	r3, [r3, #4]
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7f9 fbbf 	bl	800c214 <lwip_htonl>
 8012a96:	4604      	mov	r4, r0
 8012a98:	6a3b      	ldr	r3, [r7, #32]
 8012a9a:	68db      	ldr	r3, [r3, #12]
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7f9 fbb8 	bl	800c214 <lwip_htonl>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	1ae3      	subs	r3, r4, r3
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	da24      	bge.n	8012af6 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	336c      	adds	r3, #108	; 0x6c
 8012ab0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012ab2:	e002      	b.n	8012aba <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8012ab4:	69fb      	ldr	r3, [r7, #28]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012aba:	69fb      	ldr	r3, [r7, #28]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d011      	beq.n	8012ae6 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012ac2:	69fb      	ldr	r3, [r7, #28]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	68db      	ldr	r3, [r3, #12]
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	4618      	mov	r0, r3
 8012acc:	f7f9 fba2 	bl	800c214 <lwip_htonl>
 8012ad0:	4604      	mov	r4, r0
 8012ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ad4:	68db      	ldr	r3, [r3, #12]
 8012ad6:	685b      	ldr	r3, [r3, #4]
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f7f9 fb9b 	bl	800c214 <lwip_htonl>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	dbe6      	blt.n	8012ab4 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8012ae6:	69fb      	ldr	r3, [r7, #28]
 8012ae8:	681a      	ldr	r2, [r3, #0]
 8012aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aec:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012aee:	69fb      	ldr	r3, [r7, #28]
 8012af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012af2:	601a      	str	r2, [r3, #0]
 8012af4:	e009      	b.n	8012b0a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012af6:	6a3b      	ldr	r3, [r7, #32]
 8012af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012afa:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012afc:	6a3b      	ldr	r3, [r7, #32]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	623b      	str	r3, [r7, #32]
 8012b02:	e002      	b.n	8012b0a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b06:	f7fc f986 	bl	800ee16 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d015      	beq.n	8012b42 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b18:	68db      	ldr	r3, [r3, #12]
 8012b1a:	685b      	ldr	r3, [r3, #4]
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f7f9 fb79 	bl	800c214 <lwip_htonl>
 8012b22:	4602      	mov	r2, r0
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b28:	1ad3      	subs	r3, r2, r3
 8012b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b2c:	8912      	ldrh	r2, [r2, #8]
 8012b2e:	4413      	add	r3, r2
  while (seg != NULL &&
 8012b30:	69ba      	ldr	r2, [r7, #24]
 8012b32:	429a      	cmp	r2, r3
 8012b34:	f4bf aedf 	bcs.w	80128f6 <tcp_output+0x15e>
  }
output_done:
 8012b38:	e003      	b.n	8012b42 <tcp_output+0x3aa>
    goto output_done;
 8012b3a:	bf00      	nop
 8012b3c:	e002      	b.n	8012b44 <tcp_output+0x3ac>
      break;
 8012b3e:	bf00      	nop
 8012b40:	e000      	b.n	8012b44 <tcp_output+0x3ac>
output_done:
 8012b42:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d103      	bne.n	8012b54 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	8b5b      	ldrh	r3, [r3, #26]
 8012b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012b5c:	b29a      	uxth	r2, r3
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012b62:	2300      	movs	r3, #0
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	3728      	adds	r7, #40	; 0x28
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bdb0      	pop	{r4, r5, r7, pc}

08012b6c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012b6c:	b5b0      	push	{r4, r5, r7, lr}
 8012b6e:	b08c      	sub	sp, #48	; 0x30
 8012b70:	af04      	add	r7, sp, #16
 8012b72:	60f8      	str	r0, [r7, #12]
 8012b74:	60b9      	str	r1, [r7, #8]
 8012b76:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	685b      	ldr	r3, [r3, #4]
 8012b7c:	89db      	ldrh	r3, [r3, #14]
 8012b7e:	2b01      	cmp	r3, #1
 8012b80:	d001      	beq.n	8012b86 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8012b82:	2300      	movs	r3, #0
 8012b84:	e08b      	b.n	8012c9e <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	68dc      	ldr	r4, [r3, #12]
 8012b8e:	4610      	mov	r0, r2
 8012b90:	f7f9 fb40 	bl	800c214 <lwip_htonl>
 8012b94:	4603      	mov	r3, r0
 8012b96:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	68dc      	ldr	r4, [r3, #12]
 8012ba0:	4610      	mov	r0, r2
 8012ba2:	f7f9 fb29 	bl	800c1f8 <lwip_htons>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bae:	68ba      	ldr	r2, [r7, #8]
 8012bb0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012bb2:	441a      	add	r2, r3
 8012bb4:	68bb      	ldr	r3, [r7, #8]
 8012bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	68db      	ldr	r3, [r3, #12]
 8012bbc:	3314      	adds	r3, #20
 8012bbe:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	7a9b      	ldrb	r3, [r3, #10]
 8012bc4:	f003 0301 	and.w	r3, r3, #1
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d014      	beq.n	8012bf6 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	3304      	adds	r3, #4
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012bd6:	f7fc fc55 	bl	800f484 <tcp_eff_send_mss_impl>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012bde:	8b7b      	ldrh	r3, [r7, #26]
 8012be0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012be4:	4618      	mov	r0, r3
 8012be6:	f7f9 fb15 	bl	800c214 <lwip_htonl>
 8012bea:	4602      	mov	r2, r0
 8012bec:	69fb      	ldr	r3, [r7, #28]
 8012bee:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012bf0:	69fb      	ldr	r3, [r7, #28]
 8012bf2:	3304      	adds	r3, #4
 8012bf4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	da02      	bge.n	8012c06 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	2200      	movs	r2, #0
 8012c04:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d10c      	bne.n	8012c28 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8012c0e:	4b26      	ldr	r3, [pc, #152]	; (8012ca8 <tcp_output_segment+0x13c>)
 8012c10:	681a      	ldr	r2, [r3, #0]
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	68db      	ldr	r3, [r3, #12]
 8012c1a:	685b      	ldr	r3, [r3, #4]
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7f9 faf9 	bl	800c214 <lwip_htonl>
 8012c22:	4602      	mov	r2, r0
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	68db      	ldr	r3, [r3, #12]
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	685b      	ldr	r3, [r3, #4]
 8012c32:	685b      	ldr	r3, [r3, #4]
 8012c34:	1ad3      	subs	r3, r2, r3
 8012c36:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	685b      	ldr	r3, [r3, #4]
 8012c3c:	8959      	ldrh	r1, [r3, #10]
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	685b      	ldr	r3, [r3, #4]
 8012c42:	8b3a      	ldrh	r2, [r7, #24]
 8012c44:	1a8a      	subs	r2, r1, r2
 8012c46:	b292      	uxth	r2, r2
 8012c48:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	685b      	ldr	r3, [r3, #4]
 8012c4e:	8919      	ldrh	r1, [r3, #8]
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	685b      	ldr	r3, [r3, #4]
 8012c54:	8b3a      	ldrh	r2, [r7, #24]
 8012c56:	1a8a      	subs	r2, r1, r2
 8012c58:	b292      	uxth	r2, r2
 8012c5a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	685b      	ldr	r3, [r3, #4]
 8012c60:	68fa      	ldr	r2, [r7, #12]
 8012c62:	68d2      	ldr	r2, [r2, #12]
 8012c64:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	68db      	ldr	r3, [r3, #12]
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	741a      	strb	r2, [r3, #16]
 8012c6e:	2200      	movs	r2, #0
 8012c70:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	6858      	ldr	r0, [r3, #4]
 8012c76:	68b9      	ldr	r1, [r7, #8]
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	1d1c      	adds	r4, r3, #4
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	7a9d      	ldrb	r5, [r3, #10]
 8012c80:	68bb      	ldr	r3, [r7, #8]
 8012c82:	7a5b      	ldrb	r3, [r3, #9]
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	9202      	str	r2, [sp, #8]
 8012c88:	2206      	movs	r2, #6
 8012c8a:	9201      	str	r2, [sp, #4]
 8012c8c:	9300      	str	r3, [sp, #0]
 8012c8e:	462b      	mov	r3, r5
 8012c90:	4622      	mov	r2, r4
 8012c92:	f002 fa5f 	bl	8015154 <ip4_output_if>
 8012c96:	4603      	mov	r3, r0
 8012c98:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8012c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	3720      	adds	r7, #32
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ca6:	bf00      	nop
 8012ca8:	2000dc58 	.word	0x2000dc58

08012cac <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b08c      	sub	sp, #48	; 0x30
 8012cb0:	af04      	add	r7, sp, #16
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	60b9      	str	r1, [r7, #8]
 8012cb6:	607a      	str	r2, [r7, #4]
 8012cb8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8012cba:	2200      	movs	r2, #0
 8012cbc:	2114      	movs	r1, #20
 8012cbe:	2001      	movs	r0, #1
 8012cc0:	f7fa f93c 	bl	800cf3c <pbuf_alloc>
 8012cc4:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8012cc6:	69fb      	ldr	r3, [r7, #28]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d05b      	beq.n	8012d84 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012ccc:	69fb      	ldr	r3, [r7, #28]
 8012cce:	895b      	ldrh	r3, [r3, #10]
 8012cd0:	2b13      	cmp	r3, #19
 8012cd2:	d806      	bhi.n	8012ce2 <tcp_rst+0x36>
 8012cd4:	4b2d      	ldr	r3, [pc, #180]	; (8012d8c <tcp_rst+0xe0>)
 8012cd6:	f240 524d 	movw	r2, #1357	; 0x54d
 8012cda:	492d      	ldr	r1, [pc, #180]	; (8012d90 <tcp_rst+0xe4>)
 8012cdc:	482d      	ldr	r0, [pc, #180]	; (8012d94 <tcp_rst+0xe8>)
 8012cde:	f003 fcef 	bl	80166c0 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8012ce2:	69fb      	ldr	r3, [r7, #28]
 8012ce4:	685b      	ldr	r3, [r3, #4]
 8012ce6:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8012ce8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7f9 fa84 	bl	800c1f8 <lwip_htons>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	69bb      	ldr	r3, [r7, #24]
 8012cf6:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8012cf8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7f9 fa7c 	bl	800c1f8 <lwip_htons>
 8012d00:	4603      	mov	r3, r0
 8012d02:	461a      	mov	r2, r3
 8012d04:	69bb      	ldr	r3, [r7, #24]
 8012d06:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8012d08:	68f8      	ldr	r0, [r7, #12]
 8012d0a:	f7f9 fa83 	bl	800c214 <lwip_htonl>
 8012d0e:	4602      	mov	r2, r0
 8012d10:	69bb      	ldr	r3, [r7, #24]
 8012d12:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8012d14:	68b8      	ldr	r0, [r7, #8]
 8012d16:	f7f9 fa7d 	bl	800c214 <lwip_htonl>
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	69bb      	ldr	r3, [r7, #24]
 8012d1e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8012d20:	f245 0014 	movw	r0, #20500	; 0x5014
 8012d24:	f7f9 fa68 	bl	800c1f8 <lwip_htons>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	69bb      	ldr	r3, [r7, #24]
 8012d2e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8012d30:	69bb      	ldr	r3, [r7, #24]
 8012d32:	2200      	movs	r2, #0
 8012d34:	f042 0208 	orr.w	r2, r2, #8
 8012d38:	739a      	strb	r2, [r3, #14]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8012d40:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	2200      	movs	r2, #0
 8012d46:	741a      	strb	r2, [r3, #16]
 8012d48:	2200      	movs	r2, #0
 8012d4a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8012d4c:	69bb      	ldr	r3, [r7, #24]
 8012d4e:	2200      	movs	r2, #0
 8012d50:	749a      	strb	r2, [r3, #18]
 8012d52:	2200      	movs	r2, #0
 8012d54:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8012d56:	6838      	ldr	r0, [r7, #0]
 8012d58:	f002 f854 	bl	8014e04 <ip4_route>
 8012d5c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d00b      	beq.n	8012d7c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	9302      	str	r3, [sp, #8]
 8012d68:	2306      	movs	r3, #6
 8012d6a:	9301      	str	r3, [sp, #4]
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	9300      	str	r3, [sp, #0]
 8012d70:	23ff      	movs	r3, #255	; 0xff
 8012d72:	683a      	ldr	r2, [r7, #0]
 8012d74:	6879      	ldr	r1, [r7, #4]
 8012d76:	69f8      	ldr	r0, [r7, #28]
 8012d78:	f002 f9ec 	bl	8015154 <ip4_output_if>
  }
  pbuf_free(p);
 8012d7c:	69f8      	ldr	r0, [r7, #28]
 8012d7e:	f7fa fc4f 	bl	800d620 <pbuf_free>
 8012d82:	e000      	b.n	8012d86 <tcp_rst+0xda>
    return;
 8012d84:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012d86:	3720      	adds	r7, #32
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}
 8012d8c:	0801952c 	.word	0x0801952c
 8012d90:	08019560 	.word	0x08019560
 8012d94:	08019590 	.word	0x08019590

08012d98 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b084      	sub	sp, #16
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d029      	beq.n	8012dfc <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dac:	60fb      	str	r3, [r7, #12]
 8012dae:	e002      	b.n	8012db6 <tcp_rexmit_rto+0x1e>
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	60fb      	str	r3, [r7, #12]
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d1f8      	bne.n	8012db0 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012dda:	2bff      	cmp	r3, #255	; 0xff
 8012ddc:	d007      	beq.n	8012dee <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012de4:	3301      	adds	r3, #1
 8012de6:	b2da      	uxtb	r2, r3
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2200      	movs	r2, #0
 8012df2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f7ff fccf 	bl	8012798 <tcp_output>
 8012dfa:	e000      	b.n	8012dfe <tcp_rexmit_rto+0x66>
    return;
 8012dfc:	bf00      	nop
}
 8012dfe:	3710      	adds	r7, #16
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}

08012e04 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012e04:	b590      	push	{r4, r7, lr}
 8012e06:	b085      	sub	sp, #20
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d043      	beq.n	8012e9c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e18:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8012e1a:	68bb      	ldr	r3, [r7, #8]
 8012e1c:	681a      	ldr	r2, [r3, #0]
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	3368      	adds	r3, #104	; 0x68
 8012e26:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012e28:	e002      	b.n	8012e30 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d011      	beq.n	8012e5c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	68db      	ldr	r3, [r3, #12]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7f9 f9e7 	bl	800c214 <lwip_htonl>
 8012e46:	4604      	mov	r4, r0
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	68db      	ldr	r3, [r3, #12]
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7f9 f9e0 	bl	800c214 <lwip_htonl>
 8012e54:	4603      	mov	r3, r0
 8012e56:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	dbe6      	blt.n	8012e2a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	681a      	ldr	r2, [r3, #0]
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	68ba      	ldr	r2, [r7, #8]
 8012e68:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012e6a:	68bb      	ldr	r3, [r7, #8]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d103      	bne.n	8012e7a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2200      	movs	r2, #0
 8012e76:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e80:	2bff      	cmp	r3, #255	; 0xff
 8012e82:	d007      	beq.n	8012e94 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	b2da      	uxtb	r2, r3
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2200      	movs	r2, #0
 8012e98:	635a      	str	r2, [r3, #52]	; 0x34
 8012e9a:	e000      	b.n	8012e9e <tcp_rexmit+0x9a>
    return;
 8012e9c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8012e9e:	3714      	adds	r7, #20
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd90      	pop	{r4, r7, pc}

08012ea4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d04a      	beq.n	8012f4a <tcp_rexmit_fast+0xa6>
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	8b5b      	ldrh	r3, [r3, #26]
 8012eb8:	f003 0304 	and.w	r3, r3, #4
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d144      	bne.n	8012f4a <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f7ff ff9f 	bl	8012e04 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	d207      	bcs.n	8012ee6 <tcp_rexmit_fast+0x42>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012edc:	0fda      	lsrs	r2, r3, #31
 8012ede:	4413      	add	r3, r2
 8012ee0:	105b      	asrs	r3, r3, #1
 8012ee2:	b29b      	uxth	r3, r3
 8012ee4:	e006      	b.n	8012ef4 <tcp_rexmit_fast+0x50>
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012eec:	0fda      	lsrs	r2, r3, #31
 8012eee:	4413      	add	r3, r2
 8012ef0:	105b      	asrs	r3, r3, #1
 8012ef2:	b29b      	uxth	r3, r3
 8012ef4:	687a      	ldr	r2, [r7, #4]
 8012ef6:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012f00:	461a      	mov	r2, r3
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f06:	005b      	lsls	r3, r3, #1
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d206      	bcs.n	8012f1a <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f10:	005b      	lsls	r3, r3, #1
 8012f12:	b29a      	uxth	r2, r3
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f24:	4619      	mov	r1, r3
 8012f26:	0049      	lsls	r1, r1, #1
 8012f28:	440b      	add	r3, r1
 8012f2a:	b29b      	uxth	r3, r3
 8012f2c:	4413      	add	r3, r2
 8012f2e:	b29a      	uxth	r2, r3
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	8b5b      	ldrh	r3, [r3, #26]
 8012f3a:	f043 0304 	orr.w	r3, r3, #4
 8012f3e:	b29a      	uxth	r2, r3
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	835a      	strh	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	2200      	movs	r2, #0
 8012f48:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8012f4a:	bf00      	nop
 8012f4c:	3708      	adds	r7, #8
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}

08012f52 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012f52:	b580      	push	{r7, lr}
 8012f54:	b08a      	sub	sp, #40	; 0x28
 8012f56:	af04      	add	r7, sp, #16
 8012f58:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f5e:	3b01      	subs	r3, #1
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7f9 f957 	bl	800c214 <lwip_htonl>
 8012f66:	4603      	mov	r3, r0
 8012f68:	2200      	movs	r2, #0
 8012f6a:	2100      	movs	r1, #0
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7fe fd45 	bl	80119fc <tcp_output_alloc_header>
 8012f72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012f74:	693b      	ldr	r3, [r7, #16]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d102      	bne.n	8012f80 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f7e:	e021      	b.n	8012fc4 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	3304      	adds	r3, #4
 8012f84:	4618      	mov	r0, r3
 8012f86:	f001 ff3d 	bl	8014e04 <ip4_route>
 8012f8a:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d102      	bne.n	8012f98 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8012f92:	23fc      	movs	r3, #252	; 0xfc
 8012f94:	75fb      	strb	r3, [r7, #23]
 8012f96:	e010      	b.n	8012fba <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8012f98:	6879      	ldr	r1, [r7, #4]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	1d1a      	adds	r2, r3, #4
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	7a98      	ldrb	r0, [r3, #10]
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	9302      	str	r3, [sp, #8]
 8012fa6:	2306      	movs	r3, #6
 8012fa8:	9301      	str	r3, [sp, #4]
 8012faa:	2300      	movs	r3, #0
 8012fac:	9300      	str	r3, [sp, #0]
 8012fae:	4603      	mov	r3, r0
 8012fb0:	6938      	ldr	r0, [r7, #16]
 8012fb2:	f002 f8cf 	bl	8015154 <ip4_output_if>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8012fba:	6938      	ldr	r0, [r7, #16]
 8012fbc:	f7fa fb30 	bl	800d620 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012fc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	3718      	adds	r7, #24
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}

08012fcc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012fcc:	b590      	push	{r4, r7, lr}
 8012fce:	b08f      	sub	sp, #60	; 0x3c
 8012fd0:	af04      	add	r7, sp, #16
 8012fd2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fd8:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8012fda:	6a3b      	ldr	r3, [r7, #32]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d102      	bne.n	8012fe6 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012fe4:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8012fe6:	6a3b      	ldr	r3, [r7, #32]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d101      	bne.n	8012ff0 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8012fec:	2300      	movs	r3, #0
 8012fee:	e085      	b.n	80130fc <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012ff0:	6a3b      	ldr	r3, [r7, #32]
 8012ff2:	68db      	ldr	r3, [r3, #12]
 8012ff4:	899b      	ldrh	r3, [r3, #12]
 8012ff6:	b29b      	uxth	r3, r3
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f7f9 f8fd 	bl	800c1f8 <lwip_htons>
 8012ffe:	4603      	mov	r3, r0
 8013000:	f003 0301 	and.w	r3, r3, #1
 8013004:	2b00      	cmp	r3, #0
 8013006:	d005      	beq.n	8013014 <tcp_zero_window_probe+0x48>
 8013008:	6a3b      	ldr	r3, [r7, #32]
 801300a:	891b      	ldrh	r3, [r3, #8]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d101      	bne.n	8013014 <tcp_zero_window_probe+0x48>
 8013010:	2301      	movs	r3, #1
 8013012:	e000      	b.n	8013016 <tcp_zero_window_probe+0x4a>
 8013014:	2300      	movs	r3, #0
 8013016:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013018:	7ffb      	ldrb	r3, [r7, #31]
 801301a:	2b00      	cmp	r3, #0
 801301c:	bf0c      	ite	eq
 801301e:	2301      	moveq	r3, #1
 8013020:	2300      	movne	r3, #0
 8013022:	b2db      	uxtb	r3, r3
 8013024:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8013026:	6a3b      	ldr	r3, [r7, #32]
 8013028:	68db      	ldr	r3, [r3, #12]
 801302a:	685b      	ldr	r3, [r3, #4]
 801302c:	8bba      	ldrh	r2, [r7, #28]
 801302e:	2100      	movs	r1, #0
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	f7fe fce3 	bl	80119fc <tcp_output_alloc_header>
 8013036:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013038:	69bb      	ldr	r3, [r7, #24]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d102      	bne.n	8013044 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801303e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013042:	e05b      	b.n	80130fc <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013044:	69bb      	ldr	r3, [r7, #24]
 8013046:	685b      	ldr	r3, [r3, #4]
 8013048:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801304a:	7ffb      	ldrb	r3, [r7, #31]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d00e      	beq.n	801306e <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013050:	697b      	ldr	r3, [r7, #20]
 8013052:	899b      	ldrh	r3, [r3, #12]
 8013054:	b29b      	uxth	r3, r3
 8013056:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801305a:	b29c      	uxth	r4, r3
 801305c:	2011      	movs	r0, #17
 801305e:	f7f9 f8cb 	bl	800c1f8 <lwip_htons>
 8013062:	4603      	mov	r3, r0
 8013064:	4323      	orrs	r3, r4
 8013066:	b29a      	uxth	r2, r3
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	819a      	strh	r2, [r3, #12]
 801306c:	e010      	b.n	8013090 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801306e:	69bb      	ldr	r3, [r7, #24]
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	3314      	adds	r3, #20
 8013074:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013076:	6a3b      	ldr	r3, [r7, #32]
 8013078:	6858      	ldr	r0, [r3, #4]
 801307a:	6a3b      	ldr	r3, [r7, #32]
 801307c:	685b      	ldr	r3, [r3, #4]
 801307e:	891a      	ldrh	r2, [r3, #8]
 8013080:	6a3b      	ldr	r3, [r7, #32]
 8013082:	891b      	ldrh	r3, [r3, #8]
 8013084:	1ad3      	subs	r3, r2, r3
 8013086:	b29b      	uxth	r3, r3
 8013088:	2201      	movs	r2, #1
 801308a:	6939      	ldr	r1, [r7, #16]
 801308c:	f7fa fcd4 	bl	800da38 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013090:	6a3b      	ldr	r3, [r7, #32]
 8013092:	68db      	ldr	r3, [r3, #12]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	4618      	mov	r0, r3
 8013098:	f7f9 f8bc 	bl	800c214 <lwip_htonl>
 801309c:	4603      	mov	r3, r0
 801309e:	3301      	adds	r3, #1
 80130a0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	1ad3      	subs	r3, r2, r3
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	da02      	bge.n	80130b4 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	68fa      	ldr	r2, [r7, #12]
 80130b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	3304      	adds	r3, #4
 80130b8:	4618      	mov	r0, r3
 80130ba:	f001 fea3 	bl	8014e04 <ip4_route>
 80130be:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d103      	bne.n	80130ce <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80130c6:	23fc      	movs	r3, #252	; 0xfc
 80130c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130cc:	e011      	b.n	80130f2 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80130ce:	6879      	ldr	r1, [r7, #4]
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	1d1a      	adds	r2, r3, #4
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	7a98      	ldrb	r0, [r3, #10]
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	9302      	str	r3, [sp, #8]
 80130dc:	2306      	movs	r3, #6
 80130de:	9301      	str	r3, [sp, #4]
 80130e0:	2300      	movs	r3, #0
 80130e2:	9300      	str	r3, [sp, #0]
 80130e4:	4603      	mov	r3, r0
 80130e6:	69b8      	ldr	r0, [r7, #24]
 80130e8:	f002 f834 	bl	8015154 <ip4_output_if>
 80130ec:	4603      	mov	r3, r0
 80130ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80130f2:	69b8      	ldr	r0, [r7, #24]
 80130f4:	f7fa fa94 	bl	800d620 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80130f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	372c      	adds	r7, #44	; 0x2c
 8013100:	46bd      	mov	sp, r7
 8013102:	bd90      	pop	{r4, r7, pc}

08013104 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b082      	sub	sp, #8
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801310c:	f7fa fd16 	bl	800db3c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013110:	4b0a      	ldr	r3, [pc, #40]	; (801313c <tcpip_tcp_timer+0x38>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d103      	bne.n	8013120 <tcpip_tcp_timer+0x1c>
 8013118:	4b09      	ldr	r3, [pc, #36]	; (8013140 <tcpip_tcp_timer+0x3c>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d005      	beq.n	801312c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013120:	2200      	movs	r2, #0
 8013122:	4908      	ldr	r1, [pc, #32]	; (8013144 <tcpip_tcp_timer+0x40>)
 8013124:	20fa      	movs	r0, #250	; 0xfa
 8013126:	f000 f86f 	bl	8013208 <sys_timeout>
 801312a:	e002      	b.n	8013132 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801312c:	4b06      	ldr	r3, [pc, #24]	; (8013148 <tcpip_tcp_timer+0x44>)
 801312e:	2200      	movs	r2, #0
 8013130:	601a      	str	r2, [r3, #0]
  }
}
 8013132:	bf00      	nop
 8013134:	3708      	adds	r7, #8
 8013136:	46bd      	mov	sp, r7
 8013138:	bd80      	pop	{r7, pc}
 801313a:	bf00      	nop
 801313c:	2000dc54 	.word	0x2000dc54
 8013140:	2000dc64 	.word	0x2000dc64
 8013144:	08013105 	.word	0x08013105
 8013148:	20004180 	.word	0x20004180

0801314c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013150:	4b0a      	ldr	r3, [pc, #40]	; (801317c <tcp_timer_needed+0x30>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d10f      	bne.n	8013178 <tcp_timer_needed+0x2c>
 8013158:	4b09      	ldr	r3, [pc, #36]	; (8013180 <tcp_timer_needed+0x34>)
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d103      	bne.n	8013168 <tcp_timer_needed+0x1c>
 8013160:	4b08      	ldr	r3, [pc, #32]	; (8013184 <tcp_timer_needed+0x38>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d007      	beq.n	8013178 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013168:	4b04      	ldr	r3, [pc, #16]	; (801317c <tcp_timer_needed+0x30>)
 801316a:	2201      	movs	r2, #1
 801316c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801316e:	2200      	movs	r2, #0
 8013170:	4905      	ldr	r1, [pc, #20]	; (8013188 <tcp_timer_needed+0x3c>)
 8013172:	20fa      	movs	r0, #250	; 0xfa
 8013174:	f000 f848 	bl	8013208 <sys_timeout>
  }
}
 8013178:	bf00      	nop
 801317a:	bd80      	pop	{r7, pc}
 801317c:	20004180 	.word	0x20004180
 8013180:	2000dc54 	.word	0x2000dc54
 8013184:	2000dc64 	.word	0x2000dc64
 8013188:	08013105 	.word	0x08013105

0801318c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b084      	sub	sp, #16
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	687a      	ldr	r2, [r7, #4]
 80131a4:	4903      	ldr	r1, [pc, #12]	; (80131b4 <cyclic_timer+0x28>)
 80131a6:	4618      	mov	r0, r3
 80131a8:	f000 f82e 	bl	8013208 <sys_timeout>
}
 80131ac:	bf00      	nop
 80131ae:	3710      	adds	r7, #16
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	0801318d 	.word	0x0801318d

080131b8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b082      	sub	sp, #8
 80131bc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80131be:	2301      	movs	r3, #1
 80131c0:	607b      	str	r3, [r7, #4]
 80131c2:	e00e      	b.n	80131e2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80131c4:	4a0d      	ldr	r2, [pc, #52]	; (80131fc <sys_timeouts_init+0x44>)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	00db      	lsls	r3, r3, #3
 80131d0:	4a0a      	ldr	r2, [pc, #40]	; (80131fc <sys_timeouts_init+0x44>)
 80131d2:	4413      	add	r3, r2
 80131d4:	461a      	mov	r2, r3
 80131d6:	490a      	ldr	r1, [pc, #40]	; (8013200 <sys_timeouts_init+0x48>)
 80131d8:	f000 f816 	bl	8013208 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	3301      	adds	r3, #1
 80131e0:	607b      	str	r3, [r7, #4]
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2b02      	cmp	r3, #2
 80131e6:	d9ed      	bls.n	80131c4 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80131e8:	f7f1 fc6e 	bl	8004ac8 <sys_now>
 80131ec:	4602      	mov	r2, r0
 80131ee:	4b05      	ldr	r3, [pc, #20]	; (8013204 <sys_timeouts_init+0x4c>)
 80131f0:	601a      	str	r2, [r3, #0]
}
 80131f2:	bf00      	nop
 80131f4:	3708      	adds	r7, #8
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
 80131fa:	bf00      	nop
 80131fc:	0801a278 	.word	0x0801a278
 8013200:	0801318d 	.word	0x0801318d
 8013204:	2000417c 	.word	0x2000417c

08013208 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b088      	sub	sp, #32
 801320c:	af00      	add	r7, sp, #0
 801320e:	60f8      	str	r0, [r7, #12]
 8013210:	60b9      	str	r1, [r7, #8]
 8013212:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013214:	200a      	movs	r0, #10
 8013216:	f7f9 fbdd 	bl	800c9d4 <memp_malloc>
 801321a:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 801321c:	697b      	ldr	r3, [r7, #20]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d10a      	bne.n	8013238 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	2b00      	cmp	r3, #0
 8013226:	f040 8084 	bne.w	8013332 <sys_timeout+0x12a>
 801322a:	4b44      	ldr	r3, [pc, #272]	; (801333c <sys_timeout+0x134>)
 801322c:	22d4      	movs	r2, #212	; 0xd4
 801322e:	4944      	ldr	r1, [pc, #272]	; (8013340 <sys_timeout+0x138>)
 8013230:	4844      	ldr	r0, [pc, #272]	; (8013344 <sys_timeout+0x13c>)
 8013232:	f003 fa45 	bl	80166c0 <iprintf>
    return;
 8013236:	e07c      	b.n	8013332 <sys_timeout+0x12a>
  }

  now = sys_now();
 8013238:	f7f1 fc46 	bl	8004ac8 <sys_now>
 801323c:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 801323e:	4b42      	ldr	r3, [pc, #264]	; (8013348 <sys_timeout+0x140>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d105      	bne.n	8013252 <sys_timeout+0x4a>
    diff = 0;
 8013246:	2300      	movs	r3, #0
 8013248:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801324a:	4a40      	ldr	r2, [pc, #256]	; (801334c <sys_timeout+0x144>)
 801324c:	693b      	ldr	r3, [r7, #16]
 801324e:	6013      	str	r3, [r2, #0]
 8013250:	e004      	b.n	801325c <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8013252:	4b3e      	ldr	r3, [pc, #248]	; (801334c <sys_timeout+0x144>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	693a      	ldr	r2, [r7, #16]
 8013258:	1ad3      	subs	r3, r2, r3
 801325a:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	2200      	movs	r2, #0
 8013260:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	68ba      	ldr	r2, [r7, #8]
 8013266:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	687a      	ldr	r2, [r7, #4]
 801326c:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 801326e:	68fa      	ldr	r2, [r7, #12]
 8013270:	69bb      	ldr	r3, [r7, #24]
 8013272:	441a      	add	r2, r3
 8013274:	697b      	ldr	r3, [r7, #20]
 8013276:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013278:	4b33      	ldr	r3, [pc, #204]	; (8013348 <sys_timeout+0x140>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d103      	bne.n	8013288 <sys_timeout+0x80>
    next_timeout = timeout;
 8013280:	4a31      	ldr	r2, [pc, #196]	; (8013348 <sys_timeout+0x140>)
 8013282:	697b      	ldr	r3, [r7, #20]
 8013284:	6013      	str	r3, [r2, #0]
    return;
 8013286:	e055      	b.n	8013334 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8013288:	4b2f      	ldr	r3, [pc, #188]	; (8013348 <sys_timeout+0x140>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	685b      	ldr	r3, [r3, #4]
 801328e:	68fa      	ldr	r2, [r7, #12]
 8013290:	429a      	cmp	r2, r3
 8013292:	d20f      	bcs.n	80132b4 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8013294:	4b2c      	ldr	r3, [pc, #176]	; (8013348 <sys_timeout+0x140>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	6859      	ldr	r1, [r3, #4]
 801329a:	4b2b      	ldr	r3, [pc, #172]	; (8013348 <sys_timeout+0x140>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	68fa      	ldr	r2, [r7, #12]
 80132a0:	1a8a      	subs	r2, r1, r2
 80132a2:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 80132a4:	4b28      	ldr	r3, [pc, #160]	; (8013348 <sys_timeout+0x140>)
 80132a6:	681a      	ldr	r2, [r3, #0]
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80132ac:	4a26      	ldr	r2, [pc, #152]	; (8013348 <sys_timeout+0x140>)
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	6013      	str	r3, [r2, #0]
 80132b2:	e03f      	b.n	8013334 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80132b4:	4b24      	ldr	r3, [pc, #144]	; (8013348 <sys_timeout+0x140>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	61fb      	str	r3, [r7, #28]
 80132ba:	e036      	b.n	801332a <sys_timeout+0x122>
      timeout->time -= t->time;
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	685a      	ldr	r2, [r3, #4]
 80132c0:	69fb      	ldr	r3, [r7, #28]
 80132c2:	685b      	ldr	r3, [r3, #4]
 80132c4:	1ad2      	subs	r2, r2, r3
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80132ca:	69fb      	ldr	r3, [r7, #28]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d006      	beq.n	80132e0 <sys_timeout+0xd8>
 80132d2:	69fb      	ldr	r3, [r7, #28]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	685a      	ldr	r2, [r3, #4]
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	685b      	ldr	r3, [r3, #4]
 80132dc:	429a      	cmp	r2, r3
 80132de:	d921      	bls.n	8013324 <sys_timeout+0x11c>
        if (t->next != NULL) {
 80132e0:	69fb      	ldr	r3, [r7, #28]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d009      	beq.n	80132fc <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80132e8:	69fb      	ldr	r3, [r7, #28]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	6859      	ldr	r1, [r3, #4]
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	685a      	ldr	r2, [r3, #4]
 80132f2:	69fb      	ldr	r3, [r7, #28]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	1a8a      	subs	r2, r1, r2
 80132f8:	605a      	str	r2, [r3, #4]
 80132fa:	e00b      	b.n	8013314 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 80132fc:	697b      	ldr	r3, [r7, #20]
 80132fe:	685b      	ldr	r3, [r3, #4]
 8013300:	68fa      	ldr	r2, [r7, #12]
 8013302:	429a      	cmp	r2, r3
 8013304:	d206      	bcs.n	8013314 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8013306:	4b10      	ldr	r3, [pc, #64]	; (8013348 <sys_timeout+0x140>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	685a      	ldr	r2, [r3, #4]
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	441a      	add	r2, r3
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8013314:	69fb      	ldr	r3, [r7, #28]
 8013316:	681a      	ldr	r2, [r3, #0]
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801331c:	69fb      	ldr	r3, [r7, #28]
 801331e:	697a      	ldr	r2, [r7, #20]
 8013320:	601a      	str	r2, [r3, #0]
        break;
 8013322:	e007      	b.n	8013334 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013324:	69fb      	ldr	r3, [r7, #28]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	61fb      	str	r3, [r7, #28]
 801332a:	69fb      	ldr	r3, [r7, #28]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d1c5      	bne.n	80132bc <sys_timeout+0xb4>
 8013330:	e000      	b.n	8013334 <sys_timeout+0x12c>
    return;
 8013332:	bf00      	nop
      }
    }
  }
}
 8013334:	3720      	adds	r7, #32
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}
 801333a:	bf00      	nop
 801333c:	08019970 	.word	0x08019970
 8013340:	080199a4 	.word	0x080199a4
 8013344:	080199e4 	.word	0x080199e4
 8013348:	20004178 	.word	0x20004178
 801334c:	2000417c 	.word	0x2000417c

08013350 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b086      	sub	sp, #24
 8013354:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8013356:	4b24      	ldr	r3, [pc, #144]	; (80133e8 <sys_check_timeouts+0x98>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d03f      	beq.n	80133de <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 801335e:	f7f1 fbb3 	bl	8004ac8 <sys_now>
 8013362:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8013364:	4b21      	ldr	r3, [pc, #132]	; (80133ec <sys_check_timeouts+0x9c>)
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	68fa      	ldr	r2, [r7, #12]
 801336a:	1ad3      	subs	r3, r2, r3
 801336c:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 801336e:	2300      	movs	r3, #0
 8013370:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8013372:	4b1d      	ldr	r3, [pc, #116]	; (80133e8 <sys_check_timeouts+0x98>)
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d02c      	beq.n	80133d8 <sys_check_timeouts+0x88>
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	685b      	ldr	r3, [r3, #4]
 8013382:	697a      	ldr	r2, [r7, #20]
 8013384:	429a      	cmp	r2, r3
 8013386:	d327      	bcc.n	80133d8 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8013388:	2301      	movs	r3, #1
 801338a:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	685a      	ldr	r2, [r3, #4]
 8013390:	4b16      	ldr	r3, [pc, #88]	; (80133ec <sys_check_timeouts+0x9c>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	4413      	add	r3, r2
 8013396:	4a15      	ldr	r2, [pc, #84]	; (80133ec <sys_check_timeouts+0x9c>)
 8013398:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	697a      	ldr	r2, [r7, #20]
 80133a0:	1ad3      	subs	r3, r2, r3
 80133a2:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	4a0f      	ldr	r2, [pc, #60]	; (80133e8 <sys_check_timeouts+0x98>)
 80133aa:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	689b      	ldr	r3, [r3, #8]
 80133b0:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	68db      	ldr	r3, [r3, #12]
 80133b6:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80133b8:	68b9      	ldr	r1, [r7, #8]
 80133ba:	200a      	movs	r0, #10
 80133bc:	f7f9 fb5c 	bl	800ca78 <memp_free>
        if (handler != NULL) {
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d008      	beq.n	80133d8 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 80133c6:	480a      	ldr	r0, [pc, #40]	; (80133f0 <sys_check_timeouts+0xa0>)
 80133c8:	f003 f8aa 	bl	8016520 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6838      	ldr	r0, [r7, #0]
 80133d0:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 80133d2:	4807      	ldr	r0, [pc, #28]	; (80133f0 <sys_check_timeouts+0xa0>)
 80133d4:	f003 f8b3 	bl	801653e <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80133d8:	7cfb      	ldrb	r3, [r7, #19]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d1c7      	bne.n	801336e <sys_check_timeouts+0x1e>
  }
}
 80133de:	bf00      	nop
 80133e0:	3718      	adds	r7, #24
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}
 80133e6:	bf00      	nop
 80133e8:	20004178 	.word	0x20004178
 80133ec:	2000417c 	.word	0x2000417c
 80133f0:	200074e8 	.word	0x200074e8

080133f4 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b082      	sub	sp, #8
 80133f8:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 80133fa:	4b0f      	ldr	r3, [pc, #60]	; (8013438 <sys_timeouts_sleeptime+0x44>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d102      	bne.n	8013408 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8013402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013406:	e013      	b.n	8013430 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8013408:	f7f1 fb5e 	bl	8004ac8 <sys_now>
 801340c:	4602      	mov	r2, r0
 801340e:	4b0b      	ldr	r3, [pc, #44]	; (801343c <sys_timeouts_sleeptime+0x48>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	1ad3      	subs	r3, r2, r3
 8013414:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8013416:	4b08      	ldr	r3, [pc, #32]	; (8013438 <sys_timeouts_sleeptime+0x44>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	685b      	ldr	r3, [r3, #4]
 801341c:	687a      	ldr	r2, [r7, #4]
 801341e:	429a      	cmp	r2, r3
 8013420:	d901      	bls.n	8013426 <sys_timeouts_sleeptime+0x32>
    return 0;
 8013422:	2300      	movs	r3, #0
 8013424:	e004      	b.n	8013430 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8013426:	4b04      	ldr	r3, [pc, #16]	; (8013438 <sys_timeouts_sleeptime+0x44>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	685a      	ldr	r2, [r3, #4]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	1ad3      	subs	r3, r2, r3
  }
}
 8013430:	4618      	mov	r0, r3
 8013432:	3708      	adds	r7, #8
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}
 8013438:	20004178 	.word	0x20004178
 801343c:	2000417c 	.word	0x2000417c

08013440 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b084      	sub	sp, #16
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 801344a:	4b0f      	ldr	r3, [pc, #60]	; (8013488 <sys_timeouts_mbox_fetch+0x48>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d105      	bne.n	801345e <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8013452:	2200      	movs	r2, #0
 8013454:	6839      	ldr	r1, [r7, #0]
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f002 ff2d 	bl	80162b6 <sys_arch_mbox_fetch>
    return;
 801345c:	e011      	b.n	8013482 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 801345e:	f7ff ffc9 	bl	80133f4 <sys_timeouts_sleeptime>
 8013462:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d008      	beq.n	801347c <sys_timeouts_mbox_fetch+0x3c>
 801346a:	68fa      	ldr	r2, [r7, #12]
 801346c:	6839      	ldr	r1, [r7, #0]
 801346e:	6878      	ldr	r0, [r7, #4]
 8013470:	f002 ff21 	bl	80162b6 <sys_arch_mbox_fetch>
 8013474:	4603      	mov	r3, r0
 8013476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801347a:	d102      	bne.n	8013482 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801347c:	f7ff ff68 	bl	8013350 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013480:	e7e3      	b.n	801344a <sys_timeouts_mbox_fetch+0xa>
  }
}
 8013482:	3710      	adds	r7, #16
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}
 8013488:	20004178 	.word	0x20004178

0801348c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801348c:	b480      	push	{r7}
 801348e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8013490:	bf00      	nop
 8013492:	46bd      	mov	sp, r7
 8013494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013498:	4770      	bx	lr
	...

0801349c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801349c:	b480      	push	{r7}
 801349e:	b083      	sub	sp, #12
 80134a0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80134a2:	2300      	movs	r3, #0
 80134a4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80134a6:	4b17      	ldr	r3, [pc, #92]	; (8013504 <udp_new_port+0x68>)
 80134a8:	881b      	ldrh	r3, [r3, #0]
 80134aa:	1c5a      	adds	r2, r3, #1
 80134ac:	b291      	uxth	r1, r2
 80134ae:	4a15      	ldr	r2, [pc, #84]	; (8013504 <udp_new_port+0x68>)
 80134b0:	8011      	strh	r1, [r2, #0]
 80134b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134b6:	4293      	cmp	r3, r2
 80134b8:	d103      	bne.n	80134c2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80134ba:	4b12      	ldr	r3, [pc, #72]	; (8013504 <udp_new_port+0x68>)
 80134bc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80134c0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80134c2:	4b11      	ldr	r3, [pc, #68]	; (8013508 <udp_new_port+0x6c>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	603b      	str	r3, [r7, #0]
 80134c8:	e011      	b.n	80134ee <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	8a5a      	ldrh	r2, [r3, #18]
 80134ce:	4b0d      	ldr	r3, [pc, #52]	; (8013504 <udp_new_port+0x68>)
 80134d0:	881b      	ldrh	r3, [r3, #0]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d108      	bne.n	80134e8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80134d6:	88fb      	ldrh	r3, [r7, #6]
 80134d8:	3301      	adds	r3, #1
 80134da:	80fb      	strh	r3, [r7, #6]
 80134dc:	88fb      	ldrh	r3, [r7, #6]
 80134de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80134e2:	d3e0      	bcc.n	80134a6 <udp_new_port+0xa>
        return 0;
 80134e4:	2300      	movs	r3, #0
 80134e6:	e007      	b.n	80134f8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	68db      	ldr	r3, [r3, #12]
 80134ec:	603b      	str	r3, [r7, #0]
 80134ee:	683b      	ldr	r3, [r7, #0]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d1ea      	bne.n	80134ca <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80134f4:	4b03      	ldr	r3, [pc, #12]	; (8013504 <udp_new_port+0x68>)
 80134f6:	881b      	ldrh	r3, [r3, #0]
}
 80134f8:	4618      	mov	r0, r3
 80134fa:	370c      	adds	r7, #12
 80134fc:	46bd      	mov	sp, r7
 80134fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013502:	4770      	bx	lr
 8013504:	20000018 	.word	0x20000018
 8013508:	2000dc6c 	.word	0x2000dc6c

0801350c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801350c:	b480      	push	{r7}
 801350e:	b085      	sub	sp, #20
 8013510:	af00      	add	r7, sp, #0
 8013512:	60f8      	str	r0, [r7, #12]
 8013514:	60b9      	str	r1, [r7, #8]
 8013516:	4613      	mov	r3, r2
 8013518:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801351a:	79fb      	ldrb	r3, [r7, #7]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d018      	beq.n	8013552 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d013      	beq.n	801354e <udp_input_local_match+0x42>
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d00f      	beq.n	801354e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801352e:	4b14      	ldr	r3, [pc, #80]	; (8013580 <udp_input_local_match+0x74>)
 8013530:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013536:	d00a      	beq.n	801354e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	681a      	ldr	r2, [r3, #0]
 801353c:	4b10      	ldr	r3, [pc, #64]	; (8013580 <udp_input_local_match+0x74>)
 801353e:	695b      	ldr	r3, [r3, #20]
 8013540:	405a      	eors	r2, r3
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	3308      	adds	r3, #8
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801354a:	2b00      	cmp	r3, #0
 801354c:	d110      	bne.n	8013570 <udp_input_local_match+0x64>
          return 1;
 801354e:	2301      	movs	r3, #1
 8013550:	e00f      	b.n	8013572 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d009      	beq.n	801356c <udp_input_local_match+0x60>
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d005      	beq.n	801356c <udp_input_local_match+0x60>
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	681a      	ldr	r2, [r3, #0]
 8013564:	4b06      	ldr	r3, [pc, #24]	; (8013580 <udp_input_local_match+0x74>)
 8013566:	695b      	ldr	r3, [r3, #20]
 8013568:	429a      	cmp	r2, r3
 801356a:	d101      	bne.n	8013570 <udp_input_local_match+0x64>
      return 1;
 801356c:	2301      	movs	r3, #1
 801356e:	e000      	b.n	8013572 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8013570:	2300      	movs	r3, #0
}
 8013572:	4618      	mov	r0, r3
 8013574:	3714      	adds	r7, #20
 8013576:	46bd      	mov	sp, r7
 8013578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357c:	4770      	bx	lr
 801357e:	bf00      	nop
 8013580:	200074ec 	.word	0x200074ec

08013584 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013584:	b590      	push	{r4, r7, lr}
 8013586:	b091      	sub	sp, #68	; 0x44
 8013588:	af02      	add	r7, sp, #8
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801358e:	2300      	movs	r3, #0
 8013590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	895b      	ldrh	r3, [r3, #10]
 8013598:	2b07      	cmp	r3, #7
 801359a:	d803      	bhi.n	80135a4 <udp_input+0x20>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f7fa f83f 	bl	800d620 <pbuf_free>
    goto end;
 80135a2:	e156      	b.n	8013852 <udp_input+0x2ce>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	685b      	ldr	r3, [r3, #4]
 80135a8:	61fb      	str	r3, [r7, #28]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80135aa:	4b95      	ldr	r3, [pc, #596]	; (8013800 <udp_input+0x27c>)
 80135ac:	695a      	ldr	r2, [r3, #20]
 80135ae:	4b94      	ldr	r3, [pc, #592]	; (8013800 <udp_input+0x27c>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	4619      	mov	r1, r3
 80135b4:	4610      	mov	r0, r2
 80135b6:	f001 fe9f 	bl	80152f8 <ip4_addr_isbroadcast_u32>
 80135ba:	4603      	mov	r3, r0
 80135bc:	76fb      	strb	r3, [r7, #27]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80135be:	69fb      	ldr	r3, [r7, #28]
 80135c0:	881b      	ldrh	r3, [r3, #0]
 80135c2:	b29b      	uxth	r3, r3
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7f8 fe17 	bl	800c1f8 <lwip_htons>
 80135ca:	4603      	mov	r3, r0
 80135cc:	833b      	strh	r3, [r7, #24]
  dest = lwip_ntohs(udphdr->dest);
 80135ce:	69fb      	ldr	r3, [r7, #28]
 80135d0:	885b      	ldrh	r3, [r3, #2]
 80135d2:	b29b      	uxth	r3, r3
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7f8 fe0f 	bl	800c1f8 <lwip_htons>
 80135da:	4603      	mov	r3, r0
 80135dc:	82fb      	strh	r3, [r7, #22]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80135de:	2300      	movs	r3, #0
 80135e0:	637b      	str	r3, [r7, #52]	; 0x34
  prev = NULL;
 80135e2:	2300      	movs	r3, #0
 80135e4:	633b      	str	r3, [r7, #48]	; 0x30
  uncon_pcb = NULL;
 80135e6:	2300      	movs	r3, #0
 80135e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80135ea:	4b86      	ldr	r3, [pc, #536]	; (8013804 <udp_input+0x280>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	637b      	str	r3, [r7, #52]	; 0x34
 80135f0:	e042      	b.n	8013678 <udp_input+0xf4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80135f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135f4:	8a5b      	ldrh	r3, [r3, #18]
 80135f6:	8afa      	ldrh	r2, [r7, #22]
 80135f8:	429a      	cmp	r2, r3
 80135fa:	d138      	bne.n	801366e <udp_input+0xea>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80135fc:	7efb      	ldrb	r3, [r7, #27]
 80135fe:	461a      	mov	r2, r3
 8013600:	6839      	ldr	r1, [r7, #0]
 8013602:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013604:	f7ff ff82 	bl	801350c <udp_input_local_match>
 8013608:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801360a:	2b00      	cmp	r3, #0
 801360c:	d02f      	beq.n	801366e <udp_input+0xea>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 801360e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013610:	7c1b      	ldrb	r3, [r3, #16]
 8013612:	f003 0304 	and.w	r3, r3, #4
 8013616:	2b00      	cmp	r3, #0
 8013618:	d10b      	bne.n	8013632 <udp_input+0xae>
 801361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801361c:	2b00      	cmp	r3, #0
 801361e:	d006      	beq.n	801362e <udp_input+0xaa>
          ((uncon_pcb == NULL)
#if SO_REUSE
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
 8013620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013622:	2b00      	cmp	r3, #0
 8013624:	d005      	beq.n	8013632 <udp_input+0xae>
 8013626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d001      	beq.n	8013632 <udp_input+0xae>
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 801362e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013630:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013634:	8a9b      	ldrh	r3, [r3, #20]
 8013636:	8b3a      	ldrh	r2, [r7, #24]
 8013638:	429a      	cmp	r2, r3
 801363a:	d118      	bne.n	801366e <udp_input+0xea>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801363e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013640:	2b00      	cmp	r3, #0
 8013642:	d005      	beq.n	8013650 <udp_input+0xcc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013646:	685a      	ldr	r2, [r3, #4]
 8013648:	4b6d      	ldr	r3, [pc, #436]	; (8013800 <udp_input+0x27c>)
 801364a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801364c:	429a      	cmp	r2, r3
 801364e:	d10e      	bne.n	801366e <udp_input+0xea>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013652:	2b00      	cmp	r3, #0
 8013654:	d014      	beq.n	8013680 <udp_input+0xfc>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013658:	68da      	ldr	r2, [r3, #12]
 801365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801365e:	4b69      	ldr	r3, [pc, #420]	; (8013804 <udp_input+0x280>)
 8013660:	681a      	ldr	r2, [r3, #0]
 8013662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013664:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013666:	4a67      	ldr	r2, [pc, #412]	; (8013804 <udp_input+0x280>)
 8013668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801366a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801366c:	e008      	b.n	8013680 <udp_input+0xfc>
      }
    }

    prev = pcb;
 801366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013670:	633b      	str	r3, [r7, #48]	; 0x30
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013674:	68db      	ldr	r3, [r3, #12]
 8013676:	637b      	str	r3, [r7, #52]	; 0x34
 8013678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801367a:	2b00      	cmp	r3, #0
 801367c:	d1b9      	bne.n	80135f2 <udp_input+0x6e>
 801367e:	e000      	b.n	8013682 <udp_input+0xfe>
        break;
 8013680:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013684:	2b00      	cmp	r3, #0
 8013686:	d101      	bne.n	801368c <udp_input+0x108>
    pcb = uncon_pcb;
 8013688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801368a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801368e:	2b00      	cmp	r3, #0
 8013690:	d003      	beq.n	801369a <udp_input+0x116>
    for_us = 1;
 8013692:	2301      	movs	r3, #1
 8013694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013698:	e00b      	b.n	80136b2 <udp_input+0x12e>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	3304      	adds	r3, #4
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	4b57      	ldr	r3, [pc, #348]	; (8013800 <udp_input+0x27c>)
 80136a2:	695b      	ldr	r3, [r3, #20]
 80136a4:	429a      	cmp	r2, r3
 80136a6:	bf0c      	ite	eq
 80136a8:	2301      	moveq	r3, #1
 80136aa:	2300      	movne	r3, #0
 80136ac:	b2db      	uxtb	r3, r3
 80136ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80136b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	f000 80c8 	beq.w	801384c <udp_input+0x2c8>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 80136bc:	f06f 0107 	mvn.w	r1, #7
 80136c0:	6878      	ldr	r0, [r7, #4]
 80136c2:	f7f9 ff89 	bl	800d5d8 <pbuf_header>
 80136c6:	4603      	mov	r3, r0
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d00a      	beq.n	80136e2 <udp_input+0x15e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80136cc:	4b4e      	ldr	r3, [pc, #312]	; (8013808 <udp_input+0x284>)
 80136ce:	f240 1255 	movw	r2, #341	; 0x155
 80136d2:	494e      	ldr	r1, [pc, #312]	; (801380c <udp_input+0x288>)
 80136d4:	484e      	ldr	r0, [pc, #312]	; (8013810 <udp_input+0x28c>)
 80136d6:	f002 fff3 	bl	80166c0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f7f9 ffa0 	bl	800d620 <pbuf_free>
      goto end;
 80136e0:	e0b7      	b.n	8013852 <udp_input+0x2ce>
    }

    if (pcb != NULL) {
 80136e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	f000 8097 	beq.w	8013818 <udp_input+0x294>
      MIB2_STATS_INC(mib2.udpindatagrams);
#if SO_REUSE && SO_REUSE_RXTOALL
      if (ip_get_option(pcb, SOF_REUSEADDR) &&
 80136ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136ec:	7a1b      	ldrb	r3, [r3, #8]
 80136ee:	f003 0304 	and.w	r3, r3, #4
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d070      	beq.n	80137d8 <udp_input+0x254>
 80136f6:	7efb      	ldrb	r3, [r7, #27]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d105      	bne.n	8013708 <udp_input+0x184>
          (broadcast || ip_addr_ismulticast(ip_current_dest_addr()))) {
 80136fc:	4b40      	ldr	r3, [pc, #256]	; (8013800 <udp_input+0x27c>)
 80136fe:	695b      	ldr	r3, [r3, #20]
 8013700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013704:	2be0      	cmp	r3, #224	; 0xe0
 8013706:	d167      	bne.n	80137d8 <udp_input+0x254>
        /* pass broadcast- or multicast packets to all multicast pcbs
           if SOF_REUSEADDR is set on the first match */
        struct udp_pcb *mpcb;
        u8_t p_header_changed = 0;
 8013708:	2300      	movs	r3, #0
 801370a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        s16_t hdrs_len = (s16_t)(ip_current_header_tot_len() + UDP_HLEN);
 801370e:	4b3c      	ldr	r3, [pc, #240]	; (8013800 <udp_input+0x27c>)
 8013710:	899b      	ldrh	r3, [r3, #12]
 8013712:	3308      	adds	r3, #8
 8013714:	b29b      	uxth	r3, r3
 8013716:	82bb      	strh	r3, [r7, #20]
        for (mpcb = udp_pcbs; mpcb != NULL; mpcb = mpcb->next) {
 8013718:	4b3a      	ldr	r3, [pc, #232]	; (8013804 <udp_input+0x280>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	627b      	str	r3, [r7, #36]	; 0x24
 801371e:	e04c      	b.n	80137ba <udp_input+0x236>
          if (mpcb != pcb) {
 8013720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013724:	429a      	cmp	r2, r3
 8013726:	d045      	beq.n	80137b4 <udp_input+0x230>
            /* compare PCB local addr+port to UDP destination addr+port */
            if ((mpcb->local_port == dest) &&
 8013728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801372a:	8a5b      	ldrh	r3, [r3, #18]
 801372c:	8afa      	ldrh	r2, [r7, #22]
 801372e:	429a      	cmp	r2, r3
 8013730:	d140      	bne.n	80137b4 <udp_input+0x230>
                (udp_input_local_match(mpcb, inp, broadcast) != 0)) {
 8013732:	7efb      	ldrb	r3, [r7, #27]
 8013734:	461a      	mov	r2, r3
 8013736:	6839      	ldr	r1, [r7, #0]
 8013738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801373a:	f7ff fee7 	bl	801350c <udp_input_local_match>
 801373e:	4603      	mov	r3, r0
            if ((mpcb->local_port == dest) &&
 8013740:	2b00      	cmp	r3, #0
 8013742:	d037      	beq.n	80137b4 <udp_input+0x230>
              /* pass a copy of the packet to all local matches */
              if (mpcb->recv != NULL) {
 8013744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013746:	699b      	ldr	r3, [r3, #24]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d033      	beq.n	80137b4 <udp_input+0x230>
                struct pbuf *q;
                /* for that, move payload to IP header again */
                if (p_header_changed == 0) {
 801374c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013750:	2b00      	cmp	r3, #0
 8013752:	d108      	bne.n	8013766 <udp_input+0x1e2>
                  pbuf_header_force(p, hdrs_len);
 8013754:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013758:	4619      	mov	r1, r3
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f7f9 ff4e 	bl	800d5fc <pbuf_header_force>
                  p_header_changed = 1;
 8013760:	2301      	movs	r3, #1
 8013762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                }
                q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	891b      	ldrh	r3, [r3, #8]
 801376a:	2200      	movs	r2, #0
 801376c:	4619      	mov	r1, r3
 801376e:	2004      	movs	r0, #4
 8013770:	f7f9 fbe4 	bl	800cf3c <pbuf_alloc>
 8013774:	6138      	str	r0, [r7, #16]
                if (q != NULL) {
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d01b      	beq.n	80137b4 <udp_input+0x230>
                  err_t err = pbuf_copy(q, p);
 801377c:	6879      	ldr	r1, [r7, #4]
 801377e:	6938      	ldr	r0, [r7, #16]
 8013780:	f7fa f88e 	bl	800d8a0 <pbuf_copy>
 8013784:	4603      	mov	r3, r0
 8013786:	73fb      	strb	r3, [r7, #15]
                  if (err == ERR_OK) {
 8013788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d111      	bne.n	80137b4 <udp_input+0x230>
                    /* move payload to UDP data */
                    pbuf_header(q, -hdrs_len);
 8013790:	8abb      	ldrh	r3, [r7, #20]
 8013792:	425b      	negs	r3, r3
 8013794:	b29b      	uxth	r3, r3
 8013796:	b21b      	sxth	r3, r3
 8013798:	4619      	mov	r1, r3
 801379a:	6938      	ldr	r0, [r7, #16]
 801379c:	f7f9 ff1c 	bl	800d5d8 <pbuf_header>
                    mpcb->recv(mpcb->recv_arg, mpcb, q, ip_current_src_addr(), src);
 80137a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a2:	699c      	ldr	r4, [r3, #24]
 80137a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a6:	69d8      	ldr	r0, [r3, #28]
 80137a8:	8b3b      	ldrh	r3, [r7, #24]
 80137aa:	9300      	str	r3, [sp, #0]
 80137ac:	4b19      	ldr	r3, [pc, #100]	; (8013814 <udp_input+0x290>)
 80137ae:	693a      	ldr	r2, [r7, #16]
 80137b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137b2:	47a0      	blx	r4
        for (mpcb = udp_pcbs; mpcb != NULL; mpcb = mpcb->next) {
 80137b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b6:	68db      	ldr	r3, [r3, #12]
 80137b8:	627b      	str	r3, [r7, #36]	; 0x24
 80137ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d1af      	bne.n	8013720 <udp_input+0x19c>
                }
              }
            }
          }
        }
        if (p_header_changed) {
 80137c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d007      	beq.n	80137d8 <udp_input+0x254>
          /* and move payload to UDP data again */
          pbuf_header(p, -hdrs_len);
 80137c8:	8abb      	ldrh	r3, [r7, #20]
 80137ca:	425b      	negs	r3, r3
 80137cc:	b29b      	uxth	r3, r3
 80137ce:	b21b      	sxth	r3, r3
 80137d0:	4619      	mov	r1, r3
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f7f9 ff00 	bl	800d5d8 <pbuf_header>
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80137d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137da:	699b      	ldr	r3, [r3, #24]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d00a      	beq.n	80137f6 <udp_input+0x272>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80137e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137e2:	699c      	ldr	r4, [r3, #24]
 80137e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137e6:	69d8      	ldr	r0, [r3, #28]
 80137e8:	8b3b      	ldrh	r3, [r7, #24]
 80137ea:	9300      	str	r3, [sp, #0]
 80137ec:	4b09      	ldr	r3, [pc, #36]	; (8013814 <udp_input+0x290>)
 80137ee:	687a      	ldr	r2, [r7, #4]
 80137f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80137f2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80137f4:	e02e      	b.n	8013854 <udp_input+0x2d0>
        pbuf_free(p);
 80137f6:	6878      	ldr	r0, [r7, #4]
 80137f8:	f7f9 ff12 	bl	800d620 <pbuf_free>
        goto end;
 80137fc:	e029      	b.n	8013852 <udp_input+0x2ce>
 80137fe:	bf00      	nop
 8013800:	200074ec 	.word	0x200074ec
 8013804:	2000dc6c 	.word	0x2000dc6c
 8013808:	08019a0c 	.word	0x08019a0c
 801380c:	08019a3c 	.word	0x08019a3c
 8013810:	08019a50 	.word	0x08019a50
 8013814:	200074fc 	.word	0x200074fc
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013818:	7efb      	ldrb	r3, [r7, #27]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d112      	bne.n	8013844 <udp_input+0x2c0>
 801381e:	4b0f      	ldr	r3, [pc, #60]	; (801385c <udp_input+0x2d8>)
 8013820:	695b      	ldr	r3, [r3, #20]
 8013822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013826:	2be0      	cmp	r3, #224	; 0xe0
 8013828:	d00c      	beq.n	8013844 <udp_input+0x2c0>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801382a:	4b0c      	ldr	r3, [pc, #48]	; (801385c <udp_input+0x2d8>)
 801382c:	899b      	ldrh	r3, [r3, #12]
 801382e:	3308      	adds	r3, #8
 8013830:	b29b      	uxth	r3, r3
 8013832:	b21b      	sxth	r3, r3
 8013834:	4619      	mov	r1, r3
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f7f9 fee0 	bl	800d5fc <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801383c:	2103      	movs	r1, #3
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f001 fa58 	bl	8014cf4 <icmp_dest_unreach>
      pbuf_free(p);
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f7f9 feeb 	bl	800d620 <pbuf_free>
  return;
 801384a:	e003      	b.n	8013854 <udp_input+0x2d0>
    pbuf_free(p);
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f7f9 fee7 	bl	800d620 <pbuf_free>
  return;
 8013852:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013854:	373c      	adds	r7, #60	; 0x3c
 8013856:	46bd      	mov	sp, r7
 8013858:	bd90      	pop	{r4, r7, pc}
 801385a:	bf00      	nop
 801385c:	200074ec 	.word	0x200074ec

08013860 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8013860:	b580      	push	{r7, lr}
 8013862:	b082      	sub	sp, #8
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
 8013868:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d102      	bne.n	8013876 <udp_send+0x16>
    return ERR_VAL;
 8013870:	f06f 0305 	mvn.w	r3, #5
 8013874:	e008      	b.n	8013888 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	1d1a      	adds	r2, r3, #4
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	8a9b      	ldrh	r3, [r3, #20]
 801387e:	6839      	ldr	r1, [r7, #0]
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f000 f805 	bl	8013890 <udp_sendto>
 8013886:	4603      	mov	r3, r0
}
 8013888:	4618      	mov	r0, r3
 801388a:	3708      	adds	r7, #8
 801388c:	46bd      	mov	sp, r7
 801388e:	bd80      	pop	{r7, pc}

08013890 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b088      	sub	sp, #32
 8013894:	af02      	add	r7, sp, #8
 8013896:	60f8      	str	r0, [r7, #12]
 8013898:	60b9      	str	r1, [r7, #8]
 801389a:	607a      	str	r2, [r7, #4]
 801389c:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d002      	beq.n	80138ae <udp_sendto+0x1e>
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d102      	bne.n	80138b4 <udp_sendto+0x24>
    return ERR_VAL;
 80138ae:	f06f 0305 	mvn.w	r3, #5
 80138b2:	e013      	b.n	80138dc <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 80138b4:	6978      	ldr	r0, [r7, #20]
 80138b6:	f001 faa5 	bl	8014e04 <ip4_route>
 80138ba:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d102      	bne.n	80138c8 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80138c2:	f06f 0303 	mvn.w	r3, #3
 80138c6:	e009      	b.n	80138dc <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80138c8:	887a      	ldrh	r2, [r7, #2]
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	9300      	str	r3, [sp, #0]
 80138ce:	4613      	mov	r3, r2
 80138d0:	687a      	ldr	r2, [r7, #4]
 80138d2:	68b9      	ldr	r1, [r7, #8]
 80138d4:	68f8      	ldr	r0, [r7, #12]
 80138d6:	f000 f805 	bl	80138e4 <udp_sendto_if>
 80138da:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80138dc:	4618      	mov	r0, r3
 80138de:	3718      	adds	r7, #24
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}

080138e4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b088      	sub	sp, #32
 80138e8:	af02      	add	r7, sp, #8
 80138ea:	60f8      	str	r0, [r7, #12]
 80138ec:	60b9      	str	r1, [r7, #8]
 80138ee:	607a      	str	r2, [r7, #4]
 80138f0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d002      	beq.n	80138fe <udp_sendto_if+0x1a>
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d102      	bne.n	8013904 <udp_sendto_if+0x20>
    return ERR_VAL;
 80138fe:	f06f 0305 	mvn.w	r3, #5
 8013902:	e028      	b.n	8013956 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d009      	beq.n	801391e <udp_sendto_if+0x3a>
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d005      	beq.n	801391e <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801391a:	2be0      	cmp	r3, #224	; 0xe0
 801391c:	d103      	bne.n	8013926 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 801391e:	6a3b      	ldr	r3, [r7, #32]
 8013920:	3304      	adds	r3, #4
 8013922:	617b      	str	r3, [r7, #20]
 8013924:	e00b      	b.n	801393e <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	681a      	ldr	r2, [r3, #0]
 801392a:	6a3b      	ldr	r3, [r7, #32]
 801392c:	3304      	adds	r3, #4
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	429a      	cmp	r2, r3
 8013932:	d002      	beq.n	801393a <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8013934:	f06f 0303 	mvn.w	r3, #3
 8013938:	e00d      	b.n	8013956 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801393e:	887a      	ldrh	r2, [r7, #2]
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	9301      	str	r3, [sp, #4]
 8013944:	6a3b      	ldr	r3, [r7, #32]
 8013946:	9300      	str	r3, [sp, #0]
 8013948:	4613      	mov	r3, r2
 801394a:	687a      	ldr	r2, [r7, #4]
 801394c:	68b9      	ldr	r1, [r7, #8]
 801394e:	68f8      	ldr	r0, [r7, #12]
 8013950:	f000 f806 	bl	8013960 <udp_sendto_if_src>
 8013954:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013956:	4618      	mov	r0, r3
 8013958:	3718      	adds	r7, #24
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}
	...

08013960 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b08c      	sub	sp, #48	; 0x30
 8013964:	af04      	add	r7, sp, #16
 8013966:	60f8      	str	r0, [r7, #12]
 8013968:	60b9      	str	r1, [r7, #8]
 801396a:	607a      	str	r2, [r7, #4]
 801396c:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d002      	beq.n	801397a <udp_sendto_if_src+0x1a>
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d102      	bne.n	8013980 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 801397a:	f06f 0305 	mvn.w	r3, #5
 801397e:	e07e      	b.n	8013a7e <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	8a5b      	ldrh	r3, [r3, #18]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d10f      	bne.n	80139a8 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013988:	68f9      	ldr	r1, [r7, #12]
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	8a5b      	ldrh	r3, [r3, #18]
 801398e:	461a      	mov	r2, r3
 8013990:	68f8      	ldr	r0, [r7, #12]
 8013992:	f000 f87f 	bl	8013a94 <udp_bind>
 8013996:	4603      	mov	r3, r0
 8013998:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801399a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d002      	beq.n	80139a8 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80139a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80139a6:	e06a      	b.n	8013a7e <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 80139a8:	2108      	movs	r1, #8
 80139aa:	68b8      	ldr	r0, [r7, #8]
 80139ac:	f7f9 fe14 	bl	800d5d8 <pbuf_header>
 80139b0:	4603      	mov	r3, r0
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d014      	beq.n	80139e0 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80139b6:	2200      	movs	r2, #0
 80139b8:	2108      	movs	r1, #8
 80139ba:	2001      	movs	r0, #1
 80139bc:	f7f9 fabe 	bl	800cf3c <pbuf_alloc>
 80139c0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80139c2:	69fb      	ldr	r3, [r7, #28]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d102      	bne.n	80139ce <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80139c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139cc:	e057      	b.n	8013a7e <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	891b      	ldrh	r3, [r3, #8]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d006      	beq.n	80139e4 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80139d6:	68b9      	ldr	r1, [r7, #8]
 80139d8:	69f8      	ldr	r0, [r7, #28]
 80139da:	f7f9 ff51 	bl	800d880 <pbuf_chain>
 80139de:	e001      	b.n	80139e4 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80139e4:	69fb      	ldr	r3, [r7, #28]
 80139e6:	895b      	ldrh	r3, [r3, #10]
 80139e8:	2b07      	cmp	r3, #7
 80139ea:	d806      	bhi.n	80139fa <udp_sendto_if_src+0x9a>
 80139ec:	4b26      	ldr	r3, [pc, #152]	; (8013a88 <udp_sendto_if_src+0x128>)
 80139ee:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80139f2:	4926      	ldr	r1, [pc, #152]	; (8013a8c <udp_sendto_if_src+0x12c>)
 80139f4:	4826      	ldr	r0, [pc, #152]	; (8013a90 <udp_sendto_if_src+0x130>)
 80139f6:	f002 fe63 	bl	80166c0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80139fa:	69fb      	ldr	r3, [r7, #28]
 80139fc:	685b      	ldr	r3, [r3, #4]
 80139fe:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	8a5b      	ldrh	r3, [r3, #18]
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7f8 fbf7 	bl	800c1f8 <lwip_htons>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	461a      	mov	r2, r3
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013a12:	887b      	ldrh	r3, [r7, #2]
 8013a14:	4618      	mov	r0, r3
 8013a16:	f7f8 fbef 	bl	800c1f8 <lwip_htons>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	461a      	mov	r2, r3
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013a22:	697b      	ldr	r3, [r7, #20]
 8013a24:	2200      	movs	r2, #0
 8013a26:	719a      	strb	r2, [r3, #6]
 8013a28:	2200      	movs	r2, #0
 8013a2a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013a2c:	69fb      	ldr	r3, [r7, #28]
 8013a2e:	891b      	ldrh	r3, [r3, #8]
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7f8 fbe1 	bl	800c1f8 <lwip_htons>
 8013a36:	4603      	mov	r3, r0
 8013a38:	461a      	mov	r2, r3
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013a3e:	2311      	movs	r3, #17
 8013a40:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	7a9b      	ldrb	r3, [r3, #10]
 8013a46:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	7a5b      	ldrb	r3, [r3, #9]
 8013a4c:	7cb9      	ldrb	r1, [r7, #18]
 8013a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a50:	9202      	str	r2, [sp, #8]
 8013a52:	7cfa      	ldrb	r2, [r7, #19]
 8013a54:	9201      	str	r2, [sp, #4]
 8013a56:	9300      	str	r3, [sp, #0]
 8013a58:	460b      	mov	r3, r1
 8013a5a:	687a      	ldr	r2, [r7, #4]
 8013a5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a5e:	69f8      	ldr	r0, [r7, #28]
 8013a60:	f001 fba2 	bl	80151a8 <ip4_output_if_src>
 8013a64:	4603      	mov	r3, r0
 8013a66:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013a68:	69fa      	ldr	r2, [r7, #28]
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d004      	beq.n	8013a7a <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8013a70:	69f8      	ldr	r0, [r7, #28]
 8013a72:	f7f9 fdd5 	bl	800d620 <pbuf_free>
    q = NULL;
 8013a76:	2300      	movs	r3, #0
 8013a78:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013a7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3720      	adds	r7, #32
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}
 8013a86:	bf00      	nop
 8013a88:	08019a0c 	.word	0x08019a0c
 8013a8c:	08019a78 	.word	0x08019a78
 8013a90:	08019a50 	.word	0x08019a50

08013a94 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b086      	sub	sp, #24
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	60f8      	str	r0, [r7, #12]
 8013a9c:	60b9      	str	r1, [r7, #8]
 8013a9e:	4613      	mov	r3, r2
 8013aa0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d101      	bne.n	8013aac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013aa8:	4b36      	ldr	r3, [pc, #216]	; (8013b84 <udp_bind+0xf0>)
 8013aaa:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d002      	beq.n	8013ab8 <udp_bind+0x24>
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d102      	bne.n	8013abe <udp_bind+0x2a>
    return ERR_VAL;
 8013ab8:	f06f 0305 	mvn.w	r3, #5
 8013abc:	e05e      	b.n	8013b7c <udp_bind+0xe8>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013abe:	2300      	movs	r3, #0
 8013ac0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ac2:	4b31      	ldr	r3, [pc, #196]	; (8013b88 <udp_bind+0xf4>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	617b      	str	r3, [r7, #20]
 8013ac8:	e009      	b.n	8013ade <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013aca:	68fa      	ldr	r2, [r7, #12]
 8013acc:	697b      	ldr	r3, [r7, #20]
 8013ace:	429a      	cmp	r2, r3
 8013ad0:	d102      	bne.n	8013ad8 <udp_bind+0x44>
      rebind = 1;
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	74fb      	strb	r3, [r7, #19]
      break;
 8013ad6:	e005      	b.n	8013ae4 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	68db      	ldr	r3, [r3, #12]
 8013adc:	617b      	str	r3, [r7, #20]
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d1f2      	bne.n	8013aca <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8013ae4:	88fb      	ldrh	r3, [r7, #6]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d109      	bne.n	8013afe <udp_bind+0x6a>
    port = udp_new_port();
 8013aea:	f7ff fcd7 	bl	801349c <udp_new_port>
 8013aee:	4603      	mov	r3, r0
 8013af0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013af2:	88fb      	ldrh	r3, [r7, #6]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d12a      	bne.n	8013b4e <udp_bind+0xba>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013af8:	f06f 0307 	mvn.w	r3, #7
 8013afc:	e03e      	b.n	8013b7c <udp_bind+0xe8>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013afe:	4b22      	ldr	r3, [pc, #136]	; (8013b88 <udp_bind+0xf4>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	617b      	str	r3, [r7, #20]
 8013b04:	e020      	b.n	8013b48 <udp_bind+0xb4>
      if (pcb != ipcb) {
 8013b06:	68fa      	ldr	r2, [r7, #12]
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d019      	beq.n	8013b42 <udp_bind+0xae>
      /* By default, we don't allow to bind to a port that any other udp
         PCB is already bound to, unless *all* PCBs with that port have tha
         REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	7a1b      	ldrb	r3, [r3, #8]
 8013b12:	f003 0304 	and.w	r3, r3, #4
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d005      	beq.n	8013b26 <udp_bind+0x92>
            !ip_get_option(ipcb, SOF_REUSEADDR))
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	7a1b      	ldrb	r3, [r3, #8]
 8013b1e:	f003 0304 	and.w	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d10d      	bne.n	8013b42 <udp_bind+0xae>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013b26:	697b      	ldr	r3, [r7, #20]
 8013b28:	8a5b      	ldrh	r3, [r3, #18]
 8013b2a:	88fa      	ldrh	r2, [r7, #6]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d108      	bne.n	8013b42 <udp_bind+0xae>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8013b30:	697b      	ldr	r3, [r7, #20]
 8013b32:	681a      	ldr	r2, [r3, #0]
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	d102      	bne.n	8013b42 <udp_bind+0xae>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013b3c:	f06f 0307 	mvn.w	r3, #7
 8013b40:	e01c      	b.n	8013b7c <udp_bind+0xe8>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	68db      	ldr	r3, [r3, #12]
 8013b46:	617b      	str	r3, [r7, #20]
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d1db      	bne.n	8013b06 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013b4e:	68bb      	ldr	r3, [r7, #8]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d002      	beq.n	8013b5a <udp_bind+0xc6>
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	e000      	b.n	8013b5c <udp_bind+0xc8>
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	68fa      	ldr	r2, [r7, #12]
 8013b5e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	88fa      	ldrh	r2, [r7, #6]
 8013b64:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013b66:	7cfb      	ldrb	r3, [r7, #19]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d106      	bne.n	8013b7a <udp_bind+0xe6>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013b6c:	4b06      	ldr	r3, [pc, #24]	; (8013b88 <udp_bind+0xf4>)
 8013b6e:	681a      	ldr	r2, [r3, #0]
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013b74:	4a04      	ldr	r2, [pc, #16]	; (8013b88 <udp_bind+0xf4>)
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013b7a:	2300      	movs	r3, #0
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3718      	adds	r7, #24
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}
 8013b84:	0801a290 	.word	0x0801a290
 8013b88:	2000dc6c 	.word	0x2000dc6c

08013b8c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013b8c:	b480      	push	{r7}
 8013b8e:	b085      	sub	sp, #20
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	60f8      	str	r0, [r7, #12]
 8013b94:	60b9      	str	r1, [r7, #8]
 8013b96:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	68ba      	ldr	r2, [r7, #8]
 8013b9c:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	687a      	ldr	r2, [r7, #4]
 8013ba2:	61da      	str	r2, [r3, #28]
}
 8013ba4:	bf00      	nop
 8013ba6:	3714      	adds	r7, #20
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bae:	4770      	bx	lr

08013bb0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013bb8:	4b15      	ldr	r3, [pc, #84]	; (8013c10 <udp_remove+0x60>)
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	687a      	ldr	r2, [r7, #4]
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d105      	bne.n	8013bce <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013bc2:	4b13      	ldr	r3, [pc, #76]	; (8013c10 <udp_remove+0x60>)
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	68db      	ldr	r3, [r3, #12]
 8013bc8:	4a11      	ldr	r2, [pc, #68]	; (8013c10 <udp_remove+0x60>)
 8013bca:	6013      	str	r3, [r2, #0]
 8013bcc:	e017      	b.n	8013bfe <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013bce:	4b10      	ldr	r3, [pc, #64]	; (8013c10 <udp_remove+0x60>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	60fb      	str	r3, [r7, #12]
 8013bd4:	e010      	b.n	8013bf8 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	68db      	ldr	r3, [r3, #12]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d009      	beq.n	8013bf2 <udp_remove+0x42>
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	68db      	ldr	r3, [r3, #12]
 8013be2:	687a      	ldr	r2, [r7, #4]
 8013be4:	429a      	cmp	r2, r3
 8013be6:	d104      	bne.n	8013bf2 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	68da      	ldr	r2, [r3, #12]
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	60da      	str	r2, [r3, #12]
        break;
 8013bf0:	e005      	b.n	8013bfe <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	68db      	ldr	r3, [r3, #12]
 8013bf6:	60fb      	str	r3, [r7, #12]
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d1eb      	bne.n	8013bd6 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013bfe:	6879      	ldr	r1, [r7, #4]
 8013c00:	2000      	movs	r0, #0
 8013c02:	f7f8 ff39 	bl	800ca78 <memp_free>
}
 8013c06:	bf00      	nop
 8013c08:	3710      	adds	r7, #16
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd80      	pop	{r7, pc}
 8013c0e:	bf00      	nop
 8013c10:	2000dc6c 	.word	0x2000dc6c

08013c14 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b082      	sub	sp, #8
 8013c18:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013c1a:	2000      	movs	r0, #0
 8013c1c:	f7f8 feda 	bl	800c9d4 <memp_malloc>
 8013c20:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d007      	beq.n	8013c38 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013c28:	2220      	movs	r2, #32
 8013c2a:	2100      	movs	r1, #0
 8013c2c:	6878      	ldr	r0, [r7, #4]
 8013c2e:	f002 fd3f 	bl	80166b0 <memset>
    pcb->ttl = UDP_TTL;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	22ff      	movs	r2, #255	; 0xff
 8013c36:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013c38:	687b      	ldr	r3, [r7, #4]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3708      	adds	r7, #8
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}

08013c42 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013c42:	b580      	push	{r7, lr}
 8013c44:	b084      	sub	sp, #16
 8013c46:	af00      	add	r7, sp, #0
 8013c48:	4603      	mov	r3, r0
 8013c4a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8013c4c:	f7ff ffe2 	bl	8013c14 <udp_new>
 8013c50:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013c52:	68fb      	ldr	r3, [r7, #12]
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3710      	adds	r7, #16
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}

08013c5c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8013c5c:	b480      	push	{r7}
 8013c5e:	b085      	sub	sp, #20
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
 8013c64:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d01e      	beq.n	8013caa <udp_netif_ip_addr_changed+0x4e>
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d01a      	beq.n	8013caa <udp_netif_ip_addr_changed+0x4e>
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d017      	beq.n	8013caa <udp_netif_ip_addr_changed+0x4e>
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d013      	beq.n	8013caa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013c82:	4b0d      	ldr	r3, [pc, #52]	; (8013cb8 <udp_netif_ip_addr_changed+0x5c>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	60fb      	str	r3, [r7, #12]
 8013c88:	e00c      	b.n	8013ca4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	681a      	ldr	r2, [r3, #0]
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	429a      	cmp	r2, r3
 8013c94:	d103      	bne.n	8013c9e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	681a      	ldr	r2, [r3, #0]
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	68db      	ldr	r3, [r3, #12]
 8013ca2:	60fb      	str	r3, [r7, #12]
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d1ef      	bne.n	8013c8a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013caa:	bf00      	nop
 8013cac:	3714      	adds	r7, #20
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb4:	4770      	bx	lr
 8013cb6:	bf00      	nop
 8013cb8:	2000dc6c 	.word	0x2000dc6c

08013cbc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b082      	sub	sp, #8
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013cc4:	4915      	ldr	r1, [pc, #84]	; (8013d1c <etharp_free_entry+0x60>)
 8013cc6:	687a      	ldr	r2, [r7, #4]
 8013cc8:	4613      	mov	r3, r2
 8013cca:	005b      	lsls	r3, r3, #1
 8013ccc:	4413      	add	r3, r2
 8013cce:	00db      	lsls	r3, r3, #3
 8013cd0:	440b      	add	r3, r1
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d013      	beq.n	8013d00 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013cd8:	4910      	ldr	r1, [pc, #64]	; (8013d1c <etharp_free_entry+0x60>)
 8013cda:	687a      	ldr	r2, [r7, #4]
 8013cdc:	4613      	mov	r3, r2
 8013cde:	005b      	lsls	r3, r3, #1
 8013ce0:	4413      	add	r3, r2
 8013ce2:	00db      	lsls	r3, r3, #3
 8013ce4:	440b      	add	r3, r1
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7f9 fc99 	bl	800d620 <pbuf_free>
    arp_table[i].q = NULL;
 8013cee:	490b      	ldr	r1, [pc, #44]	; (8013d1c <etharp_free_entry+0x60>)
 8013cf0:	687a      	ldr	r2, [r7, #4]
 8013cf2:	4613      	mov	r3, r2
 8013cf4:	005b      	lsls	r3, r3, #1
 8013cf6:	4413      	add	r3, r2
 8013cf8:	00db      	lsls	r3, r3, #3
 8013cfa:	440b      	add	r3, r1
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013d00:	4906      	ldr	r1, [pc, #24]	; (8013d1c <etharp_free_entry+0x60>)
 8013d02:	687a      	ldr	r2, [r7, #4]
 8013d04:	4613      	mov	r3, r2
 8013d06:	005b      	lsls	r3, r3, #1
 8013d08:	4413      	add	r3, r2
 8013d0a:	00db      	lsls	r3, r3, #3
 8013d0c:	440b      	add	r3, r1
 8013d0e:	3314      	adds	r3, #20
 8013d10:	2200      	movs	r2, #0
 8013d12:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013d14:	bf00      	nop
 8013d16:	3708      	adds	r7, #8
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}
 8013d1c:	20004184 	.word	0x20004184

08013d20 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b082      	sub	sp, #8
 8013d24:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d26:	2300      	movs	r3, #0
 8013d28:	71fb      	strb	r3, [r7, #7]
 8013d2a:	e096      	b.n	8013e5a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013d2c:	79fa      	ldrb	r2, [r7, #7]
 8013d2e:	494f      	ldr	r1, [pc, #316]	; (8013e6c <etharp_tmr+0x14c>)
 8013d30:	4613      	mov	r3, r2
 8013d32:	005b      	lsls	r3, r3, #1
 8013d34:	4413      	add	r3, r2
 8013d36:	00db      	lsls	r3, r3, #3
 8013d38:	440b      	add	r3, r1
 8013d3a:	3314      	adds	r3, #20
 8013d3c:	781b      	ldrb	r3, [r3, #0]
 8013d3e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8013d40:	79bb      	ldrb	r3, [r7, #6]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	f000 8086 	beq.w	8013e54 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8013d48:	79fa      	ldrb	r2, [r7, #7]
 8013d4a:	4948      	ldr	r1, [pc, #288]	; (8013e6c <etharp_tmr+0x14c>)
 8013d4c:	4613      	mov	r3, r2
 8013d4e:	005b      	lsls	r3, r3, #1
 8013d50:	4413      	add	r3, r2
 8013d52:	00db      	lsls	r3, r3, #3
 8013d54:	440b      	add	r3, r1
 8013d56:	3312      	adds	r3, #18
 8013d58:	881b      	ldrh	r3, [r3, #0]
 8013d5a:	3301      	adds	r3, #1
 8013d5c:	b298      	uxth	r0, r3
 8013d5e:	4943      	ldr	r1, [pc, #268]	; (8013e6c <etharp_tmr+0x14c>)
 8013d60:	4613      	mov	r3, r2
 8013d62:	005b      	lsls	r3, r3, #1
 8013d64:	4413      	add	r3, r2
 8013d66:	00db      	lsls	r3, r3, #3
 8013d68:	440b      	add	r3, r1
 8013d6a:	3312      	adds	r3, #18
 8013d6c:	4602      	mov	r2, r0
 8013d6e:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013d70:	79fa      	ldrb	r2, [r7, #7]
 8013d72:	493e      	ldr	r1, [pc, #248]	; (8013e6c <etharp_tmr+0x14c>)
 8013d74:	4613      	mov	r3, r2
 8013d76:	005b      	lsls	r3, r3, #1
 8013d78:	4413      	add	r3, r2
 8013d7a:	00db      	lsls	r3, r3, #3
 8013d7c:	440b      	add	r3, r1
 8013d7e:	3312      	adds	r3, #18
 8013d80:	881b      	ldrh	r3, [r3, #0]
 8013d82:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013d86:	d215      	bcs.n	8013db4 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013d88:	79fa      	ldrb	r2, [r7, #7]
 8013d8a:	4938      	ldr	r1, [pc, #224]	; (8013e6c <etharp_tmr+0x14c>)
 8013d8c:	4613      	mov	r3, r2
 8013d8e:	005b      	lsls	r3, r3, #1
 8013d90:	4413      	add	r3, r2
 8013d92:	00db      	lsls	r3, r3, #3
 8013d94:	440b      	add	r3, r1
 8013d96:	3314      	adds	r3, #20
 8013d98:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013d9a:	2b01      	cmp	r3, #1
 8013d9c:	d10f      	bne.n	8013dbe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013d9e:	79fa      	ldrb	r2, [r7, #7]
 8013da0:	4932      	ldr	r1, [pc, #200]	; (8013e6c <etharp_tmr+0x14c>)
 8013da2:	4613      	mov	r3, r2
 8013da4:	005b      	lsls	r3, r3, #1
 8013da6:	4413      	add	r3, r2
 8013da8:	00db      	lsls	r3, r3, #3
 8013daa:	440b      	add	r3, r1
 8013dac:	3312      	adds	r3, #18
 8013dae:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013db0:	2b04      	cmp	r3, #4
 8013db2:	d904      	bls.n	8013dbe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013db4:	79fb      	ldrb	r3, [r7, #7]
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7ff ff80 	bl	8013cbc <etharp_free_entry>
 8013dbc:	e04a      	b.n	8013e54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013dbe:	79fa      	ldrb	r2, [r7, #7]
 8013dc0:	492a      	ldr	r1, [pc, #168]	; (8013e6c <etharp_tmr+0x14c>)
 8013dc2:	4613      	mov	r3, r2
 8013dc4:	005b      	lsls	r3, r3, #1
 8013dc6:	4413      	add	r3, r2
 8013dc8:	00db      	lsls	r3, r3, #3
 8013dca:	440b      	add	r3, r1
 8013dcc:	3314      	adds	r3, #20
 8013dce:	781b      	ldrb	r3, [r3, #0]
 8013dd0:	2b03      	cmp	r3, #3
 8013dd2:	d10a      	bne.n	8013dea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013dd4:	79fa      	ldrb	r2, [r7, #7]
 8013dd6:	4925      	ldr	r1, [pc, #148]	; (8013e6c <etharp_tmr+0x14c>)
 8013dd8:	4613      	mov	r3, r2
 8013dda:	005b      	lsls	r3, r3, #1
 8013ddc:	4413      	add	r3, r2
 8013dde:	00db      	lsls	r3, r3, #3
 8013de0:	440b      	add	r3, r1
 8013de2:	3314      	adds	r3, #20
 8013de4:	2204      	movs	r2, #4
 8013de6:	701a      	strb	r2, [r3, #0]
 8013de8:	e034      	b.n	8013e54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013dea:	79fa      	ldrb	r2, [r7, #7]
 8013dec:	491f      	ldr	r1, [pc, #124]	; (8013e6c <etharp_tmr+0x14c>)
 8013dee:	4613      	mov	r3, r2
 8013df0:	005b      	lsls	r3, r3, #1
 8013df2:	4413      	add	r3, r2
 8013df4:	00db      	lsls	r3, r3, #3
 8013df6:	440b      	add	r3, r1
 8013df8:	3314      	adds	r3, #20
 8013dfa:	781b      	ldrb	r3, [r3, #0]
 8013dfc:	2b04      	cmp	r3, #4
 8013dfe:	d10a      	bne.n	8013e16 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013e00:	79fa      	ldrb	r2, [r7, #7]
 8013e02:	491a      	ldr	r1, [pc, #104]	; (8013e6c <etharp_tmr+0x14c>)
 8013e04:	4613      	mov	r3, r2
 8013e06:	005b      	lsls	r3, r3, #1
 8013e08:	4413      	add	r3, r2
 8013e0a:	00db      	lsls	r3, r3, #3
 8013e0c:	440b      	add	r3, r1
 8013e0e:	3314      	adds	r3, #20
 8013e10:	2202      	movs	r2, #2
 8013e12:	701a      	strb	r2, [r3, #0]
 8013e14:	e01e      	b.n	8013e54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013e16:	79fa      	ldrb	r2, [r7, #7]
 8013e18:	4914      	ldr	r1, [pc, #80]	; (8013e6c <etharp_tmr+0x14c>)
 8013e1a:	4613      	mov	r3, r2
 8013e1c:	005b      	lsls	r3, r3, #1
 8013e1e:	4413      	add	r3, r2
 8013e20:	00db      	lsls	r3, r3, #3
 8013e22:	440b      	add	r3, r1
 8013e24:	3314      	adds	r3, #20
 8013e26:	781b      	ldrb	r3, [r3, #0]
 8013e28:	2b01      	cmp	r3, #1
 8013e2a:	d113      	bne.n	8013e54 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013e2c:	79fa      	ldrb	r2, [r7, #7]
 8013e2e:	490f      	ldr	r1, [pc, #60]	; (8013e6c <etharp_tmr+0x14c>)
 8013e30:	4613      	mov	r3, r2
 8013e32:	005b      	lsls	r3, r3, #1
 8013e34:	4413      	add	r3, r2
 8013e36:	00db      	lsls	r3, r3, #3
 8013e38:	440b      	add	r3, r1
 8013e3a:	3308      	adds	r3, #8
 8013e3c:	6818      	ldr	r0, [r3, #0]
 8013e3e:	79fa      	ldrb	r2, [r7, #7]
 8013e40:	4613      	mov	r3, r2
 8013e42:	005b      	lsls	r3, r3, #1
 8013e44:	4413      	add	r3, r2
 8013e46:	00db      	lsls	r3, r3, #3
 8013e48:	4a08      	ldr	r2, [pc, #32]	; (8013e6c <etharp_tmr+0x14c>)
 8013e4a:	4413      	add	r3, r2
 8013e4c:	3304      	adds	r3, #4
 8013e4e:	4619      	mov	r1, r3
 8013e50:	f000 fe38 	bl	8014ac4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e54:	79fb      	ldrb	r3, [r7, #7]
 8013e56:	3301      	adds	r3, #1
 8013e58:	71fb      	strb	r3, [r7, #7]
 8013e5a:	79fb      	ldrb	r3, [r7, #7]
 8013e5c:	2b09      	cmp	r3, #9
 8013e5e:	f67f af65 	bls.w	8013d2c <etharp_tmr+0xc>
      }
    }
  }
}
 8013e62:	bf00      	nop
 8013e64:	3708      	adds	r7, #8
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}
 8013e6a:	bf00      	nop
 8013e6c:	20004184 	.word	0x20004184

08013e70 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b088      	sub	sp, #32
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	60f8      	str	r0, [r7, #12]
 8013e78:	460b      	mov	r3, r1
 8013e7a:	607a      	str	r2, [r7, #4]
 8013e7c:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013e7e:	230a      	movs	r3, #10
 8013e80:	77fb      	strb	r3, [r7, #31]
 8013e82:	230a      	movs	r3, #10
 8013e84:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8013e86:	230a      	movs	r3, #10
 8013e88:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8013e8e:	230a      	movs	r3, #10
 8013e90:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013e92:	2300      	movs	r3, #0
 8013e94:	833b      	strh	r3, [r7, #24]
 8013e96:	2300      	movs	r3, #0
 8013e98:	82fb      	strh	r3, [r7, #22]
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	773b      	strb	r3, [r7, #28]
 8013ea2:	e093      	b.n	8013fcc <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8013ea4:	7f3a      	ldrb	r2, [r7, #28]
 8013ea6:	4990      	ldr	r1, [pc, #576]	; (80140e8 <etharp_find_entry+0x278>)
 8013ea8:	4613      	mov	r3, r2
 8013eaa:	005b      	lsls	r3, r3, #1
 8013eac:	4413      	add	r3, r2
 8013eae:	00db      	lsls	r3, r3, #3
 8013eb0:	440b      	add	r3, r1
 8013eb2:	3314      	adds	r3, #20
 8013eb4:	781b      	ldrb	r3, [r3, #0]
 8013eb6:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013eb8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8013ebc:	2b0a      	cmp	r3, #10
 8013ebe:	d105      	bne.n	8013ecc <etharp_find_entry+0x5c>
 8013ec0:	7cfb      	ldrb	r3, [r7, #19]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d102      	bne.n	8013ecc <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8013ec6:	7f3b      	ldrb	r3, [r7, #28]
 8013ec8:	777b      	strb	r3, [r7, #29]
 8013eca:	e07c      	b.n	8013fc6 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013ecc:	7cfb      	ldrb	r3, [r7, #19]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d079      	beq.n	8013fc6 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013ed2:	7cfb      	ldrb	r3, [r7, #19]
 8013ed4:	2b01      	cmp	r3, #1
 8013ed6:	d009      	beq.n	8013eec <etharp_find_entry+0x7c>
 8013ed8:	7cfb      	ldrb	r3, [r7, #19]
 8013eda:	2b01      	cmp	r3, #1
 8013edc:	d806      	bhi.n	8013eec <etharp_find_entry+0x7c>
 8013ede:	4b83      	ldr	r3, [pc, #524]	; (80140ec <etharp_find_entry+0x27c>)
 8013ee0:	f44f 7293 	mov.w	r2, #294	; 0x126
 8013ee4:	4982      	ldr	r1, [pc, #520]	; (80140f0 <etharp_find_entry+0x280>)
 8013ee6:	4883      	ldr	r0, [pc, #524]	; (80140f4 <etharp_find_entry+0x284>)
 8013ee8:	f002 fbea 	bl	80166c0 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d00f      	beq.n	8013f12 <etharp_find_entry+0xa2>
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	6819      	ldr	r1, [r3, #0]
 8013ef6:	7f3a      	ldrb	r2, [r7, #28]
 8013ef8:	487b      	ldr	r0, [pc, #492]	; (80140e8 <etharp_find_entry+0x278>)
 8013efa:	4613      	mov	r3, r2
 8013efc:	005b      	lsls	r3, r3, #1
 8013efe:	4413      	add	r3, r2
 8013f00:	00db      	lsls	r3, r3, #3
 8013f02:	4403      	add	r3, r0
 8013f04:	3304      	adds	r3, #4
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	4299      	cmp	r1, r3
 8013f0a:	d102      	bne.n	8013f12 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013f0c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8013f10:	e0e5      	b.n	80140de <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013f12:	7cfb      	ldrb	r3, [r7, #19]
 8013f14:	2b01      	cmp	r3, #1
 8013f16:	d13b      	bne.n	8013f90 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013f18:	7f3a      	ldrb	r2, [r7, #28]
 8013f1a:	4973      	ldr	r1, [pc, #460]	; (80140e8 <etharp_find_entry+0x278>)
 8013f1c:	4613      	mov	r3, r2
 8013f1e:	005b      	lsls	r3, r3, #1
 8013f20:	4413      	add	r3, r2
 8013f22:	00db      	lsls	r3, r3, #3
 8013f24:	440b      	add	r3, r1
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d018      	beq.n	8013f5e <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8013f2c:	7f3a      	ldrb	r2, [r7, #28]
 8013f2e:	496e      	ldr	r1, [pc, #440]	; (80140e8 <etharp_find_entry+0x278>)
 8013f30:	4613      	mov	r3, r2
 8013f32:	005b      	lsls	r3, r3, #1
 8013f34:	4413      	add	r3, r2
 8013f36:	00db      	lsls	r3, r3, #3
 8013f38:	440b      	add	r3, r1
 8013f3a:	3312      	adds	r3, #18
 8013f3c:	881b      	ldrh	r3, [r3, #0]
 8013f3e:	8b3a      	ldrh	r2, [r7, #24]
 8013f40:	429a      	cmp	r2, r3
 8013f42:	d840      	bhi.n	8013fc6 <etharp_find_entry+0x156>
            old_queue = i;
 8013f44:	7f3b      	ldrb	r3, [r7, #28]
 8013f46:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8013f48:	7f3a      	ldrb	r2, [r7, #28]
 8013f4a:	4967      	ldr	r1, [pc, #412]	; (80140e8 <etharp_find_entry+0x278>)
 8013f4c:	4613      	mov	r3, r2
 8013f4e:	005b      	lsls	r3, r3, #1
 8013f50:	4413      	add	r3, r2
 8013f52:	00db      	lsls	r3, r3, #3
 8013f54:	440b      	add	r3, r1
 8013f56:	3312      	adds	r3, #18
 8013f58:	881b      	ldrh	r3, [r3, #0]
 8013f5a:	833b      	strh	r3, [r7, #24]
 8013f5c:	e033      	b.n	8013fc6 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013f5e:	7f3a      	ldrb	r2, [r7, #28]
 8013f60:	4961      	ldr	r1, [pc, #388]	; (80140e8 <etharp_find_entry+0x278>)
 8013f62:	4613      	mov	r3, r2
 8013f64:	005b      	lsls	r3, r3, #1
 8013f66:	4413      	add	r3, r2
 8013f68:	00db      	lsls	r3, r3, #3
 8013f6a:	440b      	add	r3, r1
 8013f6c:	3312      	adds	r3, #18
 8013f6e:	881b      	ldrh	r3, [r3, #0]
 8013f70:	8afa      	ldrh	r2, [r7, #22]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d827      	bhi.n	8013fc6 <etharp_find_entry+0x156>
            old_pending = i;
 8013f76:	7f3b      	ldrb	r3, [r7, #28]
 8013f78:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8013f7a:	7f3a      	ldrb	r2, [r7, #28]
 8013f7c:	495a      	ldr	r1, [pc, #360]	; (80140e8 <etharp_find_entry+0x278>)
 8013f7e:	4613      	mov	r3, r2
 8013f80:	005b      	lsls	r3, r3, #1
 8013f82:	4413      	add	r3, r2
 8013f84:	00db      	lsls	r3, r3, #3
 8013f86:	440b      	add	r3, r1
 8013f88:	3312      	adds	r3, #18
 8013f8a:	881b      	ldrh	r3, [r3, #0]
 8013f8c:	82fb      	strh	r3, [r7, #22]
 8013f8e:	e01a      	b.n	8013fc6 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013f90:	7cfb      	ldrb	r3, [r7, #19]
 8013f92:	2b01      	cmp	r3, #1
 8013f94:	d917      	bls.n	8013fc6 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013f96:	7f3a      	ldrb	r2, [r7, #28]
 8013f98:	4953      	ldr	r1, [pc, #332]	; (80140e8 <etharp_find_entry+0x278>)
 8013f9a:	4613      	mov	r3, r2
 8013f9c:	005b      	lsls	r3, r3, #1
 8013f9e:	4413      	add	r3, r2
 8013fa0:	00db      	lsls	r3, r3, #3
 8013fa2:	440b      	add	r3, r1
 8013fa4:	3312      	adds	r3, #18
 8013fa6:	881b      	ldrh	r3, [r3, #0]
 8013fa8:	8aba      	ldrh	r2, [r7, #20]
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d80b      	bhi.n	8013fc6 <etharp_find_entry+0x156>
            old_stable = i;
 8013fae:	7f3b      	ldrb	r3, [r7, #28]
 8013fb0:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8013fb2:	7f3a      	ldrb	r2, [r7, #28]
 8013fb4:	494c      	ldr	r1, [pc, #304]	; (80140e8 <etharp_find_entry+0x278>)
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	005b      	lsls	r3, r3, #1
 8013fba:	4413      	add	r3, r2
 8013fbc:	00db      	lsls	r3, r3, #3
 8013fbe:	440b      	add	r3, r1
 8013fc0:	3312      	adds	r3, #18
 8013fc2:	881b      	ldrh	r3, [r3, #0]
 8013fc4:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fc6:	7f3b      	ldrb	r3, [r7, #28]
 8013fc8:	3301      	adds	r3, #1
 8013fca:	773b      	strb	r3, [r7, #28]
 8013fcc:	7f3b      	ldrb	r3, [r7, #28]
 8013fce:	2b09      	cmp	r3, #9
 8013fd0:	f67f af68 	bls.w	8013ea4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013fd4:	7afb      	ldrb	r3, [r7, #11]
 8013fd6:	f003 0302 	and.w	r3, r3, #2
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d108      	bne.n	8013ff0 <etharp_find_entry+0x180>
 8013fde:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8013fe2:	2b0a      	cmp	r3, #10
 8013fe4:	d107      	bne.n	8013ff6 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013fe6:	7afb      	ldrb	r3, [r7, #11]
 8013fe8:	f003 0301 	and.w	r3, r3, #1
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d102      	bne.n	8013ff6 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8013ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ff4:	e073      	b.n	80140de <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013ff6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8013ffa:	2b09      	cmp	r3, #9
 8013ffc:	dc02      	bgt.n	8014004 <etharp_find_entry+0x194>
    i = empty;
 8013ffe:	7f7b      	ldrb	r3, [r7, #29]
 8014000:	773b      	strb	r3, [r7, #28]
 8014002:	e036      	b.n	8014072 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014004:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014008:	2b09      	cmp	r3, #9
 801400a:	dc13      	bgt.n	8014034 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 801400c:	7fbb      	ldrb	r3, [r7, #30]
 801400e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014010:	7f3a      	ldrb	r2, [r7, #28]
 8014012:	4935      	ldr	r1, [pc, #212]	; (80140e8 <etharp_find_entry+0x278>)
 8014014:	4613      	mov	r3, r2
 8014016:	005b      	lsls	r3, r3, #1
 8014018:	4413      	add	r3, r2
 801401a:	00db      	lsls	r3, r3, #3
 801401c:	440b      	add	r3, r1
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d018      	beq.n	8014056 <etharp_find_entry+0x1e6>
 8014024:	4b31      	ldr	r3, [pc, #196]	; (80140ec <etharp_find_entry+0x27c>)
 8014026:	f240 126f 	movw	r2, #367	; 0x16f
 801402a:	4933      	ldr	r1, [pc, #204]	; (80140f8 <etharp_find_entry+0x288>)
 801402c:	4831      	ldr	r0, [pc, #196]	; (80140f4 <etharp_find_entry+0x284>)
 801402e:	f002 fb47 	bl	80166c0 <iprintf>
 8014032:	e010      	b.n	8014056 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014034:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014038:	2b09      	cmp	r3, #9
 801403a:	dc02      	bgt.n	8014042 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 801403c:	7ffb      	ldrb	r3, [r7, #31]
 801403e:	773b      	strb	r3, [r7, #28]
 8014040:	e009      	b.n	8014056 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014042:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014046:	2b09      	cmp	r3, #9
 8014048:	dc02      	bgt.n	8014050 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801404a:	7efb      	ldrb	r3, [r7, #27]
 801404c:	773b      	strb	r3, [r7, #28]
 801404e:	e002      	b.n	8014056 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8014050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014054:	e043      	b.n	80140de <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014056:	7f3b      	ldrb	r3, [r7, #28]
 8014058:	2b09      	cmp	r3, #9
 801405a:	d906      	bls.n	801406a <etharp_find_entry+0x1fa>
 801405c:	4b23      	ldr	r3, [pc, #140]	; (80140ec <etharp_find_entry+0x27c>)
 801405e:	f240 1281 	movw	r2, #385	; 0x181
 8014062:	4926      	ldr	r1, [pc, #152]	; (80140fc <etharp_find_entry+0x28c>)
 8014064:	4823      	ldr	r0, [pc, #140]	; (80140f4 <etharp_find_entry+0x284>)
 8014066:	f002 fb2b 	bl	80166c0 <iprintf>
    etharp_free_entry(i);
 801406a:	7f3b      	ldrb	r3, [r7, #28]
 801406c:	4618      	mov	r0, r3
 801406e:	f7ff fe25 	bl	8013cbc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014072:	7f3b      	ldrb	r3, [r7, #28]
 8014074:	2b09      	cmp	r3, #9
 8014076:	d906      	bls.n	8014086 <etharp_find_entry+0x216>
 8014078:	4b1c      	ldr	r3, [pc, #112]	; (80140ec <etharp_find_entry+0x27c>)
 801407a:	f240 1285 	movw	r2, #389	; 0x185
 801407e:	491f      	ldr	r1, [pc, #124]	; (80140fc <etharp_find_entry+0x28c>)
 8014080:	481c      	ldr	r0, [pc, #112]	; (80140f4 <etharp_find_entry+0x284>)
 8014082:	f002 fb1d 	bl	80166c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014086:	7f3a      	ldrb	r2, [r7, #28]
 8014088:	4917      	ldr	r1, [pc, #92]	; (80140e8 <etharp_find_entry+0x278>)
 801408a:	4613      	mov	r3, r2
 801408c:	005b      	lsls	r3, r3, #1
 801408e:	4413      	add	r3, r2
 8014090:	00db      	lsls	r3, r3, #3
 8014092:	440b      	add	r3, r1
 8014094:	3314      	adds	r3, #20
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d006      	beq.n	80140aa <etharp_find_entry+0x23a>
 801409c:	4b13      	ldr	r3, [pc, #76]	; (80140ec <etharp_find_entry+0x27c>)
 801409e:	f240 1287 	movw	r2, #391	; 0x187
 80140a2:	4917      	ldr	r1, [pc, #92]	; (8014100 <etharp_find_entry+0x290>)
 80140a4:	4813      	ldr	r0, [pc, #76]	; (80140f4 <etharp_find_entry+0x284>)
 80140a6:	f002 fb0b 	bl	80166c0 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d00a      	beq.n	80140c6 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80140b0:	7f3a      	ldrb	r2, [r7, #28]
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	6819      	ldr	r1, [r3, #0]
 80140b6:	480c      	ldr	r0, [pc, #48]	; (80140e8 <etharp_find_entry+0x278>)
 80140b8:	4613      	mov	r3, r2
 80140ba:	005b      	lsls	r3, r3, #1
 80140bc:	4413      	add	r3, r2
 80140be:	00db      	lsls	r3, r3, #3
 80140c0:	4403      	add	r3, r0
 80140c2:	3304      	adds	r3, #4
 80140c4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80140c6:	7f3a      	ldrb	r2, [r7, #28]
 80140c8:	4907      	ldr	r1, [pc, #28]	; (80140e8 <etharp_find_entry+0x278>)
 80140ca:	4613      	mov	r3, r2
 80140cc:	005b      	lsls	r3, r3, #1
 80140ce:	4413      	add	r3, r2
 80140d0:	00db      	lsls	r3, r3, #3
 80140d2:	440b      	add	r3, r1
 80140d4:	3312      	adds	r3, #18
 80140d6:	2200      	movs	r2, #0
 80140d8:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80140da:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80140de:	4618      	mov	r0, r3
 80140e0:	3720      	adds	r7, #32
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}
 80140e6:	bf00      	nop
 80140e8:	20004184 	.word	0x20004184
 80140ec:	08019aa8 	.word	0x08019aa8
 80140f0:	08019ae0 	.word	0x08019ae0
 80140f4:	08019b20 	.word	0x08019b20
 80140f8:	08019b48 	.word	0x08019b48
 80140fc:	08019b60 	.word	0x08019b60
 8014100:	08019b74 	.word	0x08019b74

08014104 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b088      	sub	sp, #32
 8014108:	af02      	add	r7, sp, #8
 801410a:	60f8      	str	r0, [r7, #12]
 801410c:	60b9      	str	r1, [r7, #8]
 801410e:	607a      	str	r2, [r7, #4]
 8014110:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014118:	2b06      	cmp	r3, #6
 801411a:	d006      	beq.n	801412a <etharp_update_arp_entry+0x26>
 801411c:	4b48      	ldr	r3, [pc, #288]	; (8014240 <etharp_update_arp_entry+0x13c>)
 801411e:	f240 12ab 	movw	r2, #427	; 0x1ab
 8014122:	4948      	ldr	r1, [pc, #288]	; (8014244 <etharp_update_arp_entry+0x140>)
 8014124:	4848      	ldr	r0, [pc, #288]	; (8014248 <etharp_update_arp_entry+0x144>)
 8014126:	f002 facb 	bl	80166c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d012      	beq.n	8014156 <etharp_update_arp_entry+0x52>
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d00e      	beq.n	8014156 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	68f9      	ldr	r1, [r7, #12]
 801413e:	4618      	mov	r0, r3
 8014140:	f001 f8da 	bl	80152f8 <ip4_addr_isbroadcast_u32>
 8014144:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014146:	2b00      	cmp	r3, #0
 8014148:	d105      	bne.n	8014156 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801414a:	68bb      	ldr	r3, [r7, #8]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014152:	2be0      	cmp	r3, #224	; 0xe0
 8014154:	d102      	bne.n	801415c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014156:	f06f 030f 	mvn.w	r3, #15
 801415a:	e06c      	b.n	8014236 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801415c:	78fb      	ldrb	r3, [r7, #3]
 801415e:	68fa      	ldr	r2, [r7, #12]
 8014160:	4619      	mov	r1, r3
 8014162:	68b8      	ldr	r0, [r7, #8]
 8014164:	f7ff fe84 	bl	8013e70 <etharp_find_entry>
 8014168:	4603      	mov	r3, r0
 801416a:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 801416c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014170:	2b00      	cmp	r3, #0
 8014172:	da02      	bge.n	801417a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014174:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014178:	e05d      	b.n	8014236 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801417a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801417e:	4933      	ldr	r1, [pc, #204]	; (801424c <etharp_update_arp_entry+0x148>)
 8014180:	4613      	mov	r3, r2
 8014182:	005b      	lsls	r3, r3, #1
 8014184:	4413      	add	r3, r2
 8014186:	00db      	lsls	r3, r3, #3
 8014188:	440b      	add	r3, r1
 801418a:	3314      	adds	r3, #20
 801418c:	2202      	movs	r2, #2
 801418e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014190:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014194:	492d      	ldr	r1, [pc, #180]	; (801424c <etharp_update_arp_entry+0x148>)
 8014196:	4613      	mov	r3, r2
 8014198:	005b      	lsls	r3, r3, #1
 801419a:	4413      	add	r3, r2
 801419c:	00db      	lsls	r3, r3, #3
 801419e:	440b      	add	r3, r1
 80141a0:	3308      	adds	r3, #8
 80141a2:	68fa      	ldr	r2, [r7, #12]
 80141a4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80141a6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80141aa:	4613      	mov	r3, r2
 80141ac:	005b      	lsls	r3, r3, #1
 80141ae:	4413      	add	r3, r2
 80141b0:	00db      	lsls	r3, r3, #3
 80141b2:	3308      	adds	r3, #8
 80141b4:	4a25      	ldr	r2, [pc, #148]	; (801424c <etharp_update_arp_entry+0x148>)
 80141b6:	4413      	add	r3, r2
 80141b8:	3304      	adds	r3, #4
 80141ba:	2206      	movs	r2, #6
 80141bc:	6879      	ldr	r1, [r7, #4]
 80141be:	4618      	mov	r0, r3
 80141c0:	f002 fa6b 	bl	801669a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80141c4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80141c8:	4920      	ldr	r1, [pc, #128]	; (801424c <etharp_update_arp_entry+0x148>)
 80141ca:	4613      	mov	r3, r2
 80141cc:	005b      	lsls	r3, r3, #1
 80141ce:	4413      	add	r3, r2
 80141d0:	00db      	lsls	r3, r3, #3
 80141d2:	440b      	add	r3, r1
 80141d4:	3312      	adds	r3, #18
 80141d6:	2200      	movs	r2, #0
 80141d8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80141da:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80141de:	491b      	ldr	r1, [pc, #108]	; (801424c <etharp_update_arp_entry+0x148>)
 80141e0:	4613      	mov	r3, r2
 80141e2:	005b      	lsls	r3, r3, #1
 80141e4:	4413      	add	r3, r2
 80141e6:	00db      	lsls	r3, r3, #3
 80141e8:	440b      	add	r3, r1
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d021      	beq.n	8014234 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80141f0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80141f4:	4915      	ldr	r1, [pc, #84]	; (801424c <etharp_update_arp_entry+0x148>)
 80141f6:	4613      	mov	r3, r2
 80141f8:	005b      	lsls	r3, r3, #1
 80141fa:	4413      	add	r3, r2
 80141fc:	00db      	lsls	r3, r3, #3
 80141fe:	440b      	add	r3, r1
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014204:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014208:	4910      	ldr	r1, [pc, #64]	; (801424c <etharp_update_arp_entry+0x148>)
 801420a:	4613      	mov	r3, r2
 801420c:	005b      	lsls	r3, r3, #1
 801420e:	4413      	add	r3, r2
 8014210:	00db      	lsls	r3, r3, #3
 8014212:	440b      	add	r3, r1
 8014214:	2200      	movs	r2, #0
 8014216:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 801421e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014222:	9300      	str	r3, [sp, #0]
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	6939      	ldr	r1, [r7, #16]
 8014228:	68f8      	ldr	r0, [r7, #12]
 801422a:	f001 ff99 	bl	8016160 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801422e:	6938      	ldr	r0, [r7, #16]
 8014230:	f7f9 f9f6 	bl	800d620 <pbuf_free>
  }
  return ERR_OK;
 8014234:	2300      	movs	r3, #0
}
 8014236:	4618      	mov	r0, r3
 8014238:	3718      	adds	r7, #24
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
 801423e:	bf00      	nop
 8014240:	08019aa8 	.word	0x08019aa8
 8014244:	08019ba0 	.word	0x08019ba0
 8014248:	08019b20 	.word	0x08019b20
 801424c:	20004184 	.word	0x20004184

08014250 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b084      	sub	sp, #16
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014258:	2300      	movs	r3, #0
 801425a:	73fb      	strb	r3, [r7, #15]
 801425c:	e01f      	b.n	801429e <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801425e:	7bfa      	ldrb	r2, [r7, #15]
 8014260:	4912      	ldr	r1, [pc, #72]	; (80142ac <etharp_cleanup_netif+0x5c>)
 8014262:	4613      	mov	r3, r2
 8014264:	005b      	lsls	r3, r3, #1
 8014266:	4413      	add	r3, r2
 8014268:	00db      	lsls	r3, r3, #3
 801426a:	440b      	add	r3, r1
 801426c:	3314      	adds	r3, #20
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014272:	7bbb      	ldrb	r3, [r7, #14]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d00f      	beq.n	8014298 <etharp_cleanup_netif+0x48>
 8014278:	7bfa      	ldrb	r2, [r7, #15]
 801427a:	490c      	ldr	r1, [pc, #48]	; (80142ac <etharp_cleanup_netif+0x5c>)
 801427c:	4613      	mov	r3, r2
 801427e:	005b      	lsls	r3, r3, #1
 8014280:	4413      	add	r3, r2
 8014282:	00db      	lsls	r3, r3, #3
 8014284:	440b      	add	r3, r1
 8014286:	3308      	adds	r3, #8
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	687a      	ldr	r2, [r7, #4]
 801428c:	429a      	cmp	r2, r3
 801428e:	d103      	bne.n	8014298 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8014290:	7bfb      	ldrb	r3, [r7, #15]
 8014292:	4618      	mov	r0, r3
 8014294:	f7ff fd12 	bl	8013cbc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014298:	7bfb      	ldrb	r3, [r7, #15]
 801429a:	3301      	adds	r3, #1
 801429c:	73fb      	strb	r3, [r7, #15]
 801429e:	7bfb      	ldrb	r3, [r7, #15]
 80142a0:	2b09      	cmp	r3, #9
 80142a2:	d9dc      	bls.n	801425e <etharp_cleanup_netif+0xe>
    }
  }
}
 80142a4:	bf00      	nop
 80142a6:	3710      	adds	r7, #16
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	20004184 	.word	0x20004184

080142b0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80142b0:	b5b0      	push	{r4, r5, r7, lr}
 80142b2:	b08a      	sub	sp, #40	; 0x28
 80142b4:	af04      	add	r7, sp, #16
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80142ba:	683b      	ldr	r3, [r7, #0]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d107      	bne.n	80142d0 <etharp_input+0x20>
 80142c0:	4b3d      	ldr	r3, [pc, #244]	; (80143b8 <etharp_input+0x108>)
 80142c2:	f44f 7222 	mov.w	r2, #648	; 0x288
 80142c6:	493d      	ldr	r1, [pc, #244]	; (80143bc <etharp_input+0x10c>)
 80142c8:	483d      	ldr	r0, [pc, #244]	; (80143c0 <etharp_input+0x110>)
 80142ca:	f002 f9f9 	bl	80166c0 <iprintf>
 80142ce:	e06f      	b.n	80143b0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	685b      	ldr	r3, [r3, #4]
 80142d4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80142d6:	693b      	ldr	r3, [r7, #16]
 80142d8:	881b      	ldrh	r3, [r3, #0]
 80142da:	b29b      	uxth	r3, r3
 80142dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80142e0:	d10c      	bne.n	80142fc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80142e2:	693b      	ldr	r3, [r7, #16]
 80142e4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80142e6:	2b06      	cmp	r3, #6
 80142e8:	d108      	bne.n	80142fc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80142ea:	693b      	ldr	r3, [r7, #16]
 80142ec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80142ee:	2b04      	cmp	r3, #4
 80142f0:	d104      	bne.n	80142fc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80142f2:	693b      	ldr	r3, [r7, #16]
 80142f4:	885b      	ldrh	r3, [r3, #2]
 80142f6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80142f8:	2b08      	cmp	r3, #8
 80142fa:	d003      	beq.n	8014304 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f7f9 f98f 	bl	800d620 <pbuf_free>
    return;
 8014302:	e055      	b.n	80143b0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	330e      	adds	r3, #14
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 801430c:	693b      	ldr	r3, [r7, #16]
 801430e:	3318      	adds	r3, #24
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	3304      	adds	r3, #4
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d102      	bne.n	8014324 <etharp_input+0x74>
    for_us = 0;
 801431e:	2300      	movs	r3, #0
 8014320:	75fb      	strb	r3, [r7, #23]
 8014322:	e009      	b.n	8014338 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014324:	68ba      	ldr	r2, [r7, #8]
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	3304      	adds	r3, #4
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	429a      	cmp	r2, r3
 801432e:	bf0c      	ite	eq
 8014330:	2301      	moveq	r3, #1
 8014332:	2300      	movne	r3, #0
 8014334:	b2db      	uxtb	r3, r3
 8014336:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014338:	693b      	ldr	r3, [r7, #16]
 801433a:	f103 0208 	add.w	r2, r3, #8
 801433e:	7dfb      	ldrb	r3, [r7, #23]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d001      	beq.n	8014348 <etharp_input+0x98>
 8014344:	2301      	movs	r3, #1
 8014346:	e000      	b.n	801434a <etharp_input+0x9a>
 8014348:	2302      	movs	r3, #2
 801434a:	f107 010c 	add.w	r1, r7, #12
 801434e:	6838      	ldr	r0, [r7, #0]
 8014350:	f7ff fed8 	bl	8014104 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	88db      	ldrh	r3, [r3, #6]
 8014358:	b29b      	uxth	r3, r3
 801435a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801435e:	d003      	beq.n	8014368 <etharp_input+0xb8>
 8014360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014364:	d01e      	beq.n	80143a4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8014366:	e020      	b.n	80143aa <etharp_input+0xfa>
    if (for_us) {
 8014368:	7dfb      	ldrb	r3, [r7, #23]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d01c      	beq.n	80143a8 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801437a:	683b      	ldr	r3, [r7, #0]
 801437c:	f103 052d 	add.w	r5, r3, #45	; 0x2d
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8014384:	693a      	ldr	r2, [r7, #16]
 8014386:	3208      	adds	r2, #8
      etharp_raw(netif,
 8014388:	2102      	movs	r1, #2
 801438a:	9103      	str	r1, [sp, #12]
 801438c:	f107 010c 	add.w	r1, r7, #12
 8014390:	9102      	str	r1, [sp, #8]
 8014392:	9201      	str	r2, [sp, #4]
 8014394:	9300      	str	r3, [sp, #0]
 8014396:	462b      	mov	r3, r5
 8014398:	4622      	mov	r2, r4
 801439a:	4601      	mov	r1, r0
 801439c:	6838      	ldr	r0, [r7, #0]
 801439e:	f000 fae3 	bl	8014968 <etharp_raw>
    break;
 80143a2:	e001      	b.n	80143a8 <etharp_input+0xf8>
    break;
 80143a4:	bf00      	nop
 80143a6:	e000      	b.n	80143aa <etharp_input+0xfa>
    break;
 80143a8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f7f9 f938 	bl	800d620 <pbuf_free>
}
 80143b0:	3718      	adds	r7, #24
 80143b2:	46bd      	mov	sp, r7
 80143b4:	bdb0      	pop	{r4, r5, r7, pc}
 80143b6:	bf00      	nop
 80143b8:	08019aa8 	.word	0x08019aa8
 80143bc:	08019bf8 	.word	0x08019bf8
 80143c0:	08019b20 	.word	0x08019b20

080143c4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b086      	sub	sp, #24
 80143c8:	af02      	add	r7, sp, #8
 80143ca:	60f8      	str	r0, [r7, #12]
 80143cc:	60b9      	str	r1, [r7, #8]
 80143ce:	4613      	mov	r3, r2
 80143d0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80143d2:	79fa      	ldrb	r2, [r7, #7]
 80143d4:	4944      	ldr	r1, [pc, #272]	; (80144e8 <etharp_output_to_arp_index+0x124>)
 80143d6:	4613      	mov	r3, r2
 80143d8:	005b      	lsls	r3, r3, #1
 80143da:	4413      	add	r3, r2
 80143dc:	00db      	lsls	r3, r3, #3
 80143de:	440b      	add	r3, r1
 80143e0:	3314      	adds	r3, #20
 80143e2:	781b      	ldrb	r3, [r3, #0]
 80143e4:	2b01      	cmp	r3, #1
 80143e6:	d806      	bhi.n	80143f6 <etharp_output_to_arp_index+0x32>
 80143e8:	4b40      	ldr	r3, [pc, #256]	; (80144ec <etharp_output_to_arp_index+0x128>)
 80143ea:	f240 22ed 	movw	r2, #749	; 0x2ed
 80143ee:	4940      	ldr	r1, [pc, #256]	; (80144f0 <etharp_output_to_arp_index+0x12c>)
 80143f0:	4840      	ldr	r0, [pc, #256]	; (80144f4 <etharp_output_to_arp_index+0x130>)
 80143f2:	f002 f965 	bl	80166c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80143f6:	79fa      	ldrb	r2, [r7, #7]
 80143f8:	493b      	ldr	r1, [pc, #236]	; (80144e8 <etharp_output_to_arp_index+0x124>)
 80143fa:	4613      	mov	r3, r2
 80143fc:	005b      	lsls	r3, r3, #1
 80143fe:	4413      	add	r3, r2
 8014400:	00db      	lsls	r3, r3, #3
 8014402:	440b      	add	r3, r1
 8014404:	3314      	adds	r3, #20
 8014406:	781b      	ldrb	r3, [r3, #0]
 8014408:	2b02      	cmp	r3, #2
 801440a:	d153      	bne.n	80144b4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801440c:	79fa      	ldrb	r2, [r7, #7]
 801440e:	4936      	ldr	r1, [pc, #216]	; (80144e8 <etharp_output_to_arp_index+0x124>)
 8014410:	4613      	mov	r3, r2
 8014412:	005b      	lsls	r3, r3, #1
 8014414:	4413      	add	r3, r2
 8014416:	00db      	lsls	r3, r3, #3
 8014418:	440b      	add	r3, r1
 801441a:	3312      	adds	r3, #18
 801441c:	881b      	ldrh	r3, [r3, #0]
 801441e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014422:	d919      	bls.n	8014458 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014424:	79fa      	ldrb	r2, [r7, #7]
 8014426:	4613      	mov	r3, r2
 8014428:	005b      	lsls	r3, r3, #1
 801442a:	4413      	add	r3, r2
 801442c:	00db      	lsls	r3, r3, #3
 801442e:	4a2e      	ldr	r2, [pc, #184]	; (80144e8 <etharp_output_to_arp_index+0x124>)
 8014430:	4413      	add	r3, r2
 8014432:	3304      	adds	r3, #4
 8014434:	4619      	mov	r1, r3
 8014436:	68f8      	ldr	r0, [r7, #12]
 8014438:	f000 fb44 	bl	8014ac4 <etharp_request>
 801443c:	4603      	mov	r3, r0
 801443e:	2b00      	cmp	r3, #0
 8014440:	d138      	bne.n	80144b4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014442:	79fa      	ldrb	r2, [r7, #7]
 8014444:	4928      	ldr	r1, [pc, #160]	; (80144e8 <etharp_output_to_arp_index+0x124>)
 8014446:	4613      	mov	r3, r2
 8014448:	005b      	lsls	r3, r3, #1
 801444a:	4413      	add	r3, r2
 801444c:	00db      	lsls	r3, r3, #3
 801444e:	440b      	add	r3, r1
 8014450:	3314      	adds	r3, #20
 8014452:	2203      	movs	r2, #3
 8014454:	701a      	strb	r2, [r3, #0]
 8014456:	e02d      	b.n	80144b4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014458:	79fa      	ldrb	r2, [r7, #7]
 801445a:	4923      	ldr	r1, [pc, #140]	; (80144e8 <etharp_output_to_arp_index+0x124>)
 801445c:	4613      	mov	r3, r2
 801445e:	005b      	lsls	r3, r3, #1
 8014460:	4413      	add	r3, r2
 8014462:	00db      	lsls	r3, r3, #3
 8014464:	440b      	add	r3, r1
 8014466:	3312      	adds	r3, #18
 8014468:	881b      	ldrh	r3, [r3, #0]
 801446a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801446e:	d321      	bcc.n	80144b4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014470:	79fa      	ldrb	r2, [r7, #7]
 8014472:	4613      	mov	r3, r2
 8014474:	005b      	lsls	r3, r3, #1
 8014476:	4413      	add	r3, r2
 8014478:	00db      	lsls	r3, r3, #3
 801447a:	4a1b      	ldr	r2, [pc, #108]	; (80144e8 <etharp_output_to_arp_index+0x124>)
 801447c:	4413      	add	r3, r2
 801447e:	1d19      	adds	r1, r3, #4
 8014480:	79fa      	ldrb	r2, [r7, #7]
 8014482:	4613      	mov	r3, r2
 8014484:	005b      	lsls	r3, r3, #1
 8014486:	4413      	add	r3, r2
 8014488:	00db      	lsls	r3, r3, #3
 801448a:	3308      	adds	r3, #8
 801448c:	4a16      	ldr	r2, [pc, #88]	; (80144e8 <etharp_output_to_arp_index+0x124>)
 801448e:	4413      	add	r3, r2
 8014490:	3304      	adds	r3, #4
 8014492:	461a      	mov	r2, r3
 8014494:	68f8      	ldr	r0, [r7, #12]
 8014496:	f000 faf3 	bl	8014a80 <etharp_request_dst>
 801449a:	4603      	mov	r3, r0
 801449c:	2b00      	cmp	r3, #0
 801449e:	d109      	bne.n	80144b4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80144a0:	79fa      	ldrb	r2, [r7, #7]
 80144a2:	4911      	ldr	r1, [pc, #68]	; (80144e8 <etharp_output_to_arp_index+0x124>)
 80144a4:	4613      	mov	r3, r2
 80144a6:	005b      	lsls	r3, r3, #1
 80144a8:	4413      	add	r3, r2
 80144aa:	00db      	lsls	r3, r3, #3
 80144ac:	440b      	add	r3, r1
 80144ae:	3314      	adds	r3, #20
 80144b0:	2203      	movs	r2, #3
 80144b2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 80144ba:	79fa      	ldrb	r2, [r7, #7]
 80144bc:	4613      	mov	r3, r2
 80144be:	005b      	lsls	r3, r3, #1
 80144c0:	4413      	add	r3, r2
 80144c2:	00db      	lsls	r3, r3, #3
 80144c4:	3308      	adds	r3, #8
 80144c6:	4a08      	ldr	r2, [pc, #32]	; (80144e8 <etharp_output_to_arp_index+0x124>)
 80144c8:	4413      	add	r3, r2
 80144ca:	1d1a      	adds	r2, r3, #4
 80144cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80144d0:	9300      	str	r3, [sp, #0]
 80144d2:	4613      	mov	r3, r2
 80144d4:	460a      	mov	r2, r1
 80144d6:	68b9      	ldr	r1, [r7, #8]
 80144d8:	68f8      	ldr	r0, [r7, #12]
 80144da:	f001 fe41 	bl	8016160 <ethernet_output>
 80144de:	4603      	mov	r3, r0
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3710      	adds	r7, #16
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}
 80144e8:	20004184 	.word	0x20004184
 80144ec:	08019aa8 	.word	0x08019aa8
 80144f0:	08019c18 	.word	0x08019c18
 80144f4:	08019b20 	.word	0x08019b20

080144f8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b08a      	sub	sp, #40	; 0x28
 80144fc:	af02      	add	r7, sp, #8
 80144fe:	60f8      	str	r0, [r7, #12]
 8014500:	60b9      	str	r1, [r7, #8]
 8014502:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d106      	bne.n	801451c <etharp_output+0x24>
 801450e:	4b69      	ldr	r3, [pc, #420]	; (80146b4 <etharp_output+0x1bc>)
 8014510:	f240 321b 	movw	r2, #795	; 0x31b
 8014514:	4968      	ldr	r1, [pc, #416]	; (80146b8 <etharp_output+0x1c0>)
 8014516:	4869      	ldr	r0, [pc, #420]	; (80146bc <etharp_output+0x1c4>)
 8014518:	f002 f8d2 	bl	80166c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d106      	bne.n	8014530 <etharp_output+0x38>
 8014522:	4b64      	ldr	r3, [pc, #400]	; (80146b4 <etharp_output+0x1bc>)
 8014524:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014528:	4965      	ldr	r1, [pc, #404]	; (80146c0 <etharp_output+0x1c8>)
 801452a:	4864      	ldr	r0, [pc, #400]	; (80146bc <etharp_output+0x1c4>)
 801452c:	f002 f8c8 	bl	80166c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d106      	bne.n	8014544 <etharp_output+0x4c>
 8014536:	4b5f      	ldr	r3, [pc, #380]	; (80146b4 <etharp_output+0x1bc>)
 8014538:	f240 321d 	movw	r2, #797	; 0x31d
 801453c:	4961      	ldr	r1, [pc, #388]	; (80146c4 <etharp_output+0x1cc>)
 801453e:	485f      	ldr	r0, [pc, #380]	; (80146bc <etharp_output+0x1c4>)
 8014540:	f002 f8be 	bl	80166c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	68f9      	ldr	r1, [r7, #12]
 801454a:	4618      	mov	r0, r3
 801454c:	f000 fed4 	bl	80152f8 <ip4_addr_isbroadcast_u32>
 8014550:	4603      	mov	r3, r0
 8014552:	2b00      	cmp	r3, #0
 8014554:	d002      	beq.n	801455c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014556:	4b5c      	ldr	r3, [pc, #368]	; (80146c8 <etharp_output+0x1d0>)
 8014558:	61fb      	str	r3, [r7, #28]
 801455a:	e09b      	b.n	8014694 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014564:	2be0      	cmp	r3, #224	; 0xe0
 8014566:	d118      	bne.n	801459a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014568:	2301      	movs	r3, #1
 801456a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801456c:	2300      	movs	r3, #0
 801456e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014570:	235e      	movs	r3, #94	; 0x5e
 8014572:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	3301      	adds	r3, #1
 8014578:	781b      	ldrb	r3, [r3, #0]
 801457a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801457e:	b2db      	uxtb	r3, r3
 8014580:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	3302      	adds	r3, #2
 8014586:	781b      	ldrb	r3, [r3, #0]
 8014588:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	3303      	adds	r3, #3
 801458e:	781b      	ldrb	r3, [r3, #0]
 8014590:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014592:	f107 0310 	add.w	r3, r7, #16
 8014596:	61fb      	str	r3, [r7, #28]
 8014598:	e07c      	b.n	8014694 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	681a      	ldr	r2, [r3, #0]
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	3304      	adds	r3, #4
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	405a      	eors	r2, r3
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	3308      	adds	r3, #8
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	4013      	ands	r3, r2
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d012      	beq.n	80145d8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80145b8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80145bc:	4293      	cmp	r3, r2
 80145be:	d00b      	beq.n	80145d8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	330c      	adds	r3, #12
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d003      	beq.n	80145d2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	330c      	adds	r3, #12
 80145ce:	61bb      	str	r3, [r7, #24]
 80145d0:	e002      	b.n	80145d8 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80145d2:	f06f 0303 	mvn.w	r3, #3
 80145d6:	e069      	b.n	80146ac <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80145d8:	4b3c      	ldr	r3, [pc, #240]	; (80146cc <etharp_output+0x1d4>)
 80145da:	781b      	ldrb	r3, [r3, #0]
 80145dc:	4619      	mov	r1, r3
 80145de:	4a3c      	ldr	r2, [pc, #240]	; (80146d0 <etharp_output+0x1d8>)
 80145e0:	460b      	mov	r3, r1
 80145e2:	005b      	lsls	r3, r3, #1
 80145e4:	440b      	add	r3, r1
 80145e6:	00db      	lsls	r3, r3, #3
 80145e8:	4413      	add	r3, r2
 80145ea:	3314      	adds	r3, #20
 80145ec:	781b      	ldrb	r3, [r3, #0]
 80145ee:	2b01      	cmp	r3, #1
 80145f0:	d917      	bls.n	8014622 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80145f2:	69bb      	ldr	r3, [r7, #24]
 80145f4:	681a      	ldr	r2, [r3, #0]
 80145f6:	4b35      	ldr	r3, [pc, #212]	; (80146cc <etharp_output+0x1d4>)
 80145f8:	781b      	ldrb	r3, [r3, #0]
 80145fa:	4618      	mov	r0, r3
 80145fc:	4934      	ldr	r1, [pc, #208]	; (80146d0 <etharp_output+0x1d8>)
 80145fe:	4603      	mov	r3, r0
 8014600:	005b      	lsls	r3, r3, #1
 8014602:	4403      	add	r3, r0
 8014604:	00db      	lsls	r3, r3, #3
 8014606:	440b      	add	r3, r1
 8014608:	3304      	adds	r3, #4
 801460a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801460c:	429a      	cmp	r2, r3
 801460e:	d108      	bne.n	8014622 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014610:	4b2e      	ldr	r3, [pc, #184]	; (80146cc <etharp_output+0x1d4>)
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	461a      	mov	r2, r3
 8014616:	68b9      	ldr	r1, [r7, #8]
 8014618:	68f8      	ldr	r0, [r7, #12]
 801461a:	f7ff fed3 	bl	80143c4 <etharp_output_to_arp_index>
 801461e:	4603      	mov	r3, r0
 8014620:	e044      	b.n	80146ac <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014622:	2300      	movs	r3, #0
 8014624:	75fb      	strb	r3, [r7, #23]
 8014626:	e02a      	b.n	801467e <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014628:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801462c:	4928      	ldr	r1, [pc, #160]	; (80146d0 <etharp_output+0x1d8>)
 801462e:	4613      	mov	r3, r2
 8014630:	005b      	lsls	r3, r3, #1
 8014632:	4413      	add	r3, r2
 8014634:	00db      	lsls	r3, r3, #3
 8014636:	440b      	add	r3, r1
 8014638:	3314      	adds	r3, #20
 801463a:	781b      	ldrb	r3, [r3, #0]
 801463c:	2b01      	cmp	r3, #1
 801463e:	d918      	bls.n	8014672 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014640:	69bb      	ldr	r3, [r7, #24]
 8014642:	6819      	ldr	r1, [r3, #0]
 8014644:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014648:	4821      	ldr	r0, [pc, #132]	; (80146d0 <etharp_output+0x1d8>)
 801464a:	4613      	mov	r3, r2
 801464c:	005b      	lsls	r3, r3, #1
 801464e:	4413      	add	r3, r2
 8014650:	00db      	lsls	r3, r3, #3
 8014652:	4403      	add	r3, r0
 8014654:	3304      	adds	r3, #4
 8014656:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014658:	4299      	cmp	r1, r3
 801465a:	d10a      	bne.n	8014672 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 801465c:	7dfa      	ldrb	r2, [r7, #23]
 801465e:	4b1b      	ldr	r3, [pc, #108]	; (80146cc <etharp_output+0x1d4>)
 8014660:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014662:	7dfb      	ldrb	r3, [r7, #23]
 8014664:	461a      	mov	r2, r3
 8014666:	68b9      	ldr	r1, [r7, #8]
 8014668:	68f8      	ldr	r0, [r7, #12]
 801466a:	f7ff feab 	bl	80143c4 <etharp_output_to_arp_index>
 801466e:	4603      	mov	r3, r0
 8014670:	e01c      	b.n	80146ac <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014672:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014676:	b2db      	uxtb	r3, r3
 8014678:	3301      	adds	r3, #1
 801467a:	b2db      	uxtb	r3, r3
 801467c:	75fb      	strb	r3, [r7, #23]
 801467e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014682:	2b09      	cmp	r3, #9
 8014684:	ddd0      	ble.n	8014628 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014686:	68ba      	ldr	r2, [r7, #8]
 8014688:	69b9      	ldr	r1, [r7, #24]
 801468a:	68f8      	ldr	r0, [r7, #12]
 801468c:	f000 f822 	bl	80146d4 <etharp_query>
 8014690:	4603      	mov	r3, r0
 8014692:	e00b      	b.n	80146ac <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 801469a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801469e:	9300      	str	r3, [sp, #0]
 80146a0:	69fb      	ldr	r3, [r7, #28]
 80146a2:	68b9      	ldr	r1, [r7, #8]
 80146a4:	68f8      	ldr	r0, [r7, #12]
 80146a6:	f001 fd5b 	bl	8016160 <ethernet_output>
 80146aa:	4603      	mov	r3, r0
}
 80146ac:	4618      	mov	r0, r3
 80146ae:	3720      	adds	r7, #32
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd80      	pop	{r7, pc}
 80146b4:	08019aa8 	.word	0x08019aa8
 80146b8:	08019bf8 	.word	0x08019bf8
 80146bc:	08019b20 	.word	0x08019b20
 80146c0:	08019c48 	.word	0x08019c48
 80146c4:	08019be8 	.word	0x08019be8
 80146c8:	0801a294 	.word	0x0801a294
 80146cc:	20004274 	.word	0x20004274
 80146d0:	20004184 	.word	0x20004184

080146d4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b08c      	sub	sp, #48	; 0x30
 80146d8:	af02      	add	r7, sp, #8
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	60b9      	str	r1, [r7, #8]
 80146de:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	332d      	adds	r3, #45	; 0x2d
 80146e4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80146e6:	23ff      	movs	r3, #255	; 0xff
 80146e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80146ec:	2300      	movs	r3, #0
 80146ee:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	68f9      	ldr	r1, [r7, #12]
 80146f6:	4618      	mov	r0, r3
 80146f8:	f000 fdfe 	bl	80152f8 <ip4_addr_isbroadcast_u32>
 80146fc:	4603      	mov	r3, r0
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d10c      	bne.n	801471c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801470a:	2be0      	cmp	r3, #224	; 0xe0
 801470c:	d006      	beq.n	801471c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801470e:	68bb      	ldr	r3, [r7, #8]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d003      	beq.n	801471c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014714:	68bb      	ldr	r3, [r7, #8]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d102      	bne.n	8014722 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801471c:	f06f 030f 	mvn.w	r3, #15
 8014720:	e10f      	b.n	8014942 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014722:	68fa      	ldr	r2, [r7, #12]
 8014724:	2101      	movs	r1, #1
 8014726:	68b8      	ldr	r0, [r7, #8]
 8014728:	f7ff fba2 	bl	8013e70 <etharp_find_entry>
 801472c:	4603      	mov	r3, r0
 801472e:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8014730:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014734:	2b00      	cmp	r3, #0
 8014736:	da02      	bge.n	801473e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8014738:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801473c:	e101      	b.n	8014942 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801473e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014742:	4982      	ldr	r1, [pc, #520]	; (801494c <etharp_query+0x278>)
 8014744:	4613      	mov	r3, r2
 8014746:	005b      	lsls	r3, r3, #1
 8014748:	4413      	add	r3, r2
 801474a:	00db      	lsls	r3, r3, #3
 801474c:	440b      	add	r3, r1
 801474e:	3314      	adds	r3, #20
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d117      	bne.n	8014786 <etharp_query+0xb2>
    is_new_entry = 1;
 8014756:	2301      	movs	r3, #1
 8014758:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801475a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801475e:	497b      	ldr	r1, [pc, #492]	; (801494c <etharp_query+0x278>)
 8014760:	4613      	mov	r3, r2
 8014762:	005b      	lsls	r3, r3, #1
 8014764:	4413      	add	r3, r2
 8014766:	00db      	lsls	r3, r3, #3
 8014768:	440b      	add	r3, r1
 801476a:	3314      	adds	r3, #20
 801476c:	2201      	movs	r2, #1
 801476e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014770:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014774:	4975      	ldr	r1, [pc, #468]	; (801494c <etharp_query+0x278>)
 8014776:	4613      	mov	r3, r2
 8014778:	005b      	lsls	r3, r3, #1
 801477a:	4413      	add	r3, r2
 801477c:	00db      	lsls	r3, r3, #3
 801477e:	440b      	add	r3, r1
 8014780:	3308      	adds	r3, #8
 8014782:	68fa      	ldr	r2, [r7, #12]
 8014784:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014786:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801478a:	4970      	ldr	r1, [pc, #448]	; (801494c <etharp_query+0x278>)
 801478c:	4613      	mov	r3, r2
 801478e:	005b      	lsls	r3, r3, #1
 8014790:	4413      	add	r3, r2
 8014792:	00db      	lsls	r3, r3, #3
 8014794:	440b      	add	r3, r1
 8014796:	3314      	adds	r3, #20
 8014798:	781b      	ldrb	r3, [r3, #0]
 801479a:	2b01      	cmp	r3, #1
 801479c:	d012      	beq.n	80147c4 <etharp_query+0xf0>
 801479e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80147a2:	496a      	ldr	r1, [pc, #424]	; (801494c <etharp_query+0x278>)
 80147a4:	4613      	mov	r3, r2
 80147a6:	005b      	lsls	r3, r3, #1
 80147a8:	4413      	add	r3, r2
 80147aa:	00db      	lsls	r3, r3, #3
 80147ac:	440b      	add	r3, r1
 80147ae:	3314      	adds	r3, #20
 80147b0:	781b      	ldrb	r3, [r3, #0]
 80147b2:	2b01      	cmp	r3, #1
 80147b4:	d806      	bhi.n	80147c4 <etharp_query+0xf0>
 80147b6:	4b66      	ldr	r3, [pc, #408]	; (8014950 <etharp_query+0x27c>)
 80147b8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80147bc:	4965      	ldr	r1, [pc, #404]	; (8014954 <etharp_query+0x280>)
 80147be:	4866      	ldr	r0, [pc, #408]	; (8014958 <etharp_query+0x284>)
 80147c0:	f001 ff7e 	bl	80166c0 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80147c4:	6a3b      	ldr	r3, [r7, #32]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d102      	bne.n	80147d0 <etharp_query+0xfc>
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d10c      	bne.n	80147ea <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80147d0:	68b9      	ldr	r1, [r7, #8]
 80147d2:	68f8      	ldr	r0, [r7, #12]
 80147d4:	f000 f976 	bl	8014ac4 <etharp_request>
 80147d8:	4603      	mov	r3, r0
 80147da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d102      	bne.n	80147ea <etharp_query+0x116>
      return result;
 80147e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80147e8:	e0ab      	b.n	8014942 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d106      	bne.n	80147fe <etharp_query+0x12a>
 80147f0:	4b57      	ldr	r3, [pc, #348]	; (8014950 <etharp_query+0x27c>)
 80147f2:	f240 32db 	movw	r2, #987	; 0x3db
 80147f6:	4959      	ldr	r1, [pc, #356]	; (801495c <etharp_query+0x288>)
 80147f8:	4857      	ldr	r0, [pc, #348]	; (8014958 <etharp_query+0x284>)
 80147fa:	f001 ff61 	bl	80166c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80147fe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014802:	4952      	ldr	r1, [pc, #328]	; (801494c <etharp_query+0x278>)
 8014804:	4613      	mov	r3, r2
 8014806:	005b      	lsls	r3, r3, #1
 8014808:	4413      	add	r3, r2
 801480a:	00db      	lsls	r3, r3, #3
 801480c:	440b      	add	r3, r1
 801480e:	3314      	adds	r3, #20
 8014810:	781b      	ldrb	r3, [r3, #0]
 8014812:	2b01      	cmp	r3, #1
 8014814:	d919      	bls.n	801484a <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8014816:	7cfa      	ldrb	r2, [r7, #19]
 8014818:	4b51      	ldr	r3, [pc, #324]	; (8014960 <etharp_query+0x28c>)
 801481a:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801481c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014820:	4613      	mov	r3, r2
 8014822:	005b      	lsls	r3, r3, #1
 8014824:	4413      	add	r3, r2
 8014826:	00db      	lsls	r3, r3, #3
 8014828:	3308      	adds	r3, #8
 801482a:	4a48      	ldr	r2, [pc, #288]	; (801494c <etharp_query+0x278>)
 801482c:	4413      	add	r3, r2
 801482e:	1d1a      	adds	r2, r3, #4
 8014830:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014834:	9300      	str	r3, [sp, #0]
 8014836:	4613      	mov	r3, r2
 8014838:	697a      	ldr	r2, [r7, #20]
 801483a:	6879      	ldr	r1, [r7, #4]
 801483c:	68f8      	ldr	r0, [r7, #12]
 801483e:	f001 fc8f 	bl	8016160 <ethernet_output>
 8014842:	4603      	mov	r3, r0
 8014844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014848:	e079      	b.n	801493e <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801484a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801484e:	493f      	ldr	r1, [pc, #252]	; (801494c <etharp_query+0x278>)
 8014850:	4613      	mov	r3, r2
 8014852:	005b      	lsls	r3, r3, #1
 8014854:	4413      	add	r3, r2
 8014856:	00db      	lsls	r3, r3, #3
 8014858:	440b      	add	r3, r1
 801485a:	3314      	adds	r3, #20
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	2b01      	cmp	r3, #1
 8014860:	d16d      	bne.n	801493e <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014862:	2300      	movs	r3, #0
 8014864:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	61fb      	str	r3, [r7, #28]
    while (p) {
 801486a:	e01a      	b.n	80148a2 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801486c:	69fb      	ldr	r3, [r7, #28]
 801486e:	895a      	ldrh	r2, [r3, #10]
 8014870:	69fb      	ldr	r3, [r7, #28]
 8014872:	891b      	ldrh	r3, [r3, #8]
 8014874:	429a      	cmp	r2, r3
 8014876:	d10a      	bne.n	801488e <etharp_query+0x1ba>
 8014878:	69fb      	ldr	r3, [r7, #28]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d006      	beq.n	801488e <etharp_query+0x1ba>
 8014880:	4b33      	ldr	r3, [pc, #204]	; (8014950 <etharp_query+0x27c>)
 8014882:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8014886:	4937      	ldr	r1, [pc, #220]	; (8014964 <etharp_query+0x290>)
 8014888:	4833      	ldr	r0, [pc, #204]	; (8014958 <etharp_query+0x284>)
 801488a:	f001 ff19 	bl	80166c0 <iprintf>
      if (p->type != PBUF_ROM) {
 801488e:	69fb      	ldr	r3, [r7, #28]
 8014890:	7b1b      	ldrb	r3, [r3, #12]
 8014892:	2b01      	cmp	r3, #1
 8014894:	d002      	beq.n	801489c <etharp_query+0x1c8>
        copy_needed = 1;
 8014896:	2301      	movs	r3, #1
 8014898:	61bb      	str	r3, [r7, #24]
        break;
 801489a:	e005      	b.n	80148a8 <etharp_query+0x1d4>
      }
      p = p->next;
 801489c:	69fb      	ldr	r3, [r7, #28]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80148a2:	69fb      	ldr	r3, [r7, #28]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d1e1      	bne.n	801486c <etharp_query+0x198>
    }
    if (copy_needed) {
 80148a8:	69bb      	ldr	r3, [r7, #24]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d017      	beq.n	80148de <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80148ae:	69fb      	ldr	r3, [r7, #28]
 80148b0:	891b      	ldrh	r3, [r3, #8]
 80148b2:	2200      	movs	r2, #0
 80148b4:	4619      	mov	r1, r3
 80148b6:	2002      	movs	r0, #2
 80148b8:	f7f8 fb40 	bl	800cf3c <pbuf_alloc>
 80148bc:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 80148be:	69fb      	ldr	r3, [r7, #28]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d011      	beq.n	80148e8 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 80148c4:	6879      	ldr	r1, [r7, #4]
 80148c6:	69f8      	ldr	r0, [r7, #28]
 80148c8:	f7f8 ffea 	bl	800d8a0 <pbuf_copy>
 80148cc:	4603      	mov	r3, r0
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d00a      	beq.n	80148e8 <etharp_query+0x214>
          pbuf_free(p);
 80148d2:	69f8      	ldr	r0, [r7, #28]
 80148d4:	f7f8 fea4 	bl	800d620 <pbuf_free>
          p = NULL;
 80148d8:	2300      	movs	r3, #0
 80148da:	61fb      	str	r3, [r7, #28]
 80148dc:	e004      	b.n	80148e8 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80148e2:	69f8      	ldr	r0, [r7, #28]
 80148e4:	f7f8 ff4e 	bl	800d784 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80148e8:	69fb      	ldr	r3, [r7, #28]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d024      	beq.n	8014938 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80148ee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80148f2:	4916      	ldr	r1, [pc, #88]	; (801494c <etharp_query+0x278>)
 80148f4:	4613      	mov	r3, r2
 80148f6:	005b      	lsls	r3, r3, #1
 80148f8:	4413      	add	r3, r2
 80148fa:	00db      	lsls	r3, r3, #3
 80148fc:	440b      	add	r3, r1
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d00b      	beq.n	801491c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8014904:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014908:	4910      	ldr	r1, [pc, #64]	; (801494c <etharp_query+0x278>)
 801490a:	4613      	mov	r3, r2
 801490c:	005b      	lsls	r3, r3, #1
 801490e:	4413      	add	r3, r2
 8014910:	00db      	lsls	r3, r3, #3
 8014912:	440b      	add	r3, r1
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	4618      	mov	r0, r3
 8014918:	f7f8 fe82 	bl	800d620 <pbuf_free>
      }
      arp_table[i].q = p;
 801491c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014920:	490a      	ldr	r1, [pc, #40]	; (801494c <etharp_query+0x278>)
 8014922:	4613      	mov	r3, r2
 8014924:	005b      	lsls	r3, r3, #1
 8014926:	4413      	add	r3, r2
 8014928:	00db      	lsls	r3, r3, #3
 801492a:	440b      	add	r3, r1
 801492c:	69fa      	ldr	r2, [r7, #28]
 801492e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014930:	2300      	movs	r3, #0
 8014932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014936:	e002      	b.n	801493e <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014938:	23ff      	movs	r3, #255	; 0xff
 801493a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801493e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014942:	4618      	mov	r0, r3
 8014944:	3728      	adds	r7, #40	; 0x28
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}
 801494a:	bf00      	nop
 801494c:	20004184 	.word	0x20004184
 8014950:	08019aa8 	.word	0x08019aa8
 8014954:	08019c54 	.word	0x08019c54
 8014958:	08019b20 	.word	0x08019b20
 801495c:	08019c48 	.word	0x08019c48
 8014960:	20004274 	.word	0x20004274
 8014964:	08019c7c 	.word	0x08019c7c

08014968 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b08a      	sub	sp, #40	; 0x28
 801496c:	af02      	add	r7, sp, #8
 801496e:	60f8      	str	r0, [r7, #12]
 8014970:	60b9      	str	r1, [r7, #8]
 8014972:	607a      	str	r2, [r7, #4]
 8014974:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014976:	2300      	movs	r3, #0
 8014978:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d106      	bne.n	801498e <etharp_raw+0x26>
 8014980:	4b3a      	ldr	r3, [pc, #232]	; (8014a6c <etharp_raw+0x104>)
 8014982:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8014986:	493a      	ldr	r1, [pc, #232]	; (8014a70 <etharp_raw+0x108>)
 8014988:	483a      	ldr	r0, [pc, #232]	; (8014a74 <etharp_raw+0x10c>)
 801498a:	f001 fe99 	bl	80166c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801498e:	2200      	movs	r2, #0
 8014990:	211c      	movs	r1, #28
 8014992:	2002      	movs	r0, #2
 8014994:	f7f8 fad2 	bl	800cf3c <pbuf_alloc>
 8014998:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801499a:	69bb      	ldr	r3, [r7, #24]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d102      	bne.n	80149a6 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80149a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149a4:	e05d      	b.n	8014a62 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80149a6:	69bb      	ldr	r3, [r7, #24]
 80149a8:	895b      	ldrh	r3, [r3, #10]
 80149aa:	2b1b      	cmp	r3, #27
 80149ac:	d806      	bhi.n	80149bc <etharp_raw+0x54>
 80149ae:	4b2f      	ldr	r3, [pc, #188]	; (8014a6c <etharp_raw+0x104>)
 80149b0:	f240 4264 	movw	r2, #1124	; 0x464
 80149b4:	4930      	ldr	r1, [pc, #192]	; (8014a78 <etharp_raw+0x110>)
 80149b6:	482f      	ldr	r0, [pc, #188]	; (8014a74 <etharp_raw+0x10c>)
 80149b8:	f001 fe82 	bl	80166c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80149bc:	69bb      	ldr	r3, [r7, #24]
 80149be:	685b      	ldr	r3, [r3, #4]
 80149c0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80149c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80149c4:	4618      	mov	r0, r3
 80149c6:	f7f7 fc17 	bl	800c1f8 <lwip_htons>
 80149ca:	4603      	mov	r3, r0
 80149cc:	461a      	mov	r2, r3
 80149ce:	697b      	ldr	r3, [r7, #20]
 80149d0:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80149d8:	2b06      	cmp	r3, #6
 80149da:	d006      	beq.n	80149ea <etharp_raw+0x82>
 80149dc:	4b23      	ldr	r3, [pc, #140]	; (8014a6c <etharp_raw+0x104>)
 80149de:	f240 426b 	movw	r2, #1131	; 0x46b
 80149e2:	4926      	ldr	r1, [pc, #152]	; (8014a7c <etharp_raw+0x114>)
 80149e4:	4823      	ldr	r0, [pc, #140]	; (8014a74 <etharp_raw+0x10c>)
 80149e6:	f001 fe6b 	bl	80166c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80149ea:	697b      	ldr	r3, [r7, #20]
 80149ec:	3308      	adds	r3, #8
 80149ee:	2206      	movs	r2, #6
 80149f0:	6839      	ldr	r1, [r7, #0]
 80149f2:	4618      	mov	r0, r3
 80149f4:	f001 fe51 	bl	801669a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80149f8:	697b      	ldr	r3, [r7, #20]
 80149fa:	3312      	adds	r3, #18
 80149fc:	2206      	movs	r2, #6
 80149fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014a00:	4618      	mov	r0, r3
 8014a02:	f001 fe4a 	bl	801669a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	330e      	adds	r3, #14
 8014a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a0c:	6812      	ldr	r2, [r2, #0]
 8014a0e:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	3318      	adds	r3, #24
 8014a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a16:	6812      	ldr	r2, [r2, #0]
 8014a18:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	701a      	strb	r2, [r3, #0]
 8014a20:	2200      	movs	r2, #0
 8014a22:	f042 0201 	orr.w	r2, r2, #1
 8014a26:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014a28:	697b      	ldr	r3, [r7, #20]
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	f042 0208 	orr.w	r2, r2, #8
 8014a30:	709a      	strb	r2, [r3, #2]
 8014a32:	2200      	movs	r2, #0
 8014a34:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014a36:	697b      	ldr	r3, [r7, #20]
 8014a38:	2206      	movs	r2, #6
 8014a3a:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014a3c:	697b      	ldr	r3, [r7, #20]
 8014a3e:	2204      	movs	r2, #4
 8014a40:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014a42:	f640 0306 	movw	r3, #2054	; 0x806
 8014a46:	9300      	str	r3, [sp, #0]
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	68ba      	ldr	r2, [r7, #8]
 8014a4c:	69b9      	ldr	r1, [r7, #24]
 8014a4e:	68f8      	ldr	r0, [r7, #12]
 8014a50:	f001 fb86 	bl	8016160 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014a54:	69b8      	ldr	r0, [r7, #24]
 8014a56:	f7f8 fde3 	bl	800d620 <pbuf_free>
  p = NULL;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014a5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3720      	adds	r7, #32
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}
 8014a6a:	bf00      	nop
 8014a6c:	08019aa8 	.word	0x08019aa8
 8014a70:	08019bf8 	.word	0x08019bf8
 8014a74:	08019b20 	.word	0x08019b20
 8014a78:	08019c98 	.word	0x08019c98
 8014a7c:	08019ccc 	.word	0x08019ccc

08014a80 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b088      	sub	sp, #32
 8014a84:	af04      	add	r7, sp, #16
 8014a86:	60f8      	str	r0, [r7, #12]
 8014a88:	60b9      	str	r1, [r7, #8]
 8014a8a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	f103 012d 	add.w	r1, r3, #45	; 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014a9c:	2201      	movs	r2, #1
 8014a9e:	9203      	str	r2, [sp, #12]
 8014aa0:	68ba      	ldr	r2, [r7, #8]
 8014aa2:	9202      	str	r2, [sp, #8]
 8014aa4:	4a06      	ldr	r2, [pc, #24]	; (8014ac0 <etharp_request_dst+0x40>)
 8014aa6:	9201      	str	r2, [sp, #4]
 8014aa8:	9300      	str	r3, [sp, #0]
 8014aaa:	4603      	mov	r3, r0
 8014aac:	687a      	ldr	r2, [r7, #4]
 8014aae:	68f8      	ldr	r0, [r7, #12]
 8014ab0:	f7ff ff5a 	bl	8014968 <etharp_raw>
 8014ab4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	3710      	adds	r7, #16
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd80      	pop	{r7, pc}
 8014abe:	bf00      	nop
 8014ac0:	0801a29c 	.word	0x0801a29c

08014ac4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b082      	sub	sp, #8
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014ace:	4a05      	ldr	r2, [pc, #20]	; (8014ae4 <etharp_request+0x20>)
 8014ad0:	6839      	ldr	r1, [r7, #0]
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	f7ff ffd4 	bl	8014a80 <etharp_request_dst>
 8014ad8:	4603      	mov	r3, r0
}
 8014ada:	4618      	mov	r0, r3
 8014adc:	3708      	adds	r7, #8
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bd80      	pop	{r7, pc}
 8014ae2:	bf00      	nop
 8014ae4:	0801a294 	.word	0x0801a294

08014ae8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b08e      	sub	sp, #56	; 0x38
 8014aec:	af04      	add	r7, sp, #16
 8014aee:	6078      	str	r0, [r7, #4]
 8014af0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014af2:	4b7a      	ldr	r3, [pc, #488]	; (8014cdc <icmp_input+0x1f4>)
 8014af4:	689b      	ldr	r3, [r3, #8]
 8014af6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8014af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014afa:	781b      	ldrb	r3, [r3, #0]
 8014afc:	b29b      	uxth	r3, r3
 8014afe:	f003 030f 	and.w	r3, r3, #15
 8014b02:	b29b      	uxth	r3, r3
 8014b04:	009b      	lsls	r3, r3, #2
 8014b06:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014b08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b0a:	2b13      	cmp	r3, #19
 8014b0c:	f240 80d1 	bls.w	8014cb2 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	895b      	ldrh	r3, [r3, #10]
 8014b14:	2b03      	cmp	r3, #3
 8014b16:	f240 80ce 	bls.w	8014cb6 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	685b      	ldr	r3, [r3, #4]
 8014b1e:	781b      	ldrb	r3, [r3, #0]
 8014b20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014b24:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	f000 80bb 	beq.w	8014ca4 <icmp_input+0x1bc>
 8014b2e:	2b08      	cmp	r3, #8
 8014b30:	f040 80bb 	bne.w	8014caa <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8014b34:	4b6a      	ldr	r3, [pc, #424]	; (8014ce0 <icmp_input+0x1f8>)
 8014b36:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014b38:	4b68      	ldr	r3, [pc, #416]	; (8014cdc <icmp_input+0x1f4>)
 8014b3a:	695b      	ldr	r3, [r3, #20]
 8014b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014b40:	2be0      	cmp	r3, #224	; 0xe0
 8014b42:	f000 80bf 	beq.w	8014cc4 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014b46:	4b65      	ldr	r3, [pc, #404]	; (8014cdc <icmp_input+0x1f4>)
 8014b48:	695a      	ldr	r2, [r3, #20]
 8014b4a:	4b64      	ldr	r3, [pc, #400]	; (8014cdc <icmp_input+0x1f4>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	4619      	mov	r1, r3
 8014b50:	4610      	mov	r0, r2
 8014b52:	f000 fbd1 	bl	80152f8 <ip4_addr_isbroadcast_u32>
 8014b56:	4603      	mov	r3, r0
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	f040 80b5 	bne.w	8014cc8 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	891b      	ldrh	r3, [r3, #8]
 8014b62:	2b07      	cmp	r3, #7
 8014b64:	f240 80a9 	bls.w	8014cba <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8014b68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b6a:	330e      	adds	r3, #14
 8014b6c:	b29b      	uxth	r3, r3
 8014b6e:	b21b      	sxth	r3, r3
 8014b70:	4619      	mov	r1, r3
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f7f8 fd30 	bl	800d5d8 <pbuf_header>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d046      	beq.n	8014c0c <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	891a      	ldrh	r2, [r3, #8]
 8014b82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b84:	4413      	add	r3, r2
 8014b86:	b29b      	uxth	r3, r3
 8014b88:	2200      	movs	r2, #0
 8014b8a:	4619      	mov	r1, r3
 8014b8c:	2002      	movs	r0, #2
 8014b8e:	f7f8 f9d5 	bl	800cf3c <pbuf_alloc>
 8014b92:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8014b94:	69bb      	ldr	r3, [r7, #24]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	f000 8098 	beq.w	8014ccc <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014b9c:	69bb      	ldr	r3, [r7, #24]
 8014b9e:	895b      	ldrh	r3, [r3, #10]
 8014ba0:	461a      	mov	r2, r3
 8014ba2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ba4:	3308      	adds	r3, #8
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	d203      	bcs.n	8014bb2 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8014baa:	69b8      	ldr	r0, [r7, #24]
 8014bac:	f7f8 fd38 	bl	800d620 <pbuf_free>
        goto icmperr;
 8014bb0:	e08d      	b.n	8014cce <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8014bb2:	69bb      	ldr	r3, [r7, #24]
 8014bb4:	685b      	ldr	r3, [r3, #4]
 8014bb6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f001 fd6d 	bl	801669a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8014bc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014bc2:	425b      	negs	r3, r3
 8014bc4:	b29b      	uxth	r3, r3
 8014bc6:	b21b      	sxth	r3, r3
 8014bc8:	4619      	mov	r1, r3
 8014bca:	69b8      	ldr	r0, [r7, #24]
 8014bcc:	f7f8 fd04 	bl	800d5d8 <pbuf_header>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d009      	beq.n	8014bea <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014bd6:	4b43      	ldr	r3, [pc, #268]	; (8014ce4 <icmp_input+0x1fc>)
 8014bd8:	22af      	movs	r2, #175	; 0xaf
 8014bda:	4943      	ldr	r1, [pc, #268]	; (8014ce8 <icmp_input+0x200>)
 8014bdc:	4843      	ldr	r0, [pc, #268]	; (8014cec <icmp_input+0x204>)
 8014bde:	f001 fd6f 	bl	80166c0 <iprintf>
        pbuf_free(r);
 8014be2:	69b8      	ldr	r0, [r7, #24]
 8014be4:	f7f8 fd1c 	bl	800d620 <pbuf_free>
        goto icmperr;
 8014be8:	e071      	b.n	8014cce <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8014bea:	6879      	ldr	r1, [r7, #4]
 8014bec:	69b8      	ldr	r0, [r7, #24]
 8014bee:	f7f8 fe57 	bl	800d8a0 <pbuf_copy>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d003      	beq.n	8014c00 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8014bf8:	69b8      	ldr	r0, [r7, #24]
 8014bfa:	f7f8 fd11 	bl	800d620 <pbuf_free>
        goto icmperr;
 8014bfe:	e066      	b.n	8014cce <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8014c00:	6878      	ldr	r0, [r7, #4]
 8014c02:	f7f8 fd0d 	bl	800d620 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8014c06:	69bb      	ldr	r3, [r7, #24]
 8014c08:	607b      	str	r3, [r7, #4]
 8014c0a:	e015      	b.n	8014c38 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8014c0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c0e:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8014c12:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8014c16:	33f2      	adds	r3, #242	; 0xf2
 8014c18:	b29b      	uxth	r3, r3
 8014c1a:	b21b      	sxth	r3, r3
 8014c1c:	4619      	mov	r1, r3
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f7f8 fcda 	bl	800d5d8 <pbuf_header>
 8014c24:	4603      	mov	r3, r0
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d006      	beq.n	8014c38 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014c2a:	4b2e      	ldr	r3, [pc, #184]	; (8014ce4 <icmp_input+0x1fc>)
 8014c2c:	22c0      	movs	r2, #192	; 0xc0
 8014c2e:	4930      	ldr	r1, [pc, #192]	; (8014cf0 <icmp_input+0x208>)
 8014c30:	482e      	ldr	r0, [pc, #184]	; (8014cec <icmp_input+0x204>)
 8014c32:	f001 fd45 	bl	80166c0 <iprintf>
        goto icmperr;
 8014c36:	e04a      	b.n	8014cce <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	685b      	ldr	r3, [r3, #4]
 8014c3c:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8014c3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014c42:	4619      	mov	r1, r3
 8014c44:	6878      	ldr	r0, [r7, #4]
 8014c46:	f7f8 fcc7 	bl	800d5d8 <pbuf_header>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d12b      	bne.n	8014ca8 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	685b      	ldr	r3, [r3, #4]
 8014c54:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8014c56:	69fb      	ldr	r3, [r7, #28]
 8014c58:	681a      	ldr	r2, [r3, #0]
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014c5e:	4b1f      	ldr	r3, [pc, #124]	; (8014cdc <icmp_input+0x1f4>)
 8014c60:	691a      	ldr	r2, [r3, #16]
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014c66:	697b      	ldr	r3, [r7, #20]
 8014c68:	2200      	movs	r2, #0
 8014c6a:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8014c6c:	697b      	ldr	r3, [r7, #20]
 8014c6e:	2200      	movs	r2, #0
 8014c70:	709a      	strb	r2, [r3, #2]
 8014c72:	2200      	movs	r2, #0
 8014c74:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8014c76:	693b      	ldr	r3, [r7, #16]
 8014c78:	22ff      	movs	r2, #255	; 0xff
 8014c7a:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8014c7c:	693b      	ldr	r3, [r7, #16]
 8014c7e:	2200      	movs	r2, #0
 8014c80:	729a      	strb	r2, [r3, #10]
 8014c82:	2200      	movs	r2, #0
 8014c84:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014c86:	683b      	ldr	r3, [r7, #0]
 8014c88:	9302      	str	r3, [sp, #8]
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	9301      	str	r3, [sp, #4]
 8014c8e:	2300      	movs	r3, #0
 8014c90:	9300      	str	r3, [sp, #0]
 8014c92:	23ff      	movs	r3, #255	; 0xff
 8014c94:	2200      	movs	r2, #0
 8014c96:	69f9      	ldr	r1, [r7, #28]
 8014c98:	6878      	ldr	r0, [r7, #4]
 8014c9a:	f000 fa5b 	bl	8015154 <ip4_output_if>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8014ca2:	e001      	b.n	8014ca8 <icmp_input+0x1c0>
    break;
 8014ca4:	bf00      	nop
 8014ca6:	e000      	b.n	8014caa <icmp_input+0x1c2>
    break;
 8014ca8:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014caa:	6878      	ldr	r0, [r7, #4]
 8014cac:	f7f8 fcb8 	bl	800d620 <pbuf_free>
  return;
 8014cb0:	e011      	b.n	8014cd6 <icmp_input+0x1ee>
    goto lenerr;
 8014cb2:	bf00      	nop
 8014cb4:	e002      	b.n	8014cbc <icmp_input+0x1d4>
    goto lenerr;
 8014cb6:	bf00      	nop
 8014cb8:	e000      	b.n	8014cbc <icmp_input+0x1d4>
      goto lenerr;
 8014cba:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014cbc:	6878      	ldr	r0, [r7, #4]
 8014cbe:	f7f8 fcaf 	bl	800d620 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014cc2:	e008      	b.n	8014cd6 <icmp_input+0x1ee>
      goto icmperr;
 8014cc4:	bf00      	nop
 8014cc6:	e002      	b.n	8014cce <icmp_input+0x1e6>
      goto icmperr;
 8014cc8:	bf00      	nop
 8014cca:	e000      	b.n	8014cce <icmp_input+0x1e6>
        goto icmperr;
 8014ccc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014cce:	6878      	ldr	r0, [r7, #4]
 8014cd0:	f7f8 fca6 	bl	800d620 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014cd4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014cd6:	3728      	adds	r7, #40	; 0x28
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd80      	pop	{r7, pc}
 8014cdc:	200074ec 	.word	0x200074ec
 8014ce0:	20007500 	.word	0x20007500
 8014ce4:	08019d10 	.word	0x08019d10
 8014ce8:	08019d48 	.word	0x08019d48
 8014cec:	08019d80 	.word	0x08019d80
 8014cf0:	08019da8 	.word	0x08019da8

08014cf4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b082      	sub	sp, #8
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
 8014cfc:	460b      	mov	r3, r1
 8014cfe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014d00:	78fb      	ldrb	r3, [r7, #3]
 8014d02:	461a      	mov	r2, r3
 8014d04:	2103      	movs	r1, #3
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f000 f814 	bl	8014d34 <icmp_send_response>
}
 8014d0c:	bf00      	nop
 8014d0e:	3708      	adds	r7, #8
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}

08014d14 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b082      	sub	sp, #8
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	460b      	mov	r3, r1
 8014d1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014d20:	78fb      	ldrb	r3, [r7, #3]
 8014d22:	461a      	mov	r2, r3
 8014d24:	210b      	movs	r1, #11
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f000 f804 	bl	8014d34 <icmp_send_response>
}
 8014d2c:	bf00      	nop
 8014d2e:	3708      	adds	r7, #8
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}

08014d34 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b08c      	sub	sp, #48	; 0x30
 8014d38:	af04      	add	r7, sp, #16
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	460b      	mov	r3, r1
 8014d3e:	70fb      	strb	r3, [r7, #3]
 8014d40:	4613      	mov	r3, r2
 8014d42:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014d44:	2200      	movs	r2, #0
 8014d46:	2124      	movs	r1, #36	; 0x24
 8014d48:	2001      	movs	r0, #1
 8014d4a:	f7f8 f8f7 	bl	800cf3c <pbuf_alloc>
 8014d4e:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014d50:	69fb      	ldr	r3, [r7, #28]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d04c      	beq.n	8014df0 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014d56:	69fb      	ldr	r3, [r7, #28]
 8014d58:	895b      	ldrh	r3, [r3, #10]
 8014d5a:	2b23      	cmp	r3, #35	; 0x23
 8014d5c:	d806      	bhi.n	8014d6c <icmp_send_response+0x38>
 8014d5e:	4b26      	ldr	r3, [pc, #152]	; (8014df8 <icmp_send_response+0xc4>)
 8014d60:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8014d64:	4925      	ldr	r1, [pc, #148]	; (8014dfc <icmp_send_response+0xc8>)
 8014d66:	4826      	ldr	r0, [pc, #152]	; (8014e00 <icmp_send_response+0xcc>)
 8014d68:	f001 fcaa 	bl	80166c0 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	685b      	ldr	r3, [r3, #4]
 8014d70:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014d72:	69fb      	ldr	r3, [r7, #28]
 8014d74:	685b      	ldr	r3, [r3, #4]
 8014d76:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014d78:	697b      	ldr	r3, [r7, #20]
 8014d7a:	78fa      	ldrb	r2, [r7, #3]
 8014d7c:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	78ba      	ldrb	r2, [r7, #2]
 8014d82:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	2200      	movs	r2, #0
 8014d88:	711a      	strb	r2, [r3, #4]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	2200      	movs	r2, #0
 8014d92:	719a      	strb	r2, [r3, #6]
 8014d94:	2200      	movs	r2, #0
 8014d96:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014d98:	69fb      	ldr	r3, [r7, #28]
 8014d9a:	685b      	ldr	r3, [r3, #4]
 8014d9c:	f103 0008 	add.w	r0, r3, #8
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	221c      	movs	r2, #28
 8014da6:	4619      	mov	r1, r3
 8014da8:	f001 fc77 	bl	801669a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014dac:	69bb      	ldr	r3, [r7, #24]
 8014dae:	68db      	ldr	r3, [r3, #12]
 8014db0:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014db2:	f107 030c 	add.w	r3, r7, #12
 8014db6:	4618      	mov	r0, r3
 8014db8:	f000 f824 	bl	8014e04 <ip4_route>
 8014dbc:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014dbe:	693b      	ldr	r3, [r7, #16]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d011      	beq.n	8014de8 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014dc4:	697b      	ldr	r3, [r7, #20]
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	709a      	strb	r2, [r3, #2]
 8014dca:	2200      	movs	r2, #0
 8014dcc:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014dce:	f107 020c 	add.w	r2, r7, #12
 8014dd2:	693b      	ldr	r3, [r7, #16]
 8014dd4:	9302      	str	r3, [sp, #8]
 8014dd6:	2301      	movs	r3, #1
 8014dd8:	9301      	str	r3, [sp, #4]
 8014dda:	2300      	movs	r3, #0
 8014ddc:	9300      	str	r3, [sp, #0]
 8014dde:	23ff      	movs	r3, #255	; 0xff
 8014de0:	2100      	movs	r1, #0
 8014de2:	69f8      	ldr	r0, [r7, #28]
 8014de4:	f000 f9b6 	bl	8015154 <ip4_output_if>
  }
  pbuf_free(q);
 8014de8:	69f8      	ldr	r0, [r7, #28]
 8014dea:	f7f8 fc19 	bl	800d620 <pbuf_free>
 8014dee:	e000      	b.n	8014df2 <icmp_send_response+0xbe>
    return;
 8014df0:	bf00      	nop
}
 8014df2:	3720      	adds	r7, #32
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}
 8014df8:	08019d10 	.word	0x08019d10
 8014dfc:	08019ddc 	.word	0x08019ddc
 8014e00:	08019d80 	.word	0x08019d80

08014e04 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014e04:	b480      	push	{r7}
 8014e06:	b085      	sub	sp, #20
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8014e0c:	4b30      	ldr	r3, [pc, #192]	; (8014ed0 <ip4_route+0xcc>)
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	60fb      	str	r3, [r7, #12]
 8014e12:	e036      	b.n	8014e82 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8014e1a:	f003 0301 	and.w	r3, r3, #1
 8014e1e:	b2db      	uxtb	r3, r3
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d02b      	beq.n	8014e7c <ip4_route+0x78>
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8014e2a:	089b      	lsrs	r3, r3, #2
 8014e2c:	f003 0301 	and.w	r3, r3, #1
 8014e30:	b2db      	uxtb	r3, r3
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d022      	beq.n	8014e7c <ip4_route+0x78>
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	3304      	adds	r3, #4
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d01d      	beq.n	8014e7c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	681a      	ldr	r2, [r3, #0]
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	3304      	adds	r3, #4
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	405a      	eors	r2, r3
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	3308      	adds	r3, #8
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	4013      	ands	r3, r2
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d101      	bne.n	8014e5c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	e033      	b.n	8014ec4 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8014e62:	f003 0302 	and.w	r3, r3, #2
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d108      	bne.n	8014e7c <ip4_route+0x78>
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	681a      	ldr	r2, [r3, #0]
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	330c      	adds	r3, #12
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	429a      	cmp	r2, r3
 8014e76:	d101      	bne.n	8014e7c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	e023      	b.n	8014ec4 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	60fb      	str	r3, [r7, #12]
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d1c5      	bne.n	8014e14 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014e88:	4b12      	ldr	r3, [pc, #72]	; (8014ed4 <ip4_route+0xd0>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d015      	beq.n	8014ebc <ip4_route+0xb8>
 8014e90:	4b10      	ldr	r3, [pc, #64]	; (8014ed4 <ip4_route+0xd0>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8014e98:	f003 0301 	and.w	r3, r3, #1
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d00d      	beq.n	8014ebc <ip4_route+0xb8>
 8014ea0:	4b0c      	ldr	r3, [pc, #48]	; (8014ed4 <ip4_route+0xd0>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8014ea8:	f003 0304 	and.w	r3, r3, #4
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d005      	beq.n	8014ebc <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8014eb0:	4b08      	ldr	r3, [pc, #32]	; (8014ed4 <ip4_route+0xd0>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	3304      	adds	r3, #4
 8014eb6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d101      	bne.n	8014ec0 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	e001      	b.n	8014ec4 <ip4_route+0xc0>
  }

  return netif_default;
 8014ec0:	4b04      	ldr	r3, [pc, #16]	; (8014ed4 <ip4_route+0xd0>)
 8014ec2:	681b      	ldr	r3, [r3, #0]
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3714      	adds	r7, #20
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ece:	4770      	bx	lr
 8014ed0:	2000dc44 	.word	0x2000dc44
 8014ed4:	2000dc48 	.word	0x2000dc48

08014ed8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b086      	sub	sp, #24
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
 8014ee0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	685b      	ldr	r3, [r3, #4]
 8014ee6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	781b      	ldrb	r3, [r3, #0]
 8014eec:	091b      	lsrs	r3, r3, #4
 8014eee:	b2db      	uxtb	r3, r3
 8014ef0:	2b04      	cmp	r3, #4
 8014ef2:	d004      	beq.n	8014efe <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014ef4:	6878      	ldr	r0, [r7, #4]
 8014ef6:	f7f8 fb93 	bl	800d620 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014efa:	2300      	movs	r3, #0
 8014efc:	e122      	b.n	8015144 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8014efe:	697b      	ldr	r3, [r7, #20]
 8014f00:	781b      	ldrb	r3, [r3, #0]
 8014f02:	b29b      	uxth	r3, r3
 8014f04:	f003 030f 	and.w	r3, r3, #15
 8014f08:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8014f0a:	897b      	ldrh	r3, [r7, #10]
 8014f0c:	009b      	lsls	r3, r3, #2
 8014f0e:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014f10:	697b      	ldr	r3, [r7, #20]
 8014f12:	885b      	ldrh	r3, [r3, #2]
 8014f14:	b29b      	uxth	r3, r3
 8014f16:	4618      	mov	r0, r3
 8014f18:	f7f7 f96e 	bl	800c1f8 <lwip_htons>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	891b      	ldrh	r3, [r3, #8]
 8014f24:	893a      	ldrh	r2, [r7, #8]
 8014f26:	429a      	cmp	r2, r3
 8014f28:	d204      	bcs.n	8014f34 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8014f2a:	893b      	ldrh	r3, [r7, #8]
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f7f8 fa02 	bl	800d338 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	895b      	ldrh	r3, [r3, #10]
 8014f38:	897a      	ldrh	r2, [r7, #10]
 8014f3a:	429a      	cmp	r2, r3
 8014f3c:	d807      	bhi.n	8014f4e <ip4_input+0x76>
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	891b      	ldrh	r3, [r3, #8]
 8014f42:	893a      	ldrh	r2, [r7, #8]
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d802      	bhi.n	8014f4e <ip4_input+0x76>
 8014f48:	897b      	ldrh	r3, [r7, #10]
 8014f4a:	2b13      	cmp	r3, #19
 8014f4c:	d804      	bhi.n	8014f58 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014f4e:	6878      	ldr	r0, [r7, #4]
 8014f50:	f7f8 fb66 	bl	800d620 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014f54:	2300      	movs	r3, #0
 8014f56:	e0f5      	b.n	8015144 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014f58:	697b      	ldr	r3, [r7, #20]
 8014f5a:	691b      	ldr	r3, [r3, #16]
 8014f5c:	4a7b      	ldr	r2, [pc, #492]	; (801514c <ip4_input+0x274>)
 8014f5e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	68db      	ldr	r3, [r3, #12]
 8014f64:	4a79      	ldr	r2, [pc, #484]	; (801514c <ip4_input+0x274>)
 8014f66:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014f68:	4b78      	ldr	r3, [pc, #480]	; (801514c <ip4_input+0x274>)
 8014f6a:	695b      	ldr	r3, [r3, #20]
 8014f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f70:	2be0      	cmp	r3, #224	; 0xe0
 8014f72:	d112      	bne.n	8014f9a <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8014f7a:	f003 0301 	and.w	r3, r3, #1
 8014f7e:	b2db      	uxtb	r3, r3
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d007      	beq.n	8014f94 <ip4_input+0xbc>
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	3304      	adds	r3, #4
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d002      	beq.n	8014f94 <ip4_input+0xbc>
      netif = inp;
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	613b      	str	r3, [r7, #16]
 8014f92:	e041      	b.n	8015018 <ip4_input+0x140>
    } else {
      netif = NULL;
 8014f94:	2300      	movs	r3, #0
 8014f96:	613b      	str	r3, [r7, #16]
 8014f98:	e03e      	b.n	8015018 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8014f9a:	2301      	movs	r3, #1
 8014f9c:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8014fa8:	f003 0301 	and.w	r3, r3, #1
 8014fac:	b2db      	uxtb	r3, r3
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d014      	beq.n	8014fdc <ip4_input+0x104>
 8014fb2:	693b      	ldr	r3, [r7, #16]
 8014fb4:	3304      	adds	r3, #4
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d00f      	beq.n	8014fdc <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014fbc:	4b63      	ldr	r3, [pc, #396]	; (801514c <ip4_input+0x274>)
 8014fbe:	695a      	ldr	r2, [r3, #20]
 8014fc0:	693b      	ldr	r3, [r7, #16]
 8014fc2:	3304      	adds	r3, #4
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	429a      	cmp	r2, r3
 8014fc8:	d026      	beq.n	8015018 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014fca:	4b60      	ldr	r3, [pc, #384]	; (801514c <ip4_input+0x274>)
 8014fcc:	695b      	ldr	r3, [r3, #20]
 8014fce:	6939      	ldr	r1, [r7, #16]
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f000 f991 	bl	80152f8 <ip4_addr_isbroadcast_u32>
 8014fd6:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d11d      	bne.n	8015018 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d00d      	beq.n	8014ffe <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8014fe2:	4b5a      	ldr	r3, [pc, #360]	; (801514c <ip4_input+0x274>)
 8014fe4:	695b      	ldr	r3, [r3, #20]
 8014fe6:	b2db      	uxtb	r3, r3
 8014fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8014fea:	d102      	bne.n	8014ff2 <ip4_input+0x11a>
          netif = NULL;
 8014fec:	2300      	movs	r3, #0
 8014fee:	613b      	str	r3, [r7, #16]
          break;
 8014ff0:	e012      	b.n	8015018 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8014ff6:	4b56      	ldr	r3, [pc, #344]	; (8015150 <ip4_input+0x278>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	613b      	str	r3, [r7, #16]
 8014ffc:	e002      	b.n	8015004 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8014ffe:	693b      	ldr	r3, [r7, #16]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8015004:	693a      	ldr	r2, [r7, #16]
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	429a      	cmp	r2, r3
 801500a:	d102      	bne.n	8015012 <ip4_input+0x13a>
        netif = netif->next;
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8015012:	693b      	ldr	r3, [r7, #16]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d1c4      	bne.n	8014fa2 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015018:	4b4c      	ldr	r3, [pc, #304]	; (801514c <ip4_input+0x274>)
 801501a:	691b      	ldr	r3, [r3, #16]
 801501c:	6839      	ldr	r1, [r7, #0]
 801501e:	4618      	mov	r0, r3
 8015020:	f000 f96a 	bl	80152f8 <ip4_addr_isbroadcast_u32>
 8015024:	4603      	mov	r3, r0
 8015026:	2b00      	cmp	r3, #0
 8015028:	d105      	bne.n	8015036 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801502a:	4b48      	ldr	r3, [pc, #288]	; (801514c <ip4_input+0x274>)
 801502c:	691b      	ldr	r3, [r3, #16]
 801502e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015032:	2be0      	cmp	r3, #224	; 0xe0
 8015034:	d104      	bne.n	8015040 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015036:	6878      	ldr	r0, [r7, #4]
 8015038:	f7f8 faf2 	bl	800d620 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801503c:	2300      	movs	r3, #0
 801503e:	e081      	b.n	8015144 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015040:	693b      	ldr	r3, [r7, #16]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d104      	bne.n	8015050 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f7f8 faea 	bl	800d620 <pbuf_free>
    return ERR_OK;
 801504c:	2300      	movs	r3, #0
 801504e:	e079      	b.n	8015144 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	88db      	ldrh	r3, [r3, #6]
 8015054:	b29b      	uxth	r3, r3
 8015056:	461a      	mov	r2, r3
 8015058:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801505c:	4013      	ands	r3, r2
 801505e:	2b00      	cmp	r3, #0
 8015060:	d00b      	beq.n	801507a <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015062:	6878      	ldr	r0, [r7, #4]
 8015064:	f000 fd20 	bl	8015aa8 <ip4_reass>
 8015068:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d101      	bne.n	8015074 <ip4_input+0x19c>
      return ERR_OK;
 8015070:	2300      	movs	r3, #0
 8015072:	e067      	b.n	8015144 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	685b      	ldr	r3, [r3, #4]
 8015078:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801507a:	4a34      	ldr	r2, [pc, #208]	; (801514c <ip4_input+0x274>)
 801507c:	693b      	ldr	r3, [r7, #16]
 801507e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015080:	4a32      	ldr	r2, [pc, #200]	; (801514c <ip4_input+0x274>)
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015086:	4a31      	ldr	r2, [pc, #196]	; (801514c <ip4_input+0x274>)
 8015088:	697b      	ldr	r3, [r7, #20]
 801508a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 801508c:	697b      	ldr	r3, [r7, #20]
 801508e:	781b      	ldrb	r3, [r3, #0]
 8015090:	b29b      	uxth	r3, r3
 8015092:	f003 030f 	and.w	r3, r3, #15
 8015096:	b29b      	uxth	r3, r3
 8015098:	009b      	lsls	r3, r3, #2
 801509a:	b29a      	uxth	r2, r3
 801509c:	4b2b      	ldr	r3, [pc, #172]	; (801514c <ip4_input+0x274>)
 801509e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80150a0:	897b      	ldrh	r3, [r7, #10]
 80150a2:	425b      	negs	r3, r3
 80150a4:	b29b      	uxth	r3, r3
 80150a6:	b21b      	sxth	r3, r3
 80150a8:	4619      	mov	r1, r3
 80150aa:	6878      	ldr	r0, [r7, #4]
 80150ac:	f7f8 fa94 	bl	800d5d8 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	7a5b      	ldrb	r3, [r3, #9]
 80150b4:	2b06      	cmp	r3, #6
 80150b6:	d009      	beq.n	80150cc <ip4_input+0x1f4>
 80150b8:	2b11      	cmp	r3, #17
 80150ba:	d002      	beq.n	80150c2 <ip4_input+0x1ea>
 80150bc:	2b01      	cmp	r3, #1
 80150be:	d00a      	beq.n	80150d6 <ip4_input+0x1fe>
 80150c0:	e00e      	b.n	80150e0 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 80150c2:	6839      	ldr	r1, [r7, #0]
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f7fe fa5d 	bl	8013584 <udp_input>
      break;
 80150ca:	e028      	b.n	801511e <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 80150cc:	6839      	ldr	r1, [r7, #0]
 80150ce:	6878      	ldr	r0, [r7, #4]
 80150d0:	f7fa fa5e 	bl	800f590 <tcp_input>
      break;
 80150d4:	e023      	b.n	801511e <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 80150d6:	6839      	ldr	r1, [r7, #0]
 80150d8:	6878      	ldr	r0, [r7, #4]
 80150da:	f7ff fd05 	bl	8014ae8 <icmp_input>
      break;
 80150de:	e01e      	b.n	801511e <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80150e0:	4b1a      	ldr	r3, [pc, #104]	; (801514c <ip4_input+0x274>)
 80150e2:	695b      	ldr	r3, [r3, #20]
 80150e4:	6939      	ldr	r1, [r7, #16]
 80150e6:	4618      	mov	r0, r3
 80150e8:	f000 f906 	bl	80152f8 <ip4_addr_isbroadcast_u32>
 80150ec:	4603      	mov	r3, r0
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d112      	bne.n	8015118 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80150f2:	4b16      	ldr	r3, [pc, #88]	; (801514c <ip4_input+0x274>)
 80150f4:	695b      	ldr	r3, [r3, #20]
 80150f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80150fa:	2be0      	cmp	r3, #224	; 0xe0
 80150fc:	d00c      	beq.n	8015118 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80150fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015102:	4619      	mov	r1, r3
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	f7f8 fa79 	bl	800d5fc <pbuf_header_force>
        p->payload = iphdr;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	697a      	ldr	r2, [r7, #20]
 801510e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015110:	2102      	movs	r1, #2
 8015112:	6878      	ldr	r0, [r7, #4]
 8015114:	f7ff fdee 	bl	8014cf4 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8015118:	6878      	ldr	r0, [r7, #4]
 801511a:	f7f8 fa81 	bl	800d620 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801511e:	4b0b      	ldr	r3, [pc, #44]	; (801514c <ip4_input+0x274>)
 8015120:	2200      	movs	r2, #0
 8015122:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015124:	4b09      	ldr	r3, [pc, #36]	; (801514c <ip4_input+0x274>)
 8015126:	2200      	movs	r2, #0
 8015128:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801512a:	4b08      	ldr	r3, [pc, #32]	; (801514c <ip4_input+0x274>)
 801512c:	2200      	movs	r2, #0
 801512e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015130:	4b06      	ldr	r3, [pc, #24]	; (801514c <ip4_input+0x274>)
 8015132:	2200      	movs	r2, #0
 8015134:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015136:	4b05      	ldr	r3, [pc, #20]	; (801514c <ip4_input+0x274>)
 8015138:	2200      	movs	r2, #0
 801513a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801513c:	4b03      	ldr	r3, [pc, #12]	; (801514c <ip4_input+0x274>)
 801513e:	2200      	movs	r2, #0
 8015140:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015142:	2300      	movs	r3, #0
}
 8015144:	4618      	mov	r0, r3
 8015146:	3718      	adds	r7, #24
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}
 801514c:	200074ec 	.word	0x200074ec
 8015150:	2000dc44 	.word	0x2000dc44

08015154 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b08a      	sub	sp, #40	; 0x28
 8015158:	af04      	add	r7, sp, #16
 801515a:	60f8      	str	r0, [r7, #12]
 801515c:	60b9      	str	r1, [r7, #8]
 801515e:	607a      	str	r2, [r7, #4]
 8015160:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d009      	beq.n	8015180 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d003      	beq.n	801517a <ip4_output_if+0x26>
 8015172:	68bb      	ldr	r3, [r7, #8]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d102      	bne.n	8015180 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801517c:	3304      	adds	r3, #4
 801517e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015180:	78fa      	ldrb	r2, [r7, #3]
 8015182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015184:	9302      	str	r3, [sp, #8]
 8015186:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801518a:	9301      	str	r3, [sp, #4]
 801518c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015190:	9300      	str	r3, [sp, #0]
 8015192:	4613      	mov	r3, r2
 8015194:	687a      	ldr	r2, [r7, #4]
 8015196:	6979      	ldr	r1, [r7, #20]
 8015198:	68f8      	ldr	r0, [r7, #12]
 801519a:	f000 f805 	bl	80151a8 <ip4_output_if_src>
 801519e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80151a0:	4618      	mov	r0, r3
 80151a2:	3718      	adds	r7, #24
 80151a4:	46bd      	mov	sp, r7
 80151a6:	bd80      	pop	{r7, pc}

080151a8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b088      	sub	sp, #32
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	60f8      	str	r0, [r7, #12]
 80151b0:	60b9      	str	r1, [r7, #8]
 80151b2:	607a      	str	r2, [r7, #4]
 80151b4:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	89db      	ldrh	r3, [r3, #14]
 80151ba:	2b01      	cmp	r3, #1
 80151bc:	d006      	beq.n	80151cc <ip4_output_if_src+0x24>
 80151be:	4b48      	ldr	r3, [pc, #288]	; (80152e0 <ip4_output_if_src+0x138>)
 80151c0:	f240 3233 	movw	r2, #819	; 0x333
 80151c4:	4947      	ldr	r1, [pc, #284]	; (80152e4 <ip4_output_if_src+0x13c>)
 80151c6:	4848      	ldr	r0, [pc, #288]	; (80152e8 <ip4_output_if_src+0x140>)
 80151c8:	f001 fa7a 	bl	80166c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d060      	beq.n	8015294 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80151d2:	2314      	movs	r3, #20
 80151d4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80151d6:	2114      	movs	r1, #20
 80151d8:	68f8      	ldr	r0, [r7, #12]
 80151da:	f7f8 f9fd 	bl	800d5d8 <pbuf_header>
 80151de:	4603      	mov	r3, r0
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d002      	beq.n	80151ea <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80151e4:	f06f 0301 	mvn.w	r3, #1
 80151e8:	e075      	b.n	80152d6 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	685b      	ldr	r3, [r3, #4]
 80151ee:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	895b      	ldrh	r3, [r3, #10]
 80151f4:	2b13      	cmp	r3, #19
 80151f6:	d806      	bhi.n	8015206 <ip4_output_if_src+0x5e>
 80151f8:	4b39      	ldr	r3, [pc, #228]	; (80152e0 <ip4_output_if_src+0x138>)
 80151fa:	f240 3261 	movw	r2, #865	; 0x361
 80151fe:	493b      	ldr	r1, [pc, #236]	; (80152ec <ip4_output_if_src+0x144>)
 8015200:	4839      	ldr	r0, [pc, #228]	; (80152e8 <ip4_output_if_src+0x140>)
 8015202:	f001 fa5d 	bl	80166c0 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015206:	69fb      	ldr	r3, [r7, #28]
 8015208:	78fa      	ldrb	r2, [r7, #3]
 801520a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801520c:	69fb      	ldr	r3, [r7, #28]
 801520e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015212:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681a      	ldr	r2, [r3, #0]
 8015218:	69fb      	ldr	r3, [r7, #28]
 801521a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801521c:	8b7b      	ldrh	r3, [r7, #26]
 801521e:	089b      	lsrs	r3, r3, #2
 8015220:	b29b      	uxth	r3, r3
 8015222:	b2db      	uxtb	r3, r3
 8015224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015228:	b2da      	uxtb	r2, r3
 801522a:	69fb      	ldr	r3, [r7, #28]
 801522c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801522e:	69fb      	ldr	r3, [r7, #28]
 8015230:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015234:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	891b      	ldrh	r3, [r3, #8]
 801523a:	4618      	mov	r0, r3
 801523c:	f7f6 ffdc 	bl	800c1f8 <lwip_htons>
 8015240:	4603      	mov	r3, r0
 8015242:	461a      	mov	r2, r3
 8015244:	69fb      	ldr	r3, [r7, #28]
 8015246:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015248:	69fb      	ldr	r3, [r7, #28]
 801524a:	2200      	movs	r2, #0
 801524c:	719a      	strb	r2, [r3, #6]
 801524e:	2200      	movs	r2, #0
 8015250:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015252:	4b27      	ldr	r3, [pc, #156]	; (80152f0 <ip4_output_if_src+0x148>)
 8015254:	881b      	ldrh	r3, [r3, #0]
 8015256:	4618      	mov	r0, r3
 8015258:	f7f6 ffce 	bl	800c1f8 <lwip_htons>
 801525c:	4603      	mov	r3, r0
 801525e:	461a      	mov	r2, r3
 8015260:	69fb      	ldr	r3, [r7, #28]
 8015262:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015264:	4b22      	ldr	r3, [pc, #136]	; (80152f0 <ip4_output_if_src+0x148>)
 8015266:	881b      	ldrh	r3, [r3, #0]
 8015268:	3301      	adds	r3, #1
 801526a:	b29a      	uxth	r2, r3
 801526c:	4b20      	ldr	r3, [pc, #128]	; (80152f0 <ip4_output_if_src+0x148>)
 801526e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015270:	68bb      	ldr	r3, [r7, #8]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d104      	bne.n	8015280 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015276:	4b1f      	ldr	r3, [pc, #124]	; (80152f4 <ip4_output_if_src+0x14c>)
 8015278:	681a      	ldr	r2, [r3, #0]
 801527a:	69fb      	ldr	r3, [r7, #28]
 801527c:	60da      	str	r2, [r3, #12]
 801527e:	e003      	b.n	8015288 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	681a      	ldr	r2, [r3, #0]
 8015284:	69fb      	ldr	r3, [r7, #28]
 8015286:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015288:	69fb      	ldr	r3, [r7, #28]
 801528a:	2200      	movs	r2, #0
 801528c:	729a      	strb	r2, [r3, #10]
 801528e:	2200      	movs	r2, #0
 8015290:	72da      	strb	r2, [r3, #11]
 8015292:	e008      	b.n	80152a6 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	685b      	ldr	r3, [r3, #4]
 8015298:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801529a:	69fb      	ldr	r3, [r7, #28]
 801529c:	691b      	ldr	r3, [r3, #16]
 801529e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80152a0:	f107 0314 	add.w	r3, r7, #20
 80152a4:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80152a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d00c      	beq.n	80152c8 <ip4_output_if_src+0x120>
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	891a      	ldrh	r2, [r3, #8]
 80152b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d906      	bls.n	80152c8 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 80152ba:	687a      	ldr	r2, [r7, #4]
 80152bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80152be:	68f8      	ldr	r0, [r7, #12]
 80152c0:	f000 fd9c 	bl	8015dfc <ip4_frag>
 80152c4:	4603      	mov	r3, r0
 80152c6:	e006      	b.n	80152d6 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80152c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152ca:	695b      	ldr	r3, [r3, #20]
 80152cc:	687a      	ldr	r2, [r7, #4]
 80152ce:	68f9      	ldr	r1, [r7, #12]
 80152d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152d2:	4798      	blx	r3
 80152d4:	4603      	mov	r3, r0
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3720      	adds	r7, #32
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}
 80152de:	bf00      	nop
 80152e0:	08019e08 	.word	0x08019e08
 80152e4:	08019e3c 	.word	0x08019e3c
 80152e8:	08019e48 	.word	0x08019e48
 80152ec:	08019e70 	.word	0x08019e70
 80152f0:	20004276 	.word	0x20004276
 80152f4:	0801a290 	.word	0x0801a290

080152f8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80152f8:	b480      	push	{r7}
 80152fa:	b085      	sub	sp, #20
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
 8015300:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801530c:	d002      	beq.n	8015314 <ip4_addr_isbroadcast_u32+0x1c>
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d101      	bne.n	8015318 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015314:	2301      	movs	r3, #1
 8015316:	e02a      	b.n	801536e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015318:	683b      	ldr	r3, [r7, #0]
 801531a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801531e:	f003 0302 	and.w	r3, r3, #2
 8015322:	2b00      	cmp	r3, #0
 8015324:	d101      	bne.n	801532a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015326:	2300      	movs	r3, #0
 8015328:	e021      	b.n	801536e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801532a:	683b      	ldr	r3, [r7, #0]
 801532c:	3304      	adds	r3, #4
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	687a      	ldr	r2, [r7, #4]
 8015332:	429a      	cmp	r2, r3
 8015334:	d101      	bne.n	801533a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015336:	2300      	movs	r3, #0
 8015338:	e019      	b.n	801536e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801533a:	68fa      	ldr	r2, [r7, #12]
 801533c:	683b      	ldr	r3, [r7, #0]
 801533e:	3304      	adds	r3, #4
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	405a      	eors	r2, r3
 8015344:	683b      	ldr	r3, [r7, #0]
 8015346:	3308      	adds	r3, #8
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	4013      	ands	r3, r2
 801534c:	2b00      	cmp	r3, #0
 801534e:	d10d      	bne.n	801536c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	3308      	adds	r3, #8
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	43da      	mvns	r2, r3
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801535c:	683b      	ldr	r3, [r7, #0]
 801535e:	3308      	adds	r3, #8
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015364:	429a      	cmp	r2, r3
 8015366:	d101      	bne.n	801536c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015368:	2301      	movs	r3, #1
 801536a:	e000      	b.n	801536e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801536c:	2300      	movs	r3, #0
  }
}
 801536e:	4618      	mov	r0, r3
 8015370:	3714      	adds	r7, #20
 8015372:	46bd      	mov	sp, r7
 8015374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015378:	4770      	bx	lr
	...

0801537c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b082      	sub	sp, #8
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8015384:	2210      	movs	r2, #16
 8015386:	4904      	ldr	r1, [pc, #16]	; (8015398 <ip4addr_ntoa+0x1c>)
 8015388:	6878      	ldr	r0, [r7, #4]
 801538a:	f000 f807 	bl	801539c <ip4addr_ntoa_r>
 801538e:	4603      	mov	r3, r0
}
 8015390:	4618      	mov	r0, r3
 8015392:	3708      	adds	r7, #8
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}
 8015398:	20004278 	.word	0x20004278

0801539c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801539c:	b480      	push	{r7}
 801539e:	b08d      	sub	sp, #52	; 0x34
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	60f8      	str	r0, [r7, #12]
 80153a4:	60b9      	str	r1, [r7, #8]
 80153a6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80153a8:	2300      	movs	r3, #0
 80153aa:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80153b2:	68bb      	ldr	r3, [r7, #8]
 80153b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80153b6:	f107 0318 	add.w	r3, r7, #24
 80153ba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80153bc:	2300      	movs	r3, #0
 80153be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80153c2:	e059      	b.n	8015478 <ip4addr_ntoa_r+0xdc>
    i = 0;
 80153c4:	2300      	movs	r3, #0
 80153c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80153ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153cc:	781a      	ldrb	r2, [r3, #0]
 80153ce:	4b33      	ldr	r3, [pc, #204]	; (801549c <ip4addr_ntoa_r+0x100>)
 80153d0:	fba3 1302 	umull	r1, r3, r3, r2
 80153d4:	08d9      	lsrs	r1, r3, #3
 80153d6:	460b      	mov	r3, r1
 80153d8:	009b      	lsls	r3, r3, #2
 80153da:	440b      	add	r3, r1
 80153dc:	005b      	lsls	r3, r3, #1
 80153de:	1ad3      	subs	r3, r2, r3
 80153e0:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80153e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e4:	781b      	ldrb	r3, [r3, #0]
 80153e6:	4a2d      	ldr	r2, [pc, #180]	; (801549c <ip4addr_ntoa_r+0x100>)
 80153e8:	fba2 2303 	umull	r2, r3, r2, r3
 80153ec:	08db      	lsrs	r3, r3, #3
 80153ee:	b2da      	uxtb	r2, r3
 80153f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153f2:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80153f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80153f8:	1c5a      	adds	r2, r3, #1
 80153fa:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80153fe:	4619      	mov	r1, r3
 8015400:	7ffb      	ldrb	r3, [r7, #31]
 8015402:	3330      	adds	r3, #48	; 0x30
 8015404:	b2da      	uxtb	r2, r3
 8015406:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801540a:	440b      	add	r3, r1
 801540c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8015410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015412:	781b      	ldrb	r3, [r3, #0]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d1d8      	bne.n	80153ca <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8015418:	e012      	b.n	8015440 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801541a:	6a3b      	ldr	r3, [r7, #32]
 801541c:	1c5a      	adds	r2, r3, #1
 801541e:	623a      	str	r2, [r7, #32]
 8015420:	687a      	ldr	r2, [r7, #4]
 8015422:	429a      	cmp	r2, r3
 8015424:	dc01      	bgt.n	801542a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8015426:	2300      	movs	r3, #0
 8015428:	e031      	b.n	801548e <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 801542a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015430:	1c59      	adds	r1, r3, #1
 8015432:	62f9      	str	r1, [r7, #44]	; 0x2c
 8015434:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015438:	440a      	add	r2, r1
 801543a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801543e:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8015440:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015444:	1e5a      	subs	r2, r3, #1
 8015446:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801544a:	2b00      	cmp	r3, #0
 801544c:	d1e5      	bne.n	801541a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801544e:	6a3b      	ldr	r3, [r7, #32]
 8015450:	1c5a      	adds	r2, r3, #1
 8015452:	623a      	str	r2, [r7, #32]
 8015454:	687a      	ldr	r2, [r7, #4]
 8015456:	429a      	cmp	r2, r3
 8015458:	dc01      	bgt.n	801545e <ip4addr_ntoa_r+0xc2>
      return NULL;
 801545a:	2300      	movs	r3, #0
 801545c:	e017      	b.n	801548e <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 801545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015460:	1c5a      	adds	r2, r3, #1
 8015462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015464:	222e      	movs	r2, #46	; 0x2e
 8015466:	701a      	strb	r2, [r3, #0]
    ap++;
 8015468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801546a:	3301      	adds	r3, #1
 801546c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801546e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015472:	3301      	adds	r3, #1
 8015474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801547c:	2b03      	cmp	r3, #3
 801547e:	d9a1      	bls.n	80153c4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8015480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015482:	3b01      	subs	r3, #1
 8015484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015488:	2200      	movs	r2, #0
 801548a:	701a      	strb	r2, [r3, #0]
  return buf;
 801548c:	68bb      	ldr	r3, [r7, #8]
}
 801548e:	4618      	mov	r0, r3
 8015490:	3734      	adds	r7, #52	; 0x34
 8015492:	46bd      	mov	sp, r7
 8015494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015498:	4770      	bx	lr
 801549a:	bf00      	nop
 801549c:	cccccccd 	.word	0xcccccccd

080154a0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b084      	sub	sp, #16
 80154a4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80154a6:	2300      	movs	r3, #0
 80154a8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80154aa:	4b12      	ldr	r3, [pc, #72]	; (80154f4 <ip_reass_tmr+0x54>)
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80154b0:	e018      	b.n	80154e4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	7fdb      	ldrb	r3, [r3, #31]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d00b      	beq.n	80154d2 <ip_reass_tmr+0x32>
      r->timer--;
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	7fdb      	ldrb	r3, [r3, #31]
 80154be:	3b01      	subs	r3, #1
 80154c0:	b2da      	uxtb	r2, r3
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	60fb      	str	r3, [r7, #12]
 80154d0:	e008      	b.n	80154e4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80154dc:	68b9      	ldr	r1, [r7, #8]
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	f000 f80a 	bl	80154f8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d1e3      	bne.n	80154b2 <ip_reass_tmr+0x12>
     }
   }
}
 80154ea:	bf00      	nop
 80154ec:	3710      	adds	r7, #16
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}
 80154f2:	bf00      	nop
 80154f4:	20004288 	.word	0x20004288

080154f8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b088      	sub	sp, #32
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
 8015500:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015502:	2300      	movs	r3, #0
 8015504:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015506:	683a      	ldr	r2, [r7, #0]
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	429a      	cmp	r2, r3
 801550c:	d105      	bne.n	801551a <ip_reass_free_complete_datagram+0x22>
 801550e:	4b45      	ldr	r3, [pc, #276]	; (8015624 <ip_reass_free_complete_datagram+0x12c>)
 8015510:	22ab      	movs	r2, #171	; 0xab
 8015512:	4945      	ldr	r1, [pc, #276]	; (8015628 <ip_reass_free_complete_datagram+0x130>)
 8015514:	4845      	ldr	r0, [pc, #276]	; (801562c <ip_reass_free_complete_datagram+0x134>)
 8015516:	f001 f8d3 	bl	80166c0 <iprintf>
  if (prev != NULL) {
 801551a:	683b      	ldr	r3, [r7, #0]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d00a      	beq.n	8015536 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	687a      	ldr	r2, [r7, #4]
 8015526:	429a      	cmp	r2, r3
 8015528:	d005      	beq.n	8015536 <ip_reass_free_complete_datagram+0x3e>
 801552a:	4b3e      	ldr	r3, [pc, #248]	; (8015624 <ip_reass_free_complete_datagram+0x12c>)
 801552c:	22ad      	movs	r2, #173	; 0xad
 801552e:	4940      	ldr	r1, [pc, #256]	; (8015630 <ip_reass_free_complete_datagram+0x138>)
 8015530:	483e      	ldr	r0, [pc, #248]	; (801562c <ip_reass_free_complete_datagram+0x134>)
 8015532:	f001 f8c5 	bl	80166c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	685b      	ldr	r3, [r3, #4]
 801553a:	685b      	ldr	r3, [r3, #4]
 801553c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801553e:	697b      	ldr	r3, [r7, #20]
 8015540:	889b      	ldrh	r3, [r3, #4]
 8015542:	b29b      	uxth	r3, r3
 8015544:	2b00      	cmp	r3, #0
 8015546:	d12a      	bne.n	801559e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	685b      	ldr	r3, [r3, #4]
 801554c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801554e:	697b      	ldr	r3, [r7, #20]
 8015550:	681a      	ldr	r2, [r3, #0]
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015556:	69bb      	ldr	r3, [r7, #24]
 8015558:	6858      	ldr	r0, [r3, #4]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	3308      	adds	r3, #8
 801555e:	2214      	movs	r2, #20
 8015560:	4619      	mov	r1, r3
 8015562:	f001 f89a 	bl	801669a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015566:	2101      	movs	r1, #1
 8015568:	69b8      	ldr	r0, [r7, #24]
 801556a:	f7ff fbd3 	bl	8014d14 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801556e:	69b8      	ldr	r0, [r7, #24]
 8015570:	f7f8 f8f0 	bl	800d754 <pbuf_clen>
 8015574:	4603      	mov	r3, r0
 8015576:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015578:	8bfa      	ldrh	r2, [r7, #30]
 801557a:	8a7b      	ldrh	r3, [r7, #18]
 801557c:	4413      	add	r3, r2
 801557e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015582:	db05      	blt.n	8015590 <ip_reass_free_complete_datagram+0x98>
 8015584:	4b27      	ldr	r3, [pc, #156]	; (8015624 <ip_reass_free_complete_datagram+0x12c>)
 8015586:	22bc      	movs	r2, #188	; 0xbc
 8015588:	492a      	ldr	r1, [pc, #168]	; (8015634 <ip_reass_free_complete_datagram+0x13c>)
 801558a:	4828      	ldr	r0, [pc, #160]	; (801562c <ip_reass_free_complete_datagram+0x134>)
 801558c:	f001 f898 	bl	80166c0 <iprintf>
    pbufs_freed += clen;
 8015590:	8bfa      	ldrh	r2, [r7, #30]
 8015592:	8a7b      	ldrh	r3, [r7, #18]
 8015594:	4413      	add	r3, r2
 8015596:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015598:	69b8      	ldr	r0, [r7, #24]
 801559a:	f7f8 f841 	bl	800d620 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	685b      	ldr	r3, [r3, #4]
 80155a2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80155a4:	e01f      	b.n	80155e6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80155a6:	69bb      	ldr	r3, [r7, #24]
 80155a8:	685b      	ldr	r3, [r3, #4]
 80155aa:	617b      	str	r3, [r7, #20]
    pcur = p;
 80155ac:	69bb      	ldr	r3, [r7, #24]
 80155ae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80155b6:	68f8      	ldr	r0, [r7, #12]
 80155b8:	f7f8 f8cc 	bl	800d754 <pbuf_clen>
 80155bc:	4603      	mov	r3, r0
 80155be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80155c0:	8bfa      	ldrh	r2, [r7, #30]
 80155c2:	8a7b      	ldrh	r3, [r7, #18]
 80155c4:	4413      	add	r3, r2
 80155c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155ca:	db05      	blt.n	80155d8 <ip_reass_free_complete_datagram+0xe0>
 80155cc:	4b15      	ldr	r3, [pc, #84]	; (8015624 <ip_reass_free_complete_datagram+0x12c>)
 80155ce:	22cc      	movs	r2, #204	; 0xcc
 80155d0:	4918      	ldr	r1, [pc, #96]	; (8015634 <ip_reass_free_complete_datagram+0x13c>)
 80155d2:	4816      	ldr	r0, [pc, #88]	; (801562c <ip_reass_free_complete_datagram+0x134>)
 80155d4:	f001 f874 	bl	80166c0 <iprintf>
    pbufs_freed += clen;
 80155d8:	8bfa      	ldrh	r2, [r7, #30]
 80155da:	8a7b      	ldrh	r3, [r7, #18]
 80155dc:	4413      	add	r3, r2
 80155de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80155e0:	68f8      	ldr	r0, [r7, #12]
 80155e2:	f7f8 f81d 	bl	800d620 <pbuf_free>
  while (p != NULL) {
 80155e6:	69bb      	ldr	r3, [r7, #24]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d1dc      	bne.n	80155a6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80155ec:	6839      	ldr	r1, [r7, #0]
 80155ee:	6878      	ldr	r0, [r7, #4]
 80155f0:	f000 f8c2 	bl	8015778 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80155f4:	4b10      	ldr	r3, [pc, #64]	; (8015638 <ip_reass_free_complete_datagram+0x140>)
 80155f6:	881b      	ldrh	r3, [r3, #0]
 80155f8:	8bfa      	ldrh	r2, [r7, #30]
 80155fa:	429a      	cmp	r2, r3
 80155fc:	d905      	bls.n	801560a <ip_reass_free_complete_datagram+0x112>
 80155fe:	4b09      	ldr	r3, [pc, #36]	; (8015624 <ip_reass_free_complete_datagram+0x12c>)
 8015600:	22d2      	movs	r2, #210	; 0xd2
 8015602:	490e      	ldr	r1, [pc, #56]	; (801563c <ip_reass_free_complete_datagram+0x144>)
 8015604:	4809      	ldr	r0, [pc, #36]	; (801562c <ip_reass_free_complete_datagram+0x134>)
 8015606:	f001 f85b 	bl	80166c0 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801560a:	4b0b      	ldr	r3, [pc, #44]	; (8015638 <ip_reass_free_complete_datagram+0x140>)
 801560c:	881a      	ldrh	r2, [r3, #0]
 801560e:	8bfb      	ldrh	r3, [r7, #30]
 8015610:	1ad3      	subs	r3, r2, r3
 8015612:	b29a      	uxth	r2, r3
 8015614:	4b08      	ldr	r3, [pc, #32]	; (8015638 <ip_reass_free_complete_datagram+0x140>)
 8015616:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015618:	8bfb      	ldrh	r3, [r7, #30]
}
 801561a:	4618      	mov	r0, r3
 801561c:	3720      	adds	r7, #32
 801561e:	46bd      	mov	sp, r7
 8015620:	bd80      	pop	{r7, pc}
 8015622:	bf00      	nop
 8015624:	08019ea0 	.word	0x08019ea0
 8015628:	08019edc 	.word	0x08019edc
 801562c:	08019ee8 	.word	0x08019ee8
 8015630:	08019f10 	.word	0x08019f10
 8015634:	08019f24 	.word	0x08019f24
 8015638:	2000428c 	.word	0x2000428c
 801563c:	08019f44 	.word	0x08019f44

08015640 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b08a      	sub	sp, #40	; 0x28
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
 8015648:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801564a:	2300      	movs	r3, #0
 801564c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801564e:	2300      	movs	r3, #0
 8015650:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015652:	2300      	movs	r3, #0
 8015654:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015656:	2300      	movs	r3, #0
 8015658:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801565a:	2300      	movs	r3, #0
 801565c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801565e:	4b28      	ldr	r3, [pc, #160]	; (8015700 <ip_reass_remove_oldest_datagram+0xc0>)
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015664:	e030      	b.n	80156c8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015668:	695a      	ldr	r2, [r3, #20]
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	68db      	ldr	r3, [r3, #12]
 801566e:	429a      	cmp	r2, r3
 8015670:	d10c      	bne.n	801568c <ip_reass_remove_oldest_datagram+0x4c>
 8015672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015674:	699a      	ldr	r2, [r3, #24]
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	691b      	ldr	r3, [r3, #16]
 801567a:	429a      	cmp	r2, r3
 801567c:	d106      	bne.n	801568c <ip_reass_remove_oldest_datagram+0x4c>
 801567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015680:	899a      	ldrh	r2, [r3, #12]
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	889b      	ldrh	r3, [r3, #4]
 8015686:	b29b      	uxth	r3, r3
 8015688:	429a      	cmp	r2, r3
 801568a:	d014      	beq.n	80156b6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801568c:	693b      	ldr	r3, [r7, #16]
 801568e:	3301      	adds	r3, #1
 8015690:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015692:	6a3b      	ldr	r3, [r7, #32]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d104      	bne.n	80156a2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801569a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801569c:	69fb      	ldr	r3, [r7, #28]
 801569e:	61bb      	str	r3, [r7, #24]
 80156a0:	e009      	b.n	80156b6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80156a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a4:	7fda      	ldrb	r2, [r3, #31]
 80156a6:	6a3b      	ldr	r3, [r7, #32]
 80156a8:	7fdb      	ldrb	r3, [r3, #31]
 80156aa:	429a      	cmp	r2, r3
 80156ac:	d803      	bhi.n	80156b6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80156ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80156b2:	69fb      	ldr	r3, [r7, #28]
 80156b4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80156b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d001      	beq.n	80156c2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80156be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80156c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80156c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d1cb      	bne.n	8015666 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80156ce:	6a3b      	ldr	r3, [r7, #32]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d008      	beq.n	80156e6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80156d4:	69b9      	ldr	r1, [r7, #24]
 80156d6:	6a38      	ldr	r0, [r7, #32]
 80156d8:	f7ff ff0e 	bl	80154f8 <ip_reass_free_complete_datagram>
 80156dc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80156de:	697a      	ldr	r2, [r7, #20]
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	4413      	add	r3, r2
 80156e4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80156e6:	697a      	ldr	r2, [r7, #20]
 80156e8:	683b      	ldr	r3, [r7, #0]
 80156ea:	429a      	cmp	r2, r3
 80156ec:	da02      	bge.n	80156f4 <ip_reass_remove_oldest_datagram+0xb4>
 80156ee:	693b      	ldr	r3, [r7, #16]
 80156f0:	2b01      	cmp	r3, #1
 80156f2:	dcac      	bgt.n	801564e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80156f4:	697b      	ldr	r3, [r7, #20]
}
 80156f6:	4618      	mov	r0, r3
 80156f8:	3728      	adds	r7, #40	; 0x28
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd80      	pop	{r7, pc}
 80156fe:	bf00      	nop
 8015700:	20004288 	.word	0x20004288

08015704 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b084      	sub	sp, #16
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
 801570c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801570e:	2004      	movs	r0, #4
 8015710:	f7f7 f960 	bl	800c9d4 <memp_malloc>
 8015714:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d110      	bne.n	801573e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801571c:	6839      	ldr	r1, [r7, #0]
 801571e:	6878      	ldr	r0, [r7, #4]
 8015720:	f7ff ff8e 	bl	8015640 <ip_reass_remove_oldest_datagram>
 8015724:	4602      	mov	r2, r0
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	4293      	cmp	r3, r2
 801572a:	dc03      	bgt.n	8015734 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801572c:	2004      	movs	r0, #4
 801572e:	f7f7 f951 	bl	800c9d4 <memp_malloc>
 8015732:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d101      	bne.n	801573e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801573a:	2300      	movs	r3, #0
 801573c:	e016      	b.n	801576c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801573e:	2220      	movs	r2, #32
 8015740:	2100      	movs	r1, #0
 8015742:	68f8      	ldr	r0, [r7, #12]
 8015744:	f000 ffb4 	bl	80166b0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	2203      	movs	r2, #3
 801574c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801574e:	4b09      	ldr	r3, [pc, #36]	; (8015774 <ip_reass_enqueue_new_datagram+0x70>)
 8015750:	681a      	ldr	r2, [r3, #0]
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015756:	4a07      	ldr	r2, [pc, #28]	; (8015774 <ip_reass_enqueue_new_datagram+0x70>)
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	3308      	adds	r3, #8
 8015760:	2214      	movs	r2, #20
 8015762:	6879      	ldr	r1, [r7, #4]
 8015764:	4618      	mov	r0, r3
 8015766:	f000 ff98 	bl	801669a <memcpy>
  return ipr;
 801576a:	68fb      	ldr	r3, [r7, #12]
}
 801576c:	4618      	mov	r0, r3
 801576e:	3710      	adds	r7, #16
 8015770:	46bd      	mov	sp, r7
 8015772:	bd80      	pop	{r7, pc}
 8015774:	20004288 	.word	0x20004288

08015778 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
 8015780:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015782:	4b10      	ldr	r3, [pc, #64]	; (80157c4 <ip_reass_dequeue_datagram+0x4c>)
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	687a      	ldr	r2, [r7, #4]
 8015788:	429a      	cmp	r2, r3
 801578a:	d104      	bne.n	8015796 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	4a0c      	ldr	r2, [pc, #48]	; (80157c4 <ip_reass_dequeue_datagram+0x4c>)
 8015792:	6013      	str	r3, [r2, #0]
 8015794:	e00d      	b.n	80157b2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015796:	683b      	ldr	r3, [r7, #0]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d106      	bne.n	80157aa <ip_reass_dequeue_datagram+0x32>
 801579c:	4b0a      	ldr	r3, [pc, #40]	; (80157c8 <ip_reass_dequeue_datagram+0x50>)
 801579e:	f240 1245 	movw	r2, #325	; 0x145
 80157a2:	490a      	ldr	r1, [pc, #40]	; (80157cc <ip_reass_dequeue_datagram+0x54>)
 80157a4:	480a      	ldr	r0, [pc, #40]	; (80157d0 <ip_reass_dequeue_datagram+0x58>)
 80157a6:	f000 ff8b 	bl	80166c0 <iprintf>
    prev->next = ipr->next;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681a      	ldr	r2, [r3, #0]
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80157b2:	6879      	ldr	r1, [r7, #4]
 80157b4:	2004      	movs	r0, #4
 80157b6:	f7f7 f95f 	bl	800ca78 <memp_free>
}
 80157ba:	bf00      	nop
 80157bc:	3708      	adds	r7, #8
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	20004288 	.word	0x20004288
 80157c8:	08019ea0 	.word	0x08019ea0
 80157cc:	08019f60 	.word	0x08019f60
 80157d0:	08019ee8 	.word	0x08019ee8

080157d4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b08c      	sub	sp, #48	; 0x30
 80157d8:	af00      	add	r7, sp, #0
 80157da:	60f8      	str	r0, [r7, #12]
 80157dc:	60b9      	str	r1, [r7, #8]
 80157de:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 80157e0:	2300      	movs	r3, #0
 80157e2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80157e4:	2301      	movs	r3, #1
 80157e6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 80157e8:	68bb      	ldr	r3, [r7, #8]
 80157ea:	685b      	ldr	r3, [r3, #4]
 80157ec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80157ee:	69fb      	ldr	r3, [r7, #28]
 80157f0:	885b      	ldrh	r3, [r3, #2]
 80157f2:	b29b      	uxth	r3, r3
 80157f4:	4618      	mov	r0, r3
 80157f6:	f7f6 fcff 	bl	800c1f8 <lwip_htons>
 80157fa:	4603      	mov	r3, r0
 80157fc:	461a      	mov	r2, r3
 80157fe:	69fb      	ldr	r3, [r7, #28]
 8015800:	781b      	ldrb	r3, [r3, #0]
 8015802:	b29b      	uxth	r3, r3
 8015804:	f003 030f 	and.w	r3, r3, #15
 8015808:	b29b      	uxth	r3, r3
 801580a:	009b      	lsls	r3, r3, #2
 801580c:	b29b      	uxth	r3, r3
 801580e:	1ad3      	subs	r3, r2, r3
 8015810:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8015812:	69fb      	ldr	r3, [r7, #28]
 8015814:	88db      	ldrh	r3, [r3, #6]
 8015816:	b29b      	uxth	r3, r3
 8015818:	4618      	mov	r0, r3
 801581a:	f7f6 fced 	bl	800c1f8 <lwip_htons>
 801581e:	4603      	mov	r3, r0
 8015820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015824:	b29b      	uxth	r3, r3
 8015826:	00db      	lsls	r3, r3, #3
 8015828:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801582a:	68bb      	ldr	r3, [r7, #8]
 801582c:	685b      	ldr	r3, [r3, #4]
 801582e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015832:	2200      	movs	r2, #0
 8015834:	701a      	strb	r2, [r3, #0]
 8015836:	2200      	movs	r2, #0
 8015838:	705a      	strb	r2, [r3, #1]
 801583a:	2200      	movs	r2, #0
 801583c:	709a      	strb	r2, [r3, #2]
 801583e:	2200      	movs	r2, #0
 8015840:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015844:	8b3a      	ldrh	r2, [r7, #24]
 8015846:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8015848:	8b3a      	ldrh	r2, [r7, #24]
 801584a:	8b7b      	ldrh	r3, [r7, #26]
 801584c:	4413      	add	r3, r2
 801584e:	b29a      	uxth	r2, r3
 8015850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015852:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	685b      	ldr	r3, [r3, #4]
 8015858:	627b      	str	r3, [r7, #36]	; 0x24
 801585a:	e061      	b.n	8015920 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801585e:	685b      	ldr	r3, [r3, #4]
 8015860:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8015862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015864:	889b      	ldrh	r3, [r3, #4]
 8015866:	b29a      	uxth	r2, r3
 8015868:	697b      	ldr	r3, [r7, #20]
 801586a:	889b      	ldrh	r3, [r3, #4]
 801586c:	b29b      	uxth	r3, r3
 801586e:	429a      	cmp	r2, r3
 8015870:	d232      	bcs.n	80158d8 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015876:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801587a:	2b00      	cmp	r3, #0
 801587c:	d01f      	beq.n	80158be <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015880:	889b      	ldrh	r3, [r3, #4]
 8015882:	b29a      	uxth	r2, r3
 8015884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015886:	88db      	ldrh	r3, [r3, #6]
 8015888:	b29b      	uxth	r3, r3
 801588a:	429a      	cmp	r2, r3
 801588c:	f0c0 80e3 	bcc.w	8015a56 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8015890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015892:	88db      	ldrh	r3, [r3, #6]
 8015894:	b29a      	uxth	r2, r3
 8015896:	697b      	ldr	r3, [r7, #20]
 8015898:	889b      	ldrh	r3, [r3, #4]
 801589a:	b29b      	uxth	r3, r3
 801589c:	429a      	cmp	r2, r3
 801589e:	f200 80da 	bhi.w	8015a56 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80158a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158a4:	68ba      	ldr	r2, [r7, #8]
 80158a6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80158a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158aa:	88db      	ldrh	r3, [r3, #6]
 80158ac:	b29a      	uxth	r2, r3
 80158ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b0:	889b      	ldrh	r3, [r3, #4]
 80158b2:	b29b      	uxth	r3, r3
 80158b4:	429a      	cmp	r2, r3
 80158b6:	d037      	beq.n	8015928 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80158b8:	2300      	movs	r3, #0
 80158ba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80158bc:	e034      	b.n	8015928 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80158be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c0:	88db      	ldrh	r3, [r3, #6]
 80158c2:	b29a      	uxth	r2, r3
 80158c4:	697b      	ldr	r3, [r7, #20]
 80158c6:	889b      	ldrh	r3, [r3, #4]
 80158c8:	b29b      	uxth	r3, r3
 80158ca:	429a      	cmp	r2, r3
 80158cc:	f200 80c5 	bhi.w	8015a5a <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	68ba      	ldr	r2, [r7, #8]
 80158d4:	605a      	str	r2, [r3, #4]
      break;
 80158d6:	e027      	b.n	8015928 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 80158d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158da:	889b      	ldrh	r3, [r3, #4]
 80158dc:	b29a      	uxth	r2, r3
 80158de:	697b      	ldr	r3, [r7, #20]
 80158e0:	889b      	ldrh	r3, [r3, #4]
 80158e2:	b29b      	uxth	r3, r3
 80158e4:	429a      	cmp	r2, r3
 80158e6:	f000 80ba 	beq.w	8015a5e <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80158ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ec:	889b      	ldrh	r3, [r3, #4]
 80158ee:	b29a      	uxth	r2, r3
 80158f0:	697b      	ldr	r3, [r7, #20]
 80158f2:	88db      	ldrh	r3, [r3, #6]
 80158f4:	b29b      	uxth	r3, r3
 80158f6:	429a      	cmp	r2, r3
 80158f8:	f0c0 80b3 	bcc.w	8015a62 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80158fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d009      	beq.n	8015916 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8015902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015904:	88db      	ldrh	r3, [r3, #6]
 8015906:	b29a      	uxth	r2, r3
 8015908:	697b      	ldr	r3, [r7, #20]
 801590a:	889b      	ldrh	r3, [r3, #4]
 801590c:	b29b      	uxth	r3, r3
 801590e:	429a      	cmp	r2, r3
 8015910:	d001      	beq.n	8015916 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015912:	2300      	movs	r3, #0
 8015914:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801591c:	697b      	ldr	r3, [r7, #20]
 801591e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015922:	2b00      	cmp	r3, #0
 8015924:	d19a      	bne.n	801585c <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8015926:	e000      	b.n	801592a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8015928:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801592c:	2b00      	cmp	r3, #0
 801592e:	d12d      	bne.n	801598c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8015930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015932:	2b00      	cmp	r3, #0
 8015934:	d01c      	beq.n	8015970 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015938:	88db      	ldrh	r3, [r3, #6]
 801593a:	b29a      	uxth	r2, r3
 801593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801593e:	889b      	ldrh	r3, [r3, #4]
 8015940:	b29b      	uxth	r3, r3
 8015942:	429a      	cmp	r2, r3
 8015944:	d906      	bls.n	8015954 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8015946:	4b51      	ldr	r3, [pc, #324]	; (8015a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015948:	f240 12ab 	movw	r2, #427	; 0x1ab
 801594c:	4950      	ldr	r1, [pc, #320]	; (8015a90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801594e:	4851      	ldr	r0, [pc, #324]	; (8015a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015950:	f000 feb6 	bl	80166c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015956:	68ba      	ldr	r2, [r7, #8]
 8015958:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801595c:	88db      	ldrh	r3, [r3, #6]
 801595e:	b29a      	uxth	r2, r3
 8015960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015962:	889b      	ldrh	r3, [r3, #4]
 8015964:	b29b      	uxth	r3, r3
 8015966:	429a      	cmp	r2, r3
 8015968:	d010      	beq.n	801598c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801596a:	2300      	movs	r3, #0
 801596c:	623b      	str	r3, [r7, #32]
 801596e:	e00d      	b.n	801598c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	685b      	ldr	r3, [r3, #4]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d006      	beq.n	8015986 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8015978:	4b44      	ldr	r3, [pc, #272]	; (8015a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801597a:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 801597e:	4946      	ldr	r1, [pc, #280]	; (8015a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015980:	4844      	ldr	r0, [pc, #272]	; (8015a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015982:	f000 fe9d 	bl	80166c0 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	68ba      	ldr	r2, [r7, #8]
 801598a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d105      	bne.n	801599e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	7f9b      	ldrb	r3, [r3, #30]
 8015996:	f003 0301 	and.w	r3, r3, #1
 801599a:	2b00      	cmp	r3, #0
 801599c:	d059      	beq.n	8015a52 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 801599e:	6a3b      	ldr	r3, [r7, #32]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d04f      	beq.n	8015a44 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	685b      	ldr	r3, [r3, #4]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d006      	beq.n	80159ba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	685b      	ldr	r3, [r3, #4]
 80159b0:	685b      	ldr	r3, [r3, #4]
 80159b2:	889b      	ldrh	r3, [r3, #4]
 80159b4:	b29b      	uxth	r3, r3
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d002      	beq.n	80159c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80159ba:	2300      	movs	r3, #0
 80159bc:	623b      	str	r3, [r7, #32]
 80159be:	e041      	b.n	8015a44 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80159c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159c2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80159c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80159ca:	e012      	b.n	80159f2 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 80159cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ce:	685b      	ldr	r3, [r3, #4]
 80159d0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80159d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d4:	88db      	ldrh	r3, [r3, #6]
 80159d6:	b29a      	uxth	r2, r3
 80159d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159da:	889b      	ldrh	r3, [r3, #4]
 80159dc:	b29b      	uxth	r3, r3
 80159de:	429a      	cmp	r2, r3
 80159e0:	d002      	beq.n	80159e8 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 80159e2:	2300      	movs	r3, #0
 80159e4:	623b      	str	r3, [r7, #32]
            break;
 80159e6:	e007      	b.n	80159f8 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 80159e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80159ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80159f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d1e9      	bne.n	80159cc <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80159f8:	6a3b      	ldr	r3, [r7, #32]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d022      	beq.n	8015a44 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	685b      	ldr	r3, [r3, #4]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d106      	bne.n	8015a14 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8015a06:	4b21      	ldr	r3, [pc, #132]	; (8015a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015a08:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8015a0c:	4923      	ldr	r1, [pc, #140]	; (8015a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015a0e:	4821      	ldr	r0, [pc, #132]	; (8015a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015a10:	f000 fe56 	bl	80166c0 <iprintf>
          LWIP_ASSERT("sanity check",
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	685b      	ldr	r3, [r3, #4]
 8015a18:	685b      	ldr	r3, [r3, #4]
 8015a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	d106      	bne.n	8015a2e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8015a20:	4b1a      	ldr	r3, [pc, #104]	; (8015a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015a22:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015a26:	491d      	ldr	r1, [pc, #116]	; (8015a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015a28:	481a      	ldr	r0, [pc, #104]	; (8015a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015a2a:	f000 fe49 	bl	80166c0 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d006      	beq.n	8015a44 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8015a36:	4b15      	ldr	r3, [pc, #84]	; (8015a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015a38:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8015a3c:	4918      	ldr	r1, [pc, #96]	; (8015aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015a3e:	4815      	ldr	r0, [pc, #84]	; (8015a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015a40:	f000 fe3e 	bl	80166c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015a44:	6a3b      	ldr	r3, [r7, #32]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	bf14      	ite	ne
 8015a4a:	2301      	movne	r3, #1
 8015a4c:	2300      	moveq	r3, #0
 8015a4e:	b2db      	uxtb	r3, r3
 8015a50:	e018      	b.n	8015a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015a52:	2300      	movs	r3, #0
 8015a54:	e016      	b.n	8015a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8015a56:	bf00      	nop
 8015a58:	e004      	b.n	8015a64 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8015a5a:	bf00      	nop
 8015a5c:	e002      	b.n	8015a64 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8015a5e:	bf00      	nop
 8015a60:	e000      	b.n	8015a64 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8015a62:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8015a64:	68b8      	ldr	r0, [r7, #8]
 8015a66:	f7f7 fe75 	bl	800d754 <pbuf_clen>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	461a      	mov	r2, r3
 8015a6e:	4b0d      	ldr	r3, [pc, #52]	; (8015aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015a70:	881b      	ldrh	r3, [r3, #0]
 8015a72:	1a9b      	subs	r3, r3, r2
 8015a74:	b29a      	uxth	r2, r3
 8015a76:	4b0b      	ldr	r3, [pc, #44]	; (8015aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015a78:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8015a7a:	68b8      	ldr	r0, [r7, #8]
 8015a7c:	f7f7 fdd0 	bl	800d620 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	3730      	adds	r7, #48	; 0x30
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	08019ea0 	.word	0x08019ea0
 8015a90:	08019f7c 	.word	0x08019f7c
 8015a94:	08019ee8 	.word	0x08019ee8
 8015a98:	08019f9c 	.word	0x08019f9c
 8015a9c:	08019fd4 	.word	0x08019fd4
 8015aa0:	08019fe4 	.word	0x08019fe4
 8015aa4:	2000428c 	.word	0x2000428c

08015aa8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b08e      	sub	sp, #56	; 0x38
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	685b      	ldr	r3, [r3, #4]
 8015ab4:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8015ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab8:	781b      	ldrb	r3, [r3, #0]
 8015aba:	f003 030f 	and.w	r3, r3, #15
 8015abe:	009b      	lsls	r3, r3, #2
 8015ac0:	2b14      	cmp	r3, #20
 8015ac2:	f040 8131 	bne.w	8015d28 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8015ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ac8:	88db      	ldrh	r3, [r3, #6]
 8015aca:	b29b      	uxth	r3, r3
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7f6 fb93 	bl	800c1f8 <lwip_htons>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ad8:	b29b      	uxth	r3, r3
 8015ada:	00db      	lsls	r3, r3, #3
 8015adc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8015ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ae0:	885b      	ldrh	r3, [r3, #2]
 8015ae2:	b29b      	uxth	r3, r3
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	f7f6 fb87 	bl	800c1f8 <lwip_htons>
 8015aea:	4603      	mov	r3, r0
 8015aec:	461a      	mov	r2, r3
 8015aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af0:	781b      	ldrb	r3, [r3, #0]
 8015af2:	b29b      	uxth	r3, r3
 8015af4:	f003 030f 	and.w	r3, r3, #15
 8015af8:	b29b      	uxth	r3, r3
 8015afa:	009b      	lsls	r3, r3, #2
 8015afc:	b29b      	uxth	r3, r3
 8015afe:	1ad3      	subs	r3, r2, r3
 8015b00:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f7f7 fe26 	bl	800d754 <pbuf_clen>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015b0c:	4b8d      	ldr	r3, [pc, #564]	; (8015d44 <ip4_reass+0x29c>)
 8015b0e:	881b      	ldrh	r3, [r3, #0]
 8015b10:	461a      	mov	r2, r3
 8015b12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b14:	4413      	add	r3, r2
 8015b16:	2b0a      	cmp	r3, #10
 8015b18:	dd10      	ble.n	8015b3c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015b1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b1c:	4619      	mov	r1, r3
 8015b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b20:	f7ff fd8e 	bl	8015640 <ip_reass_remove_oldest_datagram>
 8015b24:	4603      	mov	r3, r0
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	f000 8100 	beq.w	8015d2c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015b2c:	4b85      	ldr	r3, [pc, #532]	; (8015d44 <ip4_reass+0x29c>)
 8015b2e:	881b      	ldrh	r3, [r3, #0]
 8015b30:	461a      	mov	r2, r3
 8015b32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b34:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015b36:	2b0a      	cmp	r3, #10
 8015b38:	f300 80f8 	bgt.w	8015d2c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015b3c:	4b82      	ldr	r3, [pc, #520]	; (8015d48 <ip4_reass+0x2a0>)
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	633b      	str	r3, [r7, #48]	; 0x30
 8015b42:	e015      	b.n	8015b70 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b46:	695a      	ldr	r2, [r3, #20]
 8015b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b4a:	68db      	ldr	r3, [r3, #12]
 8015b4c:	429a      	cmp	r2, r3
 8015b4e:	d10c      	bne.n	8015b6a <ip4_reass+0xc2>
 8015b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b52:	699a      	ldr	r2, [r3, #24]
 8015b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b56:	691b      	ldr	r3, [r3, #16]
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	d106      	bne.n	8015b6a <ip4_reass+0xc2>
 8015b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b5e:	899a      	ldrh	r2, [r3, #12]
 8015b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b62:	889b      	ldrh	r3, [r3, #4]
 8015b64:	b29b      	uxth	r3, r3
 8015b66:	429a      	cmp	r2, r3
 8015b68:	d006      	beq.n	8015b78 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8015b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d1e6      	bne.n	8015b44 <ip4_reass+0x9c>
 8015b76:	e000      	b.n	8015b7a <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015b78:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d109      	bne.n	8015b94 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015b80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b82:	4619      	mov	r1, r3
 8015b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b86:	f7ff fdbd 	bl	8015704 <ip_reass_enqueue_new_datagram>
 8015b8a:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d11c      	bne.n	8015bcc <ip4_reass+0x124>
      goto nullreturn;
 8015b92:	e0ce      	b.n	8015d32 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b96:	88db      	ldrh	r3, [r3, #6]
 8015b98:	b29b      	uxth	r3, r3
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f7f6 fb2c 	bl	800c1f8 <lwip_htons>
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d110      	bne.n	8015bcc <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bac:	89db      	ldrh	r3, [r3, #14]
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f7f6 fb22 	bl	800c1f8 <lwip_htons>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d006      	beq.n	8015bcc <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc0:	3308      	adds	r3, #8
 8015bc2:	2214      	movs	r2, #20
 8015bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	f000 fd67 	bl	801669a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bce:	88db      	ldrh	r3, [r3, #6]
 8015bd0:	b29b      	uxth	r3, r3
 8015bd2:	f003 0320 	and.w	r3, r3, #32
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	bf0c      	ite	eq
 8015bda:	2301      	moveq	r3, #1
 8015bdc:	2300      	movne	r3, #0
 8015bde:	b2db      	uxtb	r3, r3
 8015be0:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015be2:	69fb      	ldr	r3, [r7, #28]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d00e      	beq.n	8015c06 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8015be8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bec:	4413      	add	r3, r2
 8015bee:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015bf0:	8b7a      	ldrh	r2, [r7, #26]
 8015bf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	f0c0 8099 	bcc.w	8015d2c <ip4_reass+0x284>
 8015bfa:	8b7b      	ldrh	r3, [r7, #26]
 8015bfc:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015c00:	4293      	cmp	r3, r2
 8015c02:	f200 8093 	bhi.w	8015d2c <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015c06:	69fa      	ldr	r2, [r7, #28]
 8015c08:	6879      	ldr	r1, [r7, #4]
 8015c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c0c:	f7ff fde2 	bl	80157d4 <ip_reass_chain_frag_into_datagram_and_validate>
 8015c10:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015c12:	697b      	ldr	r3, [r7, #20]
 8015c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015c18:	f000 808a 	beq.w	8015d30 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015c1c:	4b49      	ldr	r3, [pc, #292]	; (8015d44 <ip4_reass+0x29c>)
 8015c1e:	881a      	ldrh	r2, [r3, #0]
 8015c20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c22:	4413      	add	r3, r2
 8015c24:	b29a      	uxth	r2, r3
 8015c26:	4b47      	ldr	r3, [pc, #284]	; (8015d44 <ip4_reass+0x29c>)
 8015c28:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015c2a:	69fb      	ldr	r3, [r7, #28]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d00d      	beq.n	8015c4c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8015c30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015c32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c34:	4413      	add	r3, r2
 8015c36:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3a:	8a7a      	ldrh	r2, [r7, #18]
 8015c3c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c40:	7f9b      	ldrb	r3, [r3, #30]
 8015c42:	f043 0301 	orr.w	r3, r3, #1
 8015c46:	b2da      	uxtb	r2, r3
 8015c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c4a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015c4c:	697b      	ldr	r3, [r7, #20]
 8015c4e:	2b01      	cmp	r3, #1
 8015c50:	d168      	bne.n	8015d24 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8015c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c54:	8b9b      	ldrh	r3, [r3, #28]
 8015c56:	3314      	adds	r3, #20
 8015c58:	b29a      	uxth	r2, r3
 8015c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c5c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8015c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c60:	685b      	ldr	r3, [r3, #4]
 8015c62:	685b      	ldr	r3, [r3, #4]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8015c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c6a:	685b      	ldr	r3, [r3, #4]
 8015c6c:	685b      	ldr	r3, [r3, #4]
 8015c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c72:	3308      	adds	r3, #8
 8015c74:	2214      	movs	r2, #20
 8015c76:	4619      	mov	r1, r3
 8015c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c7a:	f000 fd0e 	bl	801669a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8015c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c80:	8b9b      	ldrh	r3, [r3, #28]
 8015c82:	4618      	mov	r0, r3
 8015c84:	f7f6 fab8 	bl	800c1f8 <lwip_htons>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c8e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c92:	2200      	movs	r2, #0
 8015c94:	719a      	strb	r2, [r3, #6]
 8015c96:	2200      	movs	r2, #0
 8015c98:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c9c:	2200      	movs	r2, #0
 8015c9e:	729a      	strb	r2, [r3, #10]
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015caa:	e00e      	b.n	8015cca <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8015cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cae:	685b      	ldr	r3, [r3, #4]
 8015cb0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8015cb2:	f06f 0113 	mvn.w	r1, #19
 8015cb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015cb8:	f7f7 fc8e 	bl	800d5d8 <pbuf_header>
      pbuf_cat(p, r);
 8015cbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015cbe:	6878      	ldr	r0, [r7, #4]
 8015cc0:	f7f7 fd88 	bl	800d7d4 <pbuf_cat>
      r = iprh->next_pbuf;
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d1ed      	bne.n	8015cac <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015cd0:	4b1d      	ldr	r3, [pc, #116]	; (8015d48 <ip4_reass+0x2a0>)
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cd6:	429a      	cmp	r2, r3
 8015cd8:	d102      	bne.n	8015ce0 <ip4_reass+0x238>
      ipr_prev = NULL;
 8015cda:	2300      	movs	r3, #0
 8015cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cde:	e010      	b.n	8015d02 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015ce0:	4b19      	ldr	r3, [pc, #100]	; (8015d48 <ip4_reass+0x2a0>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ce6:	e007      	b.n	8015cf8 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8015ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cee:	429a      	cmp	r2, r3
 8015cf0:	d006      	beq.n	8015d00 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d1f4      	bne.n	8015ce8 <ip4_reass+0x240>
 8015cfe:	e000      	b.n	8015d02 <ip4_reass+0x25a>
          break;
 8015d00:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015d02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d06:	f7ff fd37 	bl	8015778 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	f7f7 fd22 	bl	800d754 <pbuf_clen>
 8015d10:	4603      	mov	r3, r0
 8015d12:	461a      	mov	r2, r3
 8015d14:	4b0b      	ldr	r3, [pc, #44]	; (8015d44 <ip4_reass+0x29c>)
 8015d16:	881b      	ldrh	r3, [r3, #0]
 8015d18:	1a9b      	subs	r3, r3, r2
 8015d1a:	b29a      	uxth	r2, r3
 8015d1c:	4b09      	ldr	r3, [pc, #36]	; (8015d44 <ip4_reass+0x29c>)
 8015d1e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	e00a      	b.n	8015d3a <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015d24:	2300      	movs	r3, #0
 8015d26:	e008      	b.n	8015d3a <ip4_reass+0x292>
    goto nullreturn;
 8015d28:	bf00      	nop
 8015d2a:	e002      	b.n	8015d32 <ip4_reass+0x28a>

nullreturn:
 8015d2c:	bf00      	nop
 8015d2e:	e000      	b.n	8015d32 <ip4_reass+0x28a>
    goto nullreturn;
 8015d30:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015d32:	6878      	ldr	r0, [r7, #4]
 8015d34:	f7f7 fc74 	bl	800d620 <pbuf_free>
  return NULL;
 8015d38:	2300      	movs	r3, #0
}
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	3738      	adds	r7, #56	; 0x38
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	bd80      	pop	{r7, pc}
 8015d42:	bf00      	nop
 8015d44:	2000428c 	.word	0x2000428c
 8015d48:	20004288 	.word	0x20004288

08015d4c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8015d50:	2005      	movs	r0, #5
 8015d52:	f7f6 fe3f 	bl	800c9d4 <memp_malloc>
 8015d56:	4603      	mov	r3, r0
}
 8015d58:	4618      	mov	r0, r3
 8015d5a:	bd80      	pop	{r7, pc}

08015d5c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d106      	bne.n	8015d78 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015d6a:	4b07      	ldr	r3, [pc, #28]	; (8015d88 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015d6c:	f240 22ae 	movw	r2, #686	; 0x2ae
 8015d70:	4906      	ldr	r1, [pc, #24]	; (8015d8c <ip_frag_free_pbuf_custom_ref+0x30>)
 8015d72:	4807      	ldr	r0, [pc, #28]	; (8015d90 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015d74:	f000 fca4 	bl	80166c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015d78:	6879      	ldr	r1, [r7, #4]
 8015d7a:	2005      	movs	r0, #5
 8015d7c:	f7f6 fe7c 	bl	800ca78 <memp_free>
}
 8015d80:	bf00      	nop
 8015d82:	3708      	adds	r7, #8
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}
 8015d88:	08019ea0 	.word	0x08019ea0
 8015d8c:	0801a008 	.word	0x0801a008
 8015d90:	08019ee8 	.word	0x08019ee8

08015d94 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b084      	sub	sp, #16
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d106      	bne.n	8015db4 <ipfrag_free_pbuf_custom+0x20>
 8015da6:	4b11      	ldr	r3, [pc, #68]	; (8015dec <ipfrag_free_pbuf_custom+0x58>)
 8015da8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8015dac:	4910      	ldr	r1, [pc, #64]	; (8015df0 <ipfrag_free_pbuf_custom+0x5c>)
 8015dae:	4811      	ldr	r0, [pc, #68]	; (8015df4 <ipfrag_free_pbuf_custom+0x60>)
 8015db0:	f000 fc86 	bl	80166c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8015db4:	68fa      	ldr	r2, [r7, #12]
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	429a      	cmp	r2, r3
 8015dba:	d006      	beq.n	8015dca <ipfrag_free_pbuf_custom+0x36>
 8015dbc:	4b0b      	ldr	r3, [pc, #44]	; (8015dec <ipfrag_free_pbuf_custom+0x58>)
 8015dbe:	f240 22b9 	movw	r2, #697	; 0x2b9
 8015dc2:	490d      	ldr	r1, [pc, #52]	; (8015df8 <ipfrag_free_pbuf_custom+0x64>)
 8015dc4:	480b      	ldr	r0, [pc, #44]	; (8015df4 <ipfrag_free_pbuf_custom+0x60>)
 8015dc6:	f000 fc7b 	bl	80166c0 <iprintf>
  if (pcr->original != NULL) {
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	695b      	ldr	r3, [r3, #20]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d004      	beq.n	8015ddc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	695b      	ldr	r3, [r3, #20]
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f7f7 fc22 	bl	800d620 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015ddc:	68f8      	ldr	r0, [r7, #12]
 8015dde:	f7ff ffbd 	bl	8015d5c <ip_frag_free_pbuf_custom_ref>
}
 8015de2:	bf00      	nop
 8015de4:	3710      	adds	r7, #16
 8015de6:	46bd      	mov	sp, r7
 8015de8:	bd80      	pop	{r7, pc}
 8015dea:	bf00      	nop
 8015dec:	08019ea0 	.word	0x08019ea0
 8015df0:	0801a014 	.word	0x0801a014
 8015df4:	08019ee8 	.word	0x08019ee8
 8015df8:	0801a020 	.word	0x0801a020

08015dfc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b092      	sub	sp, #72	; 0x48
 8015e00:	af02      	add	r7, sp, #8
 8015e02:	60f8      	str	r0, [r7, #12]
 8015e04:	60b9      	str	r1, [r7, #8]
 8015e06:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015e08:	2300      	movs	r3, #0
 8015e0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8015e0c:	68bb      	ldr	r3, [r7, #8]
 8015e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e10:	3b14      	subs	r3, #20
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	da00      	bge.n	8015e18 <ip4_frag+0x1c>
 8015e16:	3307      	adds	r3, #7
 8015e18:	10db      	asrs	r3, r3, #3
 8015e1a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015e1c:	2314      	movs	r3, #20
 8015e1e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	685b      	ldr	r3, [r3, #4]
 8015e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8015e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e28:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8015e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	f003 030f 	and.w	r3, r3, #15
 8015e32:	009b      	lsls	r3, r3, #2
 8015e34:	2b14      	cmp	r3, #20
 8015e36:	d009      	beq.n	8015e4c <ip4_frag+0x50>
 8015e38:	4b79      	ldr	r3, [pc, #484]	; (8016020 <ip4_frag+0x224>)
 8015e3a:	f240 22e1 	movw	r2, #737	; 0x2e1
 8015e3e:	4979      	ldr	r1, [pc, #484]	; (8016024 <ip4_frag+0x228>)
 8015e40:	4879      	ldr	r0, [pc, #484]	; (8016028 <ip4_frag+0x22c>)
 8015e42:	f000 fc3d 	bl	80166c0 <iprintf>
 8015e46:	f06f 0305 	mvn.w	r3, #5
 8015e4a:	e0e5      	b.n	8016018 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e4e:	88db      	ldrh	r3, [r3, #6]
 8015e50:	b29b      	uxth	r3, r3
 8015e52:	4618      	mov	r0, r3
 8015e54:	f7f6 f9d0 	bl	800c1f8 <lwip_htons>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8015e5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015e5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015e62:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8015e64:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d009      	beq.n	8015e82 <ip4_frag+0x86>
 8015e6e:	4b6c      	ldr	r3, [pc, #432]	; (8016020 <ip4_frag+0x224>)
 8015e70:	f240 22e6 	movw	r2, #742	; 0x2e6
 8015e74:	496d      	ldr	r1, [pc, #436]	; (801602c <ip4_frag+0x230>)
 8015e76:	486c      	ldr	r0, [pc, #432]	; (8016028 <ip4_frag+0x22c>)
 8015e78:	f000 fc22 	bl	80166c0 <iprintf>
 8015e7c:	f06f 0305 	mvn.w	r3, #5
 8015e80:	e0ca      	b.n	8016018 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	891b      	ldrh	r3, [r3, #8]
 8015e86:	3b14      	subs	r3, #20
 8015e88:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8015e8a:	e0bc      	b.n	8016006 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8015e8c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8015e8e:	00da      	lsls	r2, r3, #3
 8015e90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e92:	4293      	cmp	r3, r2
 8015e94:	bfa8      	it	ge
 8015e96:	4613      	movge	r3, r2
 8015e98:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	2114      	movs	r1, #20
 8015e9e:	2002      	movs	r0, #2
 8015ea0:	f7f7 f84c 	bl	800cf3c <pbuf_alloc>
 8015ea4:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8015ea6:	6a3b      	ldr	r3, [r7, #32]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	f000 80b2 	beq.w	8016012 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	895b      	ldrh	r3, [r3, #10]
 8015eb2:	2b13      	cmp	r3, #19
 8015eb4:	d806      	bhi.n	8015ec4 <ip4_frag+0xc8>
 8015eb6:	4b5a      	ldr	r3, [pc, #360]	; (8016020 <ip4_frag+0x224>)
 8015eb8:	f240 3209 	movw	r2, #777	; 0x309
 8015ebc:	495c      	ldr	r1, [pc, #368]	; (8016030 <ip4_frag+0x234>)
 8015ebe:	485a      	ldr	r0, [pc, #360]	; (8016028 <ip4_frag+0x22c>)
 8015ec0:	f000 fbfe 	bl	80166c0 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015ec4:	6a3b      	ldr	r3, [r7, #32]
 8015ec6:	685b      	ldr	r3, [r3, #4]
 8015ec8:	2214      	movs	r2, #20
 8015eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f000 fbe4 	bl	801669a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015ed2:	6a3b      	ldr	r3, [r7, #32]
 8015ed4:	685b      	ldr	r3, [r3, #4]
 8015ed6:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8015ed8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015eda:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8015edc:	e04f      	b.n	8015f7e <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	895a      	ldrh	r2, [r3, #10]
 8015ee2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015ee4:	1ad3      	subs	r3, r2, r3
 8015ee6:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015ee8:	8b7a      	ldrh	r2, [r7, #26]
 8015eea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015eec:	4293      	cmp	r3, r2
 8015eee:	bf28      	it	cs
 8015ef0:	4613      	movcs	r3, r2
 8015ef2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015ef4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d105      	bne.n	8015f06 <ip4_frag+0x10a>
        poff = 0;
 8015efa:	2300      	movs	r3, #0
 8015efc:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	60fb      	str	r3, [r7, #12]
        continue;
 8015f04:	e03b      	b.n	8015f7e <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015f06:	f7ff ff21 	bl	8015d4c <ip_frag_alloc_pbuf_custom_ref>
 8015f0a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8015f0c:	697b      	ldr	r3, [r7, #20]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d103      	bne.n	8015f1a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8015f12:	6a38      	ldr	r0, [r7, #32]
 8015f14:	f7f7 fb84 	bl	800d620 <pbuf_free>
        goto memerr;
 8015f18:	e07c      	b.n	8016014 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015f1a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015f20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015f22:	4413      	add	r3, r2
 8015f24:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8015f26:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015f28:	9201      	str	r2, [sp, #4]
 8015f2a:	9300      	str	r3, [sp, #0]
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	2202      	movs	r2, #2
 8015f30:	2004      	movs	r0, #4
 8015f32:	f7f7 f997 	bl	800d264 <pbuf_alloced_custom>
 8015f36:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8015f38:	693b      	ldr	r3, [r7, #16]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d106      	bne.n	8015f4c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015f3e:	6978      	ldr	r0, [r7, #20]
 8015f40:	f7ff ff0c 	bl	8015d5c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015f44:	6a38      	ldr	r0, [r7, #32]
 8015f46:	f7f7 fb6b 	bl	800d620 <pbuf_free>
        goto memerr;
 8015f4a:	e063      	b.n	8016014 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8015f4c:	68f8      	ldr	r0, [r7, #12]
 8015f4e:	f7f7 fc19 	bl	800d784 <pbuf_ref>
      pcr->original = p;
 8015f52:	697b      	ldr	r3, [r7, #20]
 8015f54:	68fa      	ldr	r2, [r7, #12]
 8015f56:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015f58:	697b      	ldr	r3, [r7, #20]
 8015f5a:	4a36      	ldr	r2, [pc, #216]	; (8016034 <ip4_frag+0x238>)
 8015f5c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015f5e:	6939      	ldr	r1, [r7, #16]
 8015f60:	6a38      	ldr	r0, [r7, #32]
 8015f62:	f7f7 fc37 	bl	800d7d4 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8015f66:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8015f68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015f6a:	1ad3      	subs	r3, r2, r3
 8015f6c:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8015f6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d004      	beq.n	8015f7e <ip4_frag+0x182>
        poff = 0;
 8015f74:	2300      	movs	r3, #0
 8015f76:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015f7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d1ac      	bne.n	8015ede <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8015f84:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015f86:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015f88:	4413      	add	r3, r2
 8015f8a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015f8c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015f8e:	68bb      	ldr	r3, [r7, #8]
 8015f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f92:	3b14      	subs	r3, #20
 8015f94:	429a      	cmp	r2, r3
 8015f96:	bfd4      	ite	le
 8015f98:	2301      	movle	r3, #1
 8015f9a:	2300      	movgt	r3, #0
 8015f9c:	b2db      	uxtb	r3, r3
 8015f9e:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015fa0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015fa2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015fa6:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8015fa8:	69fb      	ldr	r3, [r7, #28]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d103      	bne.n	8015fb6 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8015fae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015fb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015fb4:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015fb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f7f6 f91d 	bl	800c1f8 <lwip_htons>
 8015fbe:	4603      	mov	r3, r0
 8015fc0:	461a      	mov	r2, r3
 8015fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fc4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8015fc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015fc8:	3314      	adds	r3, #20
 8015fca:	b29b      	uxth	r3, r3
 8015fcc:	4618      	mov	r0, r3
 8015fce:	f7f6 f913 	bl	800c1f8 <lwip_htons>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	461a      	mov	r2, r3
 8015fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fd8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fdc:	2200      	movs	r2, #0
 8015fde:	729a      	strb	r2, [r3, #10]
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015fe4:	68bb      	ldr	r3, [r7, #8]
 8015fe6:	695b      	ldr	r3, [r3, #20]
 8015fe8:	687a      	ldr	r2, [r7, #4]
 8015fea:	6a39      	ldr	r1, [r7, #32]
 8015fec:	68b8      	ldr	r0, [r7, #8]
 8015fee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015ff0:	6a38      	ldr	r0, [r7, #32]
 8015ff2:	f7f7 fb15 	bl	800d620 <pbuf_free>
    left -= fragsize;
 8015ff6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015ff8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015ffa:	1ad3      	subs	r3, r2, r3
 8015ffc:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8015ffe:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016000:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016002:	4413      	add	r3, r2
 8016004:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8016006:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016008:	2b00      	cmp	r3, #0
 801600a:	f47f af3f 	bne.w	8015e8c <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801600e:	2300      	movs	r3, #0
 8016010:	e002      	b.n	8016018 <ip4_frag+0x21c>
      goto memerr;
 8016012:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016018:	4618      	mov	r0, r3
 801601a:	3740      	adds	r7, #64	; 0x40
 801601c:	46bd      	mov	sp, r7
 801601e:	bd80      	pop	{r7, pc}
 8016020:	08019ea0 	.word	0x08019ea0
 8016024:	0801a02c 	.word	0x0801a02c
 8016028:	08019ee8 	.word	0x08019ee8
 801602c:	0801a054 	.word	0x0801a054
 8016030:	0801a070 	.word	0x0801a070
 8016034:	08015d95 	.word	0x08015d95

08016038 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b086      	sub	sp, #24
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
 8016040:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8016042:	230e      	movs	r3, #14
 8016044:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	895b      	ldrh	r3, [r3, #10]
 801604a:	2b0e      	cmp	r3, #14
 801604c:	d977      	bls.n	801613e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	685b      	ldr	r3, [r3, #4]
 8016052:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	7b1a      	ldrb	r2, [r3, #12]
 8016058:	7b5b      	ldrb	r3, [r3, #13]
 801605a:	021b      	lsls	r3, r3, #8
 801605c:	4313      	orrs	r3, r2
 801605e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	781b      	ldrb	r3, [r3, #0]
 8016064:	f003 0301 	and.w	r3, r3, #1
 8016068:	2b00      	cmp	r3, #0
 801606a:	d023      	beq.n	80160b4 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801606c:	693b      	ldr	r3, [r7, #16]
 801606e:	781b      	ldrb	r3, [r3, #0]
 8016070:	2b01      	cmp	r3, #1
 8016072:	d10f      	bne.n	8016094 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016074:	693b      	ldr	r3, [r7, #16]
 8016076:	785b      	ldrb	r3, [r3, #1]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d11b      	bne.n	80160b4 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801607c:	693b      	ldr	r3, [r7, #16]
 801607e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016080:	2b5e      	cmp	r3, #94	; 0x5e
 8016082:	d117      	bne.n	80160b4 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	7b5b      	ldrb	r3, [r3, #13]
 8016088:	f043 0310 	orr.w	r3, r3, #16
 801608c:	b2da      	uxtb	r2, r3
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	735a      	strb	r2, [r3, #13]
 8016092:	e00f      	b.n	80160b4 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016094:	693b      	ldr	r3, [r7, #16]
 8016096:	2206      	movs	r2, #6
 8016098:	4930      	ldr	r1, [pc, #192]	; (801615c <ethernet_input+0x124>)
 801609a:	4618      	mov	r0, r3
 801609c:	f000 faee 	bl	801667c <memcmp>
 80160a0:	4603      	mov	r3, r0
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d106      	bne.n	80160b4 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	7b5b      	ldrb	r3, [r3, #13]
 80160aa:	f043 0308 	orr.w	r3, r3, #8
 80160ae:	b2da      	uxtb	r2, r3
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80160b4:	89fb      	ldrh	r3, [r7, #14]
 80160b6:	2b08      	cmp	r3, #8
 80160b8:	d003      	beq.n	80160c2 <ethernet_input+0x8a>
 80160ba:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80160be:	d01e      	beq.n	80160fe <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80160c0:	e044      	b.n	801614c <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80160c2:	683b      	ldr	r3, [r7, #0]
 80160c4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80160c8:	f003 0308 	and.w	r3, r3, #8
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d038      	beq.n	8016142 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	895b      	ldrh	r3, [r3, #10]
 80160d4:	461a      	mov	r2, r3
 80160d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80160da:	429a      	cmp	r2, r3
 80160dc:	db33      	blt.n	8016146 <ethernet_input+0x10e>
 80160de:	8afb      	ldrh	r3, [r7, #22]
 80160e0:	425b      	negs	r3, r3
 80160e2:	b29b      	uxth	r3, r3
 80160e4:	b21b      	sxth	r3, r3
 80160e6:	4619      	mov	r1, r3
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f7f7 fa75 	bl	800d5d8 <pbuf_header>
 80160ee:	4603      	mov	r3, r0
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d128      	bne.n	8016146 <ethernet_input+0x10e>
        ip4_input(p, netif);
 80160f4:	6839      	ldr	r1, [r7, #0]
 80160f6:	6878      	ldr	r0, [r7, #4]
 80160f8:	f7fe feee 	bl	8014ed8 <ip4_input>
      break;
 80160fc:	e01d      	b.n	801613a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80160fe:	683b      	ldr	r3, [r7, #0]
 8016100:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8016104:	f003 0308 	and.w	r3, r3, #8
 8016108:	2b00      	cmp	r3, #0
 801610a:	d01e      	beq.n	801614a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	895b      	ldrh	r3, [r3, #10]
 8016110:	461a      	mov	r2, r3
 8016112:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016116:	429a      	cmp	r2, r3
 8016118:	db15      	blt.n	8016146 <ethernet_input+0x10e>
 801611a:	8afb      	ldrh	r3, [r7, #22]
 801611c:	425b      	negs	r3, r3
 801611e:	b29b      	uxth	r3, r3
 8016120:	b21b      	sxth	r3, r3
 8016122:	4619      	mov	r1, r3
 8016124:	6878      	ldr	r0, [r7, #4]
 8016126:	f7f7 fa57 	bl	800d5d8 <pbuf_header>
 801612a:	4603      	mov	r3, r0
 801612c:	2b00      	cmp	r3, #0
 801612e:	d10a      	bne.n	8016146 <ethernet_input+0x10e>
        etharp_input(p, netif);
 8016130:	6839      	ldr	r1, [r7, #0]
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	f7fe f8bc 	bl	80142b0 <etharp_input>
      break;
 8016138:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801613a:	2300      	movs	r3, #0
 801613c:	e00a      	b.n	8016154 <ethernet_input+0x11c>
    goto free_and_return;
 801613e:	bf00      	nop
 8016140:	e004      	b.n	801614c <ethernet_input+0x114>
        goto free_and_return;
 8016142:	bf00      	nop
 8016144:	e002      	b.n	801614c <ethernet_input+0x114>

free_and_return:
 8016146:	bf00      	nop
 8016148:	e000      	b.n	801614c <ethernet_input+0x114>
        goto free_and_return;
 801614a:	bf00      	nop
  pbuf_free(p);
 801614c:	6878      	ldr	r0, [r7, #4]
 801614e:	f7f7 fa67 	bl	800d620 <pbuf_free>
  return ERR_OK;
 8016152:	2300      	movs	r3, #0
}
 8016154:	4618      	mov	r0, r3
 8016156:	3718      	adds	r7, #24
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}
 801615c:	0801a294 	.word	0x0801a294

08016160 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b086      	sub	sp, #24
 8016164:	af00      	add	r7, sp, #0
 8016166:	60f8      	str	r0, [r7, #12]
 8016168:	60b9      	str	r1, [r7, #8]
 801616a:	607a      	str	r2, [r7, #4]
 801616c:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801616e:	8c3b      	ldrh	r3, [r7, #32]
 8016170:	4618      	mov	r0, r3
 8016172:	f7f6 f841 	bl	800c1f8 <lwip_htons>
 8016176:	4603      	mov	r3, r0
 8016178:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801617a:	210e      	movs	r1, #14
 801617c:	68b8      	ldr	r0, [r7, #8]
 801617e:	f7f7 fa2b 	bl	800d5d8 <pbuf_header>
 8016182:	4603      	mov	r3, r0
 8016184:	2b00      	cmp	r3, #0
 8016186:	d125      	bne.n	80161d4 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	685b      	ldr	r3, [r3, #4]
 801618c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	8afa      	ldrh	r2, [r7, #22]
 8016192:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8016194:	693b      	ldr	r3, [r7, #16]
 8016196:	2206      	movs	r2, #6
 8016198:	6839      	ldr	r1, [r7, #0]
 801619a:	4618      	mov	r0, r3
 801619c:	f000 fa7d 	bl	801669a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80161a0:	693b      	ldr	r3, [r7, #16]
 80161a2:	3306      	adds	r3, #6
 80161a4:	2206      	movs	r2, #6
 80161a6:	6879      	ldr	r1, [r7, #4]
 80161a8:	4618      	mov	r0, r3
 80161aa:	f000 fa76 	bl	801669a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80161b4:	2b06      	cmp	r3, #6
 80161b6:	d006      	beq.n	80161c6 <ethernet_output+0x66>
 80161b8:	4b0a      	ldr	r3, [pc, #40]	; (80161e4 <ethernet_output+0x84>)
 80161ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80161be:	490a      	ldr	r1, [pc, #40]	; (80161e8 <ethernet_output+0x88>)
 80161c0:	480a      	ldr	r0, [pc, #40]	; (80161ec <ethernet_output+0x8c>)
 80161c2:	f000 fa7d 	bl	80166c0 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	699b      	ldr	r3, [r3, #24]
 80161ca:	68b9      	ldr	r1, [r7, #8]
 80161cc:	68f8      	ldr	r0, [r7, #12]
 80161ce:	4798      	blx	r3
 80161d0:	4603      	mov	r3, r0
 80161d2:	e002      	b.n	80161da <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80161d4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80161d6:	f06f 0301 	mvn.w	r3, #1
}
 80161da:	4618      	mov	r0, r3
 80161dc:	3718      	adds	r7, #24
 80161de:	46bd      	mov	sp, r7
 80161e0:	bd80      	pop	{r7, pc}
 80161e2:	bf00      	nop
 80161e4:	0801a090 	.word	0x0801a090
 80161e8:	0801a0c8 	.word	0x0801a0c8
 80161ec:	0801a0fc 	.word	0x0801a0fc

080161f0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b086      	sub	sp, #24
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80161fa:	683b      	ldr	r3, [r7, #0]
 80161fc:	60bb      	str	r3, [r7, #8]
 80161fe:	2304      	movs	r3, #4
 8016200:	60fb      	str	r3, [r7, #12]
 8016202:	2300      	movs	r3, #0
 8016204:	613b      	str	r3, [r7, #16]
 8016206:	2300      	movs	r3, #0
 8016208:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801620a:	f107 0308 	add.w	r3, r7, #8
 801620e:	2100      	movs	r1, #0
 8016210:	4618      	mov	r0, r3
 8016212:	f7ee ff54 	bl	80050be <osMessageCreate>
 8016216:	4602      	mov	r2, r0
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d102      	bne.n	801622a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016228:	e000      	b.n	801622c <sys_mbox_new+0x3c>

  return ERR_OK;
 801622a:	2300      	movs	r3, #0
}
 801622c:	4618      	mov	r0, r3
 801622e:	3718      	adds	r7, #24
 8016230:	46bd      	mov	sp, r7
 8016232:	bd80      	pop	{r7, pc}

08016234 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b082      	sub	sp, #8
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	4618      	mov	r0, r3
 8016242:	f7ef f819 	bl	8005278 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	4618      	mov	r0, r3
 801624c:	f7ef f82a 	bl	80052a4 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016250:	bf00      	nop
 8016252:	3708      	adds	r7, #8
 8016254:	46bd      	mov	sp, r7
 8016256:	bd80      	pop	{r7, pc}

08016258 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b082      	sub	sp, #8
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
 8016260:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8016262:	bf00      	nop
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	6839      	ldr	r1, [r7, #0]
 801626a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801626e:	4618      	mov	r0, r3
 8016270:	f7ee ff4e 	bl	8005110 <osMessagePut>
 8016274:	4603      	mov	r3, r0
 8016276:	2b00      	cmp	r3, #0
 8016278:	d1f4      	bne.n	8016264 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801627a:	bf00      	nop
 801627c:	3708      	adds	r7, #8
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}

08016282 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016282:	b580      	push	{r7, lr}
 8016284:	b084      	sub	sp, #16
 8016286:	af00      	add	r7, sp, #0
 8016288:	6078      	str	r0, [r7, #4]
 801628a:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	6839      	ldr	r1, [r7, #0]
 8016292:	2200      	movs	r2, #0
 8016294:	4618      	mov	r0, r3
 8016296:	f7ee ff3b 	bl	8005110 <osMessagePut>
 801629a:	4603      	mov	r3, r0
 801629c:	2b00      	cmp	r3, #0
 801629e:	d102      	bne.n	80162a6 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80162a0:	2300      	movs	r3, #0
 80162a2:	73fb      	strb	r3, [r7, #15]
 80162a4:	e001      	b.n	80162aa <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80162a6:	23ff      	movs	r3, #255	; 0xff
 80162a8:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80162aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80162ae:	4618      	mov	r0, r3
 80162b0:	3710      	adds	r7, #16
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}

080162b6 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80162b6:	b580      	push	{r7, lr}
 80162b8:	b08c      	sub	sp, #48	; 0x30
 80162ba:	af00      	add	r7, sp, #0
 80162bc:	61f8      	str	r0, [r7, #28]
 80162be:	61b9      	str	r1, [r7, #24]
 80162c0:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80162c2:	f7ee fd24 	bl	8004d0e <osKernelSysTick>
 80162c6:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80162c8:	697b      	ldr	r3, [r7, #20]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d017      	beq.n	80162fe <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80162ce:	69fb      	ldr	r3, [r7, #28]
 80162d0:	6819      	ldr	r1, [r3, #0]
 80162d2:	f107 0320 	add.w	r3, r7, #32
 80162d6:	697a      	ldr	r2, [r7, #20]
 80162d8:	4618      	mov	r0, r3
 80162da:	f7ee ff59 	bl	8005190 <osMessageGet>

    if(event.status == osEventMessage)
 80162de:	6a3b      	ldr	r3, [r7, #32]
 80162e0:	2b10      	cmp	r3, #16
 80162e2:	d109      	bne.n	80162f8 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80162e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162e6:	461a      	mov	r2, r3
 80162e8:	69bb      	ldr	r3, [r7, #24]
 80162ea:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80162ec:	f7ee fd0f 	bl	8004d0e <osKernelSysTick>
 80162f0:	4602      	mov	r2, r0
 80162f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f4:	1ad3      	subs	r3, r2, r3
 80162f6:	e019      	b.n	801632c <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80162f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162fc:	e016      	b.n	801632c <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80162fe:	69fb      	ldr	r3, [r7, #28]
 8016300:	6819      	ldr	r1, [r3, #0]
 8016302:	463b      	mov	r3, r7
 8016304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016308:	4618      	mov	r0, r3
 801630a:	f7ee ff41 	bl	8005190 <osMessageGet>
 801630e:	f107 0320 	add.w	r3, r7, #32
 8016312:	463a      	mov	r2, r7
 8016314:	ca07      	ldmia	r2, {r0, r1, r2}
 8016316:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801631c:	461a      	mov	r2, r3
 801631e:	69bb      	ldr	r3, [r7, #24]
 8016320:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016322:	f7ee fcf4 	bl	8004d0e <osKernelSysTick>
 8016326:	4602      	mov	r2, r0
 8016328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801632a:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801632c:	4618      	mov	r0, r3
 801632e:	3730      	adds	r7, #48	; 0x30
 8016330:	46bd      	mov	sp, r7
 8016332:	bd80      	pop	{r7, pc}

08016334 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016334:	b580      	push	{r7, lr}
 8016336:	b086      	sub	sp, #24
 8016338:	af00      	add	r7, sp, #0
 801633a:	6078      	str	r0, [r7, #4]
 801633c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	6819      	ldr	r1, [r3, #0]
 8016342:	f107 030c 	add.w	r3, r7, #12
 8016346:	2200      	movs	r2, #0
 8016348:	4618      	mov	r0, r3
 801634a:	f7ee ff21 	bl	8005190 <osMessageGet>

  if(event.status == osEventMessage)
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	2b10      	cmp	r3, #16
 8016352:	d105      	bne.n	8016360 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016354:	693b      	ldr	r3, [r7, #16]
 8016356:	461a      	mov	r2, r3
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801635c:	2300      	movs	r3, #0
 801635e:	e001      	b.n	8016364 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8016364:	4618      	mov	r0, r3
 8016366:	3718      	adds	r7, #24
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}

0801636c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801636c:	b480      	push	{r7}
 801636e:	b083      	sub	sp, #12
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d101      	bne.n	8016380 <sys_mbox_valid+0x14>
    return 0;
 801637c:	2300      	movs	r3, #0
 801637e:	e000      	b.n	8016382 <sys_mbox_valid+0x16>
  else
    return 1;
 8016380:	2301      	movs	r3, #1
}
 8016382:	4618      	mov	r0, r3
 8016384:	370c      	adds	r7, #12
 8016386:	46bd      	mov	sp, r7
 8016388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638c:	4770      	bx	lr

0801638e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801638e:	b480      	push	{r7}
 8016390:	b083      	sub	sp, #12
 8016392:	af00      	add	r7, sp, #0
 8016394:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	2200      	movs	r2, #0
 801639a:	601a      	str	r2, [r3, #0]
}
 801639c:	bf00      	nop
 801639e:	370c      	adds	r7, #12
 80163a0:	46bd      	mov	sp, r7
 80163a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a6:	4770      	bx	lr

080163a8 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b084      	sub	sp, #16
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
 80163b0:	460b      	mov	r3, r1
 80163b2:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80163b4:	2300      	movs	r3, #0
 80163b6:	60bb      	str	r3, [r7, #8]
 80163b8:	2300      	movs	r3, #0
 80163ba:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80163bc:	f107 0308 	add.w	r3, r7, #8
 80163c0:	2101      	movs	r1, #1
 80163c2:	4618      	mov	r0, r3
 80163c4:	f7ee fdb0 	bl	8004f28 <osSemaphoreCreate>
 80163c8:	4602      	mov	r2, r0
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d102      	bne.n	80163dc <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80163d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163da:	e009      	b.n	80163f0 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80163dc:	78fb      	ldrb	r3, [r7, #3]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d105      	bne.n	80163ee <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	2100      	movs	r1, #0
 80163e8:	4618      	mov	r0, r3
 80163ea:	f7ee fdd1 	bl	8004f90 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80163ee:	2300      	movs	r3, #0
}
 80163f0:	4618      	mov	r0, r3
 80163f2:	3710      	adds	r7, #16
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bd80      	pop	{r7, pc}

080163f8 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b084      	sub	sp, #16
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
 8016400:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016402:	f7ee fc84 	bl	8004d0e <osKernelSysTick>
 8016406:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016408:	683b      	ldr	r3, [r7, #0]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d011      	beq.n	8016432 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	6839      	ldr	r1, [r7, #0]
 8016414:	4618      	mov	r0, r3
 8016416:	f7ee fdbb 	bl	8004f90 <osSemaphoreWait>
 801641a:	4603      	mov	r3, r0
 801641c:	2b00      	cmp	r3, #0
 801641e:	d105      	bne.n	801642c <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8016420:	f7ee fc75 	bl	8004d0e <osKernelSysTick>
 8016424:	4602      	mov	r2, r0
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	1ad3      	subs	r3, r2, r3
 801642a:	e012      	b.n	8016452 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801642c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016430:	e00f      	b.n	8016452 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8016432:	bf00      	nop
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801643c:	4618      	mov	r0, r3
 801643e:	f7ee fda7 	bl	8004f90 <osSemaphoreWait>
 8016442:	4603      	mov	r3, r0
 8016444:	2b00      	cmp	r3, #0
 8016446:	d1f5      	bne.n	8016434 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016448:	f7ee fc61 	bl	8004d0e <osKernelSysTick>
 801644c:	4602      	mov	r2, r0
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016452:	4618      	mov	r0, r3
 8016454:	3710      	adds	r7, #16
 8016456:	46bd      	mov	sp, r7
 8016458:	bd80      	pop	{r7, pc}

0801645a <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801645a:	b580      	push	{r7, lr}
 801645c:	b082      	sub	sp, #8
 801645e:	af00      	add	r7, sp, #0
 8016460:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	4618      	mov	r0, r3
 8016468:	f7ee fde0 	bl	800502c <osSemaphoreRelease>
}
 801646c:	bf00      	nop
 801646e:	3708      	adds	r7, #8
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}

08016474 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b082      	sub	sp, #8
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	4618      	mov	r0, r3
 8016482:	f7ee fe09 	bl	8005098 <osSemaphoreDelete>
}
 8016486:	bf00      	nop
 8016488:	3708      	adds	r7, #8
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}

0801648e <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801648e:	b480      	push	{r7}
 8016490:	b083      	sub	sp, #12
 8016492:	af00      	add	r7, sp, #0
 8016494:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d101      	bne.n	80164a2 <sys_sem_valid+0x14>
    return 0;
 801649e:	2300      	movs	r3, #0
 80164a0:	e000      	b.n	80164a4 <sys_sem_valid+0x16>
  else
    return 1;
 80164a2:	2301      	movs	r3, #1
}
 80164a4:	4618      	mov	r0, r3
 80164a6:	370c      	adds	r7, #12
 80164a8:	46bd      	mov	sp, r7
 80164aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ae:	4770      	bx	lr

080164b0 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80164b0:	b480      	push	{r7}
 80164b2:	b083      	sub	sp, #12
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	2200      	movs	r2, #0
 80164bc:	601a      	str	r2, [r3, #0]
}
 80164be:	bf00      	nop
 80164c0:	370c      	adds	r7, #12
 80164c2:	46bd      	mov	sp, r7
 80164c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c8:	4770      	bx	lr
	...

080164cc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80164d0:	4803      	ldr	r0, [pc, #12]	; (80164e0 <sys_init+0x14>)
 80164d2:	f7ee fc8c 	bl	8004dee <osMutexCreate>
 80164d6:	4602      	mov	r2, r0
 80164d8:	4b02      	ldr	r3, [pc, #8]	; (80164e4 <sys_init+0x18>)
 80164da:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80164dc:	bf00      	nop
 80164de:	bd80      	pop	{r7, pc}
 80164e0:	0801a2a4 	.word	0x0801a2a4
 80164e4:	2000dc74 	.word	0x2000dc74

080164e8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b084      	sub	sp, #16
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80164f0:	2300      	movs	r3, #0
 80164f2:	60bb      	str	r3, [r7, #8]
 80164f4:	2300      	movs	r3, #0
 80164f6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80164f8:	f107 0308 	add.w	r3, r7, #8
 80164fc:	4618      	mov	r0, r3
 80164fe:	f7ee fc76 	bl	8004dee <osMutexCreate>
 8016502:	4602      	mov	r2, r0
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d102      	bne.n	8016516 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016514:	e000      	b.n	8016518 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016516:	2300      	movs	r3, #0
}
 8016518:	4618      	mov	r0, r3
 801651a:	3710      	adds	r7, #16
 801651c:	46bd      	mov	sp, r7
 801651e:	bd80      	pop	{r7, pc}

08016520 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b082      	sub	sp, #8
 8016524:	af00      	add	r7, sp, #0
 8016526:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016530:	4618      	mov	r0, r3
 8016532:	f7ee fc75 	bl	8004e20 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016536:	bf00      	nop
 8016538:	3708      	adds	r7, #8
 801653a:	46bd      	mov	sp, r7
 801653c:	bd80      	pop	{r7, pc}

0801653e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801653e:	b580      	push	{r7, lr}
 8016540:	b082      	sub	sp, #8
 8016542:	af00      	add	r7, sp, #0
 8016544:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	4618      	mov	r0, r3
 801654c:	f7ee fcb6 	bl	8004ebc <osMutexRelease>
}
 8016550:	bf00      	nop
 8016552:	3708      	adds	r7, #8
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}

08016558 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b08c      	sub	sp, #48	; 0x30
 801655c:	af00      	add	r7, sp, #0
 801655e:	60f8      	str	r0, [r7, #12]
 8016560:	60b9      	str	r1, [r7, #8]
 8016562:	607a      	str	r2, [r7, #4]
 8016564:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016566:	f107 0314 	add.w	r3, r7, #20
 801656a:	2200      	movs	r2, #0
 801656c:	601a      	str	r2, [r3, #0]
 801656e:	605a      	str	r2, [r3, #4]
 8016570:	609a      	str	r2, [r3, #8]
 8016572:	60da      	str	r2, [r3, #12]
 8016574:	611a      	str	r2, [r3, #16]
 8016576:	615a      	str	r2, [r3, #20]
 8016578:	619a      	str	r2, [r3, #24]
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	617b      	str	r3, [r7, #20]
 801657e:	68bb      	ldr	r3, [r7, #8]
 8016580:	61bb      	str	r3, [r7, #24]
 8016582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016584:	b21b      	sxth	r3, r3
 8016586:	83bb      	strh	r3, [r7, #28]
 8016588:	683b      	ldr	r3, [r7, #0]
 801658a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801658c:	f107 0314 	add.w	r3, r7, #20
 8016590:	6879      	ldr	r1, [r7, #4]
 8016592:	4618      	mov	r0, r3
 8016594:	f7ee fbcb 	bl	8004d2e <osThreadCreate>
 8016598:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801659a:	4618      	mov	r0, r3
 801659c:	3730      	adds	r7, #48	; 0x30
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}
	...

080165a4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80165a4:	b580      	push	{r7, lr}
 80165a6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80165a8:	4b04      	ldr	r3, [pc, #16]	; (80165bc <sys_arch_protect+0x18>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80165b0:	4618      	mov	r0, r3
 80165b2:	f7ee fc35 	bl	8004e20 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80165b6:	2301      	movs	r3, #1
}
 80165b8:	4618      	mov	r0, r3
 80165ba:	bd80      	pop	{r7, pc}
 80165bc:	2000dc74 	.word	0x2000dc74

080165c0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b082      	sub	sp, #8
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80165c8:	4b04      	ldr	r3, [pc, #16]	; (80165dc <sys_arch_unprotect+0x1c>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	4618      	mov	r0, r3
 80165ce:	f7ee fc75 	bl	8004ebc <osMutexRelease>
}
 80165d2:	bf00      	nop
 80165d4:	3708      	adds	r7, #8
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}
 80165da:	bf00      	nop
 80165dc:	2000dc74 	.word	0x2000dc74

080165e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80165e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016618 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80165e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80165e6:	e003      	b.n	80165f0 <LoopCopyDataInit>

080165e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80165e8:	4b0c      	ldr	r3, [pc, #48]	; (801661c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80165ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80165ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80165ee:	3104      	adds	r1, #4

080165f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80165f0:	480b      	ldr	r0, [pc, #44]	; (8016620 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80165f2:	4b0c      	ldr	r3, [pc, #48]	; (8016624 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80165f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80165f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80165f8:	d3f6      	bcc.n	80165e8 <CopyDataInit>
  ldr  r2, =_sbss
 80165fa:	4a0b      	ldr	r2, [pc, #44]	; (8016628 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80165fc:	e002      	b.n	8016604 <LoopFillZerobss>

080165fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80165fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8016600:	f842 3b04 	str.w	r3, [r2], #4

08016604 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8016604:	4b09      	ldr	r3, [pc, #36]	; (801662c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8016606:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8016608:	d3f9      	bcc.n	80165fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801660a:	f7ea fe2d 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801660e:	f000 f811 	bl	8016634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8016612:	f7e9 ffdf 	bl	80005d4 <main>
  bx  lr    
 8016616:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8016618:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 801661c:	0801a354 	.word	0x0801a354
  ldr  r0, =_sdata
 8016620:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8016624:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8016628:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 801662c:	2000dc78 	.word	0x2000dc78

08016630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8016630:	e7fe      	b.n	8016630 <ADC_IRQHandler>
	...

08016634 <__libc_init_array>:
 8016634:	b570      	push	{r4, r5, r6, lr}
 8016636:	4e0d      	ldr	r6, [pc, #52]	; (801666c <__libc_init_array+0x38>)
 8016638:	4c0d      	ldr	r4, [pc, #52]	; (8016670 <__libc_init_array+0x3c>)
 801663a:	1ba4      	subs	r4, r4, r6
 801663c:	10a4      	asrs	r4, r4, #2
 801663e:	2500      	movs	r5, #0
 8016640:	42a5      	cmp	r5, r4
 8016642:	d109      	bne.n	8016658 <__libc_init_array+0x24>
 8016644:	4e0b      	ldr	r6, [pc, #44]	; (8016674 <__libc_init_array+0x40>)
 8016646:	4c0c      	ldr	r4, [pc, #48]	; (8016678 <__libc_init_array+0x44>)
 8016648:	f000 ff5c 	bl	8017504 <_init>
 801664c:	1ba4      	subs	r4, r4, r6
 801664e:	10a4      	asrs	r4, r4, #2
 8016650:	2500      	movs	r5, #0
 8016652:	42a5      	cmp	r5, r4
 8016654:	d105      	bne.n	8016662 <__libc_init_array+0x2e>
 8016656:	bd70      	pop	{r4, r5, r6, pc}
 8016658:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801665c:	4798      	blx	r3
 801665e:	3501      	adds	r5, #1
 8016660:	e7ee      	b.n	8016640 <__libc_init_array+0xc>
 8016662:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016666:	4798      	blx	r3
 8016668:	3501      	adds	r5, #1
 801666a:	e7f2      	b.n	8016652 <__libc_init_array+0x1e>
 801666c:	0801a34c 	.word	0x0801a34c
 8016670:	0801a34c 	.word	0x0801a34c
 8016674:	0801a34c 	.word	0x0801a34c
 8016678:	0801a350 	.word	0x0801a350

0801667c <memcmp>:
 801667c:	b530      	push	{r4, r5, lr}
 801667e:	2400      	movs	r4, #0
 8016680:	42a2      	cmp	r2, r4
 8016682:	d101      	bne.n	8016688 <memcmp+0xc>
 8016684:	2000      	movs	r0, #0
 8016686:	e007      	b.n	8016698 <memcmp+0x1c>
 8016688:	5d03      	ldrb	r3, [r0, r4]
 801668a:	3401      	adds	r4, #1
 801668c:	190d      	adds	r5, r1, r4
 801668e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8016692:	42ab      	cmp	r3, r5
 8016694:	d0f4      	beq.n	8016680 <memcmp+0x4>
 8016696:	1b58      	subs	r0, r3, r5
 8016698:	bd30      	pop	{r4, r5, pc}

0801669a <memcpy>:
 801669a:	b510      	push	{r4, lr}
 801669c:	1e43      	subs	r3, r0, #1
 801669e:	440a      	add	r2, r1
 80166a0:	4291      	cmp	r1, r2
 80166a2:	d100      	bne.n	80166a6 <memcpy+0xc>
 80166a4:	bd10      	pop	{r4, pc}
 80166a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80166ae:	e7f7      	b.n	80166a0 <memcpy+0x6>

080166b0 <memset>:
 80166b0:	4402      	add	r2, r0
 80166b2:	4603      	mov	r3, r0
 80166b4:	4293      	cmp	r3, r2
 80166b6:	d100      	bne.n	80166ba <memset+0xa>
 80166b8:	4770      	bx	lr
 80166ba:	f803 1b01 	strb.w	r1, [r3], #1
 80166be:	e7f9      	b.n	80166b4 <memset+0x4>

080166c0 <iprintf>:
 80166c0:	b40f      	push	{r0, r1, r2, r3}
 80166c2:	4b0a      	ldr	r3, [pc, #40]	; (80166ec <iprintf+0x2c>)
 80166c4:	b513      	push	{r0, r1, r4, lr}
 80166c6:	681c      	ldr	r4, [r3, #0]
 80166c8:	b124      	cbz	r4, 80166d4 <iprintf+0x14>
 80166ca:	69a3      	ldr	r3, [r4, #24]
 80166cc:	b913      	cbnz	r3, 80166d4 <iprintf+0x14>
 80166ce:	4620      	mov	r0, r4
 80166d0:	f000 f84e 	bl	8016770 <__sinit>
 80166d4:	ab05      	add	r3, sp, #20
 80166d6:	9a04      	ldr	r2, [sp, #16]
 80166d8:	68a1      	ldr	r1, [r4, #8]
 80166da:	9301      	str	r3, [sp, #4]
 80166dc:	4620      	mov	r0, r4
 80166de:	f000 f955 	bl	801698c <_vfiprintf_r>
 80166e2:	b002      	add	sp, #8
 80166e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166e8:	b004      	add	sp, #16
 80166ea:	4770      	bx	lr
 80166ec:	2000001c 	.word	0x2000001c

080166f0 <std>:
 80166f0:	2300      	movs	r3, #0
 80166f2:	b510      	push	{r4, lr}
 80166f4:	4604      	mov	r4, r0
 80166f6:	e9c0 3300 	strd	r3, r3, [r0]
 80166fa:	6083      	str	r3, [r0, #8]
 80166fc:	8181      	strh	r1, [r0, #12]
 80166fe:	6643      	str	r3, [r0, #100]	; 0x64
 8016700:	81c2      	strh	r2, [r0, #14]
 8016702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016706:	6183      	str	r3, [r0, #24]
 8016708:	4619      	mov	r1, r3
 801670a:	2208      	movs	r2, #8
 801670c:	305c      	adds	r0, #92	; 0x5c
 801670e:	f7ff ffcf 	bl	80166b0 <memset>
 8016712:	4b05      	ldr	r3, [pc, #20]	; (8016728 <std+0x38>)
 8016714:	6263      	str	r3, [r4, #36]	; 0x24
 8016716:	4b05      	ldr	r3, [pc, #20]	; (801672c <std+0x3c>)
 8016718:	62a3      	str	r3, [r4, #40]	; 0x28
 801671a:	4b05      	ldr	r3, [pc, #20]	; (8016730 <std+0x40>)
 801671c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801671e:	4b05      	ldr	r3, [pc, #20]	; (8016734 <std+0x44>)
 8016720:	6224      	str	r4, [r4, #32]
 8016722:	6323      	str	r3, [r4, #48]	; 0x30
 8016724:	bd10      	pop	{r4, pc}
 8016726:	bf00      	nop
 8016728:	08016ee9 	.word	0x08016ee9
 801672c:	08016f0b 	.word	0x08016f0b
 8016730:	08016f43 	.word	0x08016f43
 8016734:	08016f67 	.word	0x08016f67

08016738 <_cleanup_r>:
 8016738:	4901      	ldr	r1, [pc, #4]	; (8016740 <_cleanup_r+0x8>)
 801673a:	f000 b885 	b.w	8016848 <_fwalk_reent>
 801673e:	bf00      	nop
 8016740:	08017241 	.word	0x08017241

08016744 <__sfmoreglue>:
 8016744:	b570      	push	{r4, r5, r6, lr}
 8016746:	1e4a      	subs	r2, r1, #1
 8016748:	2568      	movs	r5, #104	; 0x68
 801674a:	4355      	muls	r5, r2
 801674c:	460e      	mov	r6, r1
 801674e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016752:	f000 f897 	bl	8016884 <_malloc_r>
 8016756:	4604      	mov	r4, r0
 8016758:	b140      	cbz	r0, 801676c <__sfmoreglue+0x28>
 801675a:	2100      	movs	r1, #0
 801675c:	e9c0 1600 	strd	r1, r6, [r0]
 8016760:	300c      	adds	r0, #12
 8016762:	60a0      	str	r0, [r4, #8]
 8016764:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016768:	f7ff ffa2 	bl	80166b0 <memset>
 801676c:	4620      	mov	r0, r4
 801676e:	bd70      	pop	{r4, r5, r6, pc}

08016770 <__sinit>:
 8016770:	6983      	ldr	r3, [r0, #24]
 8016772:	b510      	push	{r4, lr}
 8016774:	4604      	mov	r4, r0
 8016776:	bb33      	cbnz	r3, 80167c6 <__sinit+0x56>
 8016778:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801677c:	6503      	str	r3, [r0, #80]	; 0x50
 801677e:	4b12      	ldr	r3, [pc, #72]	; (80167c8 <__sinit+0x58>)
 8016780:	4a12      	ldr	r2, [pc, #72]	; (80167cc <__sinit+0x5c>)
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	6282      	str	r2, [r0, #40]	; 0x28
 8016786:	4298      	cmp	r0, r3
 8016788:	bf04      	itt	eq
 801678a:	2301      	moveq	r3, #1
 801678c:	6183      	streq	r3, [r0, #24]
 801678e:	f000 f81f 	bl	80167d0 <__sfp>
 8016792:	6060      	str	r0, [r4, #4]
 8016794:	4620      	mov	r0, r4
 8016796:	f000 f81b 	bl	80167d0 <__sfp>
 801679a:	60a0      	str	r0, [r4, #8]
 801679c:	4620      	mov	r0, r4
 801679e:	f000 f817 	bl	80167d0 <__sfp>
 80167a2:	2200      	movs	r2, #0
 80167a4:	60e0      	str	r0, [r4, #12]
 80167a6:	2104      	movs	r1, #4
 80167a8:	6860      	ldr	r0, [r4, #4]
 80167aa:	f7ff ffa1 	bl	80166f0 <std>
 80167ae:	2201      	movs	r2, #1
 80167b0:	2109      	movs	r1, #9
 80167b2:	68a0      	ldr	r0, [r4, #8]
 80167b4:	f7ff ff9c 	bl	80166f0 <std>
 80167b8:	2202      	movs	r2, #2
 80167ba:	2112      	movs	r1, #18
 80167bc:	68e0      	ldr	r0, [r4, #12]
 80167be:	f7ff ff97 	bl	80166f0 <std>
 80167c2:	2301      	movs	r3, #1
 80167c4:	61a3      	str	r3, [r4, #24]
 80167c6:	bd10      	pop	{r4, pc}
 80167c8:	0801a2ac 	.word	0x0801a2ac
 80167cc:	08016739 	.word	0x08016739

080167d0 <__sfp>:
 80167d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167d2:	4b1b      	ldr	r3, [pc, #108]	; (8016840 <__sfp+0x70>)
 80167d4:	681e      	ldr	r6, [r3, #0]
 80167d6:	69b3      	ldr	r3, [r6, #24]
 80167d8:	4607      	mov	r7, r0
 80167da:	b913      	cbnz	r3, 80167e2 <__sfp+0x12>
 80167dc:	4630      	mov	r0, r6
 80167de:	f7ff ffc7 	bl	8016770 <__sinit>
 80167e2:	3648      	adds	r6, #72	; 0x48
 80167e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80167e8:	3b01      	subs	r3, #1
 80167ea:	d503      	bpl.n	80167f4 <__sfp+0x24>
 80167ec:	6833      	ldr	r3, [r6, #0]
 80167ee:	b133      	cbz	r3, 80167fe <__sfp+0x2e>
 80167f0:	6836      	ldr	r6, [r6, #0]
 80167f2:	e7f7      	b.n	80167e4 <__sfp+0x14>
 80167f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80167f8:	b16d      	cbz	r5, 8016816 <__sfp+0x46>
 80167fa:	3468      	adds	r4, #104	; 0x68
 80167fc:	e7f4      	b.n	80167e8 <__sfp+0x18>
 80167fe:	2104      	movs	r1, #4
 8016800:	4638      	mov	r0, r7
 8016802:	f7ff ff9f 	bl	8016744 <__sfmoreglue>
 8016806:	6030      	str	r0, [r6, #0]
 8016808:	2800      	cmp	r0, #0
 801680a:	d1f1      	bne.n	80167f0 <__sfp+0x20>
 801680c:	230c      	movs	r3, #12
 801680e:	603b      	str	r3, [r7, #0]
 8016810:	4604      	mov	r4, r0
 8016812:	4620      	mov	r0, r4
 8016814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016816:	4b0b      	ldr	r3, [pc, #44]	; (8016844 <__sfp+0x74>)
 8016818:	6665      	str	r5, [r4, #100]	; 0x64
 801681a:	e9c4 5500 	strd	r5, r5, [r4]
 801681e:	60a5      	str	r5, [r4, #8]
 8016820:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8016824:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016828:	2208      	movs	r2, #8
 801682a:	4629      	mov	r1, r5
 801682c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016830:	f7ff ff3e 	bl	80166b0 <memset>
 8016834:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016838:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801683c:	e7e9      	b.n	8016812 <__sfp+0x42>
 801683e:	bf00      	nop
 8016840:	0801a2ac 	.word	0x0801a2ac
 8016844:	ffff0001 	.word	0xffff0001

08016848 <_fwalk_reent>:
 8016848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801684c:	4680      	mov	r8, r0
 801684e:	4689      	mov	r9, r1
 8016850:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016854:	2600      	movs	r6, #0
 8016856:	b914      	cbnz	r4, 801685e <_fwalk_reent+0x16>
 8016858:	4630      	mov	r0, r6
 801685a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801685e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016862:	3f01      	subs	r7, #1
 8016864:	d501      	bpl.n	801686a <_fwalk_reent+0x22>
 8016866:	6824      	ldr	r4, [r4, #0]
 8016868:	e7f5      	b.n	8016856 <_fwalk_reent+0xe>
 801686a:	89ab      	ldrh	r3, [r5, #12]
 801686c:	2b01      	cmp	r3, #1
 801686e:	d907      	bls.n	8016880 <_fwalk_reent+0x38>
 8016870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016874:	3301      	adds	r3, #1
 8016876:	d003      	beq.n	8016880 <_fwalk_reent+0x38>
 8016878:	4629      	mov	r1, r5
 801687a:	4640      	mov	r0, r8
 801687c:	47c8      	blx	r9
 801687e:	4306      	orrs	r6, r0
 8016880:	3568      	adds	r5, #104	; 0x68
 8016882:	e7ee      	b.n	8016862 <_fwalk_reent+0x1a>

08016884 <_malloc_r>:
 8016884:	b570      	push	{r4, r5, r6, lr}
 8016886:	1ccd      	adds	r5, r1, #3
 8016888:	f025 0503 	bic.w	r5, r5, #3
 801688c:	3508      	adds	r5, #8
 801688e:	2d0c      	cmp	r5, #12
 8016890:	bf38      	it	cc
 8016892:	250c      	movcc	r5, #12
 8016894:	2d00      	cmp	r5, #0
 8016896:	4606      	mov	r6, r0
 8016898:	db01      	blt.n	801689e <_malloc_r+0x1a>
 801689a:	42a9      	cmp	r1, r5
 801689c:	d903      	bls.n	80168a6 <_malloc_r+0x22>
 801689e:	230c      	movs	r3, #12
 80168a0:	6033      	str	r3, [r6, #0]
 80168a2:	2000      	movs	r0, #0
 80168a4:	bd70      	pop	{r4, r5, r6, pc}
 80168a6:	f000 fd6b 	bl	8017380 <__malloc_lock>
 80168aa:	4a21      	ldr	r2, [pc, #132]	; (8016930 <_malloc_r+0xac>)
 80168ac:	6814      	ldr	r4, [r2, #0]
 80168ae:	4621      	mov	r1, r4
 80168b0:	b991      	cbnz	r1, 80168d8 <_malloc_r+0x54>
 80168b2:	4c20      	ldr	r4, [pc, #128]	; (8016934 <_malloc_r+0xb0>)
 80168b4:	6823      	ldr	r3, [r4, #0]
 80168b6:	b91b      	cbnz	r3, 80168c0 <_malloc_r+0x3c>
 80168b8:	4630      	mov	r0, r6
 80168ba:	f000 fb05 	bl	8016ec8 <_sbrk_r>
 80168be:	6020      	str	r0, [r4, #0]
 80168c0:	4629      	mov	r1, r5
 80168c2:	4630      	mov	r0, r6
 80168c4:	f000 fb00 	bl	8016ec8 <_sbrk_r>
 80168c8:	1c43      	adds	r3, r0, #1
 80168ca:	d124      	bne.n	8016916 <_malloc_r+0x92>
 80168cc:	230c      	movs	r3, #12
 80168ce:	6033      	str	r3, [r6, #0]
 80168d0:	4630      	mov	r0, r6
 80168d2:	f000 fd56 	bl	8017382 <__malloc_unlock>
 80168d6:	e7e4      	b.n	80168a2 <_malloc_r+0x1e>
 80168d8:	680b      	ldr	r3, [r1, #0]
 80168da:	1b5b      	subs	r3, r3, r5
 80168dc:	d418      	bmi.n	8016910 <_malloc_r+0x8c>
 80168de:	2b0b      	cmp	r3, #11
 80168e0:	d90f      	bls.n	8016902 <_malloc_r+0x7e>
 80168e2:	600b      	str	r3, [r1, #0]
 80168e4:	50cd      	str	r5, [r1, r3]
 80168e6:	18cc      	adds	r4, r1, r3
 80168e8:	4630      	mov	r0, r6
 80168ea:	f000 fd4a 	bl	8017382 <__malloc_unlock>
 80168ee:	f104 000b 	add.w	r0, r4, #11
 80168f2:	1d23      	adds	r3, r4, #4
 80168f4:	f020 0007 	bic.w	r0, r0, #7
 80168f8:	1ac3      	subs	r3, r0, r3
 80168fa:	d0d3      	beq.n	80168a4 <_malloc_r+0x20>
 80168fc:	425a      	negs	r2, r3
 80168fe:	50e2      	str	r2, [r4, r3]
 8016900:	e7d0      	b.n	80168a4 <_malloc_r+0x20>
 8016902:	428c      	cmp	r4, r1
 8016904:	684b      	ldr	r3, [r1, #4]
 8016906:	bf16      	itet	ne
 8016908:	6063      	strne	r3, [r4, #4]
 801690a:	6013      	streq	r3, [r2, #0]
 801690c:	460c      	movne	r4, r1
 801690e:	e7eb      	b.n	80168e8 <_malloc_r+0x64>
 8016910:	460c      	mov	r4, r1
 8016912:	6849      	ldr	r1, [r1, #4]
 8016914:	e7cc      	b.n	80168b0 <_malloc_r+0x2c>
 8016916:	1cc4      	adds	r4, r0, #3
 8016918:	f024 0403 	bic.w	r4, r4, #3
 801691c:	42a0      	cmp	r0, r4
 801691e:	d005      	beq.n	801692c <_malloc_r+0xa8>
 8016920:	1a21      	subs	r1, r4, r0
 8016922:	4630      	mov	r0, r6
 8016924:	f000 fad0 	bl	8016ec8 <_sbrk_r>
 8016928:	3001      	adds	r0, #1
 801692a:	d0cf      	beq.n	80168cc <_malloc_r+0x48>
 801692c:	6025      	str	r5, [r4, #0]
 801692e:	e7db      	b.n	80168e8 <_malloc_r+0x64>
 8016930:	20004290 	.word	0x20004290
 8016934:	20004294 	.word	0x20004294

08016938 <__sfputc_r>:
 8016938:	6893      	ldr	r3, [r2, #8]
 801693a:	3b01      	subs	r3, #1
 801693c:	2b00      	cmp	r3, #0
 801693e:	b410      	push	{r4}
 8016940:	6093      	str	r3, [r2, #8]
 8016942:	da08      	bge.n	8016956 <__sfputc_r+0x1e>
 8016944:	6994      	ldr	r4, [r2, #24]
 8016946:	42a3      	cmp	r3, r4
 8016948:	db01      	blt.n	801694e <__sfputc_r+0x16>
 801694a:	290a      	cmp	r1, #10
 801694c:	d103      	bne.n	8016956 <__sfputc_r+0x1e>
 801694e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016952:	f000 bb0d 	b.w	8016f70 <__swbuf_r>
 8016956:	6813      	ldr	r3, [r2, #0]
 8016958:	1c58      	adds	r0, r3, #1
 801695a:	6010      	str	r0, [r2, #0]
 801695c:	7019      	strb	r1, [r3, #0]
 801695e:	4608      	mov	r0, r1
 8016960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016964:	4770      	bx	lr

08016966 <__sfputs_r>:
 8016966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016968:	4606      	mov	r6, r0
 801696a:	460f      	mov	r7, r1
 801696c:	4614      	mov	r4, r2
 801696e:	18d5      	adds	r5, r2, r3
 8016970:	42ac      	cmp	r4, r5
 8016972:	d101      	bne.n	8016978 <__sfputs_r+0x12>
 8016974:	2000      	movs	r0, #0
 8016976:	e007      	b.n	8016988 <__sfputs_r+0x22>
 8016978:	463a      	mov	r2, r7
 801697a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801697e:	4630      	mov	r0, r6
 8016980:	f7ff ffda 	bl	8016938 <__sfputc_r>
 8016984:	1c43      	adds	r3, r0, #1
 8016986:	d1f3      	bne.n	8016970 <__sfputs_r+0xa>
 8016988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801698c <_vfiprintf_r>:
 801698c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016990:	460c      	mov	r4, r1
 8016992:	b09d      	sub	sp, #116	; 0x74
 8016994:	4617      	mov	r7, r2
 8016996:	461d      	mov	r5, r3
 8016998:	4606      	mov	r6, r0
 801699a:	b118      	cbz	r0, 80169a4 <_vfiprintf_r+0x18>
 801699c:	6983      	ldr	r3, [r0, #24]
 801699e:	b90b      	cbnz	r3, 80169a4 <_vfiprintf_r+0x18>
 80169a0:	f7ff fee6 	bl	8016770 <__sinit>
 80169a4:	4b7c      	ldr	r3, [pc, #496]	; (8016b98 <_vfiprintf_r+0x20c>)
 80169a6:	429c      	cmp	r4, r3
 80169a8:	d158      	bne.n	8016a5c <_vfiprintf_r+0xd0>
 80169aa:	6874      	ldr	r4, [r6, #4]
 80169ac:	89a3      	ldrh	r3, [r4, #12]
 80169ae:	0718      	lsls	r0, r3, #28
 80169b0:	d55e      	bpl.n	8016a70 <_vfiprintf_r+0xe4>
 80169b2:	6923      	ldr	r3, [r4, #16]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d05b      	beq.n	8016a70 <_vfiprintf_r+0xe4>
 80169b8:	2300      	movs	r3, #0
 80169ba:	9309      	str	r3, [sp, #36]	; 0x24
 80169bc:	2320      	movs	r3, #32
 80169be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169c2:	2330      	movs	r3, #48	; 0x30
 80169c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169c8:	9503      	str	r5, [sp, #12]
 80169ca:	f04f 0b01 	mov.w	fp, #1
 80169ce:	46b8      	mov	r8, r7
 80169d0:	4645      	mov	r5, r8
 80169d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80169d6:	b10b      	cbz	r3, 80169dc <_vfiprintf_r+0x50>
 80169d8:	2b25      	cmp	r3, #37	; 0x25
 80169da:	d154      	bne.n	8016a86 <_vfiprintf_r+0xfa>
 80169dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80169e0:	d00b      	beq.n	80169fa <_vfiprintf_r+0x6e>
 80169e2:	4653      	mov	r3, sl
 80169e4:	463a      	mov	r2, r7
 80169e6:	4621      	mov	r1, r4
 80169e8:	4630      	mov	r0, r6
 80169ea:	f7ff ffbc 	bl	8016966 <__sfputs_r>
 80169ee:	3001      	adds	r0, #1
 80169f0:	f000 80c2 	beq.w	8016b78 <_vfiprintf_r+0x1ec>
 80169f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169f6:	4453      	add	r3, sl
 80169f8:	9309      	str	r3, [sp, #36]	; 0x24
 80169fa:	f898 3000 	ldrb.w	r3, [r8]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	f000 80ba 	beq.w	8016b78 <_vfiprintf_r+0x1ec>
 8016a04:	2300      	movs	r3, #0
 8016a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a0e:	9304      	str	r3, [sp, #16]
 8016a10:	9307      	str	r3, [sp, #28]
 8016a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a16:	931a      	str	r3, [sp, #104]	; 0x68
 8016a18:	46a8      	mov	r8, r5
 8016a1a:	2205      	movs	r2, #5
 8016a1c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016a20:	485e      	ldr	r0, [pc, #376]	; (8016b9c <_vfiprintf_r+0x210>)
 8016a22:	f7e9 fbed 	bl	8000200 <memchr>
 8016a26:	9b04      	ldr	r3, [sp, #16]
 8016a28:	bb78      	cbnz	r0, 8016a8a <_vfiprintf_r+0xfe>
 8016a2a:	06d9      	lsls	r1, r3, #27
 8016a2c:	bf44      	itt	mi
 8016a2e:	2220      	movmi	r2, #32
 8016a30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016a34:	071a      	lsls	r2, r3, #28
 8016a36:	bf44      	itt	mi
 8016a38:	222b      	movmi	r2, #43	; 0x2b
 8016a3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016a3e:	782a      	ldrb	r2, [r5, #0]
 8016a40:	2a2a      	cmp	r2, #42	; 0x2a
 8016a42:	d02a      	beq.n	8016a9a <_vfiprintf_r+0x10e>
 8016a44:	9a07      	ldr	r2, [sp, #28]
 8016a46:	46a8      	mov	r8, r5
 8016a48:	2000      	movs	r0, #0
 8016a4a:	250a      	movs	r5, #10
 8016a4c:	4641      	mov	r1, r8
 8016a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a52:	3b30      	subs	r3, #48	; 0x30
 8016a54:	2b09      	cmp	r3, #9
 8016a56:	d969      	bls.n	8016b2c <_vfiprintf_r+0x1a0>
 8016a58:	b360      	cbz	r0, 8016ab4 <_vfiprintf_r+0x128>
 8016a5a:	e024      	b.n	8016aa6 <_vfiprintf_r+0x11a>
 8016a5c:	4b50      	ldr	r3, [pc, #320]	; (8016ba0 <_vfiprintf_r+0x214>)
 8016a5e:	429c      	cmp	r4, r3
 8016a60:	d101      	bne.n	8016a66 <_vfiprintf_r+0xda>
 8016a62:	68b4      	ldr	r4, [r6, #8]
 8016a64:	e7a2      	b.n	80169ac <_vfiprintf_r+0x20>
 8016a66:	4b4f      	ldr	r3, [pc, #316]	; (8016ba4 <_vfiprintf_r+0x218>)
 8016a68:	429c      	cmp	r4, r3
 8016a6a:	bf08      	it	eq
 8016a6c:	68f4      	ldreq	r4, [r6, #12]
 8016a6e:	e79d      	b.n	80169ac <_vfiprintf_r+0x20>
 8016a70:	4621      	mov	r1, r4
 8016a72:	4630      	mov	r0, r6
 8016a74:	f000 fae0 	bl	8017038 <__swsetup_r>
 8016a78:	2800      	cmp	r0, #0
 8016a7a:	d09d      	beq.n	80169b8 <_vfiprintf_r+0x2c>
 8016a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a80:	b01d      	add	sp, #116	; 0x74
 8016a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a86:	46a8      	mov	r8, r5
 8016a88:	e7a2      	b.n	80169d0 <_vfiprintf_r+0x44>
 8016a8a:	4a44      	ldr	r2, [pc, #272]	; (8016b9c <_vfiprintf_r+0x210>)
 8016a8c:	1a80      	subs	r0, r0, r2
 8016a8e:	fa0b f000 	lsl.w	r0, fp, r0
 8016a92:	4318      	orrs	r0, r3
 8016a94:	9004      	str	r0, [sp, #16]
 8016a96:	4645      	mov	r5, r8
 8016a98:	e7be      	b.n	8016a18 <_vfiprintf_r+0x8c>
 8016a9a:	9a03      	ldr	r2, [sp, #12]
 8016a9c:	1d11      	adds	r1, r2, #4
 8016a9e:	6812      	ldr	r2, [r2, #0]
 8016aa0:	9103      	str	r1, [sp, #12]
 8016aa2:	2a00      	cmp	r2, #0
 8016aa4:	db01      	blt.n	8016aaa <_vfiprintf_r+0x11e>
 8016aa6:	9207      	str	r2, [sp, #28]
 8016aa8:	e004      	b.n	8016ab4 <_vfiprintf_r+0x128>
 8016aaa:	4252      	negs	r2, r2
 8016aac:	f043 0302 	orr.w	r3, r3, #2
 8016ab0:	9207      	str	r2, [sp, #28]
 8016ab2:	9304      	str	r3, [sp, #16]
 8016ab4:	f898 3000 	ldrb.w	r3, [r8]
 8016ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8016aba:	d10e      	bne.n	8016ada <_vfiprintf_r+0x14e>
 8016abc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8016ac2:	d138      	bne.n	8016b36 <_vfiprintf_r+0x1aa>
 8016ac4:	9b03      	ldr	r3, [sp, #12]
 8016ac6:	1d1a      	adds	r2, r3, #4
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	9203      	str	r2, [sp, #12]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	bfb8      	it	lt
 8016ad0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016ad4:	f108 0802 	add.w	r8, r8, #2
 8016ad8:	9305      	str	r3, [sp, #20]
 8016ada:	4d33      	ldr	r5, [pc, #204]	; (8016ba8 <_vfiprintf_r+0x21c>)
 8016adc:	f898 1000 	ldrb.w	r1, [r8]
 8016ae0:	2203      	movs	r2, #3
 8016ae2:	4628      	mov	r0, r5
 8016ae4:	f7e9 fb8c 	bl	8000200 <memchr>
 8016ae8:	b140      	cbz	r0, 8016afc <_vfiprintf_r+0x170>
 8016aea:	2340      	movs	r3, #64	; 0x40
 8016aec:	1b40      	subs	r0, r0, r5
 8016aee:	fa03 f000 	lsl.w	r0, r3, r0
 8016af2:	9b04      	ldr	r3, [sp, #16]
 8016af4:	4303      	orrs	r3, r0
 8016af6:	f108 0801 	add.w	r8, r8, #1
 8016afa:	9304      	str	r3, [sp, #16]
 8016afc:	f898 1000 	ldrb.w	r1, [r8]
 8016b00:	482a      	ldr	r0, [pc, #168]	; (8016bac <_vfiprintf_r+0x220>)
 8016b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b06:	2206      	movs	r2, #6
 8016b08:	f108 0701 	add.w	r7, r8, #1
 8016b0c:	f7e9 fb78 	bl	8000200 <memchr>
 8016b10:	2800      	cmp	r0, #0
 8016b12:	d037      	beq.n	8016b84 <_vfiprintf_r+0x1f8>
 8016b14:	4b26      	ldr	r3, [pc, #152]	; (8016bb0 <_vfiprintf_r+0x224>)
 8016b16:	bb1b      	cbnz	r3, 8016b60 <_vfiprintf_r+0x1d4>
 8016b18:	9b03      	ldr	r3, [sp, #12]
 8016b1a:	3307      	adds	r3, #7
 8016b1c:	f023 0307 	bic.w	r3, r3, #7
 8016b20:	3308      	adds	r3, #8
 8016b22:	9303      	str	r3, [sp, #12]
 8016b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b26:	444b      	add	r3, r9
 8016b28:	9309      	str	r3, [sp, #36]	; 0x24
 8016b2a:	e750      	b.n	80169ce <_vfiprintf_r+0x42>
 8016b2c:	fb05 3202 	mla	r2, r5, r2, r3
 8016b30:	2001      	movs	r0, #1
 8016b32:	4688      	mov	r8, r1
 8016b34:	e78a      	b.n	8016a4c <_vfiprintf_r+0xc0>
 8016b36:	2300      	movs	r3, #0
 8016b38:	f108 0801 	add.w	r8, r8, #1
 8016b3c:	9305      	str	r3, [sp, #20]
 8016b3e:	4619      	mov	r1, r3
 8016b40:	250a      	movs	r5, #10
 8016b42:	4640      	mov	r0, r8
 8016b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b48:	3a30      	subs	r2, #48	; 0x30
 8016b4a:	2a09      	cmp	r2, #9
 8016b4c:	d903      	bls.n	8016b56 <_vfiprintf_r+0x1ca>
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d0c3      	beq.n	8016ada <_vfiprintf_r+0x14e>
 8016b52:	9105      	str	r1, [sp, #20]
 8016b54:	e7c1      	b.n	8016ada <_vfiprintf_r+0x14e>
 8016b56:	fb05 2101 	mla	r1, r5, r1, r2
 8016b5a:	2301      	movs	r3, #1
 8016b5c:	4680      	mov	r8, r0
 8016b5e:	e7f0      	b.n	8016b42 <_vfiprintf_r+0x1b6>
 8016b60:	ab03      	add	r3, sp, #12
 8016b62:	9300      	str	r3, [sp, #0]
 8016b64:	4622      	mov	r2, r4
 8016b66:	4b13      	ldr	r3, [pc, #76]	; (8016bb4 <_vfiprintf_r+0x228>)
 8016b68:	a904      	add	r1, sp, #16
 8016b6a:	4630      	mov	r0, r6
 8016b6c:	f3af 8000 	nop.w
 8016b70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8016b74:	4681      	mov	r9, r0
 8016b76:	d1d5      	bne.n	8016b24 <_vfiprintf_r+0x198>
 8016b78:	89a3      	ldrh	r3, [r4, #12]
 8016b7a:	065b      	lsls	r3, r3, #25
 8016b7c:	f53f af7e 	bmi.w	8016a7c <_vfiprintf_r+0xf0>
 8016b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b82:	e77d      	b.n	8016a80 <_vfiprintf_r+0xf4>
 8016b84:	ab03      	add	r3, sp, #12
 8016b86:	9300      	str	r3, [sp, #0]
 8016b88:	4622      	mov	r2, r4
 8016b8a:	4b0a      	ldr	r3, [pc, #40]	; (8016bb4 <_vfiprintf_r+0x228>)
 8016b8c:	a904      	add	r1, sp, #16
 8016b8e:	4630      	mov	r0, r6
 8016b90:	f000 f888 	bl	8016ca4 <_printf_i>
 8016b94:	e7ec      	b.n	8016b70 <_vfiprintf_r+0x1e4>
 8016b96:	bf00      	nop
 8016b98:	0801a2d0 	.word	0x0801a2d0
 8016b9c:	0801a310 	.word	0x0801a310
 8016ba0:	0801a2f0 	.word	0x0801a2f0
 8016ba4:	0801a2b0 	.word	0x0801a2b0
 8016ba8:	0801a316 	.word	0x0801a316
 8016bac:	0801a31a 	.word	0x0801a31a
 8016bb0:	00000000 	.word	0x00000000
 8016bb4:	08016967 	.word	0x08016967

08016bb8 <_printf_common>:
 8016bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bbc:	4691      	mov	r9, r2
 8016bbe:	461f      	mov	r7, r3
 8016bc0:	688a      	ldr	r2, [r1, #8]
 8016bc2:	690b      	ldr	r3, [r1, #16]
 8016bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016bc8:	4293      	cmp	r3, r2
 8016bca:	bfb8      	it	lt
 8016bcc:	4613      	movlt	r3, r2
 8016bce:	f8c9 3000 	str.w	r3, [r9]
 8016bd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016bd6:	4606      	mov	r6, r0
 8016bd8:	460c      	mov	r4, r1
 8016bda:	b112      	cbz	r2, 8016be2 <_printf_common+0x2a>
 8016bdc:	3301      	adds	r3, #1
 8016bde:	f8c9 3000 	str.w	r3, [r9]
 8016be2:	6823      	ldr	r3, [r4, #0]
 8016be4:	0699      	lsls	r1, r3, #26
 8016be6:	bf42      	ittt	mi
 8016be8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016bec:	3302      	addmi	r3, #2
 8016bee:	f8c9 3000 	strmi.w	r3, [r9]
 8016bf2:	6825      	ldr	r5, [r4, #0]
 8016bf4:	f015 0506 	ands.w	r5, r5, #6
 8016bf8:	d107      	bne.n	8016c0a <_printf_common+0x52>
 8016bfa:	f104 0a19 	add.w	sl, r4, #25
 8016bfe:	68e3      	ldr	r3, [r4, #12]
 8016c00:	f8d9 2000 	ldr.w	r2, [r9]
 8016c04:	1a9b      	subs	r3, r3, r2
 8016c06:	42ab      	cmp	r3, r5
 8016c08:	dc28      	bgt.n	8016c5c <_printf_common+0xa4>
 8016c0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016c0e:	6822      	ldr	r2, [r4, #0]
 8016c10:	3300      	adds	r3, #0
 8016c12:	bf18      	it	ne
 8016c14:	2301      	movne	r3, #1
 8016c16:	0692      	lsls	r2, r2, #26
 8016c18:	d42d      	bmi.n	8016c76 <_printf_common+0xbe>
 8016c1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c1e:	4639      	mov	r1, r7
 8016c20:	4630      	mov	r0, r6
 8016c22:	47c0      	blx	r8
 8016c24:	3001      	adds	r0, #1
 8016c26:	d020      	beq.n	8016c6a <_printf_common+0xb2>
 8016c28:	6823      	ldr	r3, [r4, #0]
 8016c2a:	68e5      	ldr	r5, [r4, #12]
 8016c2c:	f8d9 2000 	ldr.w	r2, [r9]
 8016c30:	f003 0306 	and.w	r3, r3, #6
 8016c34:	2b04      	cmp	r3, #4
 8016c36:	bf08      	it	eq
 8016c38:	1aad      	subeq	r5, r5, r2
 8016c3a:	68a3      	ldr	r3, [r4, #8]
 8016c3c:	6922      	ldr	r2, [r4, #16]
 8016c3e:	bf0c      	ite	eq
 8016c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016c44:	2500      	movne	r5, #0
 8016c46:	4293      	cmp	r3, r2
 8016c48:	bfc4      	itt	gt
 8016c4a:	1a9b      	subgt	r3, r3, r2
 8016c4c:	18ed      	addgt	r5, r5, r3
 8016c4e:	f04f 0900 	mov.w	r9, #0
 8016c52:	341a      	adds	r4, #26
 8016c54:	454d      	cmp	r5, r9
 8016c56:	d11a      	bne.n	8016c8e <_printf_common+0xd6>
 8016c58:	2000      	movs	r0, #0
 8016c5a:	e008      	b.n	8016c6e <_printf_common+0xb6>
 8016c5c:	2301      	movs	r3, #1
 8016c5e:	4652      	mov	r2, sl
 8016c60:	4639      	mov	r1, r7
 8016c62:	4630      	mov	r0, r6
 8016c64:	47c0      	blx	r8
 8016c66:	3001      	adds	r0, #1
 8016c68:	d103      	bne.n	8016c72 <_printf_common+0xba>
 8016c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c72:	3501      	adds	r5, #1
 8016c74:	e7c3      	b.n	8016bfe <_printf_common+0x46>
 8016c76:	18e1      	adds	r1, r4, r3
 8016c78:	1c5a      	adds	r2, r3, #1
 8016c7a:	2030      	movs	r0, #48	; 0x30
 8016c7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016c80:	4422      	add	r2, r4
 8016c82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016c86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016c8a:	3302      	adds	r3, #2
 8016c8c:	e7c5      	b.n	8016c1a <_printf_common+0x62>
 8016c8e:	2301      	movs	r3, #1
 8016c90:	4622      	mov	r2, r4
 8016c92:	4639      	mov	r1, r7
 8016c94:	4630      	mov	r0, r6
 8016c96:	47c0      	blx	r8
 8016c98:	3001      	adds	r0, #1
 8016c9a:	d0e6      	beq.n	8016c6a <_printf_common+0xb2>
 8016c9c:	f109 0901 	add.w	r9, r9, #1
 8016ca0:	e7d8      	b.n	8016c54 <_printf_common+0x9c>
	...

08016ca4 <_printf_i>:
 8016ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ca8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016cac:	460c      	mov	r4, r1
 8016cae:	7e09      	ldrb	r1, [r1, #24]
 8016cb0:	b085      	sub	sp, #20
 8016cb2:	296e      	cmp	r1, #110	; 0x6e
 8016cb4:	4617      	mov	r7, r2
 8016cb6:	4606      	mov	r6, r0
 8016cb8:	4698      	mov	r8, r3
 8016cba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016cbc:	f000 80b3 	beq.w	8016e26 <_printf_i+0x182>
 8016cc0:	d822      	bhi.n	8016d08 <_printf_i+0x64>
 8016cc2:	2963      	cmp	r1, #99	; 0x63
 8016cc4:	d036      	beq.n	8016d34 <_printf_i+0x90>
 8016cc6:	d80a      	bhi.n	8016cde <_printf_i+0x3a>
 8016cc8:	2900      	cmp	r1, #0
 8016cca:	f000 80b9 	beq.w	8016e40 <_printf_i+0x19c>
 8016cce:	2958      	cmp	r1, #88	; 0x58
 8016cd0:	f000 8083 	beq.w	8016dda <_printf_i+0x136>
 8016cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016cd8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016cdc:	e032      	b.n	8016d44 <_printf_i+0xa0>
 8016cde:	2964      	cmp	r1, #100	; 0x64
 8016ce0:	d001      	beq.n	8016ce6 <_printf_i+0x42>
 8016ce2:	2969      	cmp	r1, #105	; 0x69
 8016ce4:	d1f6      	bne.n	8016cd4 <_printf_i+0x30>
 8016ce6:	6820      	ldr	r0, [r4, #0]
 8016ce8:	6813      	ldr	r3, [r2, #0]
 8016cea:	0605      	lsls	r5, r0, #24
 8016cec:	f103 0104 	add.w	r1, r3, #4
 8016cf0:	d52a      	bpl.n	8016d48 <_printf_i+0xa4>
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	6011      	str	r1, [r2, #0]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	da03      	bge.n	8016d02 <_printf_i+0x5e>
 8016cfa:	222d      	movs	r2, #45	; 0x2d
 8016cfc:	425b      	negs	r3, r3
 8016cfe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016d02:	486f      	ldr	r0, [pc, #444]	; (8016ec0 <_printf_i+0x21c>)
 8016d04:	220a      	movs	r2, #10
 8016d06:	e039      	b.n	8016d7c <_printf_i+0xd8>
 8016d08:	2973      	cmp	r1, #115	; 0x73
 8016d0a:	f000 809d 	beq.w	8016e48 <_printf_i+0x1a4>
 8016d0e:	d808      	bhi.n	8016d22 <_printf_i+0x7e>
 8016d10:	296f      	cmp	r1, #111	; 0x6f
 8016d12:	d020      	beq.n	8016d56 <_printf_i+0xb2>
 8016d14:	2970      	cmp	r1, #112	; 0x70
 8016d16:	d1dd      	bne.n	8016cd4 <_printf_i+0x30>
 8016d18:	6823      	ldr	r3, [r4, #0]
 8016d1a:	f043 0320 	orr.w	r3, r3, #32
 8016d1e:	6023      	str	r3, [r4, #0]
 8016d20:	e003      	b.n	8016d2a <_printf_i+0x86>
 8016d22:	2975      	cmp	r1, #117	; 0x75
 8016d24:	d017      	beq.n	8016d56 <_printf_i+0xb2>
 8016d26:	2978      	cmp	r1, #120	; 0x78
 8016d28:	d1d4      	bne.n	8016cd4 <_printf_i+0x30>
 8016d2a:	2378      	movs	r3, #120	; 0x78
 8016d2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016d30:	4864      	ldr	r0, [pc, #400]	; (8016ec4 <_printf_i+0x220>)
 8016d32:	e055      	b.n	8016de0 <_printf_i+0x13c>
 8016d34:	6813      	ldr	r3, [r2, #0]
 8016d36:	1d19      	adds	r1, r3, #4
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	6011      	str	r1, [r2, #0]
 8016d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016d44:	2301      	movs	r3, #1
 8016d46:	e08c      	b.n	8016e62 <_printf_i+0x1be>
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	6011      	str	r1, [r2, #0]
 8016d4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016d50:	bf18      	it	ne
 8016d52:	b21b      	sxthne	r3, r3
 8016d54:	e7cf      	b.n	8016cf6 <_printf_i+0x52>
 8016d56:	6813      	ldr	r3, [r2, #0]
 8016d58:	6825      	ldr	r5, [r4, #0]
 8016d5a:	1d18      	adds	r0, r3, #4
 8016d5c:	6010      	str	r0, [r2, #0]
 8016d5e:	0628      	lsls	r0, r5, #24
 8016d60:	d501      	bpl.n	8016d66 <_printf_i+0xc2>
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	e002      	b.n	8016d6c <_printf_i+0xc8>
 8016d66:	0668      	lsls	r0, r5, #25
 8016d68:	d5fb      	bpl.n	8016d62 <_printf_i+0xbe>
 8016d6a:	881b      	ldrh	r3, [r3, #0]
 8016d6c:	4854      	ldr	r0, [pc, #336]	; (8016ec0 <_printf_i+0x21c>)
 8016d6e:	296f      	cmp	r1, #111	; 0x6f
 8016d70:	bf14      	ite	ne
 8016d72:	220a      	movne	r2, #10
 8016d74:	2208      	moveq	r2, #8
 8016d76:	2100      	movs	r1, #0
 8016d78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016d7c:	6865      	ldr	r5, [r4, #4]
 8016d7e:	60a5      	str	r5, [r4, #8]
 8016d80:	2d00      	cmp	r5, #0
 8016d82:	f2c0 8095 	blt.w	8016eb0 <_printf_i+0x20c>
 8016d86:	6821      	ldr	r1, [r4, #0]
 8016d88:	f021 0104 	bic.w	r1, r1, #4
 8016d8c:	6021      	str	r1, [r4, #0]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d13d      	bne.n	8016e0e <_printf_i+0x16a>
 8016d92:	2d00      	cmp	r5, #0
 8016d94:	f040 808e 	bne.w	8016eb4 <_printf_i+0x210>
 8016d98:	4665      	mov	r5, ip
 8016d9a:	2a08      	cmp	r2, #8
 8016d9c:	d10b      	bne.n	8016db6 <_printf_i+0x112>
 8016d9e:	6823      	ldr	r3, [r4, #0]
 8016da0:	07db      	lsls	r3, r3, #31
 8016da2:	d508      	bpl.n	8016db6 <_printf_i+0x112>
 8016da4:	6923      	ldr	r3, [r4, #16]
 8016da6:	6862      	ldr	r2, [r4, #4]
 8016da8:	429a      	cmp	r2, r3
 8016daa:	bfde      	ittt	le
 8016dac:	2330      	movle	r3, #48	; 0x30
 8016dae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016db2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8016db6:	ebac 0305 	sub.w	r3, ip, r5
 8016dba:	6123      	str	r3, [r4, #16]
 8016dbc:	f8cd 8000 	str.w	r8, [sp]
 8016dc0:	463b      	mov	r3, r7
 8016dc2:	aa03      	add	r2, sp, #12
 8016dc4:	4621      	mov	r1, r4
 8016dc6:	4630      	mov	r0, r6
 8016dc8:	f7ff fef6 	bl	8016bb8 <_printf_common>
 8016dcc:	3001      	adds	r0, #1
 8016dce:	d14d      	bne.n	8016e6c <_printf_i+0x1c8>
 8016dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016dd4:	b005      	add	sp, #20
 8016dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dda:	4839      	ldr	r0, [pc, #228]	; (8016ec0 <_printf_i+0x21c>)
 8016ddc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016de0:	6813      	ldr	r3, [r2, #0]
 8016de2:	6821      	ldr	r1, [r4, #0]
 8016de4:	1d1d      	adds	r5, r3, #4
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	6015      	str	r5, [r2, #0]
 8016dea:	060a      	lsls	r2, r1, #24
 8016dec:	d50b      	bpl.n	8016e06 <_printf_i+0x162>
 8016dee:	07ca      	lsls	r2, r1, #31
 8016df0:	bf44      	itt	mi
 8016df2:	f041 0120 	orrmi.w	r1, r1, #32
 8016df6:	6021      	strmi	r1, [r4, #0]
 8016df8:	b91b      	cbnz	r3, 8016e02 <_printf_i+0x15e>
 8016dfa:	6822      	ldr	r2, [r4, #0]
 8016dfc:	f022 0220 	bic.w	r2, r2, #32
 8016e00:	6022      	str	r2, [r4, #0]
 8016e02:	2210      	movs	r2, #16
 8016e04:	e7b7      	b.n	8016d76 <_printf_i+0xd2>
 8016e06:	064d      	lsls	r5, r1, #25
 8016e08:	bf48      	it	mi
 8016e0a:	b29b      	uxthmi	r3, r3
 8016e0c:	e7ef      	b.n	8016dee <_printf_i+0x14a>
 8016e0e:	4665      	mov	r5, ip
 8016e10:	fbb3 f1f2 	udiv	r1, r3, r2
 8016e14:	fb02 3311 	mls	r3, r2, r1, r3
 8016e18:	5cc3      	ldrb	r3, [r0, r3]
 8016e1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016e1e:	460b      	mov	r3, r1
 8016e20:	2900      	cmp	r1, #0
 8016e22:	d1f5      	bne.n	8016e10 <_printf_i+0x16c>
 8016e24:	e7b9      	b.n	8016d9a <_printf_i+0xf6>
 8016e26:	6813      	ldr	r3, [r2, #0]
 8016e28:	6825      	ldr	r5, [r4, #0]
 8016e2a:	6961      	ldr	r1, [r4, #20]
 8016e2c:	1d18      	adds	r0, r3, #4
 8016e2e:	6010      	str	r0, [r2, #0]
 8016e30:	0628      	lsls	r0, r5, #24
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	d501      	bpl.n	8016e3a <_printf_i+0x196>
 8016e36:	6019      	str	r1, [r3, #0]
 8016e38:	e002      	b.n	8016e40 <_printf_i+0x19c>
 8016e3a:	066a      	lsls	r2, r5, #25
 8016e3c:	d5fb      	bpl.n	8016e36 <_printf_i+0x192>
 8016e3e:	8019      	strh	r1, [r3, #0]
 8016e40:	2300      	movs	r3, #0
 8016e42:	6123      	str	r3, [r4, #16]
 8016e44:	4665      	mov	r5, ip
 8016e46:	e7b9      	b.n	8016dbc <_printf_i+0x118>
 8016e48:	6813      	ldr	r3, [r2, #0]
 8016e4a:	1d19      	adds	r1, r3, #4
 8016e4c:	6011      	str	r1, [r2, #0]
 8016e4e:	681d      	ldr	r5, [r3, #0]
 8016e50:	6862      	ldr	r2, [r4, #4]
 8016e52:	2100      	movs	r1, #0
 8016e54:	4628      	mov	r0, r5
 8016e56:	f7e9 f9d3 	bl	8000200 <memchr>
 8016e5a:	b108      	cbz	r0, 8016e60 <_printf_i+0x1bc>
 8016e5c:	1b40      	subs	r0, r0, r5
 8016e5e:	6060      	str	r0, [r4, #4]
 8016e60:	6863      	ldr	r3, [r4, #4]
 8016e62:	6123      	str	r3, [r4, #16]
 8016e64:	2300      	movs	r3, #0
 8016e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e6a:	e7a7      	b.n	8016dbc <_printf_i+0x118>
 8016e6c:	6923      	ldr	r3, [r4, #16]
 8016e6e:	462a      	mov	r2, r5
 8016e70:	4639      	mov	r1, r7
 8016e72:	4630      	mov	r0, r6
 8016e74:	47c0      	blx	r8
 8016e76:	3001      	adds	r0, #1
 8016e78:	d0aa      	beq.n	8016dd0 <_printf_i+0x12c>
 8016e7a:	6823      	ldr	r3, [r4, #0]
 8016e7c:	079b      	lsls	r3, r3, #30
 8016e7e:	d413      	bmi.n	8016ea8 <_printf_i+0x204>
 8016e80:	68e0      	ldr	r0, [r4, #12]
 8016e82:	9b03      	ldr	r3, [sp, #12]
 8016e84:	4298      	cmp	r0, r3
 8016e86:	bfb8      	it	lt
 8016e88:	4618      	movlt	r0, r3
 8016e8a:	e7a3      	b.n	8016dd4 <_printf_i+0x130>
 8016e8c:	2301      	movs	r3, #1
 8016e8e:	464a      	mov	r2, r9
 8016e90:	4639      	mov	r1, r7
 8016e92:	4630      	mov	r0, r6
 8016e94:	47c0      	blx	r8
 8016e96:	3001      	adds	r0, #1
 8016e98:	d09a      	beq.n	8016dd0 <_printf_i+0x12c>
 8016e9a:	3501      	adds	r5, #1
 8016e9c:	68e3      	ldr	r3, [r4, #12]
 8016e9e:	9a03      	ldr	r2, [sp, #12]
 8016ea0:	1a9b      	subs	r3, r3, r2
 8016ea2:	42ab      	cmp	r3, r5
 8016ea4:	dcf2      	bgt.n	8016e8c <_printf_i+0x1e8>
 8016ea6:	e7eb      	b.n	8016e80 <_printf_i+0x1dc>
 8016ea8:	2500      	movs	r5, #0
 8016eaa:	f104 0919 	add.w	r9, r4, #25
 8016eae:	e7f5      	b.n	8016e9c <_printf_i+0x1f8>
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d1ac      	bne.n	8016e0e <_printf_i+0x16a>
 8016eb4:	7803      	ldrb	r3, [r0, #0]
 8016eb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016eba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016ebe:	e76c      	b.n	8016d9a <_printf_i+0xf6>
 8016ec0:	0801a321 	.word	0x0801a321
 8016ec4:	0801a332 	.word	0x0801a332

08016ec8 <_sbrk_r>:
 8016ec8:	b538      	push	{r3, r4, r5, lr}
 8016eca:	4c06      	ldr	r4, [pc, #24]	; (8016ee4 <_sbrk_r+0x1c>)
 8016ecc:	2300      	movs	r3, #0
 8016ece:	4605      	mov	r5, r0
 8016ed0:	4608      	mov	r0, r1
 8016ed2:	6023      	str	r3, [r4, #0]
 8016ed4:	f000 fb00 	bl	80174d8 <_sbrk>
 8016ed8:	1c43      	adds	r3, r0, #1
 8016eda:	d102      	bne.n	8016ee2 <_sbrk_r+0x1a>
 8016edc:	6823      	ldr	r3, [r4, #0]
 8016ede:	b103      	cbz	r3, 8016ee2 <_sbrk_r+0x1a>
 8016ee0:	602b      	str	r3, [r5, #0]
 8016ee2:	bd38      	pop	{r3, r4, r5, pc}
 8016ee4:	2000dc70 	.word	0x2000dc70

08016ee8 <__sread>:
 8016ee8:	b510      	push	{r4, lr}
 8016eea:	460c      	mov	r4, r1
 8016eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ef0:	f000 fa96 	bl	8017420 <_read_r>
 8016ef4:	2800      	cmp	r0, #0
 8016ef6:	bfab      	itete	ge
 8016ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016efa:	89a3      	ldrhlt	r3, [r4, #12]
 8016efc:	181b      	addge	r3, r3, r0
 8016efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016f02:	bfac      	ite	ge
 8016f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8016f06:	81a3      	strhlt	r3, [r4, #12]
 8016f08:	bd10      	pop	{r4, pc}

08016f0a <__swrite>:
 8016f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f0e:	461f      	mov	r7, r3
 8016f10:	898b      	ldrh	r3, [r1, #12]
 8016f12:	05db      	lsls	r3, r3, #23
 8016f14:	4605      	mov	r5, r0
 8016f16:	460c      	mov	r4, r1
 8016f18:	4616      	mov	r6, r2
 8016f1a:	d505      	bpl.n	8016f28 <__swrite+0x1e>
 8016f1c:	2302      	movs	r3, #2
 8016f1e:	2200      	movs	r2, #0
 8016f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f24:	f000 f9b6 	bl	8017294 <_lseek_r>
 8016f28:	89a3      	ldrh	r3, [r4, #12]
 8016f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016f32:	81a3      	strh	r3, [r4, #12]
 8016f34:	4632      	mov	r2, r6
 8016f36:	463b      	mov	r3, r7
 8016f38:	4628      	mov	r0, r5
 8016f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f3e:	f000 b869 	b.w	8017014 <_write_r>

08016f42 <__sseek>:
 8016f42:	b510      	push	{r4, lr}
 8016f44:	460c      	mov	r4, r1
 8016f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f4a:	f000 f9a3 	bl	8017294 <_lseek_r>
 8016f4e:	1c43      	adds	r3, r0, #1
 8016f50:	89a3      	ldrh	r3, [r4, #12]
 8016f52:	bf15      	itete	ne
 8016f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8016f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016f5e:	81a3      	strheq	r3, [r4, #12]
 8016f60:	bf18      	it	ne
 8016f62:	81a3      	strhne	r3, [r4, #12]
 8016f64:	bd10      	pop	{r4, pc}

08016f66 <__sclose>:
 8016f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f6a:	f000 b8d3 	b.w	8017114 <_close_r>
	...

08016f70 <__swbuf_r>:
 8016f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f72:	460e      	mov	r6, r1
 8016f74:	4614      	mov	r4, r2
 8016f76:	4605      	mov	r5, r0
 8016f78:	b118      	cbz	r0, 8016f82 <__swbuf_r+0x12>
 8016f7a:	6983      	ldr	r3, [r0, #24]
 8016f7c:	b90b      	cbnz	r3, 8016f82 <__swbuf_r+0x12>
 8016f7e:	f7ff fbf7 	bl	8016770 <__sinit>
 8016f82:	4b21      	ldr	r3, [pc, #132]	; (8017008 <__swbuf_r+0x98>)
 8016f84:	429c      	cmp	r4, r3
 8016f86:	d12a      	bne.n	8016fde <__swbuf_r+0x6e>
 8016f88:	686c      	ldr	r4, [r5, #4]
 8016f8a:	69a3      	ldr	r3, [r4, #24]
 8016f8c:	60a3      	str	r3, [r4, #8]
 8016f8e:	89a3      	ldrh	r3, [r4, #12]
 8016f90:	071a      	lsls	r2, r3, #28
 8016f92:	d52e      	bpl.n	8016ff2 <__swbuf_r+0x82>
 8016f94:	6923      	ldr	r3, [r4, #16]
 8016f96:	b363      	cbz	r3, 8016ff2 <__swbuf_r+0x82>
 8016f98:	6923      	ldr	r3, [r4, #16]
 8016f9a:	6820      	ldr	r0, [r4, #0]
 8016f9c:	1ac0      	subs	r0, r0, r3
 8016f9e:	6963      	ldr	r3, [r4, #20]
 8016fa0:	b2f6      	uxtb	r6, r6
 8016fa2:	4283      	cmp	r3, r0
 8016fa4:	4637      	mov	r7, r6
 8016fa6:	dc04      	bgt.n	8016fb2 <__swbuf_r+0x42>
 8016fa8:	4621      	mov	r1, r4
 8016faa:	4628      	mov	r0, r5
 8016fac:	f000 f948 	bl	8017240 <_fflush_r>
 8016fb0:	bb28      	cbnz	r0, 8016ffe <__swbuf_r+0x8e>
 8016fb2:	68a3      	ldr	r3, [r4, #8]
 8016fb4:	3b01      	subs	r3, #1
 8016fb6:	60a3      	str	r3, [r4, #8]
 8016fb8:	6823      	ldr	r3, [r4, #0]
 8016fba:	1c5a      	adds	r2, r3, #1
 8016fbc:	6022      	str	r2, [r4, #0]
 8016fbe:	701e      	strb	r6, [r3, #0]
 8016fc0:	6963      	ldr	r3, [r4, #20]
 8016fc2:	3001      	adds	r0, #1
 8016fc4:	4283      	cmp	r3, r0
 8016fc6:	d004      	beq.n	8016fd2 <__swbuf_r+0x62>
 8016fc8:	89a3      	ldrh	r3, [r4, #12]
 8016fca:	07db      	lsls	r3, r3, #31
 8016fcc:	d519      	bpl.n	8017002 <__swbuf_r+0x92>
 8016fce:	2e0a      	cmp	r6, #10
 8016fd0:	d117      	bne.n	8017002 <__swbuf_r+0x92>
 8016fd2:	4621      	mov	r1, r4
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	f000 f933 	bl	8017240 <_fflush_r>
 8016fda:	b190      	cbz	r0, 8017002 <__swbuf_r+0x92>
 8016fdc:	e00f      	b.n	8016ffe <__swbuf_r+0x8e>
 8016fde:	4b0b      	ldr	r3, [pc, #44]	; (801700c <__swbuf_r+0x9c>)
 8016fe0:	429c      	cmp	r4, r3
 8016fe2:	d101      	bne.n	8016fe8 <__swbuf_r+0x78>
 8016fe4:	68ac      	ldr	r4, [r5, #8]
 8016fe6:	e7d0      	b.n	8016f8a <__swbuf_r+0x1a>
 8016fe8:	4b09      	ldr	r3, [pc, #36]	; (8017010 <__swbuf_r+0xa0>)
 8016fea:	429c      	cmp	r4, r3
 8016fec:	bf08      	it	eq
 8016fee:	68ec      	ldreq	r4, [r5, #12]
 8016ff0:	e7cb      	b.n	8016f8a <__swbuf_r+0x1a>
 8016ff2:	4621      	mov	r1, r4
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	f000 f81f 	bl	8017038 <__swsetup_r>
 8016ffa:	2800      	cmp	r0, #0
 8016ffc:	d0cc      	beq.n	8016f98 <__swbuf_r+0x28>
 8016ffe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017002:	4638      	mov	r0, r7
 8017004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017006:	bf00      	nop
 8017008:	0801a2d0 	.word	0x0801a2d0
 801700c:	0801a2f0 	.word	0x0801a2f0
 8017010:	0801a2b0 	.word	0x0801a2b0

08017014 <_write_r>:
 8017014:	b538      	push	{r3, r4, r5, lr}
 8017016:	4c07      	ldr	r4, [pc, #28]	; (8017034 <_write_r+0x20>)
 8017018:	4605      	mov	r5, r0
 801701a:	4608      	mov	r0, r1
 801701c:	4611      	mov	r1, r2
 801701e:	2200      	movs	r2, #0
 8017020:	6022      	str	r2, [r4, #0]
 8017022:	461a      	mov	r2, r3
 8017024:	f000 fa66 	bl	80174f4 <_write>
 8017028:	1c43      	adds	r3, r0, #1
 801702a:	d102      	bne.n	8017032 <_write_r+0x1e>
 801702c:	6823      	ldr	r3, [r4, #0]
 801702e:	b103      	cbz	r3, 8017032 <_write_r+0x1e>
 8017030:	602b      	str	r3, [r5, #0]
 8017032:	bd38      	pop	{r3, r4, r5, pc}
 8017034:	2000dc70 	.word	0x2000dc70

08017038 <__swsetup_r>:
 8017038:	4b32      	ldr	r3, [pc, #200]	; (8017104 <__swsetup_r+0xcc>)
 801703a:	b570      	push	{r4, r5, r6, lr}
 801703c:	681d      	ldr	r5, [r3, #0]
 801703e:	4606      	mov	r6, r0
 8017040:	460c      	mov	r4, r1
 8017042:	b125      	cbz	r5, 801704e <__swsetup_r+0x16>
 8017044:	69ab      	ldr	r3, [r5, #24]
 8017046:	b913      	cbnz	r3, 801704e <__swsetup_r+0x16>
 8017048:	4628      	mov	r0, r5
 801704a:	f7ff fb91 	bl	8016770 <__sinit>
 801704e:	4b2e      	ldr	r3, [pc, #184]	; (8017108 <__swsetup_r+0xd0>)
 8017050:	429c      	cmp	r4, r3
 8017052:	d10f      	bne.n	8017074 <__swsetup_r+0x3c>
 8017054:	686c      	ldr	r4, [r5, #4]
 8017056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801705a:	b29a      	uxth	r2, r3
 801705c:	0715      	lsls	r5, r2, #28
 801705e:	d42c      	bmi.n	80170ba <__swsetup_r+0x82>
 8017060:	06d0      	lsls	r0, r2, #27
 8017062:	d411      	bmi.n	8017088 <__swsetup_r+0x50>
 8017064:	2209      	movs	r2, #9
 8017066:	6032      	str	r2, [r6, #0]
 8017068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801706c:	81a3      	strh	r3, [r4, #12]
 801706e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017072:	e03e      	b.n	80170f2 <__swsetup_r+0xba>
 8017074:	4b25      	ldr	r3, [pc, #148]	; (801710c <__swsetup_r+0xd4>)
 8017076:	429c      	cmp	r4, r3
 8017078:	d101      	bne.n	801707e <__swsetup_r+0x46>
 801707a:	68ac      	ldr	r4, [r5, #8]
 801707c:	e7eb      	b.n	8017056 <__swsetup_r+0x1e>
 801707e:	4b24      	ldr	r3, [pc, #144]	; (8017110 <__swsetup_r+0xd8>)
 8017080:	429c      	cmp	r4, r3
 8017082:	bf08      	it	eq
 8017084:	68ec      	ldreq	r4, [r5, #12]
 8017086:	e7e6      	b.n	8017056 <__swsetup_r+0x1e>
 8017088:	0751      	lsls	r1, r2, #29
 801708a:	d512      	bpl.n	80170b2 <__swsetup_r+0x7a>
 801708c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801708e:	b141      	cbz	r1, 80170a2 <__swsetup_r+0x6a>
 8017090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017094:	4299      	cmp	r1, r3
 8017096:	d002      	beq.n	801709e <__swsetup_r+0x66>
 8017098:	4630      	mov	r0, r6
 801709a:	f000 f973 	bl	8017384 <_free_r>
 801709e:	2300      	movs	r3, #0
 80170a0:	6363      	str	r3, [r4, #52]	; 0x34
 80170a2:	89a3      	ldrh	r3, [r4, #12]
 80170a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80170a8:	81a3      	strh	r3, [r4, #12]
 80170aa:	2300      	movs	r3, #0
 80170ac:	6063      	str	r3, [r4, #4]
 80170ae:	6923      	ldr	r3, [r4, #16]
 80170b0:	6023      	str	r3, [r4, #0]
 80170b2:	89a3      	ldrh	r3, [r4, #12]
 80170b4:	f043 0308 	orr.w	r3, r3, #8
 80170b8:	81a3      	strh	r3, [r4, #12]
 80170ba:	6923      	ldr	r3, [r4, #16]
 80170bc:	b94b      	cbnz	r3, 80170d2 <__swsetup_r+0x9a>
 80170be:	89a3      	ldrh	r3, [r4, #12]
 80170c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80170c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80170c8:	d003      	beq.n	80170d2 <__swsetup_r+0x9a>
 80170ca:	4621      	mov	r1, r4
 80170cc:	4630      	mov	r0, r6
 80170ce:	f000 f917 	bl	8017300 <__smakebuf_r>
 80170d2:	89a2      	ldrh	r2, [r4, #12]
 80170d4:	f012 0301 	ands.w	r3, r2, #1
 80170d8:	d00c      	beq.n	80170f4 <__swsetup_r+0xbc>
 80170da:	2300      	movs	r3, #0
 80170dc:	60a3      	str	r3, [r4, #8]
 80170de:	6963      	ldr	r3, [r4, #20]
 80170e0:	425b      	negs	r3, r3
 80170e2:	61a3      	str	r3, [r4, #24]
 80170e4:	6923      	ldr	r3, [r4, #16]
 80170e6:	b953      	cbnz	r3, 80170fe <__swsetup_r+0xc6>
 80170e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80170f0:	d1ba      	bne.n	8017068 <__swsetup_r+0x30>
 80170f2:	bd70      	pop	{r4, r5, r6, pc}
 80170f4:	0792      	lsls	r2, r2, #30
 80170f6:	bf58      	it	pl
 80170f8:	6963      	ldrpl	r3, [r4, #20]
 80170fa:	60a3      	str	r3, [r4, #8]
 80170fc:	e7f2      	b.n	80170e4 <__swsetup_r+0xac>
 80170fe:	2000      	movs	r0, #0
 8017100:	e7f7      	b.n	80170f2 <__swsetup_r+0xba>
 8017102:	bf00      	nop
 8017104:	2000001c 	.word	0x2000001c
 8017108:	0801a2d0 	.word	0x0801a2d0
 801710c:	0801a2f0 	.word	0x0801a2f0
 8017110:	0801a2b0 	.word	0x0801a2b0

08017114 <_close_r>:
 8017114:	b538      	push	{r3, r4, r5, lr}
 8017116:	4c06      	ldr	r4, [pc, #24]	; (8017130 <_close_r+0x1c>)
 8017118:	2300      	movs	r3, #0
 801711a:	4605      	mov	r5, r0
 801711c:	4608      	mov	r0, r1
 801711e:	6023      	str	r3, [r4, #0]
 8017120:	f000 f9b2 	bl	8017488 <_close>
 8017124:	1c43      	adds	r3, r0, #1
 8017126:	d102      	bne.n	801712e <_close_r+0x1a>
 8017128:	6823      	ldr	r3, [r4, #0]
 801712a:	b103      	cbz	r3, 801712e <_close_r+0x1a>
 801712c:	602b      	str	r3, [r5, #0]
 801712e:	bd38      	pop	{r3, r4, r5, pc}
 8017130:	2000dc70 	.word	0x2000dc70

08017134 <__sflush_r>:
 8017134:	898a      	ldrh	r2, [r1, #12]
 8017136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801713a:	4605      	mov	r5, r0
 801713c:	0710      	lsls	r0, r2, #28
 801713e:	460c      	mov	r4, r1
 8017140:	d458      	bmi.n	80171f4 <__sflush_r+0xc0>
 8017142:	684b      	ldr	r3, [r1, #4]
 8017144:	2b00      	cmp	r3, #0
 8017146:	dc05      	bgt.n	8017154 <__sflush_r+0x20>
 8017148:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801714a:	2b00      	cmp	r3, #0
 801714c:	dc02      	bgt.n	8017154 <__sflush_r+0x20>
 801714e:	2000      	movs	r0, #0
 8017150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017156:	2e00      	cmp	r6, #0
 8017158:	d0f9      	beq.n	801714e <__sflush_r+0x1a>
 801715a:	2300      	movs	r3, #0
 801715c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017160:	682f      	ldr	r7, [r5, #0]
 8017162:	6a21      	ldr	r1, [r4, #32]
 8017164:	602b      	str	r3, [r5, #0]
 8017166:	d032      	beq.n	80171ce <__sflush_r+0x9a>
 8017168:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801716a:	89a3      	ldrh	r3, [r4, #12]
 801716c:	075a      	lsls	r2, r3, #29
 801716e:	d505      	bpl.n	801717c <__sflush_r+0x48>
 8017170:	6863      	ldr	r3, [r4, #4]
 8017172:	1ac0      	subs	r0, r0, r3
 8017174:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017176:	b10b      	cbz	r3, 801717c <__sflush_r+0x48>
 8017178:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801717a:	1ac0      	subs	r0, r0, r3
 801717c:	2300      	movs	r3, #0
 801717e:	4602      	mov	r2, r0
 8017180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017182:	6a21      	ldr	r1, [r4, #32]
 8017184:	4628      	mov	r0, r5
 8017186:	47b0      	blx	r6
 8017188:	1c43      	adds	r3, r0, #1
 801718a:	89a3      	ldrh	r3, [r4, #12]
 801718c:	d106      	bne.n	801719c <__sflush_r+0x68>
 801718e:	6829      	ldr	r1, [r5, #0]
 8017190:	291d      	cmp	r1, #29
 8017192:	d848      	bhi.n	8017226 <__sflush_r+0xf2>
 8017194:	4a29      	ldr	r2, [pc, #164]	; (801723c <__sflush_r+0x108>)
 8017196:	40ca      	lsrs	r2, r1
 8017198:	07d6      	lsls	r6, r2, #31
 801719a:	d544      	bpl.n	8017226 <__sflush_r+0xf2>
 801719c:	2200      	movs	r2, #0
 801719e:	6062      	str	r2, [r4, #4]
 80171a0:	04d9      	lsls	r1, r3, #19
 80171a2:	6922      	ldr	r2, [r4, #16]
 80171a4:	6022      	str	r2, [r4, #0]
 80171a6:	d504      	bpl.n	80171b2 <__sflush_r+0x7e>
 80171a8:	1c42      	adds	r2, r0, #1
 80171aa:	d101      	bne.n	80171b0 <__sflush_r+0x7c>
 80171ac:	682b      	ldr	r3, [r5, #0]
 80171ae:	b903      	cbnz	r3, 80171b2 <__sflush_r+0x7e>
 80171b0:	6560      	str	r0, [r4, #84]	; 0x54
 80171b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80171b4:	602f      	str	r7, [r5, #0]
 80171b6:	2900      	cmp	r1, #0
 80171b8:	d0c9      	beq.n	801714e <__sflush_r+0x1a>
 80171ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171be:	4299      	cmp	r1, r3
 80171c0:	d002      	beq.n	80171c8 <__sflush_r+0x94>
 80171c2:	4628      	mov	r0, r5
 80171c4:	f000 f8de 	bl	8017384 <_free_r>
 80171c8:	2000      	movs	r0, #0
 80171ca:	6360      	str	r0, [r4, #52]	; 0x34
 80171cc:	e7c0      	b.n	8017150 <__sflush_r+0x1c>
 80171ce:	2301      	movs	r3, #1
 80171d0:	4628      	mov	r0, r5
 80171d2:	47b0      	blx	r6
 80171d4:	1c41      	adds	r1, r0, #1
 80171d6:	d1c8      	bne.n	801716a <__sflush_r+0x36>
 80171d8:	682b      	ldr	r3, [r5, #0]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d0c5      	beq.n	801716a <__sflush_r+0x36>
 80171de:	2b1d      	cmp	r3, #29
 80171e0:	d001      	beq.n	80171e6 <__sflush_r+0xb2>
 80171e2:	2b16      	cmp	r3, #22
 80171e4:	d101      	bne.n	80171ea <__sflush_r+0xb6>
 80171e6:	602f      	str	r7, [r5, #0]
 80171e8:	e7b1      	b.n	801714e <__sflush_r+0x1a>
 80171ea:	89a3      	ldrh	r3, [r4, #12]
 80171ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171f0:	81a3      	strh	r3, [r4, #12]
 80171f2:	e7ad      	b.n	8017150 <__sflush_r+0x1c>
 80171f4:	690f      	ldr	r7, [r1, #16]
 80171f6:	2f00      	cmp	r7, #0
 80171f8:	d0a9      	beq.n	801714e <__sflush_r+0x1a>
 80171fa:	0793      	lsls	r3, r2, #30
 80171fc:	680e      	ldr	r6, [r1, #0]
 80171fe:	bf08      	it	eq
 8017200:	694b      	ldreq	r3, [r1, #20]
 8017202:	600f      	str	r7, [r1, #0]
 8017204:	bf18      	it	ne
 8017206:	2300      	movne	r3, #0
 8017208:	eba6 0807 	sub.w	r8, r6, r7
 801720c:	608b      	str	r3, [r1, #8]
 801720e:	f1b8 0f00 	cmp.w	r8, #0
 8017212:	dd9c      	ble.n	801714e <__sflush_r+0x1a>
 8017214:	4643      	mov	r3, r8
 8017216:	463a      	mov	r2, r7
 8017218:	6a21      	ldr	r1, [r4, #32]
 801721a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801721c:	4628      	mov	r0, r5
 801721e:	47b0      	blx	r6
 8017220:	2800      	cmp	r0, #0
 8017222:	dc06      	bgt.n	8017232 <__sflush_r+0xfe>
 8017224:	89a3      	ldrh	r3, [r4, #12]
 8017226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801722a:	81a3      	strh	r3, [r4, #12]
 801722c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017230:	e78e      	b.n	8017150 <__sflush_r+0x1c>
 8017232:	4407      	add	r7, r0
 8017234:	eba8 0800 	sub.w	r8, r8, r0
 8017238:	e7e9      	b.n	801720e <__sflush_r+0xda>
 801723a:	bf00      	nop
 801723c:	20400001 	.word	0x20400001

08017240 <_fflush_r>:
 8017240:	b538      	push	{r3, r4, r5, lr}
 8017242:	690b      	ldr	r3, [r1, #16]
 8017244:	4605      	mov	r5, r0
 8017246:	460c      	mov	r4, r1
 8017248:	b1db      	cbz	r3, 8017282 <_fflush_r+0x42>
 801724a:	b118      	cbz	r0, 8017254 <_fflush_r+0x14>
 801724c:	6983      	ldr	r3, [r0, #24]
 801724e:	b90b      	cbnz	r3, 8017254 <_fflush_r+0x14>
 8017250:	f7ff fa8e 	bl	8016770 <__sinit>
 8017254:	4b0c      	ldr	r3, [pc, #48]	; (8017288 <_fflush_r+0x48>)
 8017256:	429c      	cmp	r4, r3
 8017258:	d109      	bne.n	801726e <_fflush_r+0x2e>
 801725a:	686c      	ldr	r4, [r5, #4]
 801725c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017260:	b17b      	cbz	r3, 8017282 <_fflush_r+0x42>
 8017262:	4621      	mov	r1, r4
 8017264:	4628      	mov	r0, r5
 8017266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801726a:	f7ff bf63 	b.w	8017134 <__sflush_r>
 801726e:	4b07      	ldr	r3, [pc, #28]	; (801728c <_fflush_r+0x4c>)
 8017270:	429c      	cmp	r4, r3
 8017272:	d101      	bne.n	8017278 <_fflush_r+0x38>
 8017274:	68ac      	ldr	r4, [r5, #8]
 8017276:	e7f1      	b.n	801725c <_fflush_r+0x1c>
 8017278:	4b05      	ldr	r3, [pc, #20]	; (8017290 <_fflush_r+0x50>)
 801727a:	429c      	cmp	r4, r3
 801727c:	bf08      	it	eq
 801727e:	68ec      	ldreq	r4, [r5, #12]
 8017280:	e7ec      	b.n	801725c <_fflush_r+0x1c>
 8017282:	2000      	movs	r0, #0
 8017284:	bd38      	pop	{r3, r4, r5, pc}
 8017286:	bf00      	nop
 8017288:	0801a2d0 	.word	0x0801a2d0
 801728c:	0801a2f0 	.word	0x0801a2f0
 8017290:	0801a2b0 	.word	0x0801a2b0

08017294 <_lseek_r>:
 8017294:	b538      	push	{r3, r4, r5, lr}
 8017296:	4c07      	ldr	r4, [pc, #28]	; (80172b4 <_lseek_r+0x20>)
 8017298:	4605      	mov	r5, r0
 801729a:	4608      	mov	r0, r1
 801729c:	4611      	mov	r1, r2
 801729e:	2200      	movs	r2, #0
 80172a0:	6022      	str	r2, [r4, #0]
 80172a2:	461a      	mov	r2, r3
 80172a4:	f000 f908 	bl	80174b8 <_lseek>
 80172a8:	1c43      	adds	r3, r0, #1
 80172aa:	d102      	bne.n	80172b2 <_lseek_r+0x1e>
 80172ac:	6823      	ldr	r3, [r4, #0]
 80172ae:	b103      	cbz	r3, 80172b2 <_lseek_r+0x1e>
 80172b0:	602b      	str	r3, [r5, #0]
 80172b2:	bd38      	pop	{r3, r4, r5, pc}
 80172b4:	2000dc70 	.word	0x2000dc70

080172b8 <__swhatbuf_r>:
 80172b8:	b570      	push	{r4, r5, r6, lr}
 80172ba:	460e      	mov	r6, r1
 80172bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172c0:	2900      	cmp	r1, #0
 80172c2:	b096      	sub	sp, #88	; 0x58
 80172c4:	4614      	mov	r4, r2
 80172c6:	461d      	mov	r5, r3
 80172c8:	da07      	bge.n	80172da <__swhatbuf_r+0x22>
 80172ca:	2300      	movs	r3, #0
 80172cc:	602b      	str	r3, [r5, #0]
 80172ce:	89b3      	ldrh	r3, [r6, #12]
 80172d0:	061a      	lsls	r2, r3, #24
 80172d2:	d410      	bmi.n	80172f6 <__swhatbuf_r+0x3e>
 80172d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80172d8:	e00e      	b.n	80172f8 <__swhatbuf_r+0x40>
 80172da:	466a      	mov	r2, sp
 80172dc:	f000 f8b2 	bl	8017444 <_fstat_r>
 80172e0:	2800      	cmp	r0, #0
 80172e2:	dbf2      	blt.n	80172ca <__swhatbuf_r+0x12>
 80172e4:	9a01      	ldr	r2, [sp, #4]
 80172e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80172ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80172ee:	425a      	negs	r2, r3
 80172f0:	415a      	adcs	r2, r3
 80172f2:	602a      	str	r2, [r5, #0]
 80172f4:	e7ee      	b.n	80172d4 <__swhatbuf_r+0x1c>
 80172f6:	2340      	movs	r3, #64	; 0x40
 80172f8:	2000      	movs	r0, #0
 80172fa:	6023      	str	r3, [r4, #0]
 80172fc:	b016      	add	sp, #88	; 0x58
 80172fe:	bd70      	pop	{r4, r5, r6, pc}

08017300 <__smakebuf_r>:
 8017300:	898b      	ldrh	r3, [r1, #12]
 8017302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017304:	079d      	lsls	r5, r3, #30
 8017306:	4606      	mov	r6, r0
 8017308:	460c      	mov	r4, r1
 801730a:	d507      	bpl.n	801731c <__smakebuf_r+0x1c>
 801730c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017310:	6023      	str	r3, [r4, #0]
 8017312:	6123      	str	r3, [r4, #16]
 8017314:	2301      	movs	r3, #1
 8017316:	6163      	str	r3, [r4, #20]
 8017318:	b002      	add	sp, #8
 801731a:	bd70      	pop	{r4, r5, r6, pc}
 801731c:	ab01      	add	r3, sp, #4
 801731e:	466a      	mov	r2, sp
 8017320:	f7ff ffca 	bl	80172b8 <__swhatbuf_r>
 8017324:	9900      	ldr	r1, [sp, #0]
 8017326:	4605      	mov	r5, r0
 8017328:	4630      	mov	r0, r6
 801732a:	f7ff faab 	bl	8016884 <_malloc_r>
 801732e:	b948      	cbnz	r0, 8017344 <__smakebuf_r+0x44>
 8017330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017334:	059a      	lsls	r2, r3, #22
 8017336:	d4ef      	bmi.n	8017318 <__smakebuf_r+0x18>
 8017338:	f023 0303 	bic.w	r3, r3, #3
 801733c:	f043 0302 	orr.w	r3, r3, #2
 8017340:	81a3      	strh	r3, [r4, #12]
 8017342:	e7e3      	b.n	801730c <__smakebuf_r+0xc>
 8017344:	4b0d      	ldr	r3, [pc, #52]	; (801737c <__smakebuf_r+0x7c>)
 8017346:	62b3      	str	r3, [r6, #40]	; 0x28
 8017348:	89a3      	ldrh	r3, [r4, #12]
 801734a:	6020      	str	r0, [r4, #0]
 801734c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017350:	81a3      	strh	r3, [r4, #12]
 8017352:	9b00      	ldr	r3, [sp, #0]
 8017354:	6163      	str	r3, [r4, #20]
 8017356:	9b01      	ldr	r3, [sp, #4]
 8017358:	6120      	str	r0, [r4, #16]
 801735a:	b15b      	cbz	r3, 8017374 <__smakebuf_r+0x74>
 801735c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017360:	4630      	mov	r0, r6
 8017362:	f000 f881 	bl	8017468 <_isatty_r>
 8017366:	b128      	cbz	r0, 8017374 <__smakebuf_r+0x74>
 8017368:	89a3      	ldrh	r3, [r4, #12]
 801736a:	f023 0303 	bic.w	r3, r3, #3
 801736e:	f043 0301 	orr.w	r3, r3, #1
 8017372:	81a3      	strh	r3, [r4, #12]
 8017374:	89a3      	ldrh	r3, [r4, #12]
 8017376:	431d      	orrs	r5, r3
 8017378:	81a5      	strh	r5, [r4, #12]
 801737a:	e7cd      	b.n	8017318 <__smakebuf_r+0x18>
 801737c:	08016739 	.word	0x08016739

08017380 <__malloc_lock>:
 8017380:	4770      	bx	lr

08017382 <__malloc_unlock>:
 8017382:	4770      	bx	lr

08017384 <_free_r>:
 8017384:	b538      	push	{r3, r4, r5, lr}
 8017386:	4605      	mov	r5, r0
 8017388:	2900      	cmp	r1, #0
 801738a:	d045      	beq.n	8017418 <_free_r+0x94>
 801738c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017390:	1f0c      	subs	r4, r1, #4
 8017392:	2b00      	cmp	r3, #0
 8017394:	bfb8      	it	lt
 8017396:	18e4      	addlt	r4, r4, r3
 8017398:	f7ff fff2 	bl	8017380 <__malloc_lock>
 801739c:	4a1f      	ldr	r2, [pc, #124]	; (801741c <_free_r+0x98>)
 801739e:	6813      	ldr	r3, [r2, #0]
 80173a0:	4610      	mov	r0, r2
 80173a2:	b933      	cbnz	r3, 80173b2 <_free_r+0x2e>
 80173a4:	6063      	str	r3, [r4, #4]
 80173a6:	6014      	str	r4, [r2, #0]
 80173a8:	4628      	mov	r0, r5
 80173aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173ae:	f7ff bfe8 	b.w	8017382 <__malloc_unlock>
 80173b2:	42a3      	cmp	r3, r4
 80173b4:	d90c      	bls.n	80173d0 <_free_r+0x4c>
 80173b6:	6821      	ldr	r1, [r4, #0]
 80173b8:	1862      	adds	r2, r4, r1
 80173ba:	4293      	cmp	r3, r2
 80173bc:	bf04      	itt	eq
 80173be:	681a      	ldreq	r2, [r3, #0]
 80173c0:	685b      	ldreq	r3, [r3, #4]
 80173c2:	6063      	str	r3, [r4, #4]
 80173c4:	bf04      	itt	eq
 80173c6:	1852      	addeq	r2, r2, r1
 80173c8:	6022      	streq	r2, [r4, #0]
 80173ca:	6004      	str	r4, [r0, #0]
 80173cc:	e7ec      	b.n	80173a8 <_free_r+0x24>
 80173ce:	4613      	mov	r3, r2
 80173d0:	685a      	ldr	r2, [r3, #4]
 80173d2:	b10a      	cbz	r2, 80173d8 <_free_r+0x54>
 80173d4:	42a2      	cmp	r2, r4
 80173d6:	d9fa      	bls.n	80173ce <_free_r+0x4a>
 80173d8:	6819      	ldr	r1, [r3, #0]
 80173da:	1858      	adds	r0, r3, r1
 80173dc:	42a0      	cmp	r0, r4
 80173de:	d10b      	bne.n	80173f8 <_free_r+0x74>
 80173e0:	6820      	ldr	r0, [r4, #0]
 80173e2:	4401      	add	r1, r0
 80173e4:	1858      	adds	r0, r3, r1
 80173e6:	4282      	cmp	r2, r0
 80173e8:	6019      	str	r1, [r3, #0]
 80173ea:	d1dd      	bne.n	80173a8 <_free_r+0x24>
 80173ec:	6810      	ldr	r0, [r2, #0]
 80173ee:	6852      	ldr	r2, [r2, #4]
 80173f0:	605a      	str	r2, [r3, #4]
 80173f2:	4401      	add	r1, r0
 80173f4:	6019      	str	r1, [r3, #0]
 80173f6:	e7d7      	b.n	80173a8 <_free_r+0x24>
 80173f8:	d902      	bls.n	8017400 <_free_r+0x7c>
 80173fa:	230c      	movs	r3, #12
 80173fc:	602b      	str	r3, [r5, #0]
 80173fe:	e7d3      	b.n	80173a8 <_free_r+0x24>
 8017400:	6820      	ldr	r0, [r4, #0]
 8017402:	1821      	adds	r1, r4, r0
 8017404:	428a      	cmp	r2, r1
 8017406:	bf04      	itt	eq
 8017408:	6811      	ldreq	r1, [r2, #0]
 801740a:	6852      	ldreq	r2, [r2, #4]
 801740c:	6062      	str	r2, [r4, #4]
 801740e:	bf04      	itt	eq
 8017410:	1809      	addeq	r1, r1, r0
 8017412:	6021      	streq	r1, [r4, #0]
 8017414:	605c      	str	r4, [r3, #4]
 8017416:	e7c7      	b.n	80173a8 <_free_r+0x24>
 8017418:	bd38      	pop	{r3, r4, r5, pc}
 801741a:	bf00      	nop
 801741c:	20004290 	.word	0x20004290

08017420 <_read_r>:
 8017420:	b538      	push	{r3, r4, r5, lr}
 8017422:	4c07      	ldr	r4, [pc, #28]	; (8017440 <_read_r+0x20>)
 8017424:	4605      	mov	r5, r0
 8017426:	4608      	mov	r0, r1
 8017428:	4611      	mov	r1, r2
 801742a:	2200      	movs	r2, #0
 801742c:	6022      	str	r2, [r4, #0]
 801742e:	461a      	mov	r2, r3
 8017430:	f000 f84a 	bl	80174c8 <_read>
 8017434:	1c43      	adds	r3, r0, #1
 8017436:	d102      	bne.n	801743e <_read_r+0x1e>
 8017438:	6823      	ldr	r3, [r4, #0]
 801743a:	b103      	cbz	r3, 801743e <_read_r+0x1e>
 801743c:	602b      	str	r3, [r5, #0]
 801743e:	bd38      	pop	{r3, r4, r5, pc}
 8017440:	2000dc70 	.word	0x2000dc70

08017444 <_fstat_r>:
 8017444:	b538      	push	{r3, r4, r5, lr}
 8017446:	4c07      	ldr	r4, [pc, #28]	; (8017464 <_fstat_r+0x20>)
 8017448:	2300      	movs	r3, #0
 801744a:	4605      	mov	r5, r0
 801744c:	4608      	mov	r0, r1
 801744e:	4611      	mov	r1, r2
 8017450:	6023      	str	r3, [r4, #0]
 8017452:	f000 f821 	bl	8017498 <_fstat>
 8017456:	1c43      	adds	r3, r0, #1
 8017458:	d102      	bne.n	8017460 <_fstat_r+0x1c>
 801745a:	6823      	ldr	r3, [r4, #0]
 801745c:	b103      	cbz	r3, 8017460 <_fstat_r+0x1c>
 801745e:	602b      	str	r3, [r5, #0]
 8017460:	bd38      	pop	{r3, r4, r5, pc}
 8017462:	bf00      	nop
 8017464:	2000dc70 	.word	0x2000dc70

08017468 <_isatty_r>:
 8017468:	b538      	push	{r3, r4, r5, lr}
 801746a:	4c06      	ldr	r4, [pc, #24]	; (8017484 <_isatty_r+0x1c>)
 801746c:	2300      	movs	r3, #0
 801746e:	4605      	mov	r5, r0
 8017470:	4608      	mov	r0, r1
 8017472:	6023      	str	r3, [r4, #0]
 8017474:	f000 f818 	bl	80174a8 <_isatty>
 8017478:	1c43      	adds	r3, r0, #1
 801747a:	d102      	bne.n	8017482 <_isatty_r+0x1a>
 801747c:	6823      	ldr	r3, [r4, #0]
 801747e:	b103      	cbz	r3, 8017482 <_isatty_r+0x1a>
 8017480:	602b      	str	r3, [r5, #0]
 8017482:	bd38      	pop	{r3, r4, r5, pc}
 8017484:	2000dc70 	.word	0x2000dc70

08017488 <_close>:
 8017488:	4b02      	ldr	r3, [pc, #8]	; (8017494 <_close+0xc>)
 801748a:	2258      	movs	r2, #88	; 0x58
 801748c:	601a      	str	r2, [r3, #0]
 801748e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017492:	4770      	bx	lr
 8017494:	2000dc70 	.word	0x2000dc70

08017498 <_fstat>:
 8017498:	4b02      	ldr	r3, [pc, #8]	; (80174a4 <_fstat+0xc>)
 801749a:	2258      	movs	r2, #88	; 0x58
 801749c:	601a      	str	r2, [r3, #0]
 801749e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174a2:	4770      	bx	lr
 80174a4:	2000dc70 	.word	0x2000dc70

080174a8 <_isatty>:
 80174a8:	4b02      	ldr	r3, [pc, #8]	; (80174b4 <_isatty+0xc>)
 80174aa:	2258      	movs	r2, #88	; 0x58
 80174ac:	601a      	str	r2, [r3, #0]
 80174ae:	2000      	movs	r0, #0
 80174b0:	4770      	bx	lr
 80174b2:	bf00      	nop
 80174b4:	2000dc70 	.word	0x2000dc70

080174b8 <_lseek>:
 80174b8:	4b02      	ldr	r3, [pc, #8]	; (80174c4 <_lseek+0xc>)
 80174ba:	2258      	movs	r2, #88	; 0x58
 80174bc:	601a      	str	r2, [r3, #0]
 80174be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174c2:	4770      	bx	lr
 80174c4:	2000dc70 	.word	0x2000dc70

080174c8 <_read>:
 80174c8:	4b02      	ldr	r3, [pc, #8]	; (80174d4 <_read+0xc>)
 80174ca:	2258      	movs	r2, #88	; 0x58
 80174cc:	601a      	str	r2, [r3, #0]
 80174ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174d2:	4770      	bx	lr
 80174d4:	2000dc70 	.word	0x2000dc70

080174d8 <_sbrk>:
 80174d8:	4b04      	ldr	r3, [pc, #16]	; (80174ec <_sbrk+0x14>)
 80174da:	6819      	ldr	r1, [r3, #0]
 80174dc:	4602      	mov	r2, r0
 80174de:	b909      	cbnz	r1, 80174e4 <_sbrk+0xc>
 80174e0:	4903      	ldr	r1, [pc, #12]	; (80174f0 <_sbrk+0x18>)
 80174e2:	6019      	str	r1, [r3, #0]
 80174e4:	6818      	ldr	r0, [r3, #0]
 80174e6:	4402      	add	r2, r0
 80174e8:	601a      	str	r2, [r3, #0]
 80174ea:	4770      	bx	lr
 80174ec:	20004298 	.word	0x20004298
 80174f0:	2000dc78 	.word	0x2000dc78

080174f4 <_write>:
 80174f4:	4b02      	ldr	r3, [pc, #8]	; (8017500 <_write+0xc>)
 80174f6:	2258      	movs	r2, #88	; 0x58
 80174f8:	601a      	str	r2, [r3, #0]
 80174fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174fe:	4770      	bx	lr
 8017500:	2000dc70 	.word	0x2000dc70

08017504 <_init>:
 8017504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017506:	bf00      	nop
 8017508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801750a:	bc08      	pop	{r3}
 801750c:	469e      	mov	lr, r3
 801750e:	4770      	bx	lr

08017510 <_fini>:
 8017510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017512:	bf00      	nop
 8017514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017516:	bc08      	pop	{r3}
 8017518:	469e      	mov	lr, r3
 801751a:	4770      	bx	lr
